{'geo': [{'question': 'what is the city with the smallest population', 'sql_query': 'SELECT city_name FROM city WHERE population  =  ( SELECT MIN ( population ) FROM city );', 'db_id': 'geo', 'hardness': 'hard'}, {'question': 'what are major rivers in illinois', 'sql_query': 'SELECT river_name FROM river WHERE LENGTH  >  750 AND traverse  =  "illinois";', 'db_id': 'geo', 'hardness': 'medium'}], 'cre_Doc_Control_Systems': [{'question': "List the employees who have not showed up in any circulation history of documents. List the employee's name.", 'sql_query': 'SELECT employee_name FROM Employees EXCEPT SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id', 'db_id': 'cre_Doc_Control_Systems', 'hardness': 'hard'}, {'question': 'List the document ids for any documents with the status code done and the type code paper.', 'sql_query': 'SELECT document_id FROM Documents WHERE document_status_code = "done" AND document_type_code = "Paper";', 'db_id': 'cre_Doc_Control_Systems', 'hardness': 'medium'}], 'student_transcripts_tracking': [{'question': 'Which semesters do not have any student enrolled? List the semester name.', 'sql_query': 'SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )', 'db_id': 'student_transcripts_tracking', 'hardness': 'hard'}, {'question': 'What is the department description for the one whose name has the word computer?', 'sql_query': "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'", 'db_id': 'student_transcripts_tracking', 'hardness': 'medium'}], 'product_catalog': [{'question': 'Find the catalog publisher that has the most catalogs.', 'sql_query': 'SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1', 'db_id': 'product_catalog', 'hardness': 'hard'}, {'question': 'Which catalog contents have length below 3 or above 5? Find the catalog entry names.', 'sql_query': 'SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5', 'db_id': 'product_catalog', 'hardness': 'medium'}], 'wta_1': [{'question': 'Find the year that has the most number of matches.', 'sql_query': 'SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1', 'db_id': 'wta_1', 'hardness': 'hard'}, {'question': 'Find the number of players for each hand type.', 'sql_query': 'SELECT count(*) ,  hand FROM players GROUP BY hand', 'db_id': 'wta_1', 'hardness': 'medium'}], 'insurance_and_eClaims': [{'question': 'What are the names of the customers and staff members?', 'sql_query': 'SELECT customer_details FROM customers UNION SELECT staff_details FROM staff', 'db_id': 'insurance_and_eClaims', 'hardness': 'hard'}, {'question': 'What are the total amount and average amount paid in claim headers?', 'sql_query': 'SELECT sum(amount_piad) ,  avg(amount_piad) FROM claim_headers', 'db_id': 'insurance_and_eClaims', 'hardness': 'medium'}], 'document_management': [{'question': 'What are the usernames and passwords of users that have the most common role?', 'sql_query': 'SELECT user_name ,  password FROM users GROUP BY role_code ORDER BY count(*) DESC LIMIT 1', 'db_id': 'document_management', 'hardness': 'hard'}, {'question': 'Find the number of users in each role.', 'sql_query': 'SELECT count(*) ,  role_code FROM users GROUP BY role_code', 'db_id': 'document_management', 'hardness': 'medium'}], 'club_1': [{'question': 'Count the number of members in club "Bootup Baltimore" whose age is below 18.', 'sql_query': 'SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  "Bootup Baltimore" AND t3.age  <  18', 'db_id': 'club_1', 'hardness': 'hard'}, {'question': 'How many different roles are there in the club "Bootup Baltimore"?', 'sql_query': 'SELECT count(DISTINCT t2.position) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid WHERE t1.clubname  =  "Bootup Baltimore"', 'db_id': 'club_1', 'hardness': 'medium'}], 'phone_1': [{'question': 'Find the names of the chip models that are not used by any phone with full accreditation type.', 'sql_query': "SELECT model_name FROM chip_model EXCEPT SELECT chip_model FROM phone WHERE Accreditation_type  =  'Full'", 'db_id': 'phone_1', 'hardness': 'hard'}, {'question': 'Find the Char cells, Pixels and Hardware colours for the screen of the phone whose hardware model name is "LG-P760".', 'sql_query': 'SELECT T1.Char_cells ,  T1.Pixels ,  T1.Hardware_colours FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Hardware_Model_name = "LG-P760";', 'db_id': 'phone_1', 'hardness': 'medium'}], 'soccer_2': [{'question': 'In which state is the college that Charles attends?', 'sql_query': "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName JOIN player AS T3 ON T2.pID  =  T3.pID WHERE T3.pName  =  'Charles'", 'db_id': 'soccer_2', 'hardness': 'hard'}, {'question': 'What is the name of the school with smallest enrollment size per state?', 'sql_query': 'SELECT cName ,  state ,  min(enr) FROM college GROUP BY state', 'db_id': 'soccer_2', 'hardness': 'medium'}], 'wrestler': [{'question': 'Which reign is the most common among wrestlers?', 'sql_query': 'SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'wrestler', 'hardness': 'hard'}, {'question': 'Return the name of the wrestler who had the lowest number of days held.', 'sql_query': 'SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1', 'db_id': 'wrestler', 'hardness': 'medium'}], 'race_track': [{'question': 'What is the race class with most number of races.', 'sql_query': 'SELECT CLASS FROM race GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1', 'db_id': 'race_track', 'hardness': 'hard'}, {'question': 'What are the different classes of races, and how many races correspond to each?', 'sql_query': 'SELECT CLASS ,  count(*) FROM race GROUP BY CLASS', 'db_id': 'race_track', 'hardness': 'medium'}], 'match_season': [{'question': 'Return the names of teams that have no match season record.', 'sql_query': 'SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)', 'db_id': 'match_season', 'hardness': 'hard'}, {'question': 'How many players played each position?', 'sql_query': 'SELECT POSITION ,  COUNT(*) FROM match_season GROUP BY POSITION', 'db_id': 'match_season', 'hardness': 'medium'}], 'dorm_1': [{'question': "What are the names of all the dorms that don't have any amenities?", 'sql_query': 'SELECT dorm_name FROM dorm WHERE dormid NOT IN (SELECT dormid FROM has_amenity)', 'db_id': 'dorm_1', 'hardness': 'hard'}, {'question': 'How many students are from each city, and which cities have more than one cities?', 'sql_query': 'SELECT count(*) ,  city_code FROM student GROUP BY city_code HAVING count(*)  >  1', 'db_id': 'dorm_1', 'hardness': 'medium'}], 'department_management': [{'question': 'In which year were most departments established?', 'sql_query': 'SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1', 'db_id': 'department_management', 'hardness': 'hard'}, {'question': 'Which department has more than 1 head at a time? List the id, name and the number of heads.', 'sql_query': 'SELECT T1.department_id ,  T1.name ,  count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  1', 'db_id': 'department_management', 'hardness': 'medium'}], 'cre_Doc_Tracking_DB': [{'question': 'Which employees have either destroyed a document or made an authorization to do so? Return their employee ids.', 'sql_query': 'SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed UNION SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed', 'db_id': 'cre_Doc_Tracking_DB', 'hardness': 'hard'}, {'question': 'Show the name and description of the role played by the employee named Ebba.', 'sql_query': 'SELECT T2.role_name ,  T2.role_description FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T1.employee_name  =  "Ebba"', 'db_id': 'cre_Doc_Tracking_DB', 'hardness': 'medium'}], 'inn_1': [{'question': 'Find the name of rooms whose price is higher than the average price.', 'sql_query': 'SELECT roomName FROM Rooms WHERE basePrice  >  ( SELECT avg(basePrice) FROM Rooms );', 'db_id': 'inn_1', 'hardness': 'hard'}, {'question': 'Find the name and id of the top 3 expensive rooms.', 'sql_query': 'SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;', 'db_id': 'inn_1', 'hardness': 'medium'}], 'customers_and_addresses': [{'question': 'Find the number of distinct products Rodrick Heaney has bought so far.', 'sql_query': 'SELECT count(DISTINCT t3.product_id) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  "Rodrick Heaney"', 'db_id': 'customers_and_addresses', 'hardness': 'hard'}, {'question': 'Find the total amount of products ordered before 2018-03-17 07:13:53.', 'sql_query': 'SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_date  <  "2018-03-17 07:13:53"', 'db_id': 'customers_and_addresses', 'hardness': 'medium'}], 'customers_card_transactions': [{'question': 'Return the type of transaction with the highest total amount.', 'sql_query': 'SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC LIMIT 1', 'db_id': 'customers_card_transactions', 'hardness': 'hard'}, {'question': 'What are the different card types, and how many transactions have been made with each?', 'sql_query': 'SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code', 'db_id': 'customers_card_transactions', 'hardness': 'medium'}], 'cre_Drama_Workshop_Groups': [{'question': 'What is the product ID of the most frequently ordered item on invoices?', 'sql_query': 'SELECT Product_ID FROM INVOICES GROUP BY Product_ID ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'cre_Drama_Workshop_Groups', 'hardness': 'hard'}, {'question': 'Find the phone number and email address of customer "Harold".', 'sql_query': 'SELECT Customer_Phone ,  Customer_Email_Address FROM CUSTOMERS WHERE Customer_Name  =  "Harold"', 'db_id': 'cre_Drama_Workshop_Groups', 'hardness': 'medium'}], 'baseball_1': [{'question': 'List all the salary values players received in 2010 and 2001.', 'sql_query': 'SELECT salary FROM salary WHERE YEAR  =  2010 UNION SELECT salary FROM salary WHERE YEAR  =  2001', 'db_id': 'baseball_1', 'hardness': 'hard'}, {'question': "Compute the average salary of the players in the team called 'Boston Red Stockings'.", 'sql_query': "SELECT avg(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings'", 'db_id': 'baseball_1', 'hardness': 'medium'}], 'cre_Theme_park': [{'question': 'Find the names of the tourist attractions that is either accessible by walk or at address 660 Shea Crescent.', 'sql_query': 'SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  "660 Shea Crescent" OR T2.How_to_Get_There  =  "walk"', 'db_id': 'cre_Theme_park', 'hardness': 'hard'}, {'question': 'What are the names and descriptions of the photos taken at the tourist attraction "film festival"?', 'sql_query': 'SELECT T1.Name ,  T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  "film festival"', 'db_id': 'cre_Theme_park', 'hardness': 'medium'}], 'cinema': [{'question': 'Show all the locations where no cinema has capacity over 800.', 'sql_query': 'SELECT LOCATION FROM cinema EXCEPT SELECT LOCATION FROM cinema WHERE capacity  >  800', 'db_id': 'cinema', 'hardness': 'hard'}, {'question': 'Show all the locations with at least two cinemas with capacity above 300.', 'sql_query': 'SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2', 'db_id': 'cinema', 'hardness': 'medium'}], 'apartment_rentals': [{'question': 'Show the apartment type code that has the largest number of total rooms, together with the number of bathrooms and number of bedrooms.', 'sql_query': 'SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1', 'db_id': 'apartment_rentals', 'hardness': 'hard'}, {'question': 'Show the total number of rooms of all apartments with facility code "Gym".', 'sql_query': 'SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  "Gym"', 'db_id': 'apartment_rentals', 'hardness': 'medium'}], 'station_weather': [{'question': 'Find names and times of trains that run through stations for the local authority Chiltern.', 'sql_query': 'SELECT t3.name ,  t3.time FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id JOIN train AS t3 ON t2.train_id  =  t3.id WHERE t1.local_authority  =  "Chiltern"', 'db_id': 'station_weather', 'hardness': 'hard'}, {'question': "How many trains have 'Express' in their names?", 'sql_query': 'SELECT count(*) FROM train WHERE name LIKE "%Express%"', 'db_id': 'station_weather', 'hardness': 'medium'}], 'local_govt_in_alabama': [{'question': "Which events id does not have any participant with detail 'Kenyatta Kuhn'?", 'sql_query': "SELECT event_id FROM EVENTS EXCEPT SELECT T1.event_id FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE Participant_Details  =  'Kenyatta Kuhn'", 'db_id': 'local_govt_in_alabama', 'hardness': 'hard'}, {'question': 'What are the ids and details of events that have more than one participants?', 'sql_query': 'SELECT T1.event_id ,  T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID  =  T2.Event_ID GROUP BY T1.Event_ID HAVING count(*)  >  1', 'db_id': 'local_govt_in_alabama', 'hardness': 'medium'}], 'game_1': [{'question': "Show all male student ids who don't play football.", 'sql_query': 'SELECT StuID FROM Student WHERE sex  =  \'M\' EXCEPT SELECT StuID FROM Sportsinfo WHERE sportname  =  "Football"', 'db_id': 'game_1', 'hardness': 'hard'}, {'question': 'Show all video games and their types in the order of their names.', 'sql_query': 'SELECT gname ,  gtype FROM Video_games ORDER BY gname', 'db_id': 'game_1', 'hardness': 'medium'}], 'employee_hire_evaluation': [{'question': 'Which shops run with no employees? Find the shop names', 'sql_query': 'SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)', 'db_id': 'employee_hire_evaluation', 'hardness': 'hard'}, {'question': 'What is the number of employees from each city?', 'sql_query': 'SELECT count(*) ,  city FROM employee GROUP BY city', 'db_id': 'employee_hire_evaluation', 'hardness': 'medium'}], 'train_station': [{'question': "Show all locations which don't have a train station with at least 15 platforms.", 'sql_query': 'SELECT LOCATION FROM station EXCEPT SELECT LOCATION FROM station WHERE number_of_platforms  >=  15', 'db_id': 'train_station', 'hardness': 'hard'}, {'question': 'Show all locations that have train stations with at least 15 platforms and train stations with more than 25 total passengers.', 'sql_query': 'SELECT DISTINCT LOCATION FROM station WHERE number_of_platforms  >=  15 AND total_passengers  >  25', 'db_id': 'train_station', 'hardness': 'medium'}], 'musical': [{'question': 'Return the most frequent result across all musicals.', 'sql_query': 'SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'musical', 'hardness': 'hard'}, {'question': 'Show names of actors that have appeared in musical with name "The Phantom of the Opera".', 'sql_query': 'SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  "The Phantom of the Opera"', 'db_id': 'musical', 'hardness': 'medium'}], 'flight_2': [{'question': 'Find the name of airports which do not have any flight in and out.', 'sql_query': 'SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)', 'db_id': 'flight_2', 'hardness': 'hard'}, {'question': 'Find all airlines that have fewer than 200 flights.', 'sql_query': 'SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200', 'db_id': 'flight_2', 'hardness': 'medium'}], 'e_learning': [{'question': 'Find the common personal name of course authors and students.', 'sql_query': 'SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students', 'db_id': 'e_learning', 'hardness': 'hard'}, {'question': 'Return the descriptions and names of the courses that have more than two students enrolled in.', 'sql_query': 'SELECT T1.course_description ,  T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  >  2', 'db_id': 'e_learning', 'hardness': 'medium'}], 'behavior_monitoring': [{'question': 'What is the cell phone number of the student whose address has the lowest monthly rental?', 'sql_query': 'SELECT T2.cell_mobile_number FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id ORDER BY T1.monthly_rental ASC LIMIT 1', 'db_id': 'behavior_monitoring', 'hardness': 'hard'}, {'question': 'What are the line 1 and average monthly rentals of all student addresses?', 'sql_query': 'SELECT T1.line_1 ,  avg(T2.monthly_rental) FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id GROUP BY T2.address_id', 'db_id': 'behavior_monitoring', 'hardness': 'medium'}], 'flight_1': [{'question': 'What are the names of all employees who have a salary higher than average?', 'sql_query': 'SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)', 'db_id': 'flight_1', 'hardness': 'hard'}, {'question': 'Show flight number, origin, destination of all flights in the alphabetical order of the departure cities.', 'sql_query': 'SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin', 'db_id': 'flight_1', 'hardness': 'medium'}], 'orchestra': [{'question': 'What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?', 'sql_query': 'SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003', 'db_id': 'orchestra', 'hardness': 'hard'}, {'question': 'Please show the record formats of orchestras in ascending order of count.', 'sql_query': 'SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC', 'db_id': 'orchestra', 'hardness': 'medium'}], 'hospital_1': [{'question': 'What is the employee id of the head whose department has the least number of employees?', 'sql_query': 'SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;', 'db_id': 'hospital_1', 'hardness': 'hard'}, {'question': 'What is the id of the appointment that started most recently?', 'sql_query': 'SELECT appointmentid FROM appointment ORDER BY START DESC LIMIT 1', 'db_id': 'hospital_1', 'hardness': 'medium'}], 'gas_company': [{'question': "What are the headquarters that have both a company in the banking and 'oil and gas' industries?", 'sql_query': "SELECT headquarters FROM company WHERE main_industry  =  'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry  =  'Oil and gas'", 'db_id': 'gas_company', 'hardness': 'hard'}, {'question': 'What is the name and rank of every company ordered by descending number of sales?', 'sql_query': 'SELECT company ,  rank FROM company ORDER BY Sales_billion DESC', 'db_id': 'gas_company', 'hardness': 'medium'}], 'game_injury': [{'question': 'Show all headquarters with both a company in banking industry and a company in Oil and gas.', 'sql_query': "SELECT headquarters FROM company WHERE main_industry  =  'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry  =  'Oil and gas'", 'db_id': 'gas_company', 'hardness': 'hard'}, {'question': 'What are the ids, scores, and dates of the games which caused at least two injury accidents?', 'sql_query': 'SELECT T1.id ,  T1.score ,  T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T2.game_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2', 'db_id': 'game_injury', 'hardness': 'medium'}], 'hr_1': [{'question': 'Find the ids of the employees who does not work in those departments where some employees works whose manager id within the range 100 and 200.', 'sql_query': 'SELECT * FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)', 'db_id': 'hr_1', 'hardness': 'hard'}, {'question': 'Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.', 'sql_query': 'SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != "null" OR  department_id != 40', 'db_id': 'hr_1', 'hardness': 'medium'}], 'performance_attendance': [{'question': 'Show the most common location of performances.', 'sql_query': 'SELECT LOCATION FROM performance GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'performance_attendance', 'hardness': 'hard'}, {'question': 'What are the dates and locations of performances?', 'sql_query': 'SELECT Date ,  LOCATION FROM performance', 'db_id': 'performance_attendance', 'hardness': 'medium'}], 'body_builder': [{'question': 'What is the most common birth place of people?', 'sql_query': 'SELECT Birth_Place FROM people GROUP BY Birth_Place ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'body_builder', 'hardness': 'hard'}, {'question': 'What are the names of body builders whose total score is higher than 300?', 'sql_query': 'SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  >  300', 'db_id': 'body_builder', 'hardness': 'medium'}], 'student_assessment': [{'question': 'What is detail of the student who most recently registered course?', 'sql_query': 'SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1', 'db_id': 'student_assessment', 'hardness': 'hard'}, {'question': 'How many courses do the student whose id is 171 attend?', 'sql_query': 'SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171', 'db_id': 'student_assessment', 'hardness': 'medium'}], 'company_office': [{'question': 'List the industry shared by the most companies.', 'sql_query': 'SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'company_office', 'hardness': 'hard'}, {'question': 'Find the number of companies whose industry is "Banking" or "Conglomerate",', 'sql_query': 'SELECT count(*) FROM Companies WHERE Industry  =  "Banking" OR Industry  =  "Conglomerate"', 'db_id': 'company_office', 'hardness': 'medium'}], 'network_2': [{'question': 'What are the different names and ages of every friend of either Dan or alice?', 'sql_query': "SELECT DISTINCT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' OR T2.friend  =  'Alice'", 'db_id': 'network_2', 'hardness': 'hard'}, {'question': 'How old is the average person for each job?', 'sql_query': 'SELECT avg(age) ,  job FROM Person GROUP BY job', 'db_id': 'network_2', 'hardness': 'medium'}], 'ship_mission': [{'question': 'What is the most common type of ships?', 'sql_query': 'SELECT TYPE FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'ship_mission', 'hardness': 'hard'}, {'question': 'What is the name of the ship with the largest tonnage?', 'sql_query': 'SELECT Name FROM ship ORDER BY Tonnage DESC LIMIT 1', 'db_id': 'ship_mission', 'hardness': 'medium'}], 'allergy_1': [{'question': 'What is the last name of the youngest student?', 'sql_query': 'SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student)', 'db_id': 'allergy_1', 'hardness': 'hard'}, {'question': 'How many students are affected by each allergy type?', 'sql_query': 'SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype', 'db_id': 'allergy_1', 'hardness': 'medium'}], 'party_people': [{'question': 'Which member names are shared among members in the party with the id 3 and the party with the id 1?', 'sql_query': 'SELECT member_name FROM member WHERE party_id  =  3 INTERSECT SELECT member_name FROM member WHERE party_id  =  1', 'db_id': 'party_people', 'hardness': 'hard'}, {'question': 'Show all ministers and parties they belong to in descending order of the time they took office.', 'sql_query': 'SELECT minister ,  party_name FROM party ORDER BY took_office DESC', 'db_id': 'party_people', 'hardness': 'medium'}], 'csu_1': [{'question': 'For each Orange county campus, report the number of degrees granted after 2000.', 'sql_query': 'SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T1.county  =  "Orange" AND T2.year  >=  2000 GROUP BY T1.campus', 'db_id': 'csu_1', 'hardness': 'hard'}, {'question': 'What campus had more than 400 total enrollment but more than 200 full time enrollment in year 1956?', 'sql_query': 'SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id  =  t2.campus WHERE t2.year  =  1956 AND totalenrollment_ay  >  400 AND FTE_AY  >  200', 'db_id': 'csu_1', 'hardness': 'medium'}], 'school_bus': [{'question': 'Show all home cities except for those having a driver older than 40.', 'sql_query': 'SELECT home_city FROM driver EXCEPT SELECT home_city FROM driver WHERE age  >  40', 'db_id': 'school_bus', 'hardness': 'hard'}, {'question': 'Show the school name and driver name for all school buses.', 'sql_query': 'SELECT T2.school ,  T3.name FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN driver AS T3 ON T1.driver_id  =  T3.driver_id', 'db_id': 'school_bus', 'hardness': 'medium'}], 'insurance_fnol': [{'question': 'Which customers do not have a first notification of loss record? Give me the customer names.', 'sql_query': 'SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id', 'db_id': 'insurance_fnol', 'hardness': 'hard'}, {'question': 'What are the IDs of customers who have "Diana" in part of their names?', 'sql_query': 'SELECT customer_id FROM customers WHERE customer_name LIKE "%Diana%"', 'db_id': 'insurance_fnol', 'hardness': 'medium'}], 'imdb': [{'question': 'Who is the director of the movie " James Bond " ?', 'sql_query': 'SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  "James Bond";', 'db_id': 'imdb', 'hardness': 'hard'}, {'question': 'Find all actors who were born in " New York City " in 1984', 'sql_query': 'SELECT name FROM actor WHERE birth_city  =  "New York City" AND birth_year  =  1984;', 'db_id': 'imdb', 'hardness': 'medium'}], 'customers_and_invoices': [{'question': 'What are teh names of the different products, as well as the number of customers who have ordered each product.', 'sql_query': 'SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name', 'db_id': 'customers_and_invoices', 'hardness': 'hard'}, {'question': 'Show the number of customers for each gender.', 'sql_query': 'SELECT gender ,  count(*) FROM Customers GROUP BY gender', 'db_id': 'customers_and_invoices', 'hardness': 'medium'}], 'voter_2': [{'question': 'What are the distinct first names of the students who have vice president votes and reside in a city whose city code is not PIT?', 'sql_query': 'SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_PRESIDENT_Vote EXCEPT SELECT DISTINCT Fname FROM STUDENT WHERE city_code  =  "PIT"', 'db_id': 'voter_2', 'hardness': 'hard'}, {'question': 'Which students live in the city with code "NYC" and have class senator votes in the spring election cycle? Count the numbers.', 'sql_query': 'SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.city_code  =  "NYC" AND T2.Election_Cycle  =  "Spring"', 'db_id': 'voter_2', 'hardness': 'medium'}], 'school_finance': [{'question': 'What are the mascots for schools with enrollments above the average?', 'sql_query': 'SELECT mascot FROM school WHERE enrollment  >  (SELECT avg(enrollment) FROM school)', 'db_id': 'school_finance', 'hardness': 'hard'}, {'question': 'Count the number of budgets in year 2001 or before whose budgeted amount is greater than 3000', 'sql_query': 'SELECT count(*) FROM budget WHERE budgeted  >  3000 AND YEAR  <=  2001', 'db_id': 'school_finance', 'hardness': 'medium'}], 'activity_1': [{'question': 'Show the ids of all the faculty members who participate in an activity and advise a student.', 'sql_query': 'SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student', 'db_id': 'activity_1', 'hardness': 'hard'}, {'question': 'Show the phone, room, and building for the faculty named Jerry Prince.', 'sql_query': 'SELECT phone ,  room ,  building FROM Faculty WHERE Fname  =  "Jerry" AND Lname  =  "Prince"', 'db_id': 'activity_1', 'hardness': 'medium'}], 'sakila_1': [{'question': 'What are the payment dates for any payments that have an amount greater than 10 or were handled by a staff member with the first name Elsa?', 'sql_query': "SELECT payment_date FROM payment WHERE amount  >  10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.first_name  =  'Elsa'", 'db_id': 'sakila_1', 'hardness': 'hard'}, {'question': 'Where does the staff member with the first name Elsa live?', 'sql_query': "SELECT T2.address FROM staff AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE T1.first_name  =  'Elsa'", 'db_id': 'sakila_1', 'hardness': 'medium'}], 'student_1': [{'question': 'Find the classroom that the most students use.', 'sql_query': 'SELECT classroom FROM list GROUP BY classroom ORDER BY count(*) DESC LIMIT 1', 'db_id': 'student_1', 'hardness': 'hard'}, {'question': 'For each grade 0 classroom, report the total number of students.', 'sql_query': 'SELECT classroom ,  count(*) FROM list WHERE grade  =  "0" GROUP BY classroom', 'db_id': 'student_1', 'hardness': 'medium'}], 'college_3': [{'question': 'Give the maximum and minimum gradepoints for students living in NYC?', 'sql_query': 'SELECT max(T2.gradepoint) ,  min(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.city_code  =  "NYC"', 'db_id': 'college_3', 'hardness': 'hard'}, {'question': 'Find the department name and room of the course INTRODUCTION TO COMPUTER SCIENCE.', 'sql_query': 'SELECT T2.Dname ,  T2.Room FROM COURSE AS T1 JOIN DEPARTMENT AS T2 ON T1.DNO  =  T2.DNO WHERE T1.CName  =  "INTRODUCTION TO COMPUTER SCIENCE"', 'db_id': 'college_3', 'hardness': 'medium'}], 'manufacturer': [{'question': 'Find the id and number of shops for the company that produces the most expensive furniture.', 'sql_query': 'SELECT t1.manufacturer_id ,  t1.num_of_shops FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id  =  t2.manufacturer_id ORDER BY t2.Price_in_Dollar DESC LIMIT 1', 'db_id': 'manufacturer', 'hardness': 'hard'}, {'question': 'Find the name and component amount of the least popular furniture.', 'sql_query': 'SELECT name ,  Num_of_Component FROM furniture ORDER BY market_rate LIMIT 1', 'db_id': 'manufacturer', 'hardness': 'medium'}], 'driving_school': [{'question': 'What are the the lesson ids of all staff taught by Janessa Sawayn whose nickname has the letter s?', 'sql_query': 'SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn" AND nickname LIKE "%s%";', 'db_id': 'driving_school', 'hardness': 'hard'}, {'question': 'What is zip code of customer with first name as Carole and last name as Bernhard?', 'sql_query': 'SELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = "Carole" AND T1.last_name = "Bernhard"', 'db_id': 'driving_school', 'hardness': 'medium'}], 'scientist_1': [{'question': 'What are the names of projects that have taken longer than the average number of hours for all projects?', 'sql_query': 'SELECT name FROM projects WHERE hours  >  (SELECT avg(hours) FROM projects)', 'db_id': 'scientist_1', 'hardness': 'hard'}, {'question': 'What is the name of the project with the most hours?', 'sql_query': 'SELECT name FROM projects ORDER BY hours DESC LIMIT 1', 'db_id': 'scientist_1', 'hardness': 'medium'}], 'entertainment_awards': [{'question': "In which year are there festivals both inside the 'United States' and outside the 'United States'?", 'sql_query': "SELECT YEAR FROM festival_detail WHERE LOCATION  =  'United States' INTERSECT SELECT YEAR FROM festival_detail WHERE LOCATION != 'United States'", 'db_id': 'entertainment_awards', 'hardness': 'hard'}, {'question': 'Show the names of the three most recent festivals.', 'sql_query': 'SELECT Festival_Name FROM festival_detail ORDER BY YEAR DESC LIMIT 3', 'db_id': 'entertainment_awards', 'hardness': 'medium'}], 'county_public_safety': [{'question': 'Show the names of cities in counties that have a crime rate less than 100.', 'sql_query': 'SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate  <  100)', 'db_id': 'county_public_safety', 'hardness': 'hard'}, {'question': 'List the name of the county with the largest population.', 'sql_query': 'SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1', 'db_id': 'county_public_safety', 'hardness': 'medium'}], 'election_representative': [{'question': 'What is the party that has the largest number of representatives?', 'sql_query': 'SELECT Party ,  COUNT(*) FROM representative GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'election_representative', 'hardness': 'hard'}, {'question': 'What are the life spans of representatives from New York state or Indiana state?', 'sql_query': 'SELECT Lifespan FROM representative WHERE State  =  "New York" OR State  =  "Indiana"', 'db_id': 'election_representative', 'hardness': 'medium'}], 'riding_club': [{'question': 'Show the names and genders of players with a coach starting after 2011.', 'sql_query': 'SELECT T3.Player_name ,  T3.gender FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T1.Starting_year  >  2011', 'db_id': 'riding_club', 'hardness': 'hard'}, {'question': 'List the name and residence for players whose occupation is not "Researcher".', 'sql_query': 'SELECT Player_name ,  residence FROM player WHERE Occupation != "Researcher"', 'db_id': 'riding_club', 'hardness': 'medium'}], 'manufactory_1': [{'question': 'Find the total revenue of companies whose revenue is larger than the revenue of some companies based in Austin.', 'sql_query': "SELECT sum(revenue) FROM manufacturers WHERE revenue  >  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')", 'db_id': 'manufactory_1', 'hardness': 'hard'}, {'question': 'Find the total revenue of companies of each founder.', 'sql_query': 'SELECT sum(revenue) ,  founder FROM manufacturers GROUP BY founder', 'db_id': 'manufactory_1', 'hardness': 'medium'}], 'ship_1': [{'question': 'In which year were most of ships built?', 'sql_query': 'SELECT built_year FROM ship GROUP BY built_year ORDER BY count(*) DESC LIMIT 1', 'db_id': 'ship_1', 'hardness': 'hard'}, {'question': 'Count the number of captains younger than 50 of each rank.', 'sql_query': 'SELECT count(*) ,  rank FROM captain WHERE age  <  50 GROUP BY rank', 'db_id': 'ship_1', 'hardness': 'medium'}], 'solvency_ii': [{'question': 'Show the product type codes that have both products with price higher than 4500 and products with price lower than 3000.', 'sql_query': 'SELECT Product_Type_Code FROM Products WHERE Product_Price  >  4500 INTERSECT SELECT Product_Type_Code FROM Products WHERE Product_Price  <  3000', 'db_id': 'solvency_ii', 'hardness': 'hard'}, {'question': 'What are the names and type codes of products?', 'sql_query': 'SELECT Product_Name ,  Product_Type_Code FROM Products', 'db_id': 'solvency_ii', 'hardness': 'medium'}], 'department_store': [{'question': 'What are the distinct names and phone numbers for suppliers who have red jeans?', 'sql_query': 'SELECT DISTINCT T1.supplier_name ,  T1.supplier_phone FROM suppliers AS T1 JOIN product_suppliers AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN products AS T3 ON T2.product_id  =  T3.product_id WHERE T3.product_name  =  "red jeans"', 'db_id': 'department_store', 'hardness': 'hard'}, {'question': 'What are the ids of the top three products that were purchased in the largest amount?', 'sql_query': 'SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3', 'db_id': 'department_store', 'hardness': 'medium'}], 'scholar': [{'question': 'What was the conference name that approved Trophic Cascade ?', 'sql_query': 'SELECT DISTINCT t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "Trophic Cascade";', 'db_id': 'scholar', 'hardness': 'hard'}, {'question': 'How many paper does Christopher D. Manning have ?', 'sql_query': 'SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "Christopher D. Manning";', 'db_id': 'scholar', 'hardness': 'medium'}], 'insurance_policies': [{'question': 'Among all the claims, which settlements have a claimed amount that is no more than the average? List the claim start date.', 'sql_query': 'SELECT Date_Claim_Made FROM Claims WHERE Amount_Settled  <=  ( SELECT avg(Amount_Settled) FROM Claims )', 'db_id': 'insurance_policies', 'hardness': 'hard'}, {'question': 'What are the claim dates and settlement dates of all the settlements?', 'sql_query': 'SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Settlements', 'db_id': 'insurance_policies', 'hardness': 'medium'}], 'assets_maintenance': [{'question': 'Which assets did not incur any fault log? List the asset model.', 'sql_query': 'SELECT asset_model FROM Assets WHERE asset_id NOT IN (SELECT asset_id FROM Fault_Log)', 'db_id': 'assets_maintenance', 'hardness': 'hard'}, {'question': "List all every engineer's first name, last name, details and coresponding skill description.", 'sql_query': 'SELECT T1.first_name ,  T1.last_name ,  T1.other_details ,  T3.skill_description FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id  =  T2.engineer_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id', 'db_id': 'assets_maintenance', 'hardness': 'medium'}], 'tracking_software_problems': [{'question': 'What are the products that have problems reported after 1986-11-13? Give me the product id and the count of problems reported after 1986-11-13.', 'sql_query': 'SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > "1986-11-13" GROUP BY T2.product_id', 'db_id': 'tracking_software_problems', 'hardness': 'hard'}, {'question': 'How many problems are there for product voluptatem?', 'sql_query': 'SELECT count(*) FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = "voluptatem"', 'db_id': 'tracking_software_problems', 'hardness': 'medium'}], 'movie_1': [{'question': 'Return reviewer name, movie title, stars, and ratingDate. And sort the data first by reviewer name, then by movie title, and lastly by number of stars.', 'sql_query': 'SELECT T3.name ,  T2.title ,  T1.stars ,  T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID ORDER BY T3.name ,  T2.title ,  T1.stars', 'db_id': 'movie_1', 'hardness': 'hard'}, {'question': 'For each movie that received more than 3 reviews, what is the average rating?', 'sql_query': 'SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2', 'db_id': 'movie_1', 'hardness': 'medium'}], 'products_gen_characteristics': [{'question': 'List all the characteristic names and data types of product "cumin".', 'sql_query': 'SELECT t3.characteristic_name ,  t3.characteristic_data_type FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  "cumin"', 'db_id': 'products_gen_characteristics', 'hardness': 'hard'}, {'question': "Return the color code and description for the product with the name 'chervil'.", 'sql_query': 'SELECT t1.color_code ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  "chervil"', 'db_id': 'products_gen_characteristics', 'hardness': 'medium'}], 'loan_1': [{'question': 'What is the average credit score for customers who have taken a loan?', 'sql_query': 'SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)', 'db_id': 'loan_1', 'hardness': 'hard'}, {'question': 'Find the name of customer who has the lowest credit score.', 'sql_query': 'SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1', 'db_id': 'loan_1', 'hardness': 'medium'}], 'dog_kennels': [{'question': 'Find the first names that are used for professionals or owners but are not used as dog names.', 'sql_query': 'SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs', 'db_id': 'dog_kennels', 'hardness': 'hard'}, {'question': "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", 'sql_query': "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", 'db_id': 'dog_kennels', 'hardness': 'medium'}], 'e_government': [{'question': 'Find the name of all the cities and states.', 'sql_query': 'SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses', 'db_id': 'e_government', 'hardness': 'hard'}, {'question': 'Find the name of the youngest organization.', 'sql_query': 'SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1', 'db_id': 'e_government', 'hardness': 'medium'}], 'tracking_grants_for_research': [{'question': 'List the project details of the projects which did not hire any staff for a researcher role.', 'sql_query': "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code  =  'researcher' )", 'db_id': 'tracking_grants_for_research', 'hardness': 'hard'}, {'question': "Which document type is described with the prefix 'Initial'?", 'sql_query': "SELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%'", 'db_id': 'tracking_grants_for_research', 'hardness': 'medium'}], 'film_rank': [{'question': 'List the title of films that do not have any market estimation.', 'sql_query': 'SELECT Title FROM film WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation)', 'db_id': 'film_rank', 'hardness': 'hard'}, {'question': 'What is the average number of cities of markets with low film market estimate bigger than 10000?', 'sql_query': 'SELECT avg(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T1.Low_Estimate  >  10000', 'db_id': 'film_rank', 'hardness': 'medium'}], 'academic': [{'question': 'return me the total citations of papers in PVLDB in each year .', 'sql_query': 'SELECT t2.year  ,  SUM ( t2.citation_num ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  "PVLDB" GROUP BY t2.year;', 'db_id': 'academic', 'hardness': 'hard'}, {'question': 'return me the total citations of papers in the VLDB conference in 2005 .', 'sql_query': 'SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  "VLDB" AND t2.year  =  2005;', 'db_id': 'academic', 'hardness': 'medium'}], 'customer_complaints': [{'question': 'How many customers are there in the customer type with the most customers?', 'sql_query': 'SELECT count(*) FROM customers GROUP BY customer_type_code ORDER BY count(*) DESC LIMIT 1', 'db_id': 'customer_complaints', 'hardness': 'hard'}, {'question': 'What is the average price of the products for each category?', 'sql_query': 'SELECT avg(product_price) ,  product_category_code FROM products GROUP BY product_category_code', 'db_id': 'customer_complaints', 'hardness': 'medium'}], 'program_share': [{'question': 'Find the names of programs that are never broadcasted in the morning.', 'sql_query': 'SELECT name FROM program EXCEPT SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  "Morning"', 'db_id': 'program_share', 'hardness': 'hard'}, {'question': 'Find the names of the channels that are broadcast in the morning.', 'sql_query': "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning'", 'db_id': 'program_share', 'hardness': 'medium'}], 'medicine_enzyme_interaction': [{'question': 'What are the ids, names, and FDA approval status for medicines ordered by descending number of possible enzyme interactions?', 'sql_query': 'SELECT T1.id ,  T1.Name ,  T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC', 'db_id': 'medicine_enzyme_interaction', 'hardness': 'hard'}, {'question': 'List the names and the locations that the enzymes can make an effect.', 'sql_query': 'SELECT name ,  LOCATION FROM enzyme', 'db_id': 'medicine_enzyme_interaction', 'hardness': 'medium'}], 'local_govt_and_lot': [{'question': 'Which organizations are not a parent organization of others? List the organization id.', 'sql_query': 'SELECT organization_id FROM organizations EXCEPT SELECT parent_organization_id FROM organizations', 'db_id': 'local_govt_and_lot', 'hardness': 'hard'}, {'question': "What are the resident details containing the substring 'Miss'?", 'sql_query': "SELECT other_details FROM Residents WHERE other_details LIKE '%Miss%'", 'db_id': 'local_govt_and_lot', 'hardness': 'medium'}], 'battle_death': [{'question': 'What are the ids and names of the battles that led to more than 10 people killed in total.', 'sql_query': 'SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10', 'db_id': 'battle_death', 'hardness': 'hard'}, {'question': 'What is maximum and minimum death toll caused each time?', 'sql_query': 'SELECT max(killed) ,  min(killed) FROM death', 'db_id': 'battle_death', 'hardness': 'medium'}], 'store_product': [{'question': 'Which city is the headquarter of the store named "Blackville" in?', 'sql_query': 'SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.store_name  =  "Blackville"', 'db_id': 'store_product', 'hardness': 'hard'}, {'question': 'What is the name of the district with the most residents?', 'sql_query': 'SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1', 'db_id': 'store_product', 'hardness': 'medium'}], 'music_1': [{'question': 'What are the different names for all songs that have a higher resolution than English songs?', 'sql_query': 'SELECT DISTINCT song_name FROM song WHERE resolution  >  (SELECT min(resolution) FROM song WHERE languages  =  "english")', 'db_id': 'music_1', 'hardness': 'hard'}, {'question': 'List the name and country of origin for all singers who have produced songs with rating above 9.', 'sql_query': 'SELECT DISTINCT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.rating  >  9', 'db_id': 'music_1', 'hardness': 'medium'}], 'tracking_orders': [{'question': 'For each product, show its name and the number of times it was ordered.', 'sql_query': 'SELECT T3.product_name ,  count(*) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id', 'db_id': 'tracking_orders', 'hardness': 'hard'}, {'question': 'Find the distinct details of invoices which are created before 1989-09-03 or after 2007-12-25.', 'sql_query': 'SELECT DISTINCT invoice_details FROM invoices WHERE invoice_date < "1989-09-03" OR invoice_date > "2007-12-25"', 'db_id': 'tracking_orders', 'hardness': 'medium'}], 'election': [{'question': 'Show the people that have been comptroller the most times and the corresponding number of times.', 'sql_query': 'SELECT Comptroller ,  COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'election', 'hardness': 'hard'}, {'question': 'What are the delegate and name of the county they belong to, for each county?', 'sql_query': 'SELECT T2.Delegate ,  T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District', 'db_id': 'election', 'hardness': 'medium'}], 'music_2': [{'question': 'Who is performing in the back stage position for the song "Der Kapitan"? Show the first name and last name.', 'sql_query': 'SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  "Der Kapitan" AND T1.StagePosition  =  "back"', 'db_id': 'music_2', 'hardness': 'hard'}, {'question': 'Find the number of vocal types used in song "Le Pop"', 'sql_query': 'SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  "Le Pop"', 'db_id': 'music_2', 'hardness': 'medium'}], 'wine_1': [{'question': 'What are the names of wines produced before any wine from the Brander winery?', 'sql_query': 'SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  "Brander")', 'db_id': 'wine_1', 'hardness': 'hard'}, {'question': 'What are the numbers of wines for different grapes?', 'sql_query': 'SELECT count(*) ,  Grape FROM WINE GROUP BY Grape', 'db_id': 'wine_1', 'hardness': 'medium'}], 'formula_1': [{'question': 'Give me a list of names and years of races that had any driver whose forename is Lewis?', 'sql_query': 'SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = "Lewis"', 'db_id': 'formula_1', 'hardness': 'hard'}, {'question': 'What are the names of all races held after 2000 in Spain?', 'sql_query': 'SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = "Spain" AND T1.year > 2000', 'db_id': 'formula_1', 'hardness': 'medium'}], 'sports_competition': [{'question': 'What is the most common competition type?', 'sql_query': 'SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'sports_competition', 'hardness': 'hard'}, {'question': 'What are the types and countries of competitions?', 'sql_query': 'SELECT Competition_type ,  Country FROM competition', 'db_id': 'sports_competition', 'hardness': 'medium'}], 'storm_record': [{'question': 'Return the names of the regions affected by storms that had a death count of at least 10.', 'sql_query': 'SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T3.number_deaths  >=  10', 'db_id': 'storm_record', 'hardness': 'hard'}, {'question': 'What are the names of regions with two or more storms?', 'sql_query': 'SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2', 'db_id': 'storm_record', 'hardness': 'medium'}], 'tvshow': [{'question': 'What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?', 'sql_query': "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')", 'db_id': 'tvshow', 'hardness': 'hard'}, {'question': 'Find the package choice and series name of the TV channel that has high definition TV.', 'sql_query': 'SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  "yes"', 'db_id': 'tvshow', 'hardness': 'medium'}], 'device': [{'question': 'What are the carriers of devices that are not in stock anywhere?', 'sql_query': 'SELECT Carrier FROM device WHERE Device_ID NOT IN (SELECT Device_ID FROM stock)', 'db_id': 'device', 'hardness': 'hard'}, {'question': 'What are the open dates and years for the shop named Apple?', 'sql_query': 'SELECT Open_Date ,  Open_Year FROM shop WHERE Shop_Name  =  "Apple"', 'db_id': 'device', 'hardness': 'medium'}], 'university_basketball': [{'question': 'What is the founded year of the non public school that was founded most recently?', 'sql_query': "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1", 'db_id': 'university_basketball', 'hardness': 'hard'}, {'question': 'Return the highest acc percent across all basketball matches.', 'sql_query': 'SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1', 'db_id': 'university_basketball', 'hardness': 'medium'}], 'bike_1': [{'question': 'What are the names of the stations that are located in Palo Alto but have never been the ending point of the trips', 'sql_query': 'SELECT name FROM station WHERE city  =  "Palo Alto" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  100', 'db_id': 'bike_1', 'hardness': 'hard'}, {'question': 'On which day has it neither been foggy nor rained in the zip code of 94107?', 'sql_query': 'SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != "Fog" AND EVENTS != "Rain"', 'db_id': 'bike_1', 'hardness': 'medium'}], 'shop_membership': [{'question': 'What is the number of branches that have more than the average number of memberships?', 'sql_query': 'SELECT count(*) FROM branch WHERE membership_amount  >  (SELECT avg(membership_amount) FROM branch)', 'db_id': 'shop_membership', 'hardness': 'hard'}, {'question': 'What is the sum of total pounds of purchase in year 2018 for all branches in London?', 'sql_query': "SELECT sum(total_pounds) FROM purchase AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.city  =  'London' AND T1.year  =  2018", 'db_id': 'shop_membership', 'hardness': 'medium'}], 'workshop_paper': [{'question': 'Show the colleges that have both authors with submission score larger than 90 and authors with submission score smaller than 80.', 'sql_query': 'SELECT College FROM submission WHERE Scores  >  90 INTERSECT SELECT College FROM submission WHERE Scores  <  80', 'db_id': 'workshop_paper', 'hardness': 'hard'}, {'question': 'What are the authors of submissions and their colleges?', 'sql_query': 'SELECT Author ,  College FROM submission', 'db_id': 'workshop_paper', 'hardness': 'medium'}], 'poker_player': [{'question': 'What is the money rank of the tallest poker player?', 'sql_query': 'SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1', 'db_id': 'poker_player', 'hardness': 'hard'}, {'question': 'What are the final tables made and best finishes for all poker players?', 'sql_query': 'SELECT Final_Table_Made ,  Best_Finish FROM poker_player', 'db_id': 'poker_player', 'hardness': 'medium'}], 'aircraft': [{'question': 'What are the names of all aicrafts that have never won any match?', 'sql_query': 'SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)', 'db_id': 'aircraft', 'hardness': 'hard'}, {'question': 'How many international and domestic passengers are there in the airport London Heathrow?', 'sql_query': 'SELECT International_Passengers ,  Domestic_Passengers FROM airport WHERE Airport_Name  =  "London Heathrow"', 'db_id': 'aircraft', 'hardness': 'medium'}], 'railway': [{'question': 'Show the countries that have both managers of age above 50 and managers of age below 46.', 'sql_query': 'SELECT Country FROM manager WHERE Age  >  50 INTERSECT SELECT Country FROM manager WHERE Age  <  46', 'db_id': 'railway', 'hardness': 'hard'}, {'question': 'Show different builders of railways, along with the corresponding number of railways using each builder.', 'sql_query': 'SELECT Builder ,  COUNT(*) FROM railway GROUP BY Builder', 'db_id': 'railway', 'hardness': 'medium'}], 'concert_singer': [{'question': 'Show names for all stadiums except for stadiums having a concert in year 2014.', 'sql_query': 'SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014', 'db_id': 'concert_singer', 'hardness': 'hard'}, {'question': 'What are the names, countries, and ages for every singer in descending order of age?', 'sql_query': 'SELECT name ,  country ,  age FROM singer ORDER BY age DESC', 'db_id': 'concert_singer', 'hardness': 'medium'}], 'decoration_competition': [{'question': 'Show the most common country across members.', 'sql_query': 'SELECT Country FROM member GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'decoration_competition', 'hardness': 'hard'}, {'question': 'Show the names of members in ascending order of their rank in rounds.', 'sql_query': 'SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID ORDER BY Rank_in_Round ASC', 'db_id': 'decoration_competition', 'hardness': 'medium'}], 'book_2': [{'question': 'List the titles of books that are not published.', 'sql_query': 'SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)', 'db_id': 'book_2', 'hardness': 'hard'}, {'question': 'List the publisher of the publication with the highest price.', 'sql_query': 'SELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1', 'db_id': 'book_2', 'hardness': 'medium'}], 'flight_company': [{'question': 'which pilot is in charge of the most number of flights?', 'sql_query': 'SELECT pilot FROM flight GROUP BY pilot ORDER BY count(*) DESC LIMIT 1', 'db_id': 'flight_company', 'hardness': 'hard'}, {'question': 'What are the names and types of the companies that have ever operated a flight?', 'sql_query': 'SELECT T1.name ,  T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id', 'db_id': 'flight_company', 'hardness': 'medium'}], 'party_host': [{'question': 'Show the nations that have both hosts older than 45 and hosts younger than 35.', 'sql_query': 'SELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35', 'db_id': 'party_host', 'hardness': 'hard'}, {'question': 'For each party, return its theme and the name of its host.', 'sql_query': 'SELECT T3.Party_Theme ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID', 'db_id': 'party_host', 'hardness': 'medium'}], 'cre_Docs_and_Epenses': [{'question': 'Give the ids of documents that have expenses and contain the letter s in their names.', 'sql_query': "SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T1.document_name LIKE '%s%'", 'db_id': 'cre_Docs_and_Epenses', 'hardness': 'hard'}, {'question': 'Count the number of documents with the type code BK that correspond to each product id.', 'sql_query': 'SELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  "BK" GROUP BY project_id', 'db_id': 'cre_Docs_and_Epenses', 'hardness': 'medium'}], 'restaurants': [{'question': 'what are some good restaurants in the yosemite and mono lake area for french food ?', 'sql_query': 'SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  "yosemite and mono lake area" AND t1.food_type  =  "french" AND t1.rating  >  2.5;', 'db_id': 'restaurants', 'hardness': 'hard'}, {'question': 'where can we find a restaurant in alameda ?', 'sql_query': 'SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "alameda";', 'db_id': 'restaurants', 'hardness': 'medium'}], 'climbing': [{'question': 'Show the countries that have mountains with height more than 5600 stories and mountains with height less than 5200.', 'sql_query': 'SELECT Country FROM mountain WHERE Height  >  5600 INTERSECT SELECT Country FROM mountain WHERE Height  <  5200', 'db_id': 'climbing', 'hardness': 'hard'}, {'question': 'Show the distinct names of mountains climbed by climbers from country "West Germany".', 'sql_query': 'SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  "West Germany"', 'db_id': 'climbing', 'hardness': 'medium'}], 'pets_1': [{'question': 'Find the id of students who do not have a cat pet.', 'sql_query': "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'", 'db_id': 'pets_1', 'hardness': 'hard'}, {'question': 'Find the type and weight of the youngest pet.', 'sql_query': 'SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1', 'db_id': 'pets_1', 'hardness': 'medium'}], 'customers_and_products_contacts': [{'question': 'Show the names of customers who use Credit Card payment method and have more than 2 orders.', 'sql_query': "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.payment_method_code  =  'Credit Card' GROUP BY T1.customer_id HAVING count(*)  >  2", 'db_id': 'customers_and_products_contacts', 'hardness': 'hard'}, {'question': 'Show the minimum, maximum, average price for all products.', 'sql_query': 'SELECT min(product_price) ,  max(product_price) ,  avg(product_price) FROM products', 'db_id': 'customers_and_products_contacts', 'hardness': 'medium'}], 'entrepreneur': [{'question': 'What are the names of people who are not entrepreneurs?', 'sql_query': 'SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)', 'db_id': 'entrepreneur', 'hardness': 'hard'}, {'question': 'Return the weight of the shortest person.', 'sql_query': 'SELECT Weight FROM people ORDER BY Height ASC LIMIT 1', 'db_id': 'entrepreneur', 'hardness': 'medium'}], 'mountain_photos': [{'question': 'What is the name of each camera lens and the number of photos taken by it? Order the result by the count of photos.', 'sql_query': 'SELECT T1.name ,  count(*) FROM camera_lens AS T1 JOIN photos AS T2 ON T1.id  =  T2.camera_lens_id GROUP BY T1.id ORDER BY count(*)', 'db_id': 'mountain_photos', 'hardness': 'hard'}, {'question': "How many distinct kinds of camera lenses are used to take photos of mountains in the country 'Ethiopia'?", 'sql_query': "SELECT count(DISTINCT T2.camera_lens_id) FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id WHERE T1.country  =  'Ethiopia'", 'db_id': 'mountain_photos', 'hardness': 'medium'}], 'products_for_hire': [{'question': "What are the start date and end date of the booking that has booked the product named 'Book collection A'?", 'sql_query': "SELECT T3.booking_start_date ,   T3.booking_end_date FROM Products_for_hire AS T1 JOIN products_booked AS T2 ON T1.product_id  =  T2.product_id JOIN bookings AS T3 ON T2.booking_id  =  T3.booking_id WHERE T1.product_name  =  'Book collection A'", 'db_id': 'products_for_hire', 'hardness': 'hard'}, {'question': 'What are the first name, last name, and gender of all the good customers? Order by their last name.', 'sql_query': "SELECT first_name ,  last_name ,  gender_mf FROM customers WHERE good_or_bad_customer  =  'good' ORDER BY last_name", 'db_id': 'products_for_hire', 'hardness': 'medium'}], 'journal_committee': [{'question': 'Show the names and ages of editors and the theme of journals for which they serve on committees, in ascending alphabetical order of theme.', 'sql_query': 'SELECT T2.Name ,  T2.age ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID ORDER BY T3.Theme ASC', 'db_id': 'journal_committee', 'hardness': 'hard'}, {'question': 'Show the id, name of each editor and the number of journal committees they are on.', 'sql_query': 'SELECT T1.editor_id ,  T1.Name ,  COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.editor_id', 'db_id': 'journal_committee', 'hardness': 'medium'}], 'course_teach': [{'question': 'What are the names of the teachers whose courses have not been arranged?', 'sql_query': 'SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)', 'db_id': 'course_teach', 'hardness': 'hard'}, {'question': 'What is the hometown of the youngest teacher?', 'sql_query': 'SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1', 'db_id': 'course_teach', 'hardness': 'medium'}], 'theme_gallery': [{'question': 'What are the names of artists who did not have an exhibition in 2004?', 'sql_query': 'SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004', 'db_id': 'theme_gallery', 'hardness': 'hard'}, {'question': 'Show all artist name, age, and country ordered by the yeared they joined.', 'sql_query': 'SELECT name ,  age ,  country FROM artist ORDER BY Year_Join', 'db_id': 'theme_gallery', 'hardness': 'medium'}], 'news_report': [{'question': 'Show the names of journalists and the number of events they reported.', 'sql_query': 'SELECT T3.Name ,  COUNT(*) FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID GROUP BY T3.Name', 'db_id': 'news_report', 'hardness': 'hard'}, {'question': 'Show the names of journalists and the dates of the events they reported.', 'sql_query': 'SELECT T3.Name ,  T2.Date FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID', 'db_id': 'news_report', 'hardness': 'medium'}]}