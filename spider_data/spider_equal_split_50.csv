,index,Unnamed: 0,db_id,query,question,context,hardness,Unnamed: 0.1
0,1511,7512,dorm_1,"SELECT T1.dorm_name ,  T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid GROUP BY T2.dormid ORDER BY count(*) LIMIT 1",Find the name and capacity of the dorm with least number of amenities.," create table Student (         StuID        INTEGER PRIMARY KEY,         LName        VARCHAR(12),         Fname        VARCHAR(12),         Age      INTEGER,         Sex      VARCHAR(1),         Major        INTEGER,         Advisor      INTEGER,         city_code    VARCHAR(3)  );    create table Dorm (        dormid		INTEGER,        dorm_name	VARCHAR(20),        student_capacity	INTEGER,        gender			VARCHAR(1) ) ;  create table Dorm_amenity (        amenid			INTEGER,        amenity_name		VARCHAR(25) ) ;  create table Has_amenity (        dormid			INTEGER,        amenid				INTEGER, 	FOREIGN KEY (dormid) REFERENCES `Dorm`(dormid), 	FOREIGN KEY (amenid) REFERENCES `Dorm_amenity`(amenid) );  create table Lives_in (        stuid 	      INTEGER,        dormid		INTEGER,        room_number	INTEGER, 	FOREIGN KEY (stuid) REFERENCES `Student`(StuID),         FOREIGN KEY (dormid) REFERENCES `Dorm`(dormid) );  ",extra,
1,1490,6771,soccer_2,SELECT T1.cName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T2.pName LIKE 'D%',Which colleges does each player with a name that starts with the letter D  who tried out go to?,"/*   * SQL scripts for CS61 Intro to SQL lectures  * FILENAME SOCCER2.SQL  */  DROP TABLE  IF EXISTS Player; DROP TABLE  IF EXISTS Tryout; DROP TABLE  IF EXISTS College;  CREATE TABLE 	College    ( cName   	varchar(20) NOT NULL,     state   	varchar(2),     enr     	numeric(5,0),     PRIMARY KEY (cName)   );  CREATE TABLE 	Player   ( pID			numeric(5,0) NOT NULL,   	pName   	varchar(20),     yCard   	varchar(3),     HS      	numeric(5,0),     PRIMARY KEY (pID)   );  CREATE TABLE 	Tryout   ( pID			numeric(5,0),   	cName   	varchar(20),     pPos    	varchar(8),     decision    varchar(3),     PRIMARY KEY (pID, cName),     FOREIGN KEY (pID) REFERENCES Player(pID),     FOREIGN KEY (cName) REFERENCES College(cName)   );  /* note that ""left"" and ""right"" are reserved words in SQL */  ",hard,
2,0,1022,geo,"SELECT state_name FROM city WHERE city_name  =  ""springfield"";",what states have a city named springfield,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );",easy,309.0
3,1,998,geo,"SELECT border FROM border_info WHERE state_name  =  ""kentucky"";",which state border kentucky,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );",easy,285.0
4,2,4143,cre_Doc_Control_Systems,"SELECT count(*) FROM Documents WHERE document_status_code = ""done"";",How many documents have the status code done?,"PRAGMA foreign_keys = ON; CREATE TABLE Ref_Document_Types ( document_type_code CHAR(15) NOT NULL, document_type_description VARCHAR(255) NOT NULL, PRIMARY KEY (document_type_code) ); CREATE TABLE Roles ( role_code CHAR(15) NOT NULL, role_description VARCHAR(255), PRIMARY KEY (role_code) ); CREATE TABLE Addresses ( address_id INTEGER NOT NULL, address_details VARCHAR(255), PRIMARY KEY (address_id) ); CREATE TABLE Ref_Document_Status ( document_status_code CHAR(15) NOT NULL, document_status_description VARCHAR(255) NOT NULL, PRIMARY KEY (document_status_code) ); CREATE TABLE Ref_Shipping_Agents ( shipping_agent_code CHAR(15) NOT NULL, shipping_agent_name VARCHAR(255) NOT NULL, shipping_agent_description VARCHAR(255) NOT NULL, PRIMARY KEY (shipping_agent_code) ); CREATE TABLE Documents ( document_id INTEGER NOT NULL, document_status_code CHAR(15) NOT NULL, document_type_code CHAR(15) NOT NULL, shipping_agent_code CHAR(15), receipt_date DATETIME, receipt_number VARCHAR(255), other_details VARCHAR(255), PRIMARY KEY (document_id), FOREIGN KEY (document_type_code) REFERENCES Ref_Document_Types (document_type_code), FOREIGN KEY (document_status_code) REFERENCES Ref_Document_Status (document_status_code), FOREIGN KEY (shipping_agent_code) REFERENCES Ref_Shipping_Agents (shipping_agent_code) ); CREATE TABLE Employees ( employee_id INTEGER NOT NULL, role_code CHAR(15) NOT NULL, employee_name VARCHAR(255), other_details VARCHAR(255), PRIMARY KEY (employee_id), FOREIGN KEY (role_code) REFERENCES Roles (role_code) ); CREATE TABLE Document_Drafts ( document_id INTEGER NOT NULL, draft_number INTEGER NOT NULL, draft_details VARCHAR(255), PRIMARY KEY (document_id, draft_number), FOREIGN KEY (document_id) REFERENCES Documents (document_id) ); CREATE TABLE Draft_Copies ( document_id INTEGER NOT NULL, draft_number INTEGER NOT NULL, copy_number INTEGER NOT NULL, PRIMARY KEY (document_id, draft_number, copy_number), FOREIGN KEY (document_id, draft_number) REFERENCES Document_Drafts (document_id,draft_number) ); CREATE TABLE Circulation_History ( document_id INTEGER NOT NULL, draft_number INTEGER NOT NULL, copy_number INTEGER NOT NULL, employee_id INTEGER NOT NULL, PRIMARY KEY (document_id, draft_number, copy_number, employee_id), FOREIGN KEY (document_id, draft_number, copy_number) REFERENCES Draft_Copies (document_id,draft_number,copy_number), FOREIGN KEY (employee_id) REFERENCES Employees (employee_id) ); CREATE TABLE Documents_Mailed ( document_id INTEGER NOT NULL, mailed_to_address_id INTEGER NOT NULL, mailing_date DATETIME, PRIMARY KEY (document_id, mailed_to_address_id), FOREIGN KEY (document_id) REFERENCES Documents (document_id), FOREIGN KEY (mailed_to_address_id) REFERENCES Addresses (address_id) );  ",easy,919.0
5,3,513,student_transcripts_tracking,SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea',What is the zip code of the address in the city Port Chelsea?,"PRAGMA foreign_keys = ON; CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `line_1` VARCHAR(255), `line_2` VARCHAR(255), `line_3` VARCHAR(255), `city` VARCHAR(255), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(255), `country` VARCHAR(255), `other_address_details` VARCHAR(255) ); CREATE TABLE `Courses` ( `course_id` INTEGER PRIMARY KEY, `course_name` VARCHAR(255), `course_description` VARCHAR(255), `other_details` VARCHAR(255) );  CREATE TABLE `Departments` ( `department_id` INTEGER PRIMARY KEY, `department_name` VARCHAR(255), `department_description` VARCHAR(255), `other_details` VARCHAR(255) ); CREATE TABLE `Degree_Programs` ( `degree_program_id` INTEGER PRIMARY KEY, `department_id` INTEGER NOT NULL, `degree_summary_name` VARCHAR(255), `degree_summary_description` VARCHAR(255), `other_details` VARCHAR(255), FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` ) );  CREATE TABLE `Sections` ( `section_id` INTEGER PRIMARY KEY, `course_id` INTEGER NOT NULL, `section_name` VARCHAR(255), `section_description` VARCHAR(255), `other_details` VARCHAR(255), FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ) ); CREATE TABLE `Semesters` ( `semester_id` INTEGER PRIMARY KEY, `semester_name` VARCHAR(255), `semester_description` VARCHAR(255), `other_details` VARCHAR(255) ); CREATE TABLE `Students` ( `student_id` INTEGER PRIMARY KEY, `current_address_id` INTEGER NOT NULL, `permanent_address_id` INTEGER NOT NULL, `first_name` VARCHAR(80), `middle_name` VARCHAR(40), `last_name` VARCHAR(40), `cell_mobile_number` VARCHAR(40), `email_address` VARCHAR(40), `ssn` VARCHAR(40), `date_first_registered` DATETIME, `date_left` DATETIME, `other_student_details` VARCHAR(255), FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` ) );  CREATE TABLE `Student_Enrolment` ( `student_enrolment_id` INTEGER PRIMARY KEY, `degree_program_id` INTEGER NOT NULL, `semester_id` INTEGER NOT NULL, `student_id` INTEGER NOT NULL, `other_details` VARCHAR(255), FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ), FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ), FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ) ); CREATE TABLE `Student_Enrolment_Courses` ( `student_course_id` INTEGER PRIMARY KEY, `course_id` INTEGER NOT NULL, `student_enrolment_id` INTEGER NOT NULL, FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ), FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` ) );  CREATE TABLE `Transcripts` ( `transcript_id` INTEGER PRIMARY KEY, `transcript_date` DATETIME, `other_details` VARCHAR(255) );  CREATE TABLE `Transcript_Contents` ( `student_course_id` INTEGER NOT NULL, `transcript_id` INTEGER NOT NULL, FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ), FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` ) );  ",easy,120.0
6,4,2834,product_catalog,SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3,Find the list of attribute data types possessed by more than 3 attribute definitions.,"PRAGMA foreign_keys = ON;  CREATE TABLE `Attribute_Definitions` ( `attribute_id` INTEGER PRIMARY KEY, `attribute_name` VARCHAR(30), `attribute_data_type` VARCHAR(10) ); CREATE TABLE `Catalogs` ( `catalog_id` INTEGER PRIMARY KEY, `catalog_name` VARCHAR(50), `catalog_publisher` VARCHAR(80), `date_of_publication` DATETIME, `date_of_latest_revision` DATETIME ); CREATE TABLE `Catalog_Structure` ( `catalog_level_number` INTEGER PRIMARY KEY, `catalog_id` INTEGER NOT NULL, `catalog_level_name` VARCHAR(50), FOREIGN KEY (`catalog_id` ) REFERENCES `Catalogs`(`catalog_id` ) );  CREATE TABLE `Catalog_Contents` ( `catalog_entry_id` INTEGER PRIMARY KEY, `catalog_level_number` INTEGER NOT NULL, `parent_entry_id` INTEGER, `previous_entry_id` INTEGER, `next_entry_id` INTEGER, `catalog_entry_name` VARCHAR(80), `product_stock_number` VARCHAR(50), `price_in_dollars` DOUBLE NULL, `price_in_euros` DOUBLE NULL, `price_in_pounds` DOUBLE NULL, `capacity` VARCHAR(20), `length` VARCHAR(20), `height` VARCHAR(20), `width` VARCHAR(20), FOREIGN KEY (`catalog_level_number` ) REFERENCES `Catalog_Structure`(`catalog_level_number` ) ); CREATE TABLE `Catalog_Contents_Additional_Attributes` ( `catalog_entry_id` INTEGER NOT NULL, `catalog_level_number` INTEGER NOT NULL, `attribute_id` INTEGER NOT NULL, `attribute_value` VARCHAR(255) NOT NULL, FOREIGN KEY (`catalog_entry_id` ) REFERENCES `Catalog_Contents`(`catalog_entry_id` ), FOREIGN KEY (`catalog_level_number` ) REFERENCES `Catalog_Structure`(`catalog_level_number` ) ); ",easy,585.0
7,5,477,wta_1,SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50,Find the codes of countries that have more than 50 players.,"CRloser_rank_pointsEATE TABLE players(     ""player_id"" INT PRIMARY KEY,     ""first_name"" TEXT,     ""last_name"" TEXT,     ""hand"" TEXT,     ""birth_date"" DATE,     ""country_code"" TEXT ); CREATE TABLE matches(   ""best_of"" INT,   ""draw_size"" INT,   ""loser_age"" FLOAT,   ""loser_entry"" TEXT,   ""loser_hand"" TEXT,   ""loser_ht"" INT,   ""loser_id"" INT,   ""loser_ioc"" TEXT,   ""loser_name"" TEXT,   ""loser_rank"" INT,   ""loser_rank_points"" INT,   ""loser_seed"" INT,   ""match_num"" INT,   ""minutes"" INT,   ""round"" TEXT,   ""score"" TEXT,   ""surface"" TEXT,   ""tourney_date"" DATE,   ""tourney_id"" TEXT,   ""tourney_level"" TEXT,   ""tourney_name"" TEXT,   ""winner_age"" FLOAT,   ""winner_entry"" TEXT,   ""winner_hand"" TEXT,   ""winner_ht"" INT,   ""winner_id"" INT,   ""winner_ioc"" TEXT,   ""winner_name"" TEXT,   ""winner_rank"" INT,   ""winner_rank_points"" INT,   ""winner_seed"" INT,   ""year"" INT,   FOREIGN KEY(loser_id) REFERENCES players(player_id),   FOREIGN KEY(winner_id) REFERENCES players(player_id) );    CREATE TABLE qualifying_matches(   ""best_of"" INT,   ""draw_size"" INT,   ""l_1stIn"" TEXT,   ""l_1stWon"" TEXT,   ""l_2ndWon"" TEXT,   ""l_SvGms"" TEXT,   ""l_ace"" TEXT,   ""l_bpFaced"" TEXT,   ""l_bpSaved"" TEXT,   ""l_df"" TEXT,   ""l_svpt"" TEXT,   ""loser_age"" FLOAT,   ""loser_entry"" TEXT,   ""loser_hand"" TEXT,   ""loser_ht"" INT,   ""loser_id"" INT,   ""loser_ioc"" TEXT,   ""loser_name"" TEXT,   ""loser_rank"" INT,   ""loser_rank_points"" INT,   ""loser_seed"" INT,   ""match_num"" INT,   ""minutes"" INT,   ""round"" TEXT,   ""score"" TEXT,   ""surface"" TEXT,   ""tourney_date"" DATE,   ""tourney_id"" TEXT,   ""tourney_level"" TEXT,   ""tourney_name"" TEXT,   ""w_1stIn"" TEXT,   ""w_1stWon"" TEXT,   ""w_2ndWon"" TEXT,   ""w_SvGms"" TEXT,   ""w_ace"" TEXT,   ""w_bpFaced"" TEXT,   ""w_bpSaved"" TEXT,   ""w_df"" TEXT,   ""w_svpt"" TEXT,   ""winner_age"" FLOAT,   ""winner_entry"" TEXT,   ""winner_hand"" TEXT,   ""winner_ht"" INT,   ""winner_id"" INT,   ""winner_ioc"" TEXT,   ""winner_name"" TEXT,   ""winner_rank"" INT,   ""winner_rank_points"" INT,   ""winner_seed"" INT,   ""year"" INT,   FOREIGN KEY(loser_id) REFERENCES players(player_id),   FOREIGN KEY(winner_id) REFERENCES players(player_id) );  CREATE TABLE rankings(   ""ranking_date"" DATE,   ""ranking"" INT,   ""player_id"" INT,   ""ranking_points"" INT,   ""tours"" INT,   FOREIGN KEY(player_id) REFERENCES players(player_id) );",easy,111.0
8,6,3676,insurance_and_eClaims,SELECT count(*) FROM claims_processing_stages,How many claim processing stages are there in total?,"PRAGMA foreign_keys = ON; CREATE TABLE Customers ( Customer_ID INTEGER NOT NULL, Customer_Details VARCHAR(255) NOT NULL, PRIMARY KEY (Customer_ID) ); CREATE TABLE Staff ( Staff_ID INTEGER NOT NULL, Staff_Details VARCHAR(255) NOT NULL, PRIMARY KEY (Staff_ID) );  CREATE TABLE Policies ( Policy_ID INTEGER NOT NULL, Customer_ID INTEGER NOT NULL, Policy_Type_Code CHAR(15) NOT NULL, Start_Date DATETIME, End_Date DATETIME, PRIMARY KEY (Policy_ID), FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID) );   CREATE TABLE Claim_Headers ( Claim_Header_ID INTEGER NOT NULL, Claim_Status_Code CHAR(15) NOT NULL, Claim_Type_Code CHAR(15) NOT NULL, Policy_ID INTEGER NOT NULL, Date_of_Claim DATETIME, Date_of_Settlement DATETIME, Amount_Claimed DECIMAL(20,4), Amount_Piad DECIMAL(20,4), PRIMARY KEY (Claim_Header_ID), FOREIGN KEY (Policy_ID) REFERENCES Policies (Policy_ID) ); CREATE TABLE Claims_Documents ( Claim_ID INTEGER NOT NULL, Document_Type_Code CHAR(15) NOT NULL, Created_by_Staff_ID INTEGER, Created_Date INTEGER, PRIMARY KEY (Claim_ID, Document_Type_Code), FOREIGN KEY (Claim_ID) REFERENCES Claim_Headers (Claim_Header_ID), FOREIGN KEY (Created_by_Staff_ID) REFERENCES Staff (Staff_ID) ); CREATE TABLE Claims_Processing_Stages ( Claim_Stage_ID INTEGER NOT NULL, Next_Claim_Stage_ID INTEGER, Claim_Status_Name VARCHAR(255) NOT NULL, Claim_Status_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Claim_Stage_ID) ); CREATE TABLE Claims_Processing ( Claim_Processing_ID INTEGER NOT NULL, Claim_ID INTEGER NOT NULL, Claim_Outcome_Code CHAR(15) NOT NULL, Claim_Stage_ID INTEGER NOT NULL, Staff_ID INTEGER, PRIMARY KEY (Claim_Processing_ID), FOREIGN KEY (Claim_ID) REFERENCES Claim_Headers (Claim_Header_ID), FOREIGN KEY (Staff_ID) REFERENCES Staff (Staff_ID) ); ",easy,813.0
9,7,1223,geo,"SELECT density FROM state WHERE state_name  =  ""wyoming"";",what is the density of the wyoming,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );",easy,389.0
10,8,6325,document_management,SELECT count(*) FROM users WHERE user_login  =  1,How many users are logged in?,"PRAGMA foreign_keys = ON;  CREATE TABLE `Roles` ( `role_code` VARCHAR(15) PRIMARY KEY, `role_description` VARCHAR(80) );  CREATE TABLE `Users` ( `user_id` INTEGER PRIMARY KEY, `role_code` VARCHAR(15) NOT NULL, `user_name` VARCHAR(40), `user_login` VARCHAR(40), `password` VARCHAR(40), FOREIGN KEY (`role_code` ) REFERENCES `Roles`(`role_code` ) ); CREATE TABLE `Document_Structures` ( `document_structure_code` VARCHAR(15) PRIMARY KEY, `parent_document_structure_code` VARCHAR(15), `document_structure_description` VARCHAR(80) ); CREATE TABLE `Functional_Areas` ( `functional_area_code` VARCHAR(15) PRIMARY KEY, `parent_functional_area_code` VARCHAR(15), `functional_area_description` VARCHAR(80) NOT NULL );  CREATE TABLE `Images` ( `image_id` INTEGER PRIMARY KEY, `image_alt_text` VARCHAR(80), `image_name` VARCHAR(40), `image_url` VARCHAR(255) ); CREATE TABLE `Documents` ( `document_code` VARCHAR(15) PRIMARY KEY, `document_structure_code` VARCHAR(15) NOT NULL, `document_type_code` VARCHAR(15) NOT NULL, `access_count` INTEGER, `document_name` VARCHAR(80), FOREIGN KEY (`document_structure_code` ) REFERENCES `Document_Structures`(`document_structure_code` ) );  CREATE TABLE `Document_Functional_Areas` ( `document_code` VARCHAR(15) NOT NULL, `functional_area_code` VARCHAR(15) NOT NULL, FOREIGN KEY (`document_code` ) REFERENCES `Documents`(`document_code` ), FOREIGN KEY (`functional_area_code` ) REFERENCES `Functional_Areas`(`functional_area_code` ) ); CREATE TABLE `Document_Sections` ( `section_id` INTEGER PRIMARY KEY, `document_code` VARCHAR(15) NOT NULL, `section_sequence` INTEGER, `section_code` VARCHAR(20), `section_title` VARCHAR(80), FOREIGN KEY (`document_code` ) REFERENCES `Documents`(`document_code` ) ); CREATE TABLE `Document_Sections_Images` ( `section_id` INTEGER NOT NULL, `image_id` INTEGER NOT NULL, PRIMARY KEY (`section_id`,`image_id`), FOREIGN KEY (`section_id` ) REFERENCES `Document_Sections`(`section_id` ), FOREIGN KEY (`image_id` ) REFERENCES `Images`(`image_id` ) );  ",easy,1435.0
11,9,6047,club_1,SELECT clubname FROM club,Give me the name of each club.,"create table Student (          StuID        INTEGER PRIMARY KEY,          LName        VARCHAR(12),          Fname        VARCHAR(12),          Age      INTEGER,          Sex      VARCHAR(1),          Major        INTEGER,          Advisor      INTEGER,          city_code    VARCHAR(3)   );   create table Club (        ClubID           INTEGER PRIMARY KEY,        ClubName         VARCHAR(40),        ClubDesc         VARCHAR(1024),        ClubLocation VARCHAR(40) );  create table Member_of_club (        StuID            INTEGER,        ClubID           INTEGER,        Position     VARCHAR(40),        FOREIGN KEY(StuID) REFERENCES Student(StuID),        FOREIGN KEY(ClubID) REFERENCES Club(ClubID) );   teach kids and adults about computer basics.', 'AKW'); ",easy,1379.0
12,10,3361,phone_1,"SELECT count(*) FROM phone WHERE Company_name = ""Nokia Corporation"";","How many phone hardware models are produced by the company named ""Nokia Corporation""?","PRAGMA foreign_keys=ON; BEGIN TRANSACTION; CREATE TABLE IF NOT EXISTS ""chip_model"" ( ""Model_name"" text, ""Launch_year"" real, ""RAM_MiB"" real, ""ROM_MiB"" real, ""Slots"" text, ""WiFi"" text, ""Bluetooth"" text, PRIMARY KEY (""Model_name"") ); CREATE TABLE IF NOT EXISTS ""screen_mode"" ( ""Graphics_mode"" real, ""Char_cells"" text, ""Pixels"" text, ""Hardware_colours"" real, ""used_kb"" real, ""map"" text, ""Type"" text, PRIMARY KEY (""Graphics_mode"") ); CREATE TABLE IF NOT EXISTS ""phone"" ( ""Company_name"" text, ""Hardware_Model_name"" text, ""Accreditation_type"" text, ""Accreditation_level"" text, ""Date"" text, ""chip_model"" text, ""screen_mode"" text, PRIMARY KEY(""Hardware_Model_name""), FOREIGN KEY (`screen_mode`) REFERENCES `screen_mode`(`Graphics_mode`), FOREIGN KEY (`chip_model`) REFERENCES `chip_model`(`Model_name`) ); COMMIT;",easy,729.0
13,11,6791,soccer_2,SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie'),What is the count of states with college students playing in the mid position but not as goalies?,"/*   * SQL scripts for CS61 Intro to SQL lectures  * FILENAME SOCCER2.SQL  */  DROP TABLE  IF EXISTS Player; DROP TABLE  IF EXISTS Tryout; DROP TABLE  IF EXISTS College;  CREATE TABLE 	College    ( cName   	varchar(20) NOT NULL,     state   	varchar(2),     enr     	numeric(5,0),     PRIMARY KEY (cName)   );  CREATE TABLE 	Player   ( pID			numeric(5,0) NOT NULL,   	pName   	varchar(20),     yCard   	varchar(3),     HS      	numeric(5,0),     PRIMARY KEY (pID)   );  CREATE TABLE 	Tryout   ( pID			numeric(5,0),   	cName   	varchar(20),     pPos    	varchar(8),     decision    varchar(3),     PRIMARY KEY (pID, cName),     FOREIGN KEY (pID) REFERENCES Player(pID),     FOREIGN KEY (cName) REFERENCES College(cName)   );  /* note that ""left"" and ""right"" are reserved words in SQL */  ",easy,1548.0
14,12,7718,cre_Theme_park,"SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  ""Vincent"" INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  ""Marcelle""",Which tourist attractions do the tourists Vincent and Marcelle visit? Tell me the names of the attractions.,"PRAGMA foreign_keys = ON; CREATE TABLE Ref_Hotel_Star_Ratings ( star_rating_code CHAR(15) NOT NULL, star_rating_description VARCHAR(80), PRIMARY KEY (star_rating_code), UNIQUE (star_rating_code) );   CREATE TABLE Locations ( Location_ID INTEGER NOT NULL, Location_Name VARCHAR(255), Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Location_ID) ); CREATE TABLE Ref_Attraction_Types ( Attraction_Type_Code CHAR(15) NOT NULL, Attraction_Type_Description VARCHAR(255), PRIMARY KEY (Attraction_Type_Code), UNIQUE (Attraction_Type_Code) );  CREATE TABLE Visitors ( Tourist_ID INTEGER NOT NULL, Tourist_Details VARCHAR(255), PRIMARY KEY (Tourist_ID), UNIQUE (Tourist_ID) ); CREATE TABLE Features ( Feature_ID INTEGER NOT NULL, Feature_Details VARCHAR(255), PRIMARY KEY (Feature_ID) );  CREATE TABLE Hotels ( hotel_id INTEGER NOT NULL, star_rating_code CHAR(15) NOT NULL, pets_allowed_yn CHAR(1), price_range real, other_hotel_details VARCHAR(255), PRIMARY KEY (hotel_id), FOREIGN KEY (star_rating_code) REFERENCES Ref_Hotel_Star_Ratings (star_rating_code) );  CREATE TABLE Tourist_Attractions ( Tourist_Attraction_ID INTEGER NOT NULL, Attraction_Type_Code CHAR(15) NOT NULL, Location_ID INTEGER NOT NULL, How_to_Get_There VARCHAR(255), Name VARCHAR(255), Description VARCHAR(255), Opening_Hours VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Tourist_Attraction_ID), FOREIGN KEY (Location_ID) REFERENCES Locations (Location_ID), FOREIGN KEY (Attraction_Type_Code) REFERENCES Ref_Attraction_Types (Attraction_Type_Code) );  CREATE TABLE Street_Markets ( Market_ID INTEGER NOT NULL, Market_Details VARCHAR(255), PRIMARY KEY (Market_ID), FOREIGN KEY (Market_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Shops ( Shop_ID INTEGER NOT NULL, Shop_Details VARCHAR(255), PRIMARY KEY (Shop_ID), FOREIGN KEY (Shop_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Museums ( Museum_ID INTEGER NOT NULL, Museum_Details VARCHAR(255), PRIMARY KEY (Museum_ID), FOREIGN KEY (Museum_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Royal_Family ( Royal_Family_ID INTEGER NOT NULL, Royal_Family_Details VARCHAR(255), PRIMARY KEY (Royal_Family_ID), FOREIGN KEY (Royal_Family_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Theme_Parks ( Theme_Park_ID INTEGER NOT NULL, Theme_Park_Details VARCHAR(255), PRIMARY KEY (Theme_Park_ID), FOREIGN KEY (Theme_Park_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) );   CREATE TABLE Visits ( Visit_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Tourist_ID INTEGER NOT NULL, Visit_Date DATETIME NOT NULL, Visit_Details VARCHAR(40) NOT NULL, PRIMARY KEY (Visit_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID), FOREIGN KEY (Tourist_ID) REFERENCES Visitors (Tourist_ID) );   CREATE TABLE Photos ( Photo_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Name VARCHAR(255), Description VARCHAR(255), Filename VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Photo_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Staff ( Staff_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Name VARCHAR(40), Other_Details VARCHAR(255), PRIMARY KEY (Staff_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) );   CREATE TABLE Tourist_Attraction_Features ( Tourist_Attraction_ID INTEGER NOT NULL, Feature_ID INTEGER NOT NULL, PRIMARY KEY (Tourist_Attraction_ID, Feature_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID), FOREIGN KEY (Feature_ID) REFERENCES Features (Feature_ID) ); ",extra,1544.0
15,13,4062,gas_company,SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1,Show the manager name with most number of gas stations opened after 2000.," PRAGMA foreign_keys = ON;   CREATE TABLE ""company"" ( ""Company_ID"" int, ""Rank"" int, ""Company"" text, ""Headquarters"" text, ""Main_Industry"" text, ""Sales_billion"" real, ""Profits_billion"" real, ""Assets_billion"" real, ""Market_Value"" real, PRIMARY KEY (""Company_ID"") );  CREATE TABLE ""gas_station"" ( ""Station_ID"" int, ""Open_Year"" int, ""Location"" text, ""Manager_Name"" text, ""Vice_Manager_Name"" text, ""Representative_Name"" text, PRIMARY KEY (""Station_ID"") );  CREATE TABLE ""station_company"" ( ""Station_ID"" int, ""Company_ID"" int, ""Rank_of_the_Year"" int, PRIMARY KEY (""Station_ID"",""Company_ID""), FOREIGN KEY (`Station_ID`) REFERENCES `gas_station`(`Station_ID`), FOREIGN KEY (`Company_ID`) REFERENCES `company`(`Company_ID`) );  ",extra,991.0
16,14,6884,cre_Drama_Workshop_Groups,"SELECT T1.Service_Type_Description , T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T1.Service_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",What is the description and code of the type of service that is performed the most often?,"PRAGMA foreign_keys = ON;  CREATE TABLE Ref_Payment_Methods ( payment_method_code CHAR(10) NOT NULL, payment_method_description VARCHAR(80), PRIMARY KEY (payment_method_code), UNIQUE (payment_method_code) ); CREATE TABLE Ref_Service_Types ( Service_Type_Code CHAR(15) NOT NULL, Parent_Service_Type_Code CHAR(15), Service_Type_Description VARCHAR(255), PRIMARY KEY (Service_Type_Code), UNIQUE (Service_Type_Code) );  CREATE TABLE Addresses ( Address_ID VARCHAR(100) NOT NULL, Line_1 VARCHAR(255), Line_2 VARCHAR(255), City_Town VARCHAR(255), State_County VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Address_ID), UNIQUE (Address_ID) ); CREATE TABLE Products ( Product_ID VARCHAR(100) NOT NULL, Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Product_Description VARCHAR(255), Other_Product_Service_Details VARCHAR(255), PRIMARY KEY (Product_ID), UNIQUE (Product_ID) ); CREATE TABLE Marketing_Regions ( Marketing_Region_Code CHAR(15) NOT NULL, Marketing_Region_Name VARCHAR(255) NOT NULL, Marketing_Region_Descriptrion VARCHAR(255) NOT NULL, Other_Details VARCHAR(255), PRIMARY KEY (Marketing_Region_Code), UNIQUE (Marketing_Region_Code) );  CREATE TABLE Clients ( Client_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Customer_Email_Address VARCHAR(255), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Client_ID), UNIQUE (Client_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) ); CREATE TABLE Drama_Workshop_Groups ( Workshop_Group_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Currency_Code CHAR(15) NOT NULL, Marketing_Region_Code CHAR(15) NOT NULL, Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Workshop_Group_ID), UNIQUE (Workshop_Group_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) ); CREATE TABLE Performers ( Performer_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Performer_ID), UNIQUE (Performer_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) ); CREATE TABLE Customers ( Customer_ID VARCHAR(100) NOT NULL, Address_ID INTEGER NOT NULL, Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Customer_ID), UNIQUE (Customer_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) ); CREATE TABLE Stores ( Store_ID VARCHAR(100) NOT NULL, Address_ID INTEGER NOT NULL, Marketing_Region_Code CHAR(15) NOT NULL, Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Store_ID), UNIQUE (Store_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID), FOREIGN KEY (Marketing_Region_Code) REFERENCES Marketing_Regions (Marketing_Region_Code) ); CREATE TABLE Bookings ( Booking_ID INTEGER NOT NULL , Customer_ID INTEGER NOT NULL, Workshop_Group_ID VARCHAR(100) NOT NULL, Status_Code CHAR(15) NOT NULL, Store_ID INTEGER NOT NULL, Order_Date DATETIME NOT NULL, Planned_Delivery_Date DATETIME NOT NULL, Actual_Delivery_Date DATETIME NOT NULL, Other_Order_Details VARCHAR(255), PRIMARY KEY (Booking_ID), UNIQUE (Booking_ID), FOREIGN KEY (Customer_ID) REFERENCES Clients (Client_ID), FOREIGN KEY (Workshop_Group_ID) REFERENCES Drama_Workshop_Groups (Workshop_Group_ID) ); CREATE TABLE Performers_in_Bookings ( Order_ID INTEGER NOT NULL, Performer_ID INTEGER NOT NULL, PRIMARY KEY (Order_ID, Performer_ID), FOREIGN KEY (Performer_ID) REFERENCES Performers (Performer_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID) ); CREATE TABLE Customer_Orders ( Order_ID INTEGER NOT NULL , Customer_ID INTEGER NOT NULL, Store_ID INTEGER NOT NULL, Order_Date DATETIME NOT NULL, Planned_Delivery_Date DATETIME NOT NULL, Actual_Delivery_Date DATETIME NOT NULL, Other_Order_Details VARCHAR(255), PRIMARY KEY (Order_ID), UNIQUE (Order_ID), FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY (Store_ID) REFERENCES Stores (Store_ID) ); CREATE TABLE Order_Items ( Order_Item_ID INTEGER NOT NULL , Order_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), PRIMARY KEY (Order_Item_ID), FOREIGN KEY (Order_ID) REFERENCES Customer_Orders (Order_ID), FOREIGN KEY (Product_ID) REFERENCES Products (Product_ID) ); CREATE TABLE Invoices ( Invoice_ID INTEGER NOT NULL, Order_ID INTEGER NOT NULL, payment_method_code CHAR(15), Product_ID INTEGER NOT NULL, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), Order_Item_ID INTEGER NOT NULL, PRIMARY KEY (Invoice_ID), FOREIGN KEY (Order_ID) REFERENCES Customer_Orders (Order_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID), FOREIGN KEY (payment_method_code) REFERENCES Ref_Payment_Methods (payment_method_code) ); CREATE TABLE Services ( Service_ID INTEGER NOT NULL, Service_Type_Code CHAR(15), Workshop_Group_ID INTEGER NOT NULL, Product_Description VARCHAR(255), Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Other_Product_Service_Details VARCHAR(255), PRIMARY KEY (Service_ID), UNIQUE (Service_ID), FOREIGN KEY (Workshop_Group_ID) REFERENCES Drama_Workshop_Groups (Workshop_Group_ID), FOREIGN KEY (Service_Type_Code) REFERENCES Ref_Service_Types (Service_Type_Code) ); CREATE TABLE Bookings_Services ( Order_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, PRIMARY KEY (Order_ID, Product_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID), FOREIGN KEY (Product_ID) REFERENCES Services (Service_ID) );  CREATE TABLE Invoice_Items ( Invoice_Item_ID INTEGER NOT NULL , Invoice_ID INTEGER NOT NULL, Order_ID INTEGER NOT NULL, Order_Item_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, Order_Quantity INTEGER, Other_Item_Details VARCHAR(255), PRIMARY KEY (Invoice_Item_ID), FOREIGN KEY (Order_Item_ID) REFERENCES Order_Items (Order_Item_ID), FOREIGN KEY (Invoice_ID) REFERENCES Invoices (Invoice_ID), FOREIGN KEY (Order_ID, Product_ID) REFERENCES Bookings_Services (Order_ID,Product_ID) ); ",extra,1402.0
17,15,4624,inn_1,SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T2.decor ORDER BY count(T2.decor) ASC LIMIT 1;,What kind of decor has the least number of reservations?,"CREATE TABLE ""Rooms"" (  	""RoomId"" TEXT PRIMARY KEY, 	""roomName"" TEXT,  	""beds"" INTEGER,  	""bedType"" TEXT,  	""maxOccupancy"" INTEGER,  	""basePrice"" INTEGER,  	""decor"" TEXT  );  CREATE TABLE ""Reservations"" (  	""Code"" INTEGER PRIMARY KEY,  	""Room"" TEXT,  	""CheckIn"" TEXT,  	""CheckOut"" TEXT,  	""Rate"" REAL,  	""LastName"" TEXT,  	""FirstName"" TEXT,  	""Adults"" INTEGER,  	""Kids"" INTEGER, 	FOREIGN KEY (Room) REFERENCES Rooms(RoomId) ); ",extra,1066.0
18,16,6517,department_store,"SELECT T1.customer_name ,  T1.customer_phone ,  T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T2.customer_id ORDER BY count(*) DESC LIMIT 1","What are the name, phone number and email address of the customer who made the largest number of orders?","PRAGMA foreign_keys = ON; CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `address_details` VARCHAR(255) );   INSERT INTO Addresses (`address_id`, `address_details`) VALUES (1, '28481 Crist Circle East Burdettestad, IA 21232'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (2, '0292 Mitchel Pike Port Abefurt, IA 84402-4249'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (3, '4062 Mante Place West Lindsey, DE 76199-8015'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (4, '99666 Julie Junction Marvinburgh, OH 16085-1623'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (5, '195 Mara Rue Jenkinsmouth, OK 22345'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (6, '11784 Stehr Road Port Isaac, NV 61159'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (7, '69482 Renner Ville Suite 653 Langworthborough, OH 95195'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (8, '36594 O''Keefe Lock New Cali, RI 42319'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (9, '7181 Wuckert Port Apt. 571 Lake Zariaburgh, IL 98085'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (10, '92594 Marvin Trafficway Pourosfurt, IA 98649'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (11, '0258 Kessler Mountains Suite 688 Mooreside, ME 41586-5022'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (12, '69275 Mose Drive Wilkinsonstad, CO 79055-7622'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (13, '8207 Morissette Lakes East Rheaview, ID 47493'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (14, '145 Alice Corners Willmsport, NV 36680'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (15, '521 Molly Harbors Apt. 567 Reingerland, HI 97099-1005');  CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `staff_gender` VARCHAR(1), `staff_name` VARCHAR(80) );  CREATE TABLE `Suppliers` ( `supplier_id` INTEGER PRIMARY KEY, `supplier_name` VARCHAR(80), `supplier_phone` VARCHAR(80) );  CREATE TABLE `Department_Store_Chain` ( `dept_store_chain_id` INTEGER PRIMARY KEY, `dept_store_chain_name` VARCHAR(80) );  CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `payment_method_code` VARCHAR(10) NOT NULL, `customer_code` VARCHAR(20), `customer_name` VARCHAR(80), `customer_address` VARCHAR(255), `customer_phone` VARCHAR(80), `customer_email` VARCHAR(80) ); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (1, 'Credit Card', '401', 'Ahmed', '75099 Tremblay Port Apt. 163 South Norrisland, SC 80546', '254-072-4068x33935', 'margarett.vonrueden@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (2, 'Credit Card', '665', 'Chauncey', '8408 Lindsay Court East Dasiabury, IL 72656-3552', '+41(8)1897032009', 'stiedemann.sigrid@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (3, 'Direct Debit', '844', 'Lukas', '7162 Rodolfo Knoll Apt. 502 Lake Annalise, TN 35791-8871', '197-417-3557', 'joelle.monahan@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (4, 'Direct Debit', '662', 'Lexus', '9581 Will Flat Suite 272 East Cathryn, WY 30751-4404', '+08(3)8056580281', 'gbrekke@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (5, 'Credit Card', '848', 'Tara', '5065 Mraz Fields Apt. 041 East Chris, NH 41624', '1-064-498-6609x051', 'nicholas44@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (6, 'Credit Card', '916', 'Jon', '841 Goyette Unions South Dionbury, NC 62021', '(443)013-3112x528', 'cconroy@example.net'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (7, 'Credit Card', '172', 'Cristobal', '8327 Christiansen Lakes Suite 409 Schneiderland, IA 93624', '877-150-8674x63517', 'shawna.cummerata@example.net'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (8, 'Direct Debit', '927', 'Adah', '5049 Hand Land Coymouth, IL 97300-7731', '1-695-364-7586x59256', 'kathlyn24@example.org'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (9, 'Credit Card', '808', 'Yasmeen', '3558 Witting Meadow Apt. 483 Lake Moriahbury, OH 91556-2122', '587.398.2400x31176', 'ludwig54@example.net'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (10, 'Credit Card', '887', 'Karson', '7308 Joan Lake Suite 346 Lizethtown, DE 56522', '857-844-9339x40140', 'moriah91@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (11, 'Direct Debit', '611', 'Cordell', '362 Fisher Forge Apt. 900 New Mckenna, CA 98525-5674', '(730)934-8249', 'qstokes@example.org'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (12, 'Credit Card', '182', 'Darron', '84445 Elinor Glens Port Zita, SD 39410', '117.822.3577', 'gwisozk@example.net'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (13, 'Credit Card', '589', 'Kenya', '338 Floy Mountains Suite 589 Yesseniaville, TN 60847', '08023680831', 'maxime86@example.net'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (14, 'Direct Debit', '240', 'Abbie', '983 Elinore Passage Darrionborough, SC 53915-0479', '07594320656', 'celine.bogan@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (15, 'Credit Card', '980', 'Lyric', '649 Ocie Lights Wyatttown, UT 12697', '1-472-036-0434', 'schultz.arnoldo@example.net');   CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_type_code` VARCHAR(10) NOT NULL, `product_name` VARCHAR(80), `product_price` DECIMAL(19,4) ); CREATE TABLE `Supplier_Addresses` ( `supplier_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_from` DATETIME NOT NULL, `date_to` DATETIME, PRIMARY KEY (`supplier_id`, `address_id`), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`supplier_id` ) REFERENCES `Suppliers`(`supplier_id` ) );  CREATE TABLE `Customer_Addresses` ( `customer_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_from` DATETIME NOT NULL, `date_to` DATETIME, PRIMARY KEY (`customer_id`, `address_id`), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) );   CREATE TABLE `Customer_Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `order_status_code` VARCHAR(10) NOT NULL, `order_date` DATETIME NOT NULL, FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) );  CREATE TABLE `Department_Stores` ( `dept_store_id` INTEGER PRIMARY KEY, `dept_store_chain_id` INTEGER, `store_name` VARCHAR(80), `store_address` VARCHAR(255), `store_phone` VARCHAR(80), `store_email` VARCHAR(80), FOREIGN KEY (`dept_store_chain_id` ) REFERENCES `Department_Store_Chain`(`dept_store_chain_id` ) );   INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (1, 1, 'store_name', '01290 Jeremie Parkway Suite 753 North Arielle, MS 51249', '(948)944-5099x2027', 'bmaggio@example.com'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (2, 3, 'store_name', '082 Purdy Expressway O''Connellshire, IL 31732', '877-917-5029', 'larissa10@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (3, 4, 'store_name', '994 Travis Plains North Wadeton, WV 27575-3951', '1-216-312-0375', 'alexandro.mcclure@example.net'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (4, 2, 'store_name', '93472 Mayert Shore Apt. 360 Mitchellton, TN 84209', '670-466-6367', 'bryon24@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (5, 3, 'store_name', '88112 Parisian Lights Sporermouth, MN 25962', '01399327266', 'creola23@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (6, 4, 'store_name', '49708 Marcella Valleys Suite 181 Ninamouth, WA 86667', '1-859-843-1957', 'jerod.reynolds@example.net'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (7, 4, 'store_name', '41924 Alfredo Cliff New Eviestad, NY 17573', '1-109-872-9142x77078', 'ihamill@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (8, 4, 'store_name', '7081 Shanna Cape West Zacheryshire, NC 17408', '+67(5)4983519062', 'casper.adolfo@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (9, 4, 'store_name', '5288 Kaia Street Devonton, NJ 61782-9006', '(723)503-7086x356', 'selmer.stiedemann@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (10, 3, 'store_name', '00578 Lisa Gateway Suite 476 Strosinville, VA 03998-3292', '07126036440', 'luisa57@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (11, 2, 'store_name', '34894 Everett Road South Jeremiehaven, GA 08730', '611-037-9309', 'vonrueden.vern@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (12, 4, 'store_name', '2676 Cruickshank Gardens North Ginahaven, CT 85046', '(626)763-7031', 'freda.toy@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (13, 2, 'store_name', '29297 West Road Suite 210 West Dulceside, UT 58085-8998', '1-764-126-7567x0795', 'katlynn62@example.com'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (14, 1, 'store_name', '16650 Lysanne River Apt. 281 North Garettton, AL 84756-4375', '319.331.3397', 'mohr.elwin@example.net'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (15, 3, 'store_name', '82470 Hansen Squares Suite 190 Wehnermouth, NC 76791', '(587)993-3604x3077', 'kelly30@example.com');   CREATE TABLE `Departments` ( `department_id` INTEGER PRIMARY KEY, `dept_store_id` INTEGER NOT NULL, `department_name` VARCHAR(80), FOREIGN KEY (`dept_store_id` ) REFERENCES `Department_Stores`(`dept_store_id` ) ); CREATE TABLE `Order_Items` ( `order_item_id` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) ); CREATE TABLE `Product_Suppliers` ( `product_id` INTEGER NOT NULL, `supplier_id` INTEGER NOT NULL, `date_supplied_from` DATETIME NOT NULL, `date_supplied_to` DATETIME, `total_amount_purchased` VARCHAR(80), `total_value_purchased` DECIMAL(19,4), PRIMARY KEY (`product_id`, `supplier_id`), FOREIGN KEY (`supplier_id` ) REFERENCES `Suppliers`(`supplier_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) );   CREATE TABLE `Staff_Department_Assignments` ( `staff_id` INTEGER NOT NULL, `department_id` INTEGER NOT NULL, `date_assigned_from` DATETIME NOT NULL, `job_title_code` VARCHAR(10) NOT NULL, `date_assigned_to` DATETIME, PRIMARY KEY (`staff_id`, `department_id`), FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` ), FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ) );  ",extra,1352.0
19,17,3177,race_track,"SELECT name ,  LOCATION ,  year_opened FROM track WHERE seating  >  (SELECT avg(seating) FROM track)","What are the names, locations, and years of opening for tracks with seating higher than average?","PRAGMA foreign_keys = ON;  CREATE TABLE ""race"" ( ""Race_ID"" int, ""Name"" text, ""Class"" text, ""Date"" text, ""Track_ID"" text, PRIMARY KEY (""Race_ID""), FOREIGN KEY (""Track_ID"") REFERENCES ""track""(""Track_ID"") );  CREATE TABLE ""track"" ( ""Track_ID"" int, ""Name"" text, ""Location"" text, ""Seating"" real, ""Year_Opened"" real, PRIMARY KEY (""Track_ID"") );  ",extra,881.0
20,18,1609,scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  ""Parsing"" AND t3.year  =  2012 AND t4.venuename  =  ""acl"";",acl papers in 2012 about Parsing,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); ",extra,302.0
21,19,1838,scholar,"SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""ohad shamir"" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",What paper by ohad shamir has the most citation ?,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); ",extra,447.0
22,20,5663,insurance_policies,"SELECT count(*) ,  T1.claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY T1.Date_Claim_Settled DESC LIMIT 1",Find the claim id and the number of settlements made for the claim with the most recent settlement date.,"PRAGMA foreign_keys = ON; CREATE TABLE Customers ( Customer_ID INTEGER NOT NULL, Customer_Details VARCHAR(255) NOT NULL, PRIMARY KEY (Customer_ID) ); CREATE TABLE Customer_Policies ( Policy_ID INTEGER NOT NULL, Customer_ID INTEGER NOT NULL, Policy_Type_Code CHAR(15) NOT NULL, Start_Date DATE, End_Date DATE, PRIMARY KEY (Policy_ID), FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID) );  CREATE TABLE Claims ( Claim_ID INTEGER NOT NULL, Policy_ID INTEGER NOT NULL, Date_Claim_Made DATE, Date_Claim_Settled DATE, Amount_Claimed INTEGER, Amount_Settled INTEGER, PRIMARY KEY (Claim_ID), FOREIGN KEY (Policy_ID) REFERENCES Customer_Policies (Policy_ID) );  CREATE TABLE Settlements ( Settlement_ID INTEGER NOT NULL, Claim_ID INTEGER NOT NULL, Date_Claim_Made DATE, Date_Claim_Settled DATE, Amount_Claimed INTEGER, Amount_Settled INTEGER, Customer_Policy_ID INTEGER NOT NULL, PRIMARY KEY (Settlement_ID), FOREIGN KEY (Claim_ID) REFERENCES Claims (Claim_ID) ); CREATE TABLE Payments ( Payment_ID INTEGER NOT NULL, Settlement_ID INTEGER NOT NULL, Payment_Method_Code VARCHAR(255), Date_Payment_Made DATE, Amount_Payment INTEGER, PRIMARY KEY (Payment_ID), FOREIGN KEY (Settlement_ID) REFERENCES Settlements (Settlement_ID) );    ",extra,1241.0
23,21,1785,scholar,"SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  ""jitendra malik"";",What datasets have jitendra malik used,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); ",extra,400.0
24,22,5095,assets_maintenance,"SELECT count(*) ,  T1.fault_log_entry_id FROM Fault_Log AS T1 JOIN Engineer_Visits AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1",How many engineer visits are required at most for a single fault log? List the number and the log entry id.,"PRAGMA foreign_keys = ON;  CREATE TABLE `Third_Party_Companies` ( `company_id` INTEGER PRIMARY KEY , `company_type` VARCHAR(5) NOT NULL, `company_name` VARCHAR(255), `company_address` VARCHAR(255), `other_company_details` VARCHAR(255) );  CREATE TABLE `Maintenance_Contracts` ( `maintenance_contract_id` INTEGER PRIMARY KEY, `maintenance_contract_company_id` INTEGER NOT NULL, `contract_start_date` DATETIME, `contract_end_date` DATETIME, `other_contract_details` VARCHAR(255), FOREIGN KEY (`maintenance_contract_company_id` ) REFERENCES `Third_Party_Companies`(`company_id` ) );  CREATE TABLE `Parts` ( `part_id` INTEGER PRIMARY KEY, `part_name` VARCHAR(255), `chargeable_yn` VARCHAR(1), `chargeable_amount` VARCHAR(20), `other_part_details` VARCHAR(255) );  CREATE TABLE `Skills` ( `skill_id` INTEGER PRIMARY KEY, `skill_code` VARCHAR(20), `skill_description` VARCHAR(255) );  CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `staff_name` VARCHAR(255), `gender` VARCHAR(1), `other_staff_details` VARCHAR(255) ); CREATE TABLE `Assets` ( `asset_id` INTEGER PRIMARY KEY, `maintenance_contract_id` INTEGER NOT NULL, `supplier_company_id` INTEGER NOT NULL, `asset_details` VARCHAR(255), `asset_make` VARCHAR(20), `asset_model` VARCHAR(20), `asset_acquired_date` DATETIME, `asset_disposed_date` DATETIME, `other_asset_details` VARCHAR(255), FOREIGN KEY (`maintenance_contract_id` ) REFERENCES `Maintenance_Contracts`(`maintenance_contract_id` ), FOREIGN KEY (`supplier_company_id` ) REFERENCES `Third_Party_Companies`(`company_id` ) );    CREATE TABLE `Asset_Parts` ( `asset_id` INTEGER NOT NULL, `part_id` INTEGER NOT NULL, FOREIGN KEY (`part_id` ) REFERENCES `Parts`(`part_id` ), FOREIGN KEY (`asset_id` ) REFERENCES `Assets`(`asset_id` ) );  CREATE TABLE `Maintenance_Engineers` ( `engineer_id` INTEGER PRIMARY KEY, `company_id` INTEGER NOT NULL, `first_name` VARCHAR(50), `last_name` VARCHAR(50), `other_details` VARCHAR(255), FOREIGN KEY (`company_id` ) REFERENCES `Third_Party_Companies`(`company_id` ) );   CREATE TABLE `Engineer_Skills` ( `engineer_id` INTEGER NOT NULL, `skill_id` INTEGER NOT NULL, FOREIGN KEY (`engineer_id` ) REFERENCES `Maintenance_Engineers`(`engineer_id` ), FOREIGN KEY (`skill_id` ) REFERENCES `Skills`(`skill_id` ) );  CREATE TABLE `Fault_Log` ( `fault_log_entry_id` INTEGER PRIMARY KEY, `asset_id` INTEGER NOT NULL, `recorded_by_staff_id` INTEGER NOT NULL, `fault_log_entry_datetime` DATETIME, `fault_description` VARCHAR(255), `other_fault_details` VARCHAR(255), FOREIGN KEY (`asset_id` ) REFERENCES `Assets`(`asset_id` ), FOREIGN KEY (`recorded_by_staff_id` ) REFERENCES `Staff`(`staff_id` ) );  CREATE TABLE `Engineer_Visits` ( `engineer_visit_id` INTEGER PRIMARY KEY, `contact_staff_id` INTEGER, `engineer_id` INTEGER NOT NULL, `fault_log_entry_id` INTEGER NOT NULL, `fault_status` VARCHAR(10) NOT NULL, `visit_start_datetime` DATETIME, `visit_end_datetime` DATETIME, `other_visit_details` VARCHAR(255), FOREIGN KEY (`fault_log_entry_id` ) REFERENCES `Fault_Log`(`fault_log_entry_id` ), FOREIGN KEY (`engineer_id` ) REFERENCES `Maintenance_Engineers`(`engineer_id` ), FOREIGN KEY (`contact_staff_id` ) REFERENCES `Staff`(`staff_id` ) );    CREATE TABLE `Part_Faults` ( `part_fault_id` INTEGER PRIMARY KEY, `part_id` INTEGER NOT NULL, `fault_short_name` VARCHAR(20), `fault_description` VARCHAR(255), `other_fault_details` VARCHAR(255), FOREIGN KEY (`part_id` ) REFERENCES `Parts`(`part_id` ) );   CREATE TABLE `Fault_Log_Parts` ( `fault_log_entry_id` INTEGER NOT NULL, `part_fault_id` INTEGER NOT NULL, `fault_status` VARCHAR(10) NOT NULL, FOREIGN KEY (`part_fault_id` ) REFERENCES `Part_Faults`(`part_fault_id` ), FOREIGN KEY (`fault_log_entry_id` ) REFERENCES `Fault_Log`(`fault_log_entry_id` ) );  CREATE TABLE `Skills_Required_To_Fix` ( `part_fault_id` INTEGER NOT NULL, `skill_id` INTEGER NOT NULL, FOREIGN KEY (`part_fault_id` ) REFERENCES `Part_Faults`(`part_fault_id` ), FOREIGN KEY (`skill_id` ) REFERENCES `Skills`(`skill_id` ) );     ",extra,1134.0
25,23,6259,network_2,SELECT DISTINCT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  <  (SELECT avg(age) FROM person),What are the different names of friends who are younger than the average age for a friend?,"CREATE TABLE Person (   name varchar(20) PRIMARY KEY,   age INTEGER,   city TEXT,   gender TEXT,   job TEXT );  CREATE TABLE PersonFriend (   name varchar(20),   friend varchar(20),   year INTEGER,   FOREIGN KEY (name) REFERENCES Person(name),   FOREIGN KEY (friend) REFERENCES Person(name) );  ",extra,1315.0
26,24,1760,scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""question answering"" AND t3.year  =  2016;",What papers were written on question answering this year ?,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); ",hard,462.0
27,25,4742,storm_record,SELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region),Show the name of storms which don't have affected region in record.," PRAGMA foreign_keys = ON;  CREATE TABLE ""storm"" ( ""Storm_ID"" int, ""Name"" text, ""Dates_active"" text, ""Max_speed"" int, ""Damage_millions_USD"" real, ""Number_Deaths"" int, PRIMARY KEY (""Storm_ID"") );  CREATE TABLE ""region"" ( `Region_id` int, `Region_code` text, `Region_name` text, PRIMARY KEY (""Region_id"") );  CREATE TABLE `affected_region` ( `Region_id` int, `Storm_ID` int, `Number_city_affected` real, PRIMARY KEY (`Region_id`,`Storm_ID`), FOREIGN KEY (`Region_id`) REFERENCES `region`(`Region_id`), FOREIGN KEY (`Storm_ID`) REFERENCES `storm`(`Storm_ID`) );  ",hard,1030.0
28,26,2170,academic,"SELECT t1.name FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t3.title  =  ""Making database systems usable"";","return me the authors of "" Making database systems usable "" .","PRAGMA foreign_keys = ON; CREATE TABLE ""author"" ( ""aid"" int, ""homepage"" text, ""name"" text, ""oid"" int, primary key(""aid"") ); CREATE TABLE ""conference"" ( ""cid"" int, ""homepage"" text, ""name"" text, primary key (""cid"") ); CREATE TABLE ""domain"" ( ""did"" int, ""name"" text, primary key (""did"") ); CREATE TABLE ""domain_author"" ( ""aid"" int,  ""did"" int, primary key (""did"", ""aid""), foreign key(""aid"") references `author`(""aid""), foreign key(""did"") references `domain`(""did"") );  CREATE TABLE ""domain_conference"" ( ""cid"" int, ""did"" int, primary key (""did"", ""cid""), foreign key(""cid"") references `conference`(""cid""), foreign key(""did"") references `domain`(""did"") ); CREATE TABLE ""journal"" ( ""homepage"" text, ""jid"" int, ""name"" text, primary key(""jid"") ); CREATE TABLE ""domain_journal"" ( ""did"" int, ""jid"" int, primary key (""did"", ""jid""), foreign key(""jid"") references ""journal""(""jid""), foreign key(""did"") references ""domain""(""did"") ); CREATE TABLE ""keyword"" ( ""keyword"" text, ""kid"" int, primary key(""kid"") ); CREATE TABLE ""domain_keyword"" ( ""did"" int, ""kid"" int, primary key (""did"", ""kid""), foreign key(""kid"") references ""keyword""(""kid""), foreign key(""did"") references ""domain""(""did"") ); CREATE TABLE ""publication"" ( ""abstract"" text, ""cid"" text, ""citation_num"" int, ""jid"" int, ""pid"" int, ""reference_num"" int, ""title"" text, ""year"" int, primary key(""pid""), foreign key(""jid"") references ""journal""(""jid""), foreign key(""cid"") references ""conference""(""cid"") ); CREATE TABLE ""domain_publication"" ( ""did"" int, ""pid"" int, primary key (""did"", ""pid""), foreign key(""pid"") references ""publication""(""pid""), foreign key(""did"") references ""domain""(""did"") );  CREATE TABLE ""organization"" ( ""continent"" text, ""homepage"" text, ""name"" text, ""oid"" int, primary key(""oid"") );  CREATE TABLE ""publication_keyword"" ( ""pid"" int, ""kid"" int, primary key (""kid"", ""pid""), foreign key(""pid"") references ""publication""(""pid""), foreign key(""kid"") references ""keyword""(""kid"") ); CREATE TABLE ""writes"" ( ""aid"" int, ""pid"" int, primary key (""aid"", ""pid""), foreign key(""pid"") references ""publication""(""pid""), foreign key(""aid"") references ""author""(""aid"") ); CREATE TABLE ""cite"" ( ""cited"" int, ""citing""  int, foreign key(""cited"") references ""publication""(""pid""), foreign key(""citing"") references ""publication""(""pid"") );",hard,531.0
29,27,5347,music_1,"SELECT artist_name FROM artist WHERE country  =  ""UK"" INTERSECT SELECT artist_name FROM song WHERE languages  =  ""english""",Find the names of the artists who are from UK and have produced English songs.," --data definition  create table genre( 	g_name varchar2(20) not null, 	rating varchar2(10), 	most_popular_in varchar2(50), 	primary key(g_name) );  create table artist( 	artist_name varchar2(50) not null, 	country varchar2(20), 	gender varchar2(20), 	preferred_genre varchar2(50), 	constraint a_name primary key(artist_name), 	foreign key(preferred_genre) references genre(g_name) ON DELETE CASCADE );  create table files( 	f_id number(10) not null, 	artist_name varchar2(50), 	file_size varchar2(20), 	duration varchar2(20), 	formats varchar2(20), 	primary key(f_id), 	foreign key(artist_name) references artist(artist_name) ON DELETE CASCADE );   create table song( 	song_name varchar2(50), 	artist_name varchar2(50), 	country varchar2(20), 	f_id number(10),     	genre_is varchar2(20), 	rating number(10) check(rating>0 and rating<11), 	languages varchar2(20), 	releasedate Date,  	resolution number(10) not null, 	constraint s_name primary key(song_name), 	foreign key(artist_name) references artist(artist_name) ON DELETE CASCADE, 	foreign key(f_id) references files(f_id) ON DELETE CASCADE, 	foreign key(genre_is) references genre(g_name) ON DELETE CASCADE );   --insertion of attributes in the table   ",hard,1138.0
30,28,1446,geo,SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );,what rivers flow through the largest state,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );",hard,372.0
31,29,7681,cre_Theme_park,"SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  ""walk"" OR  T2.How_to_Get_There  =  ""bus""",What are the details of the markets that can be accessed by walk or bus?,"PRAGMA foreign_keys = ON; CREATE TABLE Ref_Hotel_Star_Ratings ( star_rating_code CHAR(15) NOT NULL, star_rating_description VARCHAR(80), PRIMARY KEY (star_rating_code), UNIQUE (star_rating_code) );   CREATE TABLE Locations ( Location_ID INTEGER NOT NULL, Location_Name VARCHAR(255), Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Location_ID) ); CREATE TABLE Ref_Attraction_Types ( Attraction_Type_Code CHAR(15) NOT NULL, Attraction_Type_Description VARCHAR(255), PRIMARY KEY (Attraction_Type_Code), UNIQUE (Attraction_Type_Code) );  CREATE TABLE Visitors ( Tourist_ID INTEGER NOT NULL, Tourist_Details VARCHAR(255), PRIMARY KEY (Tourist_ID), UNIQUE (Tourist_ID) ); CREATE TABLE Features ( Feature_ID INTEGER NOT NULL, Feature_Details VARCHAR(255), PRIMARY KEY (Feature_ID) );  CREATE TABLE Hotels ( hotel_id INTEGER NOT NULL, star_rating_code CHAR(15) NOT NULL, pets_allowed_yn CHAR(1), price_range real, other_hotel_details VARCHAR(255), PRIMARY KEY (hotel_id), FOREIGN KEY (star_rating_code) REFERENCES Ref_Hotel_Star_Ratings (star_rating_code) );  CREATE TABLE Tourist_Attractions ( Tourist_Attraction_ID INTEGER NOT NULL, Attraction_Type_Code CHAR(15) NOT NULL, Location_ID INTEGER NOT NULL, How_to_Get_There VARCHAR(255), Name VARCHAR(255), Description VARCHAR(255), Opening_Hours VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Tourist_Attraction_ID), FOREIGN KEY (Location_ID) REFERENCES Locations (Location_ID), FOREIGN KEY (Attraction_Type_Code) REFERENCES Ref_Attraction_Types (Attraction_Type_Code) );  CREATE TABLE Street_Markets ( Market_ID INTEGER NOT NULL, Market_Details VARCHAR(255), PRIMARY KEY (Market_ID), FOREIGN KEY (Market_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Shops ( Shop_ID INTEGER NOT NULL, Shop_Details VARCHAR(255), PRIMARY KEY (Shop_ID), FOREIGN KEY (Shop_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Museums ( Museum_ID INTEGER NOT NULL, Museum_Details VARCHAR(255), PRIMARY KEY (Museum_ID), FOREIGN KEY (Museum_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Royal_Family ( Royal_Family_ID INTEGER NOT NULL, Royal_Family_Details VARCHAR(255), PRIMARY KEY (Royal_Family_ID), FOREIGN KEY (Royal_Family_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Theme_Parks ( Theme_Park_ID INTEGER NOT NULL, Theme_Park_Details VARCHAR(255), PRIMARY KEY (Theme_Park_ID), FOREIGN KEY (Theme_Park_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) );   CREATE TABLE Visits ( Visit_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Tourist_ID INTEGER NOT NULL, Visit_Date DATETIME NOT NULL, Visit_Details VARCHAR(40) NOT NULL, PRIMARY KEY (Visit_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID), FOREIGN KEY (Tourist_ID) REFERENCES Visitors (Tourist_ID) );   CREATE TABLE Photos ( Photo_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Name VARCHAR(255), Description VARCHAR(255), Filename VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Photo_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Staff ( Staff_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Name VARCHAR(40), Other_Details VARCHAR(255), PRIMARY KEY (Staff_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) );   CREATE TABLE Tourist_Attraction_Features ( Tourist_Attraction_ID INTEGER NOT NULL, Feature_ID INTEGER NOT NULL, PRIMARY KEY (Tourist_Attraction_ID, Feature_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID), FOREIGN KEY (Feature_ID) REFERENCES Features (Feature_ID) ); ",hard,1681.0
32,30,1200,geo,SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );,what is the biggest city in the usa,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );",hard,241.0
33,31,1814,scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""character recognition"" AND t3.year  <  2010;",character recognition papers earlier than 2010,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); ",hard,464.0
34,32,6538,department_store,SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1,Return the id of the department with the fewest staff assignments.,"PRAGMA foreign_keys = ON; CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `address_details` VARCHAR(255) );   INSERT INTO Addresses (`address_id`, `address_details`) VALUES (1, '28481 Crist Circle East Burdettestad, IA 21232'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (2, '0292 Mitchel Pike Port Abefurt, IA 84402-4249'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (3, '4062 Mante Place West Lindsey, DE 76199-8015'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (4, '99666 Julie Junction Marvinburgh, OH 16085-1623'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (5, '195 Mara Rue Jenkinsmouth, OK 22345'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (6, '11784 Stehr Road Port Isaac, NV 61159'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (7, '69482 Renner Ville Suite 653 Langworthborough, OH 95195'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (8, '36594 O''Keefe Lock New Cali, RI 42319'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (9, '7181 Wuckert Port Apt. 571 Lake Zariaburgh, IL 98085'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (10, '92594 Marvin Trafficway Pourosfurt, IA 98649'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (11, '0258 Kessler Mountains Suite 688 Mooreside, ME 41586-5022'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (12, '69275 Mose Drive Wilkinsonstad, CO 79055-7622'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (13, '8207 Morissette Lakes East Rheaview, ID 47493'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (14, '145 Alice Corners Willmsport, NV 36680'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (15, '521 Molly Harbors Apt. 567 Reingerland, HI 97099-1005');  CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `staff_gender` VARCHAR(1), `staff_name` VARCHAR(80) );  CREATE TABLE `Suppliers` ( `supplier_id` INTEGER PRIMARY KEY, `supplier_name` VARCHAR(80), `supplier_phone` VARCHAR(80) );  CREATE TABLE `Department_Store_Chain` ( `dept_store_chain_id` INTEGER PRIMARY KEY, `dept_store_chain_name` VARCHAR(80) );  CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `payment_method_code` VARCHAR(10) NOT NULL, `customer_code` VARCHAR(20), `customer_name` VARCHAR(80), `customer_address` VARCHAR(255), `customer_phone` VARCHAR(80), `customer_email` VARCHAR(80) ); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (1, 'Credit Card', '401', 'Ahmed', '75099 Tremblay Port Apt. 163 South Norrisland, SC 80546', '254-072-4068x33935', 'margarett.vonrueden@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (2, 'Credit Card', '665', 'Chauncey', '8408 Lindsay Court East Dasiabury, IL 72656-3552', '+41(8)1897032009', 'stiedemann.sigrid@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (3, 'Direct Debit', '844', 'Lukas', '7162 Rodolfo Knoll Apt. 502 Lake Annalise, TN 35791-8871', '197-417-3557', 'joelle.monahan@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (4, 'Direct Debit', '662', 'Lexus', '9581 Will Flat Suite 272 East Cathryn, WY 30751-4404', '+08(3)8056580281', 'gbrekke@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (5, 'Credit Card', '848', 'Tara', '5065 Mraz Fields Apt. 041 East Chris, NH 41624', '1-064-498-6609x051', 'nicholas44@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (6, 'Credit Card', '916', 'Jon', '841 Goyette Unions South Dionbury, NC 62021', '(443)013-3112x528', 'cconroy@example.net'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (7, 'Credit Card', '172', 'Cristobal', '8327 Christiansen Lakes Suite 409 Schneiderland, IA 93624', '877-150-8674x63517', 'shawna.cummerata@example.net'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (8, 'Direct Debit', '927', 'Adah', '5049 Hand Land Coymouth, IL 97300-7731', '1-695-364-7586x59256', 'kathlyn24@example.org'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (9, 'Credit Card', '808', 'Yasmeen', '3558 Witting Meadow Apt. 483 Lake Moriahbury, OH 91556-2122', '587.398.2400x31176', 'ludwig54@example.net'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (10, 'Credit Card', '887', 'Karson', '7308 Joan Lake Suite 346 Lizethtown, DE 56522', '857-844-9339x40140', 'moriah91@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (11, 'Direct Debit', '611', 'Cordell', '362 Fisher Forge Apt. 900 New Mckenna, CA 98525-5674', '(730)934-8249', 'qstokes@example.org'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (12, 'Credit Card', '182', 'Darron', '84445 Elinor Glens Port Zita, SD 39410', '117.822.3577', 'gwisozk@example.net'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (13, 'Credit Card', '589', 'Kenya', '338 Floy Mountains Suite 589 Yesseniaville, TN 60847', '08023680831', 'maxime86@example.net'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (14, 'Direct Debit', '240', 'Abbie', '983 Elinore Passage Darrionborough, SC 53915-0479', '07594320656', 'celine.bogan@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (15, 'Credit Card', '980', 'Lyric', '649 Ocie Lights Wyatttown, UT 12697', '1-472-036-0434', 'schultz.arnoldo@example.net');   CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_type_code` VARCHAR(10) NOT NULL, `product_name` VARCHAR(80), `product_price` DECIMAL(19,4) ); CREATE TABLE `Supplier_Addresses` ( `supplier_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_from` DATETIME NOT NULL, `date_to` DATETIME, PRIMARY KEY (`supplier_id`, `address_id`), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`supplier_id` ) REFERENCES `Suppliers`(`supplier_id` ) );  CREATE TABLE `Customer_Addresses` ( `customer_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_from` DATETIME NOT NULL, `date_to` DATETIME, PRIMARY KEY (`customer_id`, `address_id`), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) );   CREATE TABLE `Customer_Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `order_status_code` VARCHAR(10) NOT NULL, `order_date` DATETIME NOT NULL, FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) );  CREATE TABLE `Department_Stores` ( `dept_store_id` INTEGER PRIMARY KEY, `dept_store_chain_id` INTEGER, `store_name` VARCHAR(80), `store_address` VARCHAR(255), `store_phone` VARCHAR(80), `store_email` VARCHAR(80), FOREIGN KEY (`dept_store_chain_id` ) REFERENCES `Department_Store_Chain`(`dept_store_chain_id` ) );   INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (1, 1, 'store_name', '01290 Jeremie Parkway Suite 753 North Arielle, MS 51249', '(948)944-5099x2027', 'bmaggio@example.com'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (2, 3, 'store_name', '082 Purdy Expressway O''Connellshire, IL 31732', '877-917-5029', 'larissa10@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (3, 4, 'store_name', '994 Travis Plains North Wadeton, WV 27575-3951', '1-216-312-0375', 'alexandro.mcclure@example.net'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (4, 2, 'store_name', '93472 Mayert Shore Apt. 360 Mitchellton, TN 84209', '670-466-6367', 'bryon24@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (5, 3, 'store_name', '88112 Parisian Lights Sporermouth, MN 25962', '01399327266', 'creola23@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (6, 4, 'store_name', '49708 Marcella Valleys Suite 181 Ninamouth, WA 86667', '1-859-843-1957', 'jerod.reynolds@example.net'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (7, 4, 'store_name', '41924 Alfredo Cliff New Eviestad, NY 17573', '1-109-872-9142x77078', 'ihamill@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (8, 4, 'store_name', '7081 Shanna Cape West Zacheryshire, NC 17408', '+67(5)4983519062', 'casper.adolfo@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (9, 4, 'store_name', '5288 Kaia Street Devonton, NJ 61782-9006', '(723)503-7086x356', 'selmer.stiedemann@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (10, 3, 'store_name', '00578 Lisa Gateway Suite 476 Strosinville, VA 03998-3292', '07126036440', 'luisa57@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (11, 2, 'store_name', '34894 Everett Road South Jeremiehaven, GA 08730', '611-037-9309', 'vonrueden.vern@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (12, 4, 'store_name', '2676 Cruickshank Gardens North Ginahaven, CT 85046', '(626)763-7031', 'freda.toy@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (13, 2, 'store_name', '29297 West Road Suite 210 West Dulceside, UT 58085-8998', '1-764-126-7567x0795', 'katlynn62@example.com'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (14, 1, 'store_name', '16650 Lysanne River Apt. 281 North Garettton, AL 84756-4375', '319.331.3397', 'mohr.elwin@example.net'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (15, 3, 'store_name', '82470 Hansen Squares Suite 190 Wehnermouth, NC 76791', '(587)993-3604x3077', 'kelly30@example.com');   CREATE TABLE `Departments` ( `department_id` INTEGER PRIMARY KEY, `dept_store_id` INTEGER NOT NULL, `department_name` VARCHAR(80), FOREIGN KEY (`dept_store_id` ) REFERENCES `Department_Stores`(`dept_store_id` ) ); CREATE TABLE `Order_Items` ( `order_item_id` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) ); CREATE TABLE `Product_Suppliers` ( `product_id` INTEGER NOT NULL, `supplier_id` INTEGER NOT NULL, `date_supplied_from` DATETIME NOT NULL, `date_supplied_to` DATETIME, `total_amount_purchased` VARCHAR(80), `total_value_purchased` DECIMAL(19,4), PRIMARY KEY (`product_id`, `supplier_id`), FOREIGN KEY (`supplier_id` ) REFERENCES `Suppliers`(`supplier_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) );   CREATE TABLE `Staff_Department_Assignments` ( `staff_id` INTEGER NOT NULL, `department_id` INTEGER NOT NULL, `date_assigned_from` DATETIME NOT NULL, `job_title_code` VARCHAR(10) NOT NULL, `date_assigned_to` DATETIME, PRIMARY KEY (`staff_id`, `department_id`), FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` ), FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ) );  ",hard,1429.0
35,33,6095,club_1,"SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  ""Bootup Baltimore"" AND t3.age  >  18","Count the number of members in club ""Bootup Baltimore"" whose age is above 18.","create table Student (          StuID        INTEGER PRIMARY KEY,          LName        VARCHAR(12),          Fname        VARCHAR(12),          Age      INTEGER,          Sex      VARCHAR(1),          Major        INTEGER,          Advisor      INTEGER,          city_code    VARCHAR(3)   );   create table Club (        ClubID           INTEGER PRIMARY KEY,        ClubName         VARCHAR(40),        ClubDesc         VARCHAR(1024),        ClubLocation VARCHAR(40) );  create table Member_of_club (        StuID            INTEGER,        ClubID           INTEGER,        Position     VARCHAR(40),        FOREIGN KEY(StuID) REFERENCES Student(StuID),        FOREIGN KEY(ClubID) REFERENCES Club(ClubID) );   teach kids and adults about computer basics.', 'AKW'); ",hard,1317.0
36,34,636,tvshow,SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey',What are the countries that are not playing cartoons written by Todd Casey?,"PRAGMA foreign_keys=ON; BEGIN TRANSACTION;  CREATE TABLE IF NOT EXISTS ""TV_Channel"" ( ""id"" text, ""series_name"" text, ""Country"" text, ""Language"" text, ""Content"" text, ""Pixel_aspect_ratio_PAR"" text, ""Hight_definition_TV"" text, ""Pay_per_view_PPV"" text, ""Package_Option"" text, PRIMARY KEY (""id"") );  CREATE TABLE IF NOT EXISTS ""TV_series"" ( ""id"" real, ""Episode"" text, ""Air_Date"" text, ""Rating"" text, ""Share"" real, ""18_49_Rating_Share"" text, ""Viewers_m"" text, ""Weekly_Rank"" real, ""Channel"" text, PRIMARY KEY (""id""), FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`) );  CREATE TABLE IF NOT EXISTS ""Cartoon"" ( ""id"" real, ""Title"" text, ""Directed_by"" text, ""Written_by"" text, ""Original_air_date"" text, ""Production_code"" real, ""Channel"" text, PRIMARY KEY (""id""), FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`) );   COMMIT;",hard,102.0
37,35,6553,department_store,"SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.date_assigned_from LIKE ""2016%""",Return the name and gender of the staff who was assigned in 2016.,"PRAGMA foreign_keys = ON; CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `address_details` VARCHAR(255) );   INSERT INTO Addresses (`address_id`, `address_details`) VALUES (1, '28481 Crist Circle East Burdettestad, IA 21232'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (2, '0292 Mitchel Pike Port Abefurt, IA 84402-4249'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (3, '4062 Mante Place West Lindsey, DE 76199-8015'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (4, '99666 Julie Junction Marvinburgh, OH 16085-1623'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (5, '195 Mara Rue Jenkinsmouth, OK 22345'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (6, '11784 Stehr Road Port Isaac, NV 61159'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (7, '69482 Renner Ville Suite 653 Langworthborough, OH 95195'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (8, '36594 O''Keefe Lock New Cali, RI 42319'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (9, '7181 Wuckert Port Apt. 571 Lake Zariaburgh, IL 98085'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (10, '92594 Marvin Trafficway Pourosfurt, IA 98649'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (11, '0258 Kessler Mountains Suite 688 Mooreside, ME 41586-5022'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (12, '69275 Mose Drive Wilkinsonstad, CO 79055-7622'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (13, '8207 Morissette Lakes East Rheaview, ID 47493'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (14, '145 Alice Corners Willmsport, NV 36680'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (15, '521 Molly Harbors Apt. 567 Reingerland, HI 97099-1005');  CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `staff_gender` VARCHAR(1), `staff_name` VARCHAR(80) );  CREATE TABLE `Suppliers` ( `supplier_id` INTEGER PRIMARY KEY, `supplier_name` VARCHAR(80), `supplier_phone` VARCHAR(80) );  CREATE TABLE `Department_Store_Chain` ( `dept_store_chain_id` INTEGER PRIMARY KEY, `dept_store_chain_name` VARCHAR(80) );  CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `payment_method_code` VARCHAR(10) NOT NULL, `customer_code` VARCHAR(20), `customer_name` VARCHAR(80), `customer_address` VARCHAR(255), `customer_phone` VARCHAR(80), `customer_email` VARCHAR(80) ); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (1, 'Credit Card', '401', 'Ahmed', '75099 Tremblay Port Apt. 163 South Norrisland, SC 80546', '254-072-4068x33935', 'margarett.vonrueden@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (2, 'Credit Card', '665', 'Chauncey', '8408 Lindsay Court East Dasiabury, IL 72656-3552', '+41(8)1897032009', 'stiedemann.sigrid@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (3, 'Direct Debit', '844', 'Lukas', '7162 Rodolfo Knoll Apt. 502 Lake Annalise, TN 35791-8871', '197-417-3557', 'joelle.monahan@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (4, 'Direct Debit', '662', 'Lexus', '9581 Will Flat Suite 272 East Cathryn, WY 30751-4404', '+08(3)8056580281', 'gbrekke@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (5, 'Credit Card', '848', 'Tara', '5065 Mraz Fields Apt. 041 East Chris, NH 41624', '1-064-498-6609x051', 'nicholas44@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (6, 'Credit Card', '916', 'Jon', '841 Goyette Unions South Dionbury, NC 62021', '(443)013-3112x528', 'cconroy@example.net'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (7, 'Credit Card', '172', 'Cristobal', '8327 Christiansen Lakes Suite 409 Schneiderland, IA 93624', '877-150-8674x63517', 'shawna.cummerata@example.net'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (8, 'Direct Debit', '927', 'Adah', '5049 Hand Land Coymouth, IL 97300-7731', '1-695-364-7586x59256', 'kathlyn24@example.org'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (9, 'Credit Card', '808', 'Yasmeen', '3558 Witting Meadow Apt. 483 Lake Moriahbury, OH 91556-2122', '587.398.2400x31176', 'ludwig54@example.net'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (10, 'Credit Card', '887', 'Karson', '7308 Joan Lake Suite 346 Lizethtown, DE 56522', '857-844-9339x40140', 'moriah91@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (11, 'Direct Debit', '611', 'Cordell', '362 Fisher Forge Apt. 900 New Mckenna, CA 98525-5674', '(730)934-8249', 'qstokes@example.org'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (12, 'Credit Card', '182', 'Darron', '84445 Elinor Glens Port Zita, SD 39410', '117.822.3577', 'gwisozk@example.net'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (13, 'Credit Card', '589', 'Kenya', '338 Floy Mountains Suite 589 Yesseniaville, TN 60847', '08023680831', 'maxime86@example.net'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (14, 'Direct Debit', '240', 'Abbie', '983 Elinore Passage Darrionborough, SC 53915-0479', '07594320656', 'celine.bogan@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (15, 'Credit Card', '980', 'Lyric', '649 Ocie Lights Wyatttown, UT 12697', '1-472-036-0434', 'schultz.arnoldo@example.net');   CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_type_code` VARCHAR(10) NOT NULL, `product_name` VARCHAR(80), `product_price` DECIMAL(19,4) ); CREATE TABLE `Supplier_Addresses` ( `supplier_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_from` DATETIME NOT NULL, `date_to` DATETIME, PRIMARY KEY (`supplier_id`, `address_id`), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`supplier_id` ) REFERENCES `Suppliers`(`supplier_id` ) );  CREATE TABLE `Customer_Addresses` ( `customer_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_from` DATETIME NOT NULL, `date_to` DATETIME, PRIMARY KEY (`customer_id`, `address_id`), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) );   CREATE TABLE `Customer_Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `order_status_code` VARCHAR(10) NOT NULL, `order_date` DATETIME NOT NULL, FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) );  CREATE TABLE `Department_Stores` ( `dept_store_id` INTEGER PRIMARY KEY, `dept_store_chain_id` INTEGER, `store_name` VARCHAR(80), `store_address` VARCHAR(255), `store_phone` VARCHAR(80), `store_email` VARCHAR(80), FOREIGN KEY (`dept_store_chain_id` ) REFERENCES `Department_Store_Chain`(`dept_store_chain_id` ) );   INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (1, 1, 'store_name', '01290 Jeremie Parkway Suite 753 North Arielle, MS 51249', '(948)944-5099x2027', 'bmaggio@example.com'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (2, 3, 'store_name', '082 Purdy Expressway O''Connellshire, IL 31732', '877-917-5029', 'larissa10@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (3, 4, 'store_name', '994 Travis Plains North Wadeton, WV 27575-3951', '1-216-312-0375', 'alexandro.mcclure@example.net'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (4, 2, 'store_name', '93472 Mayert Shore Apt. 360 Mitchellton, TN 84209', '670-466-6367', 'bryon24@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (5, 3, 'store_name', '88112 Parisian Lights Sporermouth, MN 25962', '01399327266', 'creola23@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (6, 4, 'store_name', '49708 Marcella Valleys Suite 181 Ninamouth, WA 86667', '1-859-843-1957', 'jerod.reynolds@example.net'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (7, 4, 'store_name', '41924 Alfredo Cliff New Eviestad, NY 17573', '1-109-872-9142x77078', 'ihamill@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (8, 4, 'store_name', '7081 Shanna Cape West Zacheryshire, NC 17408', '+67(5)4983519062', 'casper.adolfo@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (9, 4, 'store_name', '5288 Kaia Street Devonton, NJ 61782-9006', '(723)503-7086x356', 'selmer.stiedemann@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (10, 3, 'store_name', '00578 Lisa Gateway Suite 476 Strosinville, VA 03998-3292', '07126036440', 'luisa57@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (11, 2, 'store_name', '34894 Everett Road South Jeremiehaven, GA 08730', '611-037-9309', 'vonrueden.vern@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (12, 4, 'store_name', '2676 Cruickshank Gardens North Ginahaven, CT 85046', '(626)763-7031', 'freda.toy@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (13, 2, 'store_name', '29297 West Road Suite 210 West Dulceside, UT 58085-8998', '1-764-126-7567x0795', 'katlynn62@example.com'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (14, 1, 'store_name', '16650 Lysanne River Apt. 281 North Garettton, AL 84756-4375', '319.331.3397', 'mohr.elwin@example.net'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (15, 3, 'store_name', '82470 Hansen Squares Suite 190 Wehnermouth, NC 76791', '(587)993-3604x3077', 'kelly30@example.com');   CREATE TABLE `Departments` ( `department_id` INTEGER PRIMARY KEY, `dept_store_id` INTEGER NOT NULL, `department_name` VARCHAR(80), FOREIGN KEY (`dept_store_id` ) REFERENCES `Department_Stores`(`dept_store_id` ) ); CREATE TABLE `Order_Items` ( `order_item_id` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) ); CREATE TABLE `Product_Suppliers` ( `product_id` INTEGER NOT NULL, `supplier_id` INTEGER NOT NULL, `date_supplied_from` DATETIME NOT NULL, `date_supplied_to` DATETIME, `total_amount_purchased` VARCHAR(80), `total_value_purchased` DECIMAL(19,4), PRIMARY KEY (`product_id`, `supplier_id`), FOREIGN KEY (`supplier_id` ) REFERENCES `Suppliers`(`supplier_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) );   CREATE TABLE `Staff_Department_Assignments` ( `staff_id` INTEGER NOT NULL, `department_id` INTEGER NOT NULL, `date_assigned_from` DATETIME NOT NULL, `job_title_code` VARCHAR(10) NOT NULL, `date_assigned_to` DATETIME, PRIMARY KEY (`staff_id`, `department_id`), FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` ), FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ) );  ",hard,1438.0
38,36,10,concert_singer,"SELECT country ,  count(*) FROM singer GROUP BY country",Show all countries and the number of singers in each country.,"PRAGMA foreign_keys = ON;   CREATE TABLE ""stadium"" ( ""Stadium_ID"" int, ""Location"" text, ""Name"" text, ""Capacity"" int, ""Highest"" int, ""Lowest"" int, ""Average"" int, PRIMARY KEY (""Stadium_ID"") );   CREATE TABLE ""singer"" ( ""Singer_ID"" int, ""Name"" text, ""Country"" text, ""Song_Name"" text, ""Song_release_year"" text, ""Age"" int, ""Is_male"" bool, PRIMARY KEY (""Singer_ID"") );    CREATE TABLE ""concert"" ( ""concert_ID"" int, ""concert_Name"" text, ""Theme"" text, ""Stadium_ID"" text, ""Year"" text, PRIMARY KEY (""concert_ID""), FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"") );    CREATE TABLE ""singer_in_concert"" ( ""concert_ID"" int, ""Singer_ID"" text, PRIMARY KEY (""concert_ID"",""Singer_ID""), FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""), FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"") );  ",medium,6.0
39,37,4400,csu_1,"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2004 AND T2.campus  =  ""San Francisco State University""","How many faculty lines are there in ""San Francisco State University"" in year 2004?","CREATE TABLE ""Campuses"" ( 	""Id"" INTEGER PRIMARY KEY,  	""Campus"" TEXT,  	""Location"" TEXT,  	""County"" TEXT,  	""Year"" INTEGER  );  CREATE TABLE ""csu_fees"" (  	""Campus"" INTEGER PRIMARY KEY,  	""Year"" INTEGER,  	""CampusFee"" INTEGER, 	FOREIGN KEY (Campus) REFERENCES Campuses(Id) );  CREATE TABLE ""degrees"" (  	""Year"" INTEGER, 	""Campus"" INTEGER,  	""Degrees"" INTEGER, 	PRIMARY KEY (Year, Campus), 	FOREIGN KEY (Campus) REFERENCES Campuses(Id) );    CREATE TABLE ""discipline_enrollments"" (  	""Campus"" INTEGER,  	""Discipline"" INTEGER,  	""Year"" INTEGER,  	""Undergraduate"" INTEGER,  	""Graduate"" INTEGER, 	PRIMARY KEY (Campus, Discipline), 	FOREIGN KEY (Campus) REFERENCES Campuses(Id) );    CREATE TABLE ""enrollments"" (  	""Campus"" INTEGER,  	""Year"" INTEGER,  	""TotalEnrollment_AY"" INTEGER,  	""FTE_AY"" INTEGER, 	PRIMARY KEY(Campus, Year), 	FOREIGN KEY (Campus) REFERENCES Campuses(Id) );  CREATE TABLE ""faculty"" (  	""Campus"" INTEGER,  	""Year"" INTEGER,  	""Faculty"" REAL, 	FOREIGN KEY (Campus) REFERENCES Campuses(Id)  );  ",medium,1403.0
40,38,4201,formula_1,"SELECT forename ,  surname FROM drivers WHERE nationality = ""German""",Find the forename and surname of drivers whose nationality is German?,"BEGIN TRANSACTION; CREATE TABLE IF NOT EXISTS ""circuits"" ( ""circuitId"" INTEGER PRIMARY KEY,   ""circuitRef"" TEXT,   ""name"" TEXT,   ""location"" TEXT,   ""country"" TEXT,   ""lat"" REAL,   ""lng"" REAL,   ""alt"" INTEGER,   ""url"" TEXT ); CREATE TABLE IF NOT EXISTS ""races"" ( ""raceId"" INTEGER PRIMARY KEY,   ""year"" INTEGER,   ""round"" INTEGER,   ""circuitId"" INTEGER,   ""name"" TEXT,   ""date"" TEXT,   ""time"" TEXT,   ""url"" TEXT,   FOREIGN KEY (""circuitId"") REFERENCES ""circuits""(""circuitId"") );  CREATE TABLE IF NOT EXISTS ""drivers"" ( ""driverId"" INTEGER PRIMARY KEY,   ""driverRef"" TEXT,   ""number"" INTEGER,   ""code"" TEXT,   ""forename"" TEXT,   ""surname"" TEXT,   ""dob"" TEXT,   ""nationality"" TEXT,   ""url"" TEXT ); CREATE TABLE IF NOT EXISTS ""status"" ( ""statusId"" INTEGER PRIMARY KEY,   ""status"" TEXT ); CREATE TABLE IF NOT EXISTS ""seasons"" ( ""year"" INTEGER PRIMARY KEY,   ""url"" TEXT ); CREATE TABLE IF NOT EXISTS ""constructors"" ( 	""constructorId"" INTEGER PRIMARY KEY,   ""constructorRef"" TEXT,   ""name"" TEXT,   ""nationality"" TEXT,   ""url"" TEXT ); CREATE TABLE IF NOT EXISTS ""constructorStandings"" ( 	""constructorStandingsId"" INTEGER PRIMARY KEY,   ""raceId"" INTEGER,   ""constructorId"" INTEGER,   ""points"" REAL,   ""position"" INTEGER,   ""positionText"" TEXT,   ""wins"" INTEGER,   FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),   FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId"") ); CREATE TABLE IF NOT EXISTS ""results"" ( ""resultId"" INTEGER PRIMARY KEY,   ""raceId"" INTEGER,   ""driverId"" INTEGER,   ""constructorId"" INTEGER,   ""number"" INTEGER,   ""grid"" INTEGER,   ""position"" INTEGER,   ""positionText"" TEXT,   ""positionOrder"" INTEGER,   ""points"" REAL,   ""laps"" INTEGER,   ""time"" TEXT,   ""milliseconds"" INTEGER,   ""fastestLap"" INTEGER,   ""rank"" INTEGER,   ""fastestLapTime"" TEXT,   ""fastestLapSpeed"" TEXT,   ""statusId"" INTEGER,   FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),   FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),   FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId"") ); CREATE TABLE IF NOT EXISTS ""driverStandings"" ( ""driverStandingsId"" INTEGER PRIMARY KEY,   ""raceId"" INTEGER,   ""driverId"" INTEGER,   ""points"" REAL,   ""position"" INTEGER,   ""positionText"" TEXT,   ""wins"" INTEGER,   FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),   FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId"") ); CREATE TABLE IF NOT EXISTS ""constructorResults"" ( ""constructorResultsId"" INTEGER PRIMARY KEY,   ""raceId"" INTEGER,   ""constructorId"" INTEGER,   ""points"" REAL,   ""status"" REAL,   FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),   FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId"") ); CREATE TABLE IF NOT EXISTS ""qualifying"" ( ""qualifyId"" INTEGER PRIMARY KEY,   ""raceId"" INTEGER,   ""driverId"" INTEGER,   ""constructorId"" INTEGER,   ""number"" INTEGER,   ""position"" INTEGER,   ""q1"" TEXT,   ""q2"" TEXT,   ""q3"" TEXT,   FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),   FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),   FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId"") ); CREATE TABLE IF NOT EXISTS ""pitStops"" ( ""raceId"" INTEGER,   ""driverId"" INTEGER,   ""stop"" INTEGER,   ""lap"" INTEGER,   ""time"" TEXT,   ""duration"" TEXT,   ""milliseconds"" INTEGER,   PRIMARY KEY (""raceId"", ""driverId"", ""stop""),   FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),   FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId"") ); CREATE TABLE IF NOT EXISTS ""lapTimes"" ( ""raceId"" INTEGER,   ""driverId"" INTEGER,   ""lap"" INTEGER,   ""position"" INTEGER,   ""time"" TEXT,   ""milliseconds"" INTEGER,   PRIMARY KEY(""raceId"", ""driverId"", ""lap""),   FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),   FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId"") );COMMIT;",medium,1330.0
41,39,8453,activity_1,"SELECT building FROM Faculty WHERE rank  =  ""Professor"" GROUP BY building HAVING count(*)  >=  10",Show all the buildings that have at least 10 professors.,"create table Activity (   actid INTEGER PRIMARY KEY,   activity_name varchar(25) );  create table Participates_in (   stuid INTEGER,   actid INTEGER,   FOREIGN KEY(stuid) REFERENCES Student(StuID),   FOREIGN KEY(actid) REFERENCES Activity(actid) );  create table Faculty_Participates_in (   FacID INTEGER,   actid INTEGER,   FOREIGN KEY(FacID) REFERENCES Faculty(FacID),   FOREIGN KEY(actid) REFERENCES Activity(actid) );  create table Student (         StuID        INTEGER PRIMARY KEY,         LName        VARCHAR(12),         Fname        VARCHAR(12),         Age      INTEGER,         Sex      VARCHAR(1),         Major        INTEGER,         Advisor      INTEGER,         city_code    VARCHAR(3)  );  create table Faculty (        FacID 	       INTEGER PRIMARY KEY,        Lname		VARCHAR(15),        Fname		VARCHAR(15),        Rank		VARCHAR(15),        Sex		VARCHAR(1),        Phone		INTEGER,        Room		VARCHAR(5),        Building		VARCHAR(13) );   ",medium,2968.0
42,40,6646,local_govt_and_lot,SELECT count(DISTINCT T2.Location_Code) FROM Things AS T1 JOIN Timed_Locations_of_Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.service_details  =  'Unsatisfied',How many distinct locations have the things with service detail 'Unsatisfied' been located in?,"PRAGMA foreign_keys = ON;  CREATE TABLE Customers ( customer_id INTEGER NOT NULL, customer_details VARCHAR(255), PRIMARY KEY (customer_id) ); CREATE TABLE Properties ( property_id INTEGER NOT NULL, property_type_code CHAR(15) NOT NULL, property_address VARCHAR(255), other_details VARCHAR(255), PRIMARY KEY (property_id) ); CREATE TABLE Residents ( resident_id INTEGER NOT NULL, property_id INTEGER NOT NULL, date_moved_in DATETIME NOT NULL, date_moved_out DATETIME NOT NULL, other_details VARCHAR(255), PRIMARY KEY (resident_id, property_id, date_moved_in), FOREIGN KEY (property_id) REFERENCES Properties (property_id) );  CREATE TABLE Organizations ( organization_id INTEGER NOT NULL, parent_organization_id INTEGER, organization_details VARCHAR(255), PRIMARY KEY (organization_id) );  CREATE TABLE Services ( service_id INTEGER NOT NULL, organization_id INTEGER NOT NULL, service_type_code CHAR(15) NOT NULL, service_details VARCHAR(255), PRIMARY KEY (service_id), FOREIGN KEY (organization_id) REFERENCES Organizations (organization_id) ); CREATE TABLE Residents_Services ( resident_id INTEGER NOT NULL, service_id INTEGER NOT NULL, date_moved_in DATETIME, property_id INTEGER, date_requested DATETIME, date_provided DATETIME, other_details VARCHAR(255), PRIMARY KEY (resident_id, service_id), FOREIGN KEY (service_id) REFERENCES Services (service_id), FOREIGN KEY (resident_id, property_id, date_moved_in) REFERENCES Residents (resident_id,property_id,date_moved_in) );  CREATE TABLE Things ( thing_id INTEGER NOT NULL, organization_id INTEGER NOT NULL, Type_of_Thing_Code CHAR(15) NOT NULL, service_type_code CHAR(10) NOT NULL, service_details VARCHAR(255), PRIMARY KEY (thing_id), FOREIGN KEY (organization_id) REFERENCES Organizations (organization_id) ); CREATE TABLE Customer_Events ( Customer_Event_ID INTEGER NOT NULL, customer_id INTEGER, date_moved_in DATETIME, property_id INTEGER, resident_id INTEGER, thing_id INTEGER NOT NULL, PRIMARY KEY (Customer_Event_ID), FOREIGN KEY (thing_id) REFERENCES Things (thing_id), FOREIGN KEY (customer_id) REFERENCES Customers (customer_id), FOREIGN KEY (resident_id, property_id, date_moved_in) REFERENCES Residents (resident_id,property_id,date_moved_in) ); CREATE TABLE Customer_Event_Notes ( Customer_Event_Note_ID INTEGER NOT NULL, Customer_Event_ID INTEGER NOT NULL, service_type_code CHAR(15) NOT NULL, resident_id INTEGER NOT NULL, property_id INTEGER NOT NULL, date_moved_in DATETIME NOT NULL, PRIMARY KEY (Customer_Event_Note_ID), FOREIGN KEY (Customer_Event_ID) REFERENCES Customer_Events (Customer_Event_ID) );  CREATE TABLE Timed_Status_of_Things ( thing_id INTEGER NOT NULL, Date_and_Date DATETIME NOT NULL, Status_of_Thing_Code CHAR(15) NOT NULL, PRIMARY KEY (thing_id, Date_and_Date, Status_of_Thing_Code), FOREIGN KEY (thing_id) REFERENCES Things (thing_id) ); CREATE TABLE Timed_Locations_of_Things ( thing_id INTEGER NOT NULL, Date_and_Time DATETIME NOT NULL, Location_Code CHAR(15) NOT NULL, PRIMARY KEY (thing_id, Date_and_Time, Location_Code), FOREIGN KEY (thing_id) REFERENCES Things (thing_id));   ",medium,2274.0
43,41,698,orchestra,"SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != ""Live final""","Return the maximum and minimum shares for performances that do not have the type ""Live final""."," PRAGMA foreign_keys = ON;    CREATE TABLE ""conductor"" ( ""Conductor_ID"" int, ""Name"" text, ""Age"" int, ""Nationality"" text, ""Year_of_Work"" int, PRIMARY KEY (""Conductor_ID"") );  CREATE TABLE ""orchestra"" ( ""Orchestra_ID"" int, ""Orchestra"" text, ""Conductor_ID"" int, ""Record_Company"" text, ""Year_of_Founded"" real, ""Major_Record_Format"" text, PRIMARY KEY (""Orchestra_ID""), FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`) );  CREATE TABLE ""performance"" ( ""Performance_ID"" int, ""Orchestra_ID"" int, ""Type"" text, ""Date"" text, ""Official_ratings_(millions)"" real, ""Weekly_rank"" text, ""Share"" text, PRIMARY KEY (""Performance_ID""), FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`) );  CREATE TABLE ""show"" ( ""Show_ID"" int, ""Performance_ID"" int, ""If_first_show"" bool, ""Result"" text, ""Attendance"" real, FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`) );    ",medium,297.0
44,42,6285,decoration_competition,"SELECT Leader_Name ,  College_Location FROM college",Show the leader names and locations of colleges.,"PRAGMA foreign_keys = ON;  CREATE TABLE ""college"" ( ""College_ID"" int, ""Name"" text, ""Leader_Name"" text, ""College_Location"" text, PRIMARY KEY (""College_ID"") );    CREATE TABLE ""member"" ( ""Member_ID"" int, ""Name"" text, ""Country"" text, ""College_ID"" int, PRIMARY KEY (""Member_ID""), FOREIGN KEY (""College_ID"") REFERENCES `college`(""College_ID"") );   CREATE TABLE ""round"" ( ""Round_ID"" int, ""Member_ID"" int, ""Decoration_Theme"" text, ""Rank_in_Round"" int, PRIMARY KEY (""Member_ID"",""Round_ID""), FOREIGN KEY (""Member_ID"") REFERENCES ""member""(""Member_ID"") );   ",medium,2142.0
45,43,5004,loan_1,SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1,Find the branch name of the bank that has the most number of customers.,"CREATE TABLE bank ( branch_ID int PRIMARY KEY, bname varchar(20), no_of_customers int, city varchar(10), state varchar(20));   CREATE TABLE customer ( cust_ID varchar(3) PRIMARY KEY, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_ID int, state varchar(20), FOREIGN KEY(branch_ID) REFERENCES bank(branch_ID));   CREATE TABLE loan ( loan_ID varchar(3) PRIMARY KEY, loan_type varchar(15), cust_ID varchar(3), branch_ID varchar(3), amount int, FOREIGN KEY(branch_ID) REFERENCES bank(branch_ID), FOREIGN KEY(Cust_ID) REFERENCES customer(Cust_ID));  ",medium,1649.0
46,44,2931,flight_1,SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3,What are the numbers of the shortest flights?,"-- drop table flight cascade constraints; -- drop table aircraft cascade constraints; -- drop table employee cascade constraints; -- drop table certificate cascade constraints;  create table flight( 	flno number(4,0) primary key, 	origin varchar2(20), 	destination varchar2(20), 	distance number(6,0), 	departure_date date, 	arrival_date date, 	price number(7,2),     aid number(9,0),     foreign key(""aid"") references `aircraft`(""aid""));  create table aircraft( 	aid number(9,0) primary key, 	name varchar2(30), 	distance number(6,0));  create table employee( 	eid number(9,0) primary key, 	name varchar2(30), 	salary number(10,2));  create table certificate( 	eid number(9,0), 	aid number(9,0), 	primary key(eid,aid), 	foreign key(""eid"") references `employee`(""eid""), 	foreign key(""aid"") references `aircraft`(""aid""));   ",medium,783.0
47,45,7737,game_1,"SELECT gtype ,  count(*) FROM Video_games GROUP BY gtype",Show all video game types and the number of video games in each type.,"create table Student (         StuID        INTEGER PRIMARY KEY,         LName        VARCHAR(12),         Fname        VARCHAR(12),         Age      INTEGER,         Sex      VARCHAR(1),         Major        INTEGER,         Advisor      INTEGER,         city_code    VARCHAR(3)  );  create table Video_Games (        GameID           INTEGER PRIMARY KEY,        GName            VARCHAR(40),        GType            VARCHAR(40) );  create table Plays_Games (        StuID                INTEGER,        GameID            INTEGER,        Hours_Played      INTEGER,        FOREIGN KEY(GameID) REFERENCES Video_Games(GameID),        FOREIGN KEY(StuID) REFERENCES Student(StuID) );  create table SportsInfo (   StuID INTEGER,   SportName VARCHAR(32),   HoursPerWeek INTEGER,   GamesPlayed INTEGER,   OnScholarship VARCHAR(1),   FOREIGN KEY(StuID) REFERENCES Student(StuID) );   ",medium,2683.0
48,46,4528,movie_1,"SELECT T2.title ,  T1.rID ,  T1.stars ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.rID",Find the title and star rating of the movie that got the least rating star for each reviewer.,"-- dbext:type=SQLITE:dbname=movie_rating.db  /* Delete the tables if they already exist */ drop table if exists Movie; drop table if exists Reviewer; drop table if exists Rating;  /* Create the schema for our tables */ create table Movie( 	mID int primary key,  	title text,  	year int,  	director text ); create table Reviewer( 	rID int primary key,  	name text);  create table Rating( 	rID int,  	mID int,  	stars int,  	ratingDate date, 	FOREIGN KEY (mID) references Movie(mID), 	FOREIGN KEY (rID) references Reviewer(rID) );  /* Populate the tables with our data */ ",medium,1457.0
49,47,3375,phone_1,"SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE t2.Company_name  =  ""Nokia Corporation"" AND T1.Type != ""Text"";","List the hardware model name for the phons that were produced by ""Nokia Corporation"" but whose screen mode type is not Text.","PRAGMA foreign_keys=ON; BEGIN TRANSACTION; CREATE TABLE IF NOT EXISTS ""chip_model"" ( ""Model_name"" text, ""Launch_year"" real, ""RAM_MiB"" real, ""ROM_MiB"" real, ""Slots"" text, ""WiFi"" text, ""Bluetooth"" text, PRIMARY KEY (""Model_name"") ); CREATE TABLE IF NOT EXISTS ""screen_mode"" ( ""Graphics_mode"" real, ""Char_cells"" text, ""Pixels"" text, ""Hardware_colours"" real, ""used_kb"" real, ""map"" text, ""Type"" text, PRIMARY KEY (""Graphics_mode"") ); CREATE TABLE IF NOT EXISTS ""phone"" ( ""Company_name"" text, ""Hardware_Model_name"" text, ""Accreditation_type"" text, ""Accreditation_level"" text, ""Date"" text, ""chip_model"" text, ""screen_mode"" text, PRIMARY KEY(""Hardware_Model_name""), FOREIGN KEY (`screen_mode`) REFERENCES `screen_mode`(`Graphics_mode`), FOREIGN KEY (`chip_model`) REFERENCES `chip_model`(`Model_name`) ); COMMIT;",medium,957.0
