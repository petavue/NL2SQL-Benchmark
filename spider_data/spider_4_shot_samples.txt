{'geo': [{'question': 'what is the smallest city in the usa', 'sql_query': 'SELECT city_name FROM city WHERE population  =  ( SELECT MIN ( population ) FROM city );', 'db_id': 'geo', 'hardness': 'hard'}, {'question': 'what is the area of the smallest state', 'sql_query': 'SELECT area FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );', 'db_id': 'geo', 'hardness': 'hard'}, {'question': 'name the major lakes in michigan', 'sql_query': 'SELECT lake_name FROM lake WHERE area  >  750 AND state_name  =  "michigan";', 'db_id': 'geo', 'hardness': 'medium'}, {'question': 'what are the populations of states which border texas', 'sql_query': 'SELECT t2.population FROM state AS t2 JOIN border_info AS t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  "texas";', 'db_id': 'geo', 'hardness': 'medium'}], 'cre_Doc_Control_Systems': [{'question': "List the employees who have not showed up in any circulation history of documents. List the employee's name.", 'sql_query': 'SELECT employee_name FROM Employees EXCEPT SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id', 'db_id': 'cre_Doc_Control_Systems', 'hardness': 'hard'}, {'question': 'Which document has the most draft copies? List its document id and number of draft copies.', 'sql_query': 'SELECT document_id , count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT 1;', 'db_id': 'cre_Doc_Control_Systems', 'hardness': 'hard'}, {'question': 'What address was the document with id 4 mailed to?', 'sql_query': 'SELECT Addresses.address_details FROM Addresses JOIN Documents_Mailed ON Documents_Mailed.mailed_to_address_id = Addresses.address_id WHERE document_id = 4;', 'db_id': 'cre_Doc_Control_Systems', 'hardness': 'medium'}, {'question': 'List roles that have more than one employee. List the role description and number of employees.', 'sql_query': 'SELECT Roles.role_description , count(Employees.employee_id) FROM ROLES JOIN Employees ON Employees.role_code = Roles.role_code GROUP BY Employees.role_code HAVING count(Employees.employee_id)  >  1;', 'db_id': 'cre_Doc_Control_Systems', 'hardness': 'medium'}], 'student_transcripts_tracking': [{'question': 'What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?', 'sql_query': "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'", 'db_id': 'student_transcripts_tracking', 'hardness': 'hard'}, {'question': 'What is the name of the semester with no students enrolled?', 'sql_query': 'SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )', 'db_id': 'student_transcripts_tracking', 'hardness': 'hard'}, {'question': 'When was the last transcript released?', 'sql_query': 'SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1', 'db_id': 'student_transcripts_tracking', 'hardness': 'medium'}, {'question': 'Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.', 'sql_query': 'SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2', 'db_id': 'student_transcripts_tracking', 'hardness': 'medium'}], 'product_catalog': [{'question': 'Which catalog publisher has published the most catalogs?', 'sql_query': 'SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1', 'db_id': 'product_catalog', 'hardness': 'hard'}, {'question': 'What is the level name of the cheapest catalog (in USD)?', 'sql_query': 'SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1', 'db_id': 'product_catalog', 'hardness': 'hard'}, {'question': 'Find the names and publication dates of all catalogs that have catalog level number greater than 5.', 'sql_query': 'SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5', 'db_id': 'product_catalog', 'hardness': 'medium'}, {'question': 'Which catalog publishers have substring "Murray" in their names?', 'sql_query': 'SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE "%Murray%"', 'db_id': 'product_catalog', 'hardness': 'medium'}], 'wta_1': [{'question': 'Find the first name, country code and birth date of the winner who has the highest rank points in all matches.', 'sql_query': 'SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1', 'db_id': 'wta_1', 'hardness': 'hard'}, {'question': 'Find the name and rank points of the winner who won the most times.', 'sql_query': 'SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1', 'db_id': 'wta_1', 'hardness': 'hard'}, {'question': 'Find the total number of tours for each ranking date.', 'sql_query': 'SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date', 'db_id': 'wta_1', 'hardness': 'medium'}, {'question': 'What are the first names and birth dates of players from the USA?', 'sql_query': "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'", 'db_id': 'wta_1', 'hardness': 'medium'}], 'insurance_and_eClaims': [{'question': 'Find the names of all the customers and staff members.', 'sql_query': 'SELECT customer_details FROM customers UNION SELECT staff_details FROM staff', 'db_id': 'insurance_and_eClaims', 'hardness': 'hard'}, {'question': 'Find the type code of the most frequently used policy.', 'sql_query': 'SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1', 'db_id': 'insurance_and_eClaims', 'hardness': 'hard'}, {'question': 'Which customers have the substring "Diana" in their names? Return the customer details.', 'sql_query': 'SELECT customer_details FROM customers WHERE customer_details LIKE "%Diana%"', 'db_id': 'insurance_and_eClaims', 'hardness': 'medium'}, {'question': 'For each policy type, return its type code and its count in the record.', 'sql_query': 'SELECT policy_type_code ,  count(*) FROM policies GROUP BY policy_type_code', 'db_id': 'insurance_and_eClaims', 'hardness': 'medium'}], 'document_management': [{'question': 'Find the description of the most popular role among the users that have logged in.', 'sql_query': 'SELECT role_description FROM ROLES WHERE role_code  =  (SELECT role_code FROM users WHERE user_login  =  1 GROUP BY role_code ORDER BY count(*) DESC LIMIT 1)', 'db_id': 'document_management', 'hardness': 'hard'}, {'question': 'What are the names of documents that do not have any sections?', 'sql_query': 'SELECT document_name FROM documents WHERE document_code NOT IN (SELECT document_code FROM document_sections)', 'db_id': 'document_management', 'hardness': 'hard'}, {'question': 'What are the names of all the documents, as well as the access counts of each, ordered alphabetically?', 'sql_query': 'SELECT document_name ,  access_count FROM documents ORDER BY document_name', 'db_id': 'document_management', 'hardness': 'medium'}, {'question': 'List all the image name and URLs in the order of their names.', 'sql_query': 'SELECT image_name ,  image_url FROM images ORDER BY image_name', 'db_id': 'document_management', 'hardness': 'medium'}], 'club_1': [{'question': 'Who is the president of the club "Bootup Baltimore"? Give me the first and last name.', 'sql_query': 'SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  "Bootup Baltimore" AND t2.position  =  "President"', 'db_id': 'club_1', 'hardness': 'hard'}, {'question': 'How many clubs does the student named "Eric Tai" belong to?', 'sql_query': 'SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  "Eric" AND t3.lname  =  "Tai"', 'db_id': 'club_1', 'hardness': 'hard'}, {'question': 'Count the number of different positions in the club "Bootup Baltimore".', 'sql_query': 'SELECT count(DISTINCT t2.position) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid WHERE t1.clubname  =  "Bootup Baltimore"', 'db_id': 'club_1', 'hardness': 'medium'}, {'question': 'How many different roles are there in the club "Bootup Baltimore"?', 'sql_query': 'SELECT count(DISTINCT t2.position) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid WHERE t1.clubname  =  "Bootup Baltimore"', 'db_id': 'club_1', 'hardness': 'medium'}], 'phone_1': [{'question': 'Find the names of the chip models that are not used by any phone with full accreditation type.', 'sql_query': "SELECT model_name FROM chip_model EXCEPT SELECT chip_model FROM phone WHERE Accreditation_type  =  'Full'", 'db_id': 'phone_1', 'hardness': 'hard'}, {'question': 'List the hardware model name for the phones that were produced by "Nokia Corporation" or whose screen mode type is "Graphics."', 'sql_query': 'SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  "Graphics" OR t2.Company_name  =  "Nokia Corporation"', 'db_id': 'phone_1', 'hardness': 'hard'}, {'question': 'What are the chip model and screen mode of the phone with hardware model name "LG-P760"?', 'sql_query': 'SELECT chip_model ,  screen_mode FROM phone WHERE Hardware_Model_name = "LG-P760";', 'db_id': 'phone_1', 'hardness': 'medium'}, {'question': 'What is the average ROM size of phones produced by the company named "Nokia Corporation"?', 'sql_query': 'SELECT avg(T1.ROM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = "Nokia Corporation";', 'db_id': 'phone_1', 'hardness': 'medium'}], 'soccer_2': [{'question': 'Which colleges does each player with a name that starts with the letter D  who tried out go to?', 'sql_query': "SELECT T1.cName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T2.pName LIKE 'D%'", 'db_id': 'soccer_2', 'hardness': 'hard'}, {'question': 'What are the names of the schools with some players in the mid position but no goalies?', 'sql_query': "SELECT cName FROM  tryout WHERE pPos  =  'mid' EXCEPT SELECT cName FROM  tryout WHERE pPos  =  'goalie'", 'db_id': 'soccer_2', 'hardness': 'hard'}, {'question': 'Find the name and hours of the students whose tryout decision is yes.', 'sql_query': "SELECT T1.pName ,  T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'", 'db_id': 'soccer_2', 'hardness': 'medium'}, {'question': "Find the players whose names contain letter 'a'.", 'sql_query': "SELECT DISTINCT pName FROM Player WHERE pName LIKE '%a%'", 'db_id': 'soccer_2', 'hardness': 'medium'}], 'wrestler': [{'question': 'Which reign is the most common among wrestlers?', 'sql_query': 'SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'wrestler', 'hardness': 'hard'}, {'question': 'List the time of elimination of the wrestlers with largest days held.', 'sql_query': 'SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1', 'db_id': 'wrestler', 'hardness': 'hard'}, {'question': 'What are the reigns and days held of all wrestlers?', 'sql_query': 'SELECT Reign ,  Days_held FROM wrestler', 'db_id': 'wrestler', 'hardness': 'medium'}, {'question': 'List the names of wrestlers and the teams in elimination in descending order of days held.', 'sql_query': 'SELECT T2.Name ,  T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC', 'db_id': 'wrestler', 'hardness': 'medium'}], 'race_track': [{'question': 'Return the names of tracks that have no had any races.', 'sql_query': 'SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)', 'db_id': 'race_track', 'hardness': 'hard'}, {'question': 'Show all track names that have had no races.', 'sql_query': 'SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)', 'db_id': 'race_track', 'hardness': 'hard'}, {'question': 'What are the names of different tracks, and how many races has each had?', 'sql_query': 'SELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id', 'db_id': 'race_track', 'hardness': 'medium'}, {'question': 'Show the name and date for each race and its track name.', 'sql_query': 'SELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id', 'db_id': 'race_track', 'hardness': 'medium'}], 'match_season': [{'question': 'What is the position that is most common among players in match seasons?', 'sql_query': 'SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count(*) DESC LIMIT 1', 'db_id': 'match_season', 'hardness': 'hard'}, {'question': 'Return the names of teams that have no match season record.', 'sql_query': 'SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)', 'db_id': 'match_season', 'hardness': 'hard'}, {'question': 'Give the different positions of players who play for the country with the capital Dublin.', 'sql_query': 'SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  "Dublin"', 'db_id': 'match_season', 'hardness': 'medium'}, {'question': 'Show the players and years played for players from team "Columbus Crew".', 'sql_query': 'SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  "Columbus Crew"', 'db_id': 'match_season', 'hardness': 'medium'}], 'dorm_1': [{'question': 'For each dorm, how many amenities does it have?', 'sql_query': 'SELECT count(*) ,  T1.dormid FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid WHERE T1.student_capacity  >  100 GROUP BY T1.dormid', 'db_id': 'dorm_1', 'hardness': 'hard'}, {'question': 'How many female students live in Smith Hall?', 'sql_query': "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'", 'db_id': 'dorm_1', 'hardness': 'hard'}, {'question': 'Find the number of dorms and total capacity for each gender.', 'sql_query': 'SELECT count(*) ,  sum(student_capacity) ,  gender FROM dorm GROUP BY gender', 'db_id': 'dorm_1', 'hardness': 'medium'}, {'question': 'Find the number of students in each major.', 'sql_query': 'SELECT count(*) ,  major FROM student GROUP BY major', 'db_id': 'dorm_1', 'hardness': 'medium'}], 'department_management': [{'question': 'In which year were most departments established?', 'sql_query': 'SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1', 'db_id': 'department_management', 'hardness': 'hard'}, {'question': "What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?", 'sql_query': "SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T3.born_state  =  'Alabama'", 'db_id': 'department_management', 'hardness': 'hard'}, {'question': "Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'?", 'sql_query': "SELECT T1.name ,  T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id WHERE T2.temporary_acting  =  'Yes'", 'db_id': 'department_management', 'hardness': 'medium'}, {'question': 'List the name, born state and age of the heads of departments ordered by age.', 'sql_query': 'SELECT name ,  born_state ,  age FROM head ORDER BY age', 'db_id': 'department_management', 'hardness': 'medium'}], 'cre_Doc_Tracking_DB': [{'question': 'Show the employee ids for all employees with role name "Human Resource" or "Manager".', 'sql_query': 'SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  "Human Resource" OR T2.role_name  =  "Manager"', 'db_id': 'cre_Doc_Tracking_DB', 'hardness': 'hard'}, {'question': 'Which employees do not destroy any document? Find their employee ids.', 'sql_query': 'SELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed', 'db_id': 'cre_Doc_Tracking_DB', 'hardness': 'hard'}, {'question': 'List all document type codes and document type names.', 'sql_query': 'SELECT document_type_code ,  document_type_name FROM Ref_document_types', 'db_id': 'cre_Doc_Tracking_DB', 'hardness': 'medium'}, {'question': 'Give me the name and description of the location with code x.', 'sql_query': 'SELECT location_name ,  location_description FROM Ref_locations WHERE location_code  =  "x"', 'db_id': 'cre_Doc_Tracking_DB', 'hardness': 'medium'}], 'inn_1': [{'question': 'What are the name of rooms booked by customers whose first name has "ROY" in part?', 'sql_query': "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE firstname LIKE '%ROY%'", 'db_id': 'inn_1', 'hardness': 'hard'}, {'question': 'Find the name of rooms booked by some customers whose first name contains ROY.', 'sql_query': "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE firstname LIKE '%ROY%'", 'db_id': 'inn_1', 'hardness': 'hard'}, {'question': 'What are the bed type and name of all the rooms with traditional decor?', 'sql_query': 'SELECT roomName ,  bedType FROM Rooms WHERE decor = "traditional";', 'db_id': 'inn_1', 'hardness': 'medium'}, {'question': 'Find the number of times ROY SWEAZY has reserved a room.', 'sql_query': 'SELECT count(*) FROM Reservations WHERE FirstName = "ROY" AND LastName  =  "SWEAZY";', 'db_id': 'inn_1', 'hardness': 'medium'}], 'customers_and_addresses': [{'question': 'Find the number of distinct products Rodrick Heaney has bought so far.', 'sql_query': 'SELECT count(DISTINCT t3.product_id) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  "Rodrick Heaney"', 'db_id': 'customers_and_addresses', 'hardness': 'hard'}, {'question': 'What are the names of customers using the most popular payment method?', 'sql_query': 'SELECT customer_name FROM customers WHERE payment_method  =  (SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1)', 'db_id': 'customers_and_addresses', 'hardness': 'hard'}, {'question': 'Return the the "active to date" of the latest contact channel used by the customer named "Tillman Ernser".', 'sql_query': 'SELECT max(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  "Tillman Ernser"', 'db_id': 'customers_and_addresses', 'hardness': 'medium'}, {'question': 'Find the state and country of all cities with post code starting with 4.', 'sql_query': 'SELECT state_province_county ,  country FROM addresses WHERE zip_postcode LIKE "4%"', 'db_id': 'customers_and_addresses', 'hardness': 'medium'}], 'customers_card_transactions': [{'question': 'What is the customer id of the customer with the most accounts, and how many accounts does this person have?', 'sql_query': 'SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1', 'db_id': 'customers_card_transactions', 'hardness': 'hard'}, {'question': 'Return the id of the customer who has the most cards, as well as the number of cards.', 'sql_query': 'SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1', 'db_id': 'customers_card_transactions', 'hardness': 'hard'}, {'question': 'Return the number of accounts that the customer with the first name Art and last name Turcotte has.', 'sql_query': 'SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  "Art" AND T2.customer_last_name  =  "Turcotte"', 'db_id': 'customers_card_transactions', 'hardness': 'medium'}, {'question': "Show the date valid from and the date valid to for the card with card number '4560596484842'.", 'sql_query': 'SELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  "4560596484842"', 'db_id': 'customers_card_transactions', 'hardness': 'medium'}], 'cre_Drama_Workshop_Groups': [{'question': 'What are the order dates of orders with price higher than 1000?', 'sql_query': 'SELECT T1.Order_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID JOIN Products AS T3 ON T2.Product_ID  =  T3.Product_ID WHERE T3.Product_price  >  1000', 'db_id': 'cre_Drama_Workshop_Groups', 'hardness': 'hard'}, {'question': 'What are the names of the clients who do not have any booking?', 'sql_query': 'SELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID  =  T2.Client_ID', 'db_id': 'cre_Drama_Workshop_Groups', 'hardness': 'hard'}, {'question': 'Show all payment method codes and the number of orders for each code.', 'sql_query': 'SELECT payment_method_code ,  count(*) FROM INVOICES GROUP BY payment_method_code', 'db_id': 'cre_Drama_Workshop_Groups', 'hardness': 'medium'}, {'question': 'What are the phone and email for customer Harold?', 'sql_query': 'SELECT Customer_Phone ,  Customer_Email_Address FROM CUSTOMERS WHERE Customer_Name  =  "Harold"', 'db_id': 'cre_Drama_Workshop_Groups', 'hardness': 'medium'}], 'baseball_1': [{'question': 'What were all the salary values of players in 2010 and 2001?', 'sql_query': 'SELECT salary FROM salary WHERE YEAR  =  2010 UNION SELECT salary FROM salary WHERE YEAR  =  2001', 'db_id': 'baseball_1', 'hardness': 'hard'}, {'question': 'List the 3 highest salaries of the players in 2001?', 'sql_query': 'SELECT salary FROM salary WHERE YEAR  =  2001 ORDER BY salary DESC LIMIT 3;', 'db_id': 'baseball_1', 'hardness': 'hard'}, {'question': 'For each year, return the year and the average number of attendance at home games.', 'sql_query': 'SELECT YEAR ,  avg(attendance) FROM home_game GROUP BY YEAR;', 'db_id': 'baseball_1', 'hardness': 'medium'}, {'question': 'Find the number of tied games (the value of "ties" is \'1\') in 1885 postseason.', 'sql_query': 'SELECT count(*) FROM postseason WHERE YEAR  =  1885 AND ties  =  1;', 'db_id': 'baseball_1', 'hardness': 'medium'}], 'cre_Theme_park': [{'question': 'What are the names of tourist attractions that can be reached by walk or is at address 660 Shea Crescent?', 'sql_query': 'SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  "660 Shea Crescent" OR T2.How_to_Get_There  =  "walk"', 'db_id': 'cre_Theme_park', 'hardness': 'hard'}, {'question': 'What are the names of tourist attractions that can be reached by bus or is at address 254 Ottilie Junction?', 'sql_query': 'SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  "254 Ottilie Junction" OR T2.How_to_Get_There  =  "bus"', 'db_id': 'cre_Theme_park', 'hardness': 'hard'}, {'question': "Find the visit date and details of the tourist whose detail is 'Vincent'", 'sql_query': 'SELECT T2.Visit_Date ,  T2.Visit_Details FROM VISITORS AS T1 JOIN VISITS AS T2 ON T1.Tourist_ID  =  T2.Tourist_ID WHERE T1.Tourist_Details  =  "Vincent"', 'db_id': 'cre_Theme_park', 'hardness': 'medium'}, {'question': 'Give me the star rating descriptions of the hotels that cost more than 10000.', 'sql_query': 'SELECT T2.star_rating_description FROM HOTELS AS T1 JOIN Ref_Hotel_Star_Ratings AS T2 ON T1.star_rating_code  =  T2.star_rating_code WHERE T1.price_range  >  10000', 'db_id': 'cre_Theme_park', 'hardness': 'medium'}], 'cinema': [{'question': 'Show all the locations where no cinema has capacity over 800.', 'sql_query': 'SELECT LOCATION FROM cinema EXCEPT SELECT LOCATION FROM cinema WHERE capacity  >  800', 'db_id': 'cinema', 'hardness': 'hard'}, {'question': 'Show all the locations where some cinemas were opened in both year 2010 and year 2011.', 'sql_query': 'SELECT LOCATION FROM cinema WHERE openning_year  =  2010 INTERSECT SELECT LOCATION FROM cinema WHERE openning_year  =  2011', 'db_id': 'cinema', 'hardness': 'hard'}, {'question': 'Which locations have 2 or more cinemas with capacity over 300?', 'sql_query': 'SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2', 'db_id': 'cinema', 'hardness': 'medium'}, {'question': 'Find the locations that have more than one movie theater with capacity above 300.', 'sql_query': 'SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1', 'db_id': 'cinema', 'hardness': 'medium'}], 'apartment_rentals': [{'question': 'What are the top three apartment types in terms of the average room count? Give me the', 'sql_query': 'SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 3', 'db_id': 'apartment_rentals', 'hardness': 'hard'}, {'question': 'Show the most common apartment type code.', 'sql_query': 'SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1', 'db_id': 'apartment_rentals', 'hardness': 'hard'}, {'question': 'Show each apartment type code, and the maximum and minimum number of rooms for each type.', 'sql_query': 'SELECT apt_type_code ,  max(room_count) ,  min(room_count) FROM Apartments GROUP BY apt_type_code', 'db_id': 'apartment_rentals', 'hardness': 'medium'}, {'question': 'Return the booking start date and end date for the apartments that have type code "Duplex".', 'sql_query': 'SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_type_code  =  "Duplex"', 'db_id': 'apartment_rentals', 'hardness': 'medium'}], 'station_weather': [{'question': 'Find names and times of trains that run through stations for the local authority Chiltern.', 'sql_query': 'SELECT t3.name ,  t3.time FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id JOIN train AS t3 ON t2.train_id  =  t3.id WHERE t1.local_authority  =  "Chiltern"', 'db_id': 'station_weather', 'hardness': 'hard'}, {'question': 'list the local authorities and services provided by all stations.', 'sql_query': 'SELECT local_authority ,  services FROM station', 'db_id': 'station_weather', 'hardness': 'medium'}, {'question': 'Find the number of trains starting from each origin.', 'sql_query': 'SELECT origin ,  count(*) FROM train GROUP BY origin', 'db_id': 'station_weather', 'hardness': 'medium'}, {'question': 'Give me the times and numbers of all trains that go to Chennai, ordered by time.', 'sql_query': "SELECT TIME ,  train_number FROM train WHERE destination  =  'Chennai' ORDER BY TIME", 'db_id': 'station_weather', 'hardness': 'medium'}], 'local_govt_in_alabama': [{'question': 'What is the id of the event with the most participants?', 'sql_query': 'SELECT Event_ID FROM Participants_in_Events GROUP BY Event_ID ORDER BY count(*) DESC LIMIT 1', 'db_id': 'local_govt_in_alabama', 'hardness': 'hard'}, {'question': "How many events had participants whose details had the substring 'Dr.'", 'sql_query': "SELECT count(*) FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE T1.participant_details LIKE '%Dr.%'", 'db_id': 'local_govt_in_alabama', 'hardness': 'hard'}, {'question': 'How many events have each participants attended? List the participant id, type and the number.', 'sql_query': 'SELECT T1.Participant_ID ,  T1.Participant_Type_Code ,  count(*) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID GROUP BY T1.Participant_ID', 'db_id': 'local_govt_in_alabama', 'hardness': 'medium'}, {'question': 'What are the ids and details of events that have more than one participants?', 'sql_query': 'SELECT T1.event_id ,  T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID  =  T2.Event_ID GROUP BY T1.Event_ID HAVING count(*)  >  1', 'db_id': 'local_govt_in_alabama', 'hardness': 'medium'}], 'game_1': [{'question': 'What are the student ids for those on scholarship in major number 600?', 'sql_query': "SELECT StuID FROM Student WHERE major  =  600 INTERSECT SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y'", 'db_id': 'game_1', 'hardness': 'hard'}, {'question': "Show ids of students who don't play video game.", 'sql_query': 'SELECT StuID FROM Student EXCEPT SELECT StuID FROM Plays_games', 'db_id': 'game_1', 'hardness': 'hard'}, {'question': 'Show all sport name and the number of students.', 'sql_query': 'SELECT sportname ,  count(*) FROM Sportsinfo GROUP BY sportname', 'db_id': 'game_1', 'hardness': 'medium'}, {'question': 'Show all student IDs with the number of sports and total number of games played', 'sql_query': 'SELECT StuID ,  count(*) ,  sum(gamesplayed) FROM Sportsinfo GROUP BY StuID', 'db_id': 'game_1', 'hardness': 'medium'}], 'employee_hire_evaluation': [{'question': 'Find the name of the employee who got the highest one time bonus.', 'sql_query': 'SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1', 'db_id': 'employee_hire_evaluation', 'hardness': 'hard'}, {'question': 'Which employee received the biggest bonus? Give me the employee name.', 'sql_query': 'SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1', 'db_id': 'employee_hire_evaluation', 'hardness': 'hard'}, {'question': 'Which cities do more than one employee under age 30 come from?', 'sql_query': 'SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1', 'db_id': 'employee_hire_evaluation', 'hardness': 'medium'}, {'question': 'find the minimum and maximum number of products of all stores.', 'sql_query': 'SELECT min(Number_products) ,  max(Number_products) FROM shop', 'db_id': 'employee_hire_evaluation', 'hardness': 'medium'}], 'train_station': [{'question': 'Show station names without any trains.', 'sql_query': 'SELECT name FROM station WHERE station_id NOT IN (SELECT station_id FROM train_station)', 'db_id': 'train_station', 'hardness': 'hard'}, {'question': "Show all locations which don't have a train station with at least 15 platforms.", 'sql_query': 'SELECT LOCATION FROM station EXCEPT SELECT LOCATION FROM station WHERE number_of_platforms  >=  15', 'db_id': 'train_station', 'hardness': 'hard'}, {'question': 'Show all locations and the total number of platforms and passengers for all train stations in each location.', 'sql_query': 'SELECT LOCATION ,  sum(number_of_platforms) ,  sum(total_passengers) FROM station GROUP BY LOCATION', 'db_id': 'train_station', 'hardness': 'medium'}, {'question': 'List the names and locations of all stations ordered by their yearly entry exit and interchange amounts.', 'sql_query': 'SELECT name ,  LOCATION FROM station ORDER BY Annual_entry_exit ,  Annual_interchanges', 'db_id': 'train_station', 'hardness': 'medium'}], 'musical': [{'question': 'Show the nominees that have nominated musicals for both "Tony Award" and "Drama Desk Award".', 'sql_query': 'SELECT Nominee FROM musical WHERE Award  =  "Tony Award" INTERSECT SELECT Nominee FROM musical WHERE Award  =  "Drama Desk Award"', 'db_id': 'musical', 'hardness': 'hard'}, {'question': 'Return the most frequent result across all musicals.', 'sql_query': 'SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'musical', 'hardness': 'hard'}, {'question': 'Return the duration of the actor with the greatest age.', 'sql_query': 'SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1', 'db_id': 'musical', 'hardness': 'medium'}, {'question': 'Show names of musicals which have at least three actors.', 'sql_query': 'SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3', 'db_id': 'musical', 'hardness': 'medium'}], 'flight_2': [{'question': 'Count the number of United Airlines flights that arrive in Aberdeen.', 'sql_query': 'SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  "Aberdeen" AND T3.Airline  =  "United Airlines"', 'db_id': 'flight_2', 'hardness': 'hard'}, {'question': 'How many flights fly from Aberdeen to Ashley?', 'sql_query': 'SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  "Ashley" AND T3.City  =  "Aberdeen"', 'db_id': 'flight_2', 'hardness': 'hard'}, {'question': 'What are flight numbers of flights departing from City "Aberdeen "?', 'sql_query': 'SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"', 'db_id': 'flight_2', 'hardness': 'medium'}, {'question': 'What are flight numbers of flights arriving at City "Aberdeen"?', 'sql_query': 'SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"', 'db_id': 'flight_2', 'hardness': 'medium'}], 'e_learning': [{'question': 'Find the personal names of students not enrolled in any course.', 'sql_query': 'SELECT personal_name FROM Students EXCEPT SELECT T1.personal_name FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id  =  T2.student_id', 'db_id': 'e_learning', 'hardness': 'hard'}, {'question': 'What are the addresses of the course authors who teach either "operating system" or "data structure" course.', 'sql_query': 'SELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  "operating system" OR T2.course_name  =  "data structure"', 'db_id': 'e_learning', 'hardness': 'hard'}, {'question': 'List the dates of enrollment and completion of the student with personal name "Karson".', 'sql_query': 'SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.personal_name  =  "Karson"', 'db_id': 'e_learning', 'hardness': 'medium'}, {'question': 'What is the date of enrollment of the course named "Spanish"?', 'sql_query': 'SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id WHERE T1.course_name  =  "Spanish"', 'db_id': 'e_learning', 'hardness': 'medium'}], 'behavior_monitoring': [{'question': 'What are the line 1 of addresses shared by some students and some teachers?', 'sql_query': 'SELECT T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.address_id INTERSECT SELECT T1.line_1 FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id', 'db_id': 'behavior_monitoring', 'hardness': 'hard'}, {'question': 'What is the cell phone number of the student whose address has the lowest monthly rental?', 'sql_query': 'SELECT T2.cell_mobile_number FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id ORDER BY T1.monthly_rental ASC LIMIT 1', 'db_id': 'behavior_monitoring', 'hardness': 'hard'}, {'question': 'Find the maximum and minimum monthly rental for all student addresses.', 'sql_query': 'SELECT max(monthly_rental) ,  min(monthly_rental) FROM Student_Addresses', 'db_id': 'behavior_monitoring', 'hardness': 'medium'}, {'question': 'What are the monthly rentals of student addresses in Texas state?', 'sql_query': 'SELECT T2.monthly_rental FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T1.state_province_county  =  "Texas"', 'db_id': 'behavior_monitoring', 'hardness': 'medium'}], 'flight_1': [{'question': "What are the ids of all employees that don't have certificates?", 'sql_query': 'SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate', 'db_id': 'flight_1', 'hardness': 'hard'}, {'question': 'Show names for all aircrafts with distances more than the average.', 'sql_query': 'SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)', 'db_id': 'flight_1', 'hardness': 'hard'}, {'question': 'Show the flight number and distance of the flight with maximum price.', 'sql_query': 'SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1', 'db_id': 'flight_1', 'hardness': 'medium'}, {'question': 'Show all flight numbers with aircraft Airbus A340-300.', 'sql_query': 'SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  "Airbus A340-300"', 'db_id': 'flight_1', 'hardness': 'medium'}], 'orchestra': [{'question': 'List the names of orchestras that have no performance.', 'sql_query': 'SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)', 'db_id': 'orchestra', 'hardness': 'hard'}, {'question': 'List the record company shared by the most number of orchestras.', 'sql_query': 'SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'orchestra', 'hardness': 'hard'}, {'question': 'What is the name of the conductor who has worked the greatest number of years?', 'sql_query': 'SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1', 'db_id': 'orchestra', 'hardness': 'medium'}, {'question': 'What are the maximum and minimum share of performances whose type is not "Live final".', 'sql_query': 'SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != "Live final"', 'db_id': 'orchestra', 'hardness': 'medium'}], 'hospital_1': [{'question': 'What is the employee id of the head whose department has the least number of employees?', 'sql_query': 'SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;', 'db_id': 'hospital_1', 'hardness': 'hard'}, {'question': 'Find the names of all patients who have an undergoing treatment and are staying in room 111.', 'sql_query': 'SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN patient AS T2 ON T1.patient = T2.SSN JOIN stay AS T3 ON T1.Stay  =  T3.StayID WHERE T3.room  =  111', 'db_id': 'hospital_1', 'hardness': 'hard'}, {'question': 'List the names of departments where some physicians are primarily affiliated with.', 'sql_query': 'SELECT DISTINCT T2.name FROM affiliated_with AS T1 JOIN department AS T2 ON T1.department = T2.departmentid WHERE PrimaryAffiliation  =  1', 'db_id': 'hospital_1', 'hardness': 'medium'}, {'question': "Find the name of physicians whose position title contains the word 'senior'.", 'sql_query': "SELECT name FROM physician WHERE POSITION LIKE '%senior%'", 'db_id': 'hospital_1', 'hardness': 'medium'}], 'gas_company': [{'question': 'Show all headquarters with both a company in banking industry and a company in Oil and gas.', 'sql_query': "SELECT headquarters FROM company WHERE main_industry  =  'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry  =  'Oil and gas'", 'db_id': 'gas_company', 'hardness': 'hard'}, {'question': 'Show the manager name for gas stations belonging to the ExxonMobil company.', 'sql_query': "SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.company  =  'ExxonMobil'", 'db_id': 'gas_company', 'hardness': 'hard'}, {'question': 'What are the gas station ids, locations, and manager names for the gas stations ordered by opening year?', 'sql_query': 'SELECT station_id ,  LOCATION ,  manager_name FROM gas_station ORDER BY open_year', 'db_id': 'gas_company', 'hardness': 'medium'}, {'question': 'Show the company name with the number of gas station.', 'sql_query': 'SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id', 'db_id': 'gas_company', 'hardness': 'medium'}], 'game_injury': [{'question': 'Show all headquarters without a company in banking industry.', 'sql_query': "SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking'", 'db_id': 'gas_company', 'hardness': 'hard'}, {'question': 'Show all headquarters with both a company in banking industry and a company in Oil and gas.', 'sql_query': "SELECT headquarters FROM company WHERE main_industry  =  'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry  =  'Oil and gas'", 'db_id': 'gas_company', 'hardness': 'hard'}, {'question': 'How many games has each stadium held?', 'sql_query': 'SELECT T1.id ,  count(*) FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id GROUP BY T1.id', 'db_id': 'game_injury', 'hardness': 'medium'}, {'question': 'For each injury accident, find the date of the game and the name of the injured player in the game, and sort the results in descending order of game season.', 'sql_query': 'SELECT T1.date ,  T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id ORDER BY T1.season DESC', 'db_id': 'game_injury', 'hardness': 'medium'}], 'hr_1': [{'question': 'What is all the information regarding employees with salaries above the minimum and under 2500?', 'sql_query': 'SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500', 'db_id': 'hr_1', 'hardness': 'hard'}, {'question': 'display the full name (first and last), hire date, salary, and department number for those employees whose first name does not containing the letter M and make the result set in ascending order by department number.', 'sql_query': "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY department_id", 'db_id': 'hr_1', 'hardness': 'hard'}, {'question': 'Give the country id and corresponding count of cities in each country.', 'sql_query': 'SELECT country_id ,  COUNT(*) FROM locations GROUP BY country_id', 'db_id': 'hr_1', 'hardness': 'medium'}, {'question': 'display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.', 'sql_query': 'SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000', 'db_id': 'hr_1', 'hardness': 'medium'}], 'performance_attendance': [{'question': 'Show the names of members and the dates of performances they attended in descending order of attendance of the performances.', 'sql_query': 'SELECT T2.Name ,  T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T3.Attendance DESC', 'db_id': 'performance_attendance', 'hardness': 'hard'}, {'question': 'Show the dates of performances with attending members whose roles are "Violin".', 'sql_query': 'SELECT T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID WHERE T2.Role  =  "Violin"', 'db_id': 'performance_attendance', 'hardness': 'hard'}, {'question': 'What is the date of the performance with the highest number of attendees?', 'sql_query': 'SELECT Date FROM performance ORDER BY Attendance DESC LIMIT 1', 'db_id': 'performance_attendance', 'hardness': 'medium'}, {'question': 'Show the names of members and the location of the performances they attended.', 'sql_query': 'SELECT T2.Name ,  T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID', 'db_id': 'performance_attendance', 'hardness': 'medium'}], 'body_builder': [{'question': 'List the weight of the body builders who have snatch score higher than 140 or have the height greater than 200.', 'sql_query': 'SELECT T2.weight FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T1.snatch  >  140 OR T2.height  >  200;', 'db_id': 'body_builder', 'hardness': 'hard'}, {'question': 'What is the most common birth place of people?', 'sql_query': 'SELECT Birth_Place FROM people GROUP BY Birth_Place ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'body_builder', 'hardness': 'hard'}, {'question': 'List the height and weight of people in descending order of height.', 'sql_query': 'SELECT Height ,  Weight FROM people ORDER BY Height DESC', 'db_id': 'body_builder', 'hardness': 'medium'}, {'question': 'List each birth place along with the number of people from there.', 'sql_query': 'SELECT Birth_Place ,  COUNT(*) FROM people GROUP BY Birth_Place', 'db_id': 'body_builder', 'hardness': 'medium'}], 'student_assessment': [{'question': 'What details do we have on the students who registered for courses most recently?', 'sql_query': 'SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1', 'db_id': 'student_assessment', 'hardness': 'hard'}, {'question': 'What are the ids of the students who attended courses in the statistics department in order of attendance date.', 'sql_query': 'SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = "statistics" ORDER BY T2.date_of_attendance', 'db_id': 'student_assessment', 'hardness': 'hard'}, {'question': 'Find id of the candidate whose email is stanley.monahan@example.org?', 'sql_query': 'SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = "stanley.monahan@example.org"', 'db_id': 'student_assessment', 'hardness': 'medium'}, {'question': 'How many students are attending English courses?', 'sql_query': 'SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = "English"', 'db_id': 'student_assessment', 'hardness': 'medium'}], 'company_office': [{'question': 'Which industry has the most companies?', 'sql_query': 'SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'company_office', 'hardness': 'hard'}, {'question': 'Which buildings do not have any company office? Give me the building names.', 'sql_query': 'SELECT name FROM buildings WHERE id NOT IN (SELECT building_id FROM Office_locations)', 'db_id': 'company_office', 'hardness': 'hard'}, {'question': 'Please show the industries of companies in descending order of the number of companies.', 'sql_query': 'SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC', 'db_id': 'company_office', 'hardness': 'medium'}, {'question': 'Please show the names of the buildings whose status is "on-hold", in ascending order of stories.', 'sql_query': 'SELECT name FROM buildings WHERE Status  =  "on-hold" ORDER BY Stories ASC', 'db_id': 'company_office', 'hardness': 'medium'}], 'network_2': [{'question': 'What are the names of all people who do not have friends?', 'sql_query': 'SELECT name FROM person EXCEPT SELECT name FROM PersonFriend', 'db_id': 'network_2', 'hardness': 'hard'}, {'question': 'What are the names of the people who have no friends who are students?', 'sql_query': "SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.job  =  'student'", 'db_id': 'network_2', 'hardness': 'hard'}, {'question': 'How many friends does Dan have?', 'sql_query': "SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan'", 'db_id': 'network_2', 'hardness': 'medium'}, {'question': 'Find the female friends of Alice.', 'sql_query': "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'female'", 'db_id': 'network_2', 'hardness': 'medium'}], 'ship_mission': [{'question': 'Show the types of ships that have both ships with tonnage larger than 6000 and ships with tonnage smaller than 4000.', 'sql_query': 'SELECT TYPE FROM ship WHERE Tonnage  >  6000 INTERSECT SELECT TYPE FROM ship WHERE Tonnage  <  4000', 'db_id': 'ship_mission', 'hardness': 'hard'}, {'question': 'What is the most common type of ships?', 'sql_query': 'SELECT TYPE FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'ship_mission', 'hardness': 'hard'}, {'question': 'What are the type and nationality of ships?', 'sql_query': 'SELECT TYPE ,  Nationality FROM ship', 'db_id': 'ship_mission', 'hardness': 'medium'}, {'question': 'For each type, what is the average tonnage?', 'sql_query': 'SELECT TYPE ,  avg(Tonnage) FROM ship GROUP BY TYPE', 'db_id': 'ship_mission', 'hardness': 'medium'}], 'allergy_1': [{'question': 'What is the largest major?', 'sql_query': 'SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1', 'db_id': 'allergy_1', 'hardness': 'hard'}, {'question': 'What is the last name of the youngest student?', 'sql_query': 'SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student)', 'db_id': 'allergy_1', 'hardness': 'hard'}, {'question': 'Show first name and last name for all students.', 'sql_query': 'SELECT Fname ,  Lname FROM Student', 'db_id': 'allergy_1', 'hardness': 'medium'}, {'question': 'What are the full names and ages for all female students whose sex is F?', 'sql_query': "SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'", 'db_id': 'allergy_1', 'hardness': 'medium'}], 'party_people': [{'question': 'Show the member names which are in both the party with id 3 and the party with id 1.', 'sql_query': 'SELECT member_name FROM member WHERE party_id  =  3 INTERSECT SELECT member_name FROM member WHERE party_id  =  1', 'db_id': 'party_people', 'hardness': 'hard'}, {'question': 'Which member names are shared among members in the party with the id 3 and the party with the id 1?', 'sql_query': 'SELECT member_name FROM member WHERE party_id  =  3 INTERSECT SELECT member_name FROM member WHERE party_id  =  1', 'db_id': 'party_people', 'hardness': 'hard'}, {'question': 'Show all ministers and parties they belong to in descending order of the time they took office.', 'sql_query': 'SELECT minister ,  party_name FROM party ORDER BY took_office DESC', 'db_id': 'party_people', 'hardness': 'medium'}, {'question': 'What are the names of parties with at least 2 events?', 'sql_query': 'SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  2', 'db_id': 'party_people', 'hardness': 'medium'}], 'csu_1': [{'question': 'Find the count of universities whose campus fee is greater than the average campus fee.', 'sql_query': 'SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)', 'db_id': 'csu_1', 'hardness': 'hard'}, {'question': 'How many universities have a campus fee higher than average?', 'sql_query': 'SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)', 'db_id': 'csu_1', 'hardness': 'hard'}, {'question': 'What is the campus fee of "San Francisco State University" in year 2000?', 'sql_query': 'SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  "San Francisco State University" AND t1.year  =  2000', 'db_id': 'csu_1', 'hardness': 'medium'}, {'question': 'Find the campus fee of "San Jose State University" in year 2000.', 'sql_query': 'SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  "San Jose State University" AND t1.year  =  2000', 'db_id': 'csu_1', 'hardness': 'medium'}], 'school_bus': [{'question': 'Show all home cities except for those having a driver older than 40.', 'sql_query': 'SELECT home_city FROM driver EXCEPT SELECT home_city FROM driver WHERE age  >  40', 'db_id': 'school_bus', 'hardness': 'hard'}, {'question': 'Show the home city with the most number of drivers.', 'sql_query': 'SELECT home_city FROM driver GROUP BY home_city ORDER BY count(*) DESC LIMIT 1', 'db_id': 'school_bus', 'hardness': 'hard'}, {'question': 'Show the type of school and the number of buses for each type.', 'sql_query': 'SELECT T2.type ,  count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T2.type', 'db_id': 'school_bus', 'hardness': 'medium'}, {'question': 'Show the party with drivers from Hartford and drivers older than 40.', 'sql_query': "SELECT party FROM driver WHERE home_city  =  'Hartford' AND age  >  40", 'db_id': 'school_bus', 'hardness': 'medium'}], 'insurance_fnol': [{'question': 'Which policy type appears most frequently in the available policies?', 'sql_query': 'SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1', 'db_id': 'insurance_fnol', 'hardness': 'hard'}, {'question': 'Retrieve the open and close dates of all the policies associated with the customer whose name contains "Diana"', 'sql_query': 'SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE "%Diana%"', 'db_id': 'insurance_fnol', 'hardness': 'hard'}, {'question': 'What is the ordered list of customer ids?', 'sql_query': 'SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC', 'db_id': 'insurance_fnol', 'hardness': 'medium'}, {'question': 'Find the total and average amount of settlements.', 'sql_query': 'SELECT sum(settlement_amount) ,  avg(settlement_amount) FROM settlements', 'db_id': 'insurance_fnol', 'hardness': 'medium'}], 'imdb': [{'question': 'Who is the writer of the movie " The Truman Show "', 'sql_query': 'SELECT t2.name FROM written_by AS t3 JOIN movie AS t1 ON t3.msid  =  t1.mid JOIN writer AS t2 ON t3.wid  =  t2.wid WHERE t1.title  =  "The Truman Show";', 'db_id': 'imdb', 'hardness': 'hard'}, {'question': 'What are all the tv series created by " Shonda Rhimes " ?', 'sql_query': 'SELECT t2.title FROM producer AS t1 JOIN made_by AS t3 ON t1.pid  =  t3.pid JOIN tv_series AS t2 ON t2.sid  =  t3.msid WHERE t1.name  =  "Shonda Rhimes";', 'db_id': 'imdb', 'hardness': 'hard'}, {'question': 'How many female actors were born in " New York City " after 1980 ?', 'sql_query': 'SELECT COUNT ( DISTINCT name  ) FROM actor WHERE birth_city  =  "New York City" AND birth_year  >  1980 AND gender  =  "female";', 'db_id': 'imdb', 'hardness': 'medium'}, {'question': 'Which movie had the character " Daffy Duck "', 'sql_query': 'SELECT t1.title FROM movie AS t1 JOIN CAST AS t2 ON t1.mid  =  t2.msid WHERE t2.role  =  "Daffy Duck";', 'db_id': 'imdb', 'hardness': 'medium'}], 'customers_and_invoices': [{'question': 'Show ids for all transactions whose amounts are greater than the average.', 'sql_query': 'SELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)', 'db_id': 'customers_and_invoices', 'hardness': 'hard'}, {'question': 'Show the account id with most number of transactions.', 'sql_query': 'SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT 1', 'db_id': 'customers_and_invoices', 'hardness': 'hard'}, {'question': 'What are the different product names, and what is the sum of quantity ordered for each product?', 'sql_query': 'SELECT T2.product_name ,  sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T2.product_name', 'db_id': 'customers_and_invoices', 'hardness': 'medium'}, {'question': 'What are the full names of customers with the account name 900?', 'sql_query': 'SELECT T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  "900"', 'db_id': 'customers_and_invoices', 'hardness': 'medium'}], 'voter_2': [{'question': 'Find the distinct last names of all the students who have president votes and whose advisor is 8741.', 'sql_query': 'SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote INTERSECT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  "8741"', 'db_id': 'voter_2', 'hardness': 'hard'}, {'question': 'Return the code of the city that has the most students.', 'sql_query': 'SELECT city_code FROM STUDENT GROUP BY city_code ORDER BY count(*) DESC LIMIT 1', 'db_id': 'voter_2', 'hardness': 'hard'}, {'question': 'Find the average age of female (sex is F) students who have secretary votes in the spring election cycle.', 'sql_query': 'SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.Sex  =  "F" AND T2.Election_Cycle  =  "Spring"', 'db_id': 'voter_2', 'hardness': 'medium'}, {'question': 'What is the average age of students who have city code "NYC" and have secretary votes for the spring election cycle?', 'sql_query': 'SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.city_code  =  "NYC" AND T2.Election_Cycle  =  "Spring"', 'db_id': 'voter_2', 'hardness': 'medium'}], 'school_finance': [{'question': 'Find the names of schools that have more than one donator with donation amount above 8.5.', 'sql_query': 'SELECT T2.School_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.amount  >  8.5 GROUP BY T1.school_id HAVING count(*)  >  1', 'db_id': 'school_finance', 'hardness': 'hard'}, {'question': 'List the names of the schools without any endowment.', 'sql_query': 'SELECT school_name FROM school WHERE school_id NOT IN (SELECT school_id FROM endowment)', 'db_id': 'school_finance', 'hardness': 'hard'}, {'question': 'List all the names of schools with an endowment amount smaller than or equal to 10.', 'sql_query': 'SELECT T2.school_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T1.school_id HAVING sum(T1.amount)  <=  10', 'db_id': 'school_finance', 'hardness': 'medium'}, {'question': 'List the name of the school with the smallest enrollment.', 'sql_query': 'SELECT school_name FROM school ORDER BY enrollment LIMIT 1', 'db_id': 'school_finance', 'hardness': 'medium'}], 'activity_1': [{'question': 'Find the building that has the largest number of faculty members.', 'sql_query': 'SELECT building FROM Faculty GROUP BY building ORDER BY count(*) DESC LIMIT 1', 'db_id': 'activity_1', 'hardness': 'hard'}, {'question': "Show the ids of the faculty who don't participate in any activity.", 'sql_query': 'SELECT FacID FROM Faculty EXCEPT SELECT FacID FROM Faculty_participates_in', 'db_id': 'activity_1', 'hardness': 'hard'}, {'question': 'How many students are advised by each rank of faculty? List the rank and the number of students.', 'sql_query': 'SELECT T1.rank ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.rank', 'db_id': 'activity_1', 'hardness': 'medium'}, {'question': 'What are the faculty id and the number of students each faculty has?', 'sql_query': 'SELECT T1.FacID ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID', 'db_id': 'activity_1', 'hardness': 'medium'}], 'sakila_1': [{'question': 'What is the most popular full name of the actors?', 'sql_query': 'SELECT first_name ,  last_name FROM actor GROUP BY first_name ,  last_name ORDER BY count(*) DESC LIMIT 1', 'db_id': 'sakila_1', 'hardness': 'hard'}, {'question': "What are the first names of customers who have not rented any films after '2005-08-23 02:06:01'?", 'sql_query': "SELECT first_name FROM customer WHERE customer_id NOT IN( SELECT customer_id FROM rental WHERE rental_date  >  '2005-08-23 02:06:01' )", 'db_id': 'sakila_1', 'hardness': 'hard'}, {'question': 'What are the title and rental rate of the film with the highest rental rate?', 'sql_query': 'SELECT title ,  rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1', 'db_id': 'sakila_1', 'hardness': 'medium'}, {'question': "Give the phone and postal code corresponding to the address '1031 Daugavpils Parkway'.", 'sql_query': "SELECT phone ,  postal_code FROM address WHERE address  =  '1031 Daugavpils Parkway'", 'db_id': 'sakila_1', 'hardness': 'medium'}], 'student_1': [{'question': 'Find the classroom that the most students use.', 'sql_query': 'SELECT classroom FROM list GROUP BY classroom ORDER BY count(*) DESC LIMIT 1', 'db_id': 'student_1', 'hardness': 'hard'}, {'question': 'Which classroom has the most students?', 'sql_query': 'SELECT classroom FROM list GROUP BY classroom ORDER BY count(*) DESC LIMIT 1', 'db_id': 'student_1', 'hardness': 'hard'}, {'question': 'Find the number of students taught by the teacher KAWA GORDON.', 'sql_query': 'SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  "KAWA" AND T2.lastname  =  "GORDON"', 'db_id': 'student_1', 'hardness': 'medium'}, {'question': 'Find the number of students taught by TARRING LEIA.', 'sql_query': 'SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  "TARRING" AND T2.lastname  =  "LEIA"', 'db_id': 'student_1', 'hardness': 'medium'}], 'college_3': [{'question': 'What are the last names of faculty who are part of the computer science department?', 'sql_query': 'SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO  =  T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID  =  T3.FacID WHERE T1.DName  =  "Computer Science"', 'db_id': 'college_3', 'hardness': 'hard'}, {'question': 'What are the names of courses that give either 3 credits, or 1 credit and 4 hours?', 'sql_query': 'SELECT CName FROM COURSE WHERE Credits  =  3 UNION SELECT CName FROM COURSE WHERE Credits  =  1 AND Hours  =  4', 'db_id': 'college_3', 'hardness': 'hard'}, {'question': 'Give the names of the courses with at least five enrollments.', 'sql_query': 'SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID  =  T2.CID GROUP BY T2.CID HAVING COUNT(*)  >=  5', 'db_id': 'college_3', 'hardness': 'medium'}, {'question': 'What are the rooms for members of the faculty who are professors and who live in building NEB?', 'sql_query': 'SELECT Room FROM FACULTY WHERE Rank  =  "Professor" AND Building  =  "NEB"', 'db_id': 'college_3', 'hardness': 'medium'}], 'manufacturer': [{'question': 'Find the id and number of shops for the company that produces the most expensive furniture.', 'sql_query': 'SELECT t1.manufacturer_id ,  t1.num_of_shops FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id  =  t2.manufacturer_id ORDER BY t2.Price_in_Dollar DESC LIMIT 1', 'db_id': 'manufacturer', 'hardness': 'hard'}, {'question': 'find the total market rate of the furnitures that have the top 2 market shares.', 'sql_query': 'SELECT sum(market_rate) FROM furniture ORDER BY market_rate DESC LIMIT 2', 'db_id': 'manufacturer', 'hardness': 'medium'}, {'question': 'Which manufacturer has the most number of shops? List its name and year of opening.', 'sql_query': 'SELECT open_year ,  name FROM manufacturer ORDER BY num_of_shops DESC LIMIT 1', 'db_id': 'manufacturer', 'hardness': 'medium'}, {'question': 'Return the name and id of the furniture with the highest market rate.', 'sql_query': 'SELECT name ,  furniture_id FROM furniture ORDER BY market_rate DESC LIMIT 1', 'db_id': 'manufacturer', 'hardness': 'medium'}], 'driving_school': [{'question': 'What is the first name of the staff who did not give any lesson?', 'sql_query': 'SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id  =  T2.staff_id', 'db_id': 'driving_school', 'hardness': 'hard'}, {'question': 'Which last names are both used by customers and by staff?', 'sql_query': 'SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff', 'db_id': 'driving_school', 'hardness': 'hard'}, {'question': 'How long is the total lesson time took by the customer named Rylan Goodwin?', 'sql_query': 'SELECT sum(T1.lesson_time) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = "Rylan" AND T2.last_name = "Goodwin";', 'db_id': 'driving_school', 'hardness': 'medium'}, {'question': 'What is the nickname of the employee named Janessa Sawayn?', 'sql_query': 'SELECT nickname FROM Staff WHERE first_name = "Janessa" AND last_name = "Sawayn";', 'db_id': 'driving_school', 'hardness': 'medium'}], 'scientist_1': [{'question': 'What are the names of scientists who are not working on the project with the most hours?', 'sql_query': 'SELECT name FROM scientists EXCEPT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)', 'db_id': 'scientist_1', 'hardness': 'hard'}, {'question': 'Find the name of scientists who are not assigned to any project.', 'sql_query': 'SELECT Name FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)', 'db_id': 'scientist_1', 'hardness': 'hard'}, {'question': 'Find the name of project that continues for the longest time.', 'sql_query': 'SELECT name FROM projects ORDER BY hours DESC LIMIT 1', 'db_id': 'scientist_1', 'hardness': 'medium'}, {'question': 'What are the naems of all the projects, and how many scientists were assigned to each of them?', 'sql_query': 'SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T1.name', 'db_id': 'scientist_1', 'hardness': 'medium'}], 'entertainment_awards': [{'question': 'List the most common type of artworks.', 'sql_query': 'SELECT TYPE FROM artwork GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'entertainment_awards', 'hardness': 'hard'}, {'question': 'Show distinct types of artworks that are nominated in festivals in 2007.', 'sql_query': 'SELECT DISTINCT T2.Type FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID WHERE T3.Year  =  2007', 'db_id': 'entertainment_awards', 'hardness': 'hard'}, {'question': 'Show the names of the three most recent festivals.', 'sql_query': 'SELECT Festival_Name FROM festival_detail ORDER BY YEAR DESC LIMIT 3', 'db_id': 'entertainment_awards', 'hardness': 'medium'}, {'question': 'What are the names and locations of festivals?', 'sql_query': 'SELECT Festival_Name ,  LOCATION FROM festival_detail', 'db_id': 'entertainment_awards', 'hardness': 'medium'}], 'county_public_safety': [{'question': 'Show the number of cities in counties that have a population more than 20000.', 'sql_query': 'SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)', 'db_id': 'county_public_safety', 'hardness': 'hard'}, {'question': 'List the names of counties that do not have any cities.', 'sql_query': 'SELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city)', 'db_id': 'county_public_safety', 'hardness': 'hard'}, {'question': 'Show white percentages of cities and the crime rates of counties they are in.', 'sql_query': 'SELECT T1.White ,  T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID', 'db_id': 'county_public_safety', 'hardness': 'medium'}, {'question': 'What are the names of cities, as well as the names of the counties they correspond to?', 'sql_query': 'SELECT T1.Name ,  T2.Name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID', 'db_id': 'county_public_safety', 'hardness': 'medium'}], 'election_representative': [{'question': 'What is the party that has the largest number of representatives?', 'sql_query': 'SELECT Party ,  COUNT(*) FROM representative GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'election_representative', 'hardness': 'hard'}, {'question': 'List the names of representatives that have not participated in elections listed here.', 'sql_query': 'SELECT Name FROM representative WHERE Representative_ID NOT IN (SELECT Representative_ID FROM election)', 'db_id': 'election_representative', 'hardness': 'hard'}, {'question': 'What are the life spans of representatives from New York state or Indiana state?', 'sql_query': 'SELECT Lifespan FROM representative WHERE State  =  "New York" OR State  =  "Indiana"', 'db_id': 'election_representative', 'hardness': 'medium'}, {'question': 'What are the different parties of representative? Show the party name and the number of representatives in each party.', 'sql_query': 'SELECT Party ,  COUNT(*) FROM representative GROUP BY Party', 'db_id': 'election_representative', 'hardness': 'medium'}], 'riding_club': [{'question': 'Please show the most common occupation of players.', 'sql_query': 'SELECT Occupation FROM player GROUP BY Occupation ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'riding_club', 'hardness': 'hard'}, {'question': 'Show the names of players coached by the rank 1 coach.', 'sql_query': 'SELECT T3.Player_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T2.Rank  =  1', 'db_id': 'riding_club', 'hardness': 'hard'}, {'question': 'Show the names of sponsors of players whose residence is either "Brandon" or "Birtle".', 'sql_query': 'SELECT Sponsor_name FROM player WHERE Residence  =  "Brandon" OR Residence  =  "Birtle"', 'db_id': 'riding_club', 'hardness': 'medium'}, {'question': 'Show the names of players and names of their coaches.', 'sql_query': 'SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID', 'db_id': 'riding_club', 'hardness': 'medium'}], 'manufactory_1': [{'question': 'What are the names of companies that do not make DVD drives?', 'sql_query': "SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T1.name  =  'DVD drive'", 'db_id': 'manufactory_1', 'hardness': 'hard'}, {'question': 'Find the name of companies whose revenue is greater than the average revenue of all companies.', 'sql_query': 'SELECT name FROM manufacturers WHERE revenue  >  (SELECT avg(revenue) FROM manufacturers)', 'db_id': 'manufactory_1', 'hardness': 'hard'}, {'question': 'How many products are there for each manufacturer?', 'sql_query': 'SELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name', 'db_id': 'manufactory_1', 'hardness': 'medium'}, {'question': 'What are the average prices of products, grouped by manufacturer name?', 'sql_query': 'SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name', 'db_id': 'manufactory_1', 'hardness': 'medium'}], 'ship_1': [{'question': 'Find the name of the ship that is steered by the youngest captain.', 'sql_query': 'SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id ORDER BY t2.age LIMIT 1', 'db_id': 'ship_1', 'hardness': 'hard'}, {'question': 'What is the year in which most ships were built?', 'sql_query': 'SELECT built_year FROM ship GROUP BY built_year ORDER BY count(*) DESC LIMIT 1', 'db_id': 'ship_1', 'hardness': 'hard'}, {'question': 'Find the name, type, and flag of the ship that is built in the most recent year.', 'sql_query': 'SELECT name ,  TYPE ,  flag FROM ship ORDER BY built_year DESC LIMIT 1', 'db_id': 'ship_1', 'hardness': 'medium'}, {'question': 'Count the number of captains younger than 50 of each rank.', 'sql_query': 'SELECT count(*) ,  rank FROM captain WHERE age  <  50 GROUP BY rank', 'db_id': 'ship_1', 'hardness': 'medium'}], 'solvency_ii': [{'question': 'List the names of products that are not in any event.', 'sql_query': 'SELECT Product_Name FROM Products WHERE Product_ID NOT IN (SELECT Product_ID FROM Products_in_Events)', 'db_id': 'solvency_ii', 'hardness': 'hard'}, {'question': 'Show the product type codes that have both products with price higher than 4500 and products with price lower than 3000.', 'sql_query': 'SELECT Product_Type_Code FROM Products WHERE Product_Price  >  4500 INTERSECT SELECT Product_Type_Code FROM Products WHERE Product_Price  <  3000', 'db_id': 'solvency_ii', 'hardness': 'hard'}, {'question': 'What is the name of the product with the highest price?', 'sql_query': 'SELECT Product_Name FROM Products ORDER BY Product_Price DESC LIMIT 1', 'db_id': 'solvency_ii', 'hardness': 'medium'}, {'question': 'Show the prices of the products named "Dining" or "Trading Policy".', 'sql_query': 'SELECT Product_Price FROM Products WHERE Product_Name  =  "Dining" OR Product_Name  =  "Trading Policy"', 'db_id': 'solvency_ii', 'hardness': 'medium'}], 'department_store': [{'question': 'Find the ids of all distinct customers who made order after some orders that were Cancelled.', 'sql_query': 'SELECT DISTINCT customer_id FROM Customer_Orders WHERE order_date  >  (SELECT min(order_date) FROM Customer_Orders WHERE order_status_code  =  "Cancelled")', 'db_id': 'department_store', 'hardness': 'hard'}, {'question': 'What is the id of the department with the least number of staff?', 'sql_query': 'SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1', 'db_id': 'department_store', 'hardness': 'hard'}, {'question': 'Give me the product type, name and price for all the products supplied by supplier id 3.', 'sql_query': 'SELECT T2.product_type_code ,  T2.product_name ,  T2.product_price FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  3', 'db_id': 'department_store', 'hardness': 'medium'}, {'question': 'List the name of staff who has been assigned multiple jobs.', 'sql_query': 'SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  1', 'db_id': 'department_store', 'hardness': 'medium'}], 'scholar': [{'question': 'How many publications were added to the Cell journal this year ?', 'sql_query': 'SELECT DISTINCT COUNT ( t3.paperid ) FROM paper AS t3 JOIN journal AS t2 ON t3.journalid  =  t2.journalid JOIN paperkeyphrase AS t1 ON t3.paperid  =  t1.paperid WHERE t2.journalname  =  "Cell" AND t3.year  =  2015;', 'db_id': 'scholar', 'hardness': 'hard'}, {'question': 'NIPS authors', 'sql_query': 'SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  "NIPS";', 'db_id': 'scholar', 'hardness': 'hard'}, {'question': 'chi papers', 'sql_query': 'SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  "chi";', 'db_id': 'scholar', 'hardness': 'medium'}, {'question': "sharon goldwater 's papers", 'sql_query': 'SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "sharon goldwater";', 'db_id': 'scholar', 'hardness': 'medium'}], 'insurance_policies': [{'question': 'List the details of the customers who do not have any policies.', 'sql_query': 'SELECT customer_details FROM Customers EXCEPT SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.customer_id  =  T2.customer_id', 'db_id': 'insurance_policies', 'hardness': 'hard'}, {'question': 'Which payment method is used the most often?', 'sql_query': 'SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) DESC LIMIT 1', 'db_id': 'insurance_policies', 'hardness': 'hard'}, {'question': 'Find the settlement amount of the claim with the largest claim amount. Show both the settlement amount and claim amount.', 'sql_query': 'SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Claimed DESC LIMIT 1', 'db_id': 'insurance_policies', 'hardness': 'medium'}, {'question': 'Who are the customers that had more than 1 policy? List the customer details and id.', 'sql_query': 'SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.Customer_id GROUP BY T1.customer_id HAVING count(*)  >  1', 'db_id': 'insurance_policies', 'hardness': 'medium'}], 'assets_maintenance': [{'question': 'Which assets did not incur any fault log? List the asset model.', 'sql_query': 'SELECT asset_model FROM Assets WHERE asset_id NOT IN (SELECT asset_id FROM Fault_Log)', 'db_id': 'assets_maintenance', 'hardness': 'hard'}, {'question': 'Which company started the earliest the maintenance contract? Show the company name.', 'sql_query': 'SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id ORDER BY T2.contract_start_date ASC LIMIT 1', 'db_id': 'assets_maintenance', 'hardness': 'hard'}, {'question': 'How many engineers did each staff contact? List both the contact staff name and number of engineers contacted.', 'sql_query': 'SELECT T1.staff_name ,  count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id GROUP BY T1.staff_name', 'db_id': 'assets_maintenance', 'hardness': 'medium'}, {'question': 'Which staff have contacted which engineers? List the staff name and the engineer first name and last name.', 'sql_query': 'SELECT T1.staff_name ,  T3.first_name ,  T3.last_name FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id  =  T3.engineer_id', 'db_id': 'assets_maintenance', 'hardness': 'medium'}], 'tracking_software_problems': [{'question': 'For each product that has problems, find the number of problems reported after 1986-11-13 and the product id?', 'sql_query': 'SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > "1986-11-13" GROUP BY T2.product_id', 'db_id': 'tracking_software_problems', 'hardness': 'hard'}, {'question': 'What are the products that have problems reported after 1986-11-13? Give me the product id and the count of problems reported after 1986-11-13.', 'sql_query': 'SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > "1986-11-13" GROUP BY T2.product_id', 'db_id': 'tracking_software_problems', 'hardness': 'hard'}, {'question': 'Which problems are reported by the staff with first name "Christop"? Show the descriptions of the problems.', 'sql_query': 'SELECT T1.problem_description FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = "Christop"', 'db_id': 'tracking_software_problems', 'hardness': 'medium'}, {'question': 'How many problems are there for product voluptatem?', 'sql_query': 'SELECT count(*) FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = "voluptatem"', 'db_id': 'tracking_software_problems', 'hardness': 'medium'}], 'movie_1': [{'question': 'What are the ids of all reviewers who did not give 4 stars?', 'sql_query': 'SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  4', 'db_id': 'movie_1', 'hardness': 'hard'}, {'question': 'What are the names and years of the movies that has the top 3 highest rating star?', 'sql_query': 'SELECT T2.title ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID ORDER BY T1.stars DESC LIMIT 3', 'db_id': 'movie_1', 'hardness': 'hard'}, {'question': 'What are the names of the directors who made exactly one movie excluding director NULL?', 'sql_query': 'SELECT director FROM Movie WHERE director != "null" GROUP BY director HAVING count(*)  =  1', 'db_id': 'movie_1', 'hardness': 'medium'}, {'question': 'What are the names of all directors who have made one movie except for the director named NULL?', 'sql_query': 'SELECT director FROM Movie WHERE director != "null" GROUP BY director HAVING count(*)  =  1', 'db_id': 'movie_1', 'hardness': 'medium'}], 'products_gen_characteristics': [{'question': "Find the category descriptions of the products whose descriptions include letter 't'.", 'sql_query': "SELECT T1.product_category_description FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code  =  T2.product_category_code WHERE T2.product_description LIKE '%t%'", 'db_id': 'products_gen_characteristics', 'hardness': 'hard'}, {'question': 'How many products have the characteristic named "hot"?', 'sql_query': 'SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  "hot"', 'db_id': 'products_gen_characteristics', 'hardness': 'hard'}, {'question': "Count the number of characteristics the product 'sesame' has.", 'sql_query': 'SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id WHERE t1.product_name  =  "sesame"', 'db_id': 'products_gen_characteristics', 'hardness': 'medium'}, {'question': 'What are the name and typical buying and selling prices of the products that have color described as "yellow"?', 'sql_query': 'SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  "yellow"', 'db_id': 'products_gen_characteristics', 'hardness': 'medium'}], 'loan_1': [{'question': 'What are the names of customers with credit score less than the average credit score across customers?', 'sql_query': 'SELECT cust_name FROM customer WHERE credit_score  <  (SELECT avg(credit_score) FROM customer)', 'db_id': 'loan_1', 'hardness': 'hard'}, {'question': 'Find the name of customers who do not have an saving account.', 'sql_query': "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'", 'db_id': 'loan_1', 'hardness': 'hard'}, {'question': 'Find the name and account balance of the customer whose name includes the letter ‘a’.', 'sql_query': "SELECT cust_name ,  acc_bal FROM customer WHERE cust_name LIKE '%a%'", 'db_id': 'loan_1', 'hardness': 'medium'}, {'question': 'What are the different names and credit scores of customers who have taken a loan?', 'sql_query': 'SELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id', 'db_id': 'loan_1', 'hardness': 'medium'}], 'dog_kennels': [{'question': 'Find the states where both owners and professionals live.', 'sql_query': 'SELECT state FROM Owners INTERSECT SELECT state FROM Professionals', 'db_id': 'dog_kennels', 'hardness': 'hard'}, {'question': 'Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .', 'sql_query': 'select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )', 'db_id': 'dog_kennels', 'hardness': 'hard'}, {'question': "What are each owner's first name and their dogs's name?", 'sql_query': 'SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id', 'db_id': 'dog_kennels', 'hardness': 'medium'}, {'question': 'Find the id and cell phone of the professionals who operate two or more types of treatments.', 'sql_query': 'SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2', 'db_id': 'dog_kennels', 'hardness': 'medium'}], 'e_government': [{'question': 'What are the names of all cities and states?', 'sql_query': 'SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses', 'db_id': 'e_government', 'hardness': 'hard'}, {'question': 'What are the names of the services that have never been used?', 'sql_query': 'SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id  =  t2.service_id', 'db_id': 'e_government', 'hardness': 'hard'}, {'question': 'Find the payment method and phone of the party with email "enrico09@example.com".', 'sql_query': 'SELECT payment_method_code ,  party_phone FROM parties WHERE party_email  =  "enrico09@example.com"', 'db_id': 'e_government', 'hardness': 'medium'}, {'question': 'What are the names of organizations that contain the word "Party"?', 'sql_query': 'SELECT organization_name FROM organizations WHERE organization_name LIKE "%Party%"', 'db_id': 'e_government', 'hardness': 'medium'}], 'tracking_grants_for_research': [{'question': 'How many staff does each project has? List the project id and the number in an ascending order.', 'sql_query': 'SELECT T1.project_id ,  count(*) FROM Project_Staff AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) ASC', 'db_id': 'tracking_grants_for_research', 'hardness': 'hard'}, {'question': "What is the description for the results whose project detail is 'sint'?", 'sql_query': "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code JOIN Projects AS T3 ON T2.project_id  =  T3.project_id WHERE T3.project_details  =  'sint'", 'db_id': 'tracking_grants_for_research', 'hardness': 'hard'}, {'question': 'When did the first staff for the projects started working?', 'sql_query': 'SELECT date_from FROM Project_Staff ORDER BY date_from ASC LIMIT 1', 'db_id': 'tracking_grants_for_research', 'hardness': 'medium'}, {'question': "What is the type description of the organization whose detail is listed as 'quo'?", 'sql_query': "SELECT T1.organisation_type_description FROM organisation_Types AS T1 JOIN Organisations AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_details  =  'quo'", 'db_id': 'tracking_grants_for_research', 'hardness': 'medium'}], 'film_rank': [{'question': 'Please list the years of film market estimations when the market is in country "Japan" in descending order.', 'sql_query': 'SELECT T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T2.Country  =  "Japan" ORDER BY T1.Year DESC', 'db_id': 'film_rank', 'hardness': 'hard'}, {'question': 'Return the title of the film with the highest high estimate?', 'sql_query': 'SELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2  ON T1.Film_ID  =  T2.Film_ID ORDER BY high_estimate DESC LIMIT 1', 'db_id': 'film_rank', 'hardness': 'hard'}, {'question': 'Show the distinct director of films with market estimation in the year of 1995.', 'sql_query': 'SELECT DISTINCT T1.Director FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID WHERE T2.Year  =  1995', 'db_id': 'film_rank', 'hardness': 'medium'}, {'question': 'How films are produced by each studio?', 'sql_query': 'SELECT Studio ,  COUNT(*) FROM film GROUP BY Studio', 'db_id': 'film_rank', 'hardness': 'medium'}], 'academic': [{'question': 'return me the keywords of " Making database systems usable " .', 'sql_query': 'SELECT t1.keyword FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t3.pid WHERE t2.title  =  "Making database systems usable";', 'db_id': 'academic', 'hardness': 'hard'}, {'question': 'return me the total citations of papers in the VLDB conference in each year .', 'sql_query': 'SELECT t2.year  ,  SUM ( t2.citation_num ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  "VLDB" GROUP BY t2.year;', 'db_id': 'academic', 'hardness': 'hard'}, {'question': 'return me the conference, which published " Making database systems usable " .', 'sql_query': 'SELECT t1.name FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t2.title  =  "Making database systems usable";', 'db_id': 'academic', 'hardness': 'medium'}, {'question': 'return me the paper after 2000 in PVLDB with more than 200 citations .', 'sql_query': 'SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  "PVLDB" AND t2.citation_num  >  200 AND t2.year  >  2000;', 'db_id': 'academic', 'hardness': 'medium'}], 'customer_complaints': [{'question': 'What are the prices of products that have never gotten a complaint?', 'sql_query': 'SELECT product_price FROM products WHERE product_id NOT IN (SELECT product_id FROM complaints)', 'db_id': 'customer_complaints', 'hardness': 'hard'}, {'question': 'Return the last name of the staff member who handled the complaint with the earliest date raised.', 'sql_query': 'SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id ORDER BY t2.date_complaint_raised LIMIT 1', 'db_id': 'customer_complaints', 'hardness': 'hard'}, {'question': 'What are all the different product names, and how many complains has each received?', 'sql_query': 'SELECT t1.product_name ,  count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_name', 'db_id': 'customer_complaints', 'hardness': 'medium'}, {'question': 'What are lines 1 and 2 of the addressed of the customer with the email "vbogisich@example.org"?', 'sql_query': 'SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  "vbogisich@example.org"', 'db_id': 'customer_complaints', 'hardness': 'medium'}], 'program_share': [{'question': 'Which programs are never broadcasted in the morning? Give me the names of the programs.', 'sql_query': 'SELECT name FROM program EXCEPT SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  "Morning"', 'db_id': 'program_share', 'hardness': 'hard'}, {'question': 'Find the names of programs that are never broadcasted in the morning.', 'sql_query': 'SELECT name FROM program EXCEPT SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  "Morning"', 'db_id': 'program_share', 'hardness': 'hard'}, {'question': 'List the names of all the channels owned by either CCTV or HBS', 'sql_query': "SELECT name FROM channel WHERE OWNER  =  'CCTV' OR OWNER  =  'HBS'", 'db_id': 'program_share', 'hardness': 'medium'}, {'question': 'What are the names of the channels owned by CCTV or HBS?', 'sql_query': "SELECT name FROM channel WHERE OWNER  =  'CCTV' OR OWNER  =  'HBS'", 'db_id': 'program_share', 'hardness': 'medium'}], 'medicine_enzyme_interaction': [{'question': "What is the type of interaction for the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?", 'sql_query': "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  'ALA synthase' AND T2.name  =  'Aripiprazole'", 'db_id': 'medicine_enzyme_interaction', 'hardness': 'hard'}, {'question': 'What are the most common types of interactions between enzymes and medicine, and how many types are there?', 'sql_query': 'SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT 1', 'db_id': 'medicine_enzyme_interaction', 'hardness': 'hard'}, {'question': 'find the number of medicines offered by each trade.', 'sql_query': 'SELECT trade_name ,  count(*) FROM medicine GROUP BY trade_name', 'db_id': 'medicine_enzyme_interaction', 'hardness': 'medium'}, {'question': 'What are the names and locations of all enzymes listed?', 'sql_query': 'SELECT name ,  LOCATION FROM enzyme', 'db_id': 'medicine_enzyme_interaction', 'hardness': 'medium'}], 'local_govt_and_lot': [{'question': "What are the distinct id and type of the thing that has the status 'Close' or has a status record before the date '2017-06-19 02:59:21'", 'sql_query': "SELECT DISTINCT T2.thing_id ,  T2.Type_of_Thing_Code FROM Timed_Status_of_Things AS T1 JOIN Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.Status_of_Thing_Code  =  'Close' OR T1.Date_and_Date  <  '2017-06-19 02:59:21'", 'db_id': 'local_govt_and_lot', 'hardness': 'hard'}, {'question': 'Which organizations are not a parent organization of others? List the organization id.', 'sql_query': 'SELECT organization_id FROM organizations EXCEPT SELECT parent_organization_id FROM organizations', 'db_id': 'local_govt_and_lot', 'hardness': 'hard'}, {'question': 'What are the id and details of the customers who have at least 3 events?', 'sql_query': 'SELECT T1.customer_id ,  T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  3', 'db_id': 'local_govt_and_lot', 'hardness': 'medium'}, {'question': "What is each customer's move in date, and the corresponding customer id and details?", 'sql_query': 'SELECT T2.date_moved_in ,  T1.customer_id ,  T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id  =  T2.customer_id', 'db_id': 'local_govt_and_lot', 'hardness': 'medium'}], 'battle_death': [{'question': 'What are the ids and names of the battles that led to more than 10 people killed in total.', 'sql_query': 'SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10', 'db_id': 'battle_death', 'hardness': 'hard'}, {'question': "What are the death and injury situations caused by the ship with tonnage 't'?", 'sql_query': "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", 'db_id': 'battle_death', 'hardness': 'medium'}, {'question': "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", 'sql_query': "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'", 'db_id': 'battle_death', 'hardness': 'medium'}, {'question': "What are the different ids and names of the battles that lost any 'Brig' type shipes?", 'sql_query': "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'", 'db_id': 'battle_death', 'hardness': 'medium'}], 'store_product': [{'question': 'Find the total population of the districts where the area is bigger than the average city area.', 'sql_query': 'SELECT sum(city_population) FROM district WHERE city_area  >  (SELECT avg(city_area) FROM district)', 'db_id': 'store_product', 'hardness': 'hard'}, {'question': 'How many stores are headquarted in each city?', 'sql_query': 'SELECT t3.headquartered_city ,  count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city', 'db_id': 'store_product', 'hardness': 'hard'}, {'question': 'Find the name all districts with city area greater than 10 or population larger than 100000', 'sql_query': 'SELECT district_name FROM district WHERE city_area  >  10 OR City_Population  >  100000', 'db_id': 'store_product', 'hardness': 'medium'}, {'question': 'For each type of store, how many of them are there?', 'sql_query': 'SELECT TYPE ,  count(*) FROM store GROUP BY TYPE', 'db_id': 'store_product', 'hardness': 'medium'}], 'music_1': [{'question': 'What are the names and genders of all artists who released songs in the month of March?', 'sql_query': 'SELECT T1.artist_name ,  T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.releasedate LIKE "%Mar%"', 'db_id': 'music_1', 'hardness': 'hard'}, {'question': 'What are the shortest duration and lowest rating of songs grouped by genre and ordered by genre?', 'sql_query': 'SELECT min(T1.duration) ,  min(T2.rating) ,  T2.genre_is FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.genre_is ORDER BY T2.genre_is', 'db_id': 'music_1', 'hardness': 'hard'}, {'question': 'What are the average rating and resolution of songs that are in Bangla?', 'sql_query': 'SELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  "bangla"', 'db_id': 'music_1', 'hardness': 'medium'}, {'question': 'What are the names of artists who are Male and are from UK?', 'sql_query': 'SELECT artist_name FROM artist WHERE country  =  "UK" AND gender  =  "Male"', 'db_id': 'music_1', 'hardness': 'medium'}], 'tracking_orders': [{'question': 'For each product, return its id and the number of times it was ordered.', 'sql_query': 'SELECT count(*) ,  T3.product_id FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id', 'db_id': 'tracking_orders', 'hardness': 'hard'}, {'question': 'Which order has the most recent shipment? Give me the order id.', 'sql_query': 'SELECT order_id FROM shipments WHERE shipment_date  =  (SELECT max(shipment_date) FROM shipments)', 'db_id': 'tracking_orders', 'hardness': 'hard'}, {'question': 'Which orders are made by the customer named "Jeramie"? Give me the order ids and status.', 'sql_query': 'SELECT T2.order_id ,  T2.order_status FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = "Jeramie"', 'db_id': 'tracking_orders', 'hardness': 'medium'}, {'question': 'Find the order id and customer id associated with the oldest order.', 'sql_query': 'SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1', 'db_id': 'tracking_orders', 'hardness': 'medium'}], 'election': [{'question': 'Which parties did not have any delegates in elections?', 'sql_query': 'SELECT Party FROM party WHERE Party_ID NOT IN (SELECT Party FROM election)', 'db_id': 'election', 'hardness': 'hard'}, {'question': 'Which people severed as governor most frequently?', 'sql_query': 'SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'election', 'hardness': 'hard'}, {'question': 'What are the maximum and minimum population of the counties?', 'sql_query': 'SELECT max(Population) ,  min(Population) FROM county', 'db_id': 'election', 'hardness': 'medium'}, {'question': 'Show the lieutenant governor and comptroller from the democratic party.', 'sql_query': 'SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  "Democratic"', 'db_id': 'election', 'hardness': 'medium'}], 'music_2': [{'question': 'What are the names of the songs by the artist whose last name is "Heilo"?', 'sql_query': 'SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T2.Lastname  =  "Heilo"', 'db_id': 'music_2', 'hardness': 'hard'}, {'question': 'Hom many musicians performed in the song "Flash"?', 'sql_query': 'SELECT count(*) FROM performance AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id JOIN songs AS T3 ON T3.songid  =  T1.songid WHERE T3.Title  =  "Flash"', 'db_id': 'music_2', 'hardness': 'hard'}, {'question': 'How many different songs have shared vocals?', 'sql_query': 'SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  "shared"', 'db_id': 'music_2', 'hardness': 'medium'}, {'question': 'What are the vocal types used in song "Badlands"?', 'sql_query': 'SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  "Badlands"', 'db_id': 'music_2', 'hardness': 'medium'}], 'wine_1': [{'question': 'What are the names of wines produced before any wine from the Brander winery?', 'sql_query': 'SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  "Brander")', 'db_id': 'wine_1', 'hardness': 'hard'}, {'question': 'What are the names of wines whose production year are before the year of all wines by Brander winery?', 'sql_query': 'SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  "Brander")', 'db_id': 'wine_1', 'hardness': 'hard'}, {'question': 'What is the winery at which the wine with the highest score was made?', 'sql_query': 'SELECT Winery FROM WINE ORDER BY SCORE LIMIT 1', 'db_id': 'wine_1', 'hardness': 'medium'}, {'question': 'List the grape, appelation and name of wines whose score is higher than 93 ordered by Name.', 'sql_query': 'SELECT Grape ,  Appelation ,  Name FROM WINE WHERE Score  >  93 ORDER BY Name', 'db_id': 'wine_1', 'hardness': 'medium'}], 'formula_1': [{'question': 'Find the id, forename and number of races of all drivers who have at least participated in two races?', 'sql_query': 'SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  2', 'db_id': 'formula_1', 'hardness': 'hard'}, {'question': 'What is the forename and surname of the driver with the shortest laptime?', 'sql_query': 'SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1', 'db_id': 'formula_1', 'hardness': 'hard'}, {'question': 'What are the names of races held after 12:00:00 or before 09:00:00?', 'sql_query': 'SELECT name FROM races WHERE TIME > "12:00:00" OR TIME < "09:00:00"', 'db_id': 'formula_1', 'hardness': 'medium'}, {'question': 'What are the different driver ids and nationalities of all drivers who had a laptime of more than 100000 milliseconds?', 'sql_query': 'SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000', 'db_id': 'formula_1', 'hardness': 'medium'}], 'sports_competition': [{'question': 'List the names of clubs that do not have any players.', 'sql_query': 'SELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player)', 'db_id': 'sports_competition', 'hardness': 'hard'}, {'question': 'What are the positions of both players that have more than 20 20 points and less than 10 points?', 'sql_query': 'SELECT POSITION FROM player WHERE Points  >  20 INTERSECT SELECT POSITION FROM player WHERE Points  <  10', 'db_id': 'sports_competition', 'hardness': 'hard'}, {'question': 'What are the types and countries of competitions?', 'sql_query': 'SELECT Competition_type ,  Country FROM competition', 'db_id': 'sports_competition', 'hardness': 'medium'}, {'question': 'List the position of players and the average number of points of players of each position.', 'sql_query': 'SELECT POSITION ,  avg(Points) FROM player GROUP BY POSITION', 'db_id': 'sports_competition', 'hardness': 'medium'}], 'storm_record': [{'question': 'What are the names of storms that did not affect two or more regions?', 'sql_query': 'SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2', 'db_id': 'storm_record', 'hardness': 'hard'}, {'question': 'What are the names of storms that did not affect any regions?', 'sql_query': 'SELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region)', 'db_id': 'storm_record', 'hardness': 'hard'}, {'question': 'Show the average and maximum damage for all storms with max speed higher than 1000.', 'sql_query': 'SELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  1000', 'db_id': 'storm_record', 'hardness': 'medium'}, {'question': 'How many regions were affected by each storm?', 'sql_query': 'SELECT T1.name ,  count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id', 'db_id': 'storm_record', 'hardness': 'medium'}], 'tvshow': [{'question': "which countries' tv channels are not playing any cartoon written by Todd Casey?", 'sql_query': "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", 'db_id': 'tvshow', 'hardness': 'hard'}, {'question': 'find the package option of the tv channel that do not have any cartoon directed by Ben Jones.', 'sql_query': "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')", 'db_id': 'tvshow', 'hardness': 'hard'}, {'question': "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.", 'sql_query': 'SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;', 'db_id': 'tvshow', 'hardness': 'medium'}, {'question': 'What is the pixel aspect ratio and country of origin for all TV channels that do not use English?', 'sql_query': "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", 'db_id': 'tvshow', 'hardness': 'medium'}], 'device': [{'question': 'List the software platform shared by the greatest number of devices.', 'sql_query': 'SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'device', 'hardness': 'hard'}, {'question': 'Which locations contains both shops that opened after the year 2012 and shops that opened before 2008?', 'sql_query': 'SELECT LOCATION FROM shop WHERE Open_Year  >  2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year  <  2008', 'db_id': 'device', 'hardness': 'hard'}, {'question': 'List the name of the shop with the latest open year.', 'sql_query': 'SELECT Shop_Name FROM shop ORDER BY Open_Year DESC LIMIT 1', 'db_id': 'device', 'hardness': 'medium'}, {'question': 'List the open date of open year of the shop named "Apple".', 'sql_query': 'SELECT Open_Date ,  Open_Year FROM shop WHERE Shop_Name  =  "Apple"', 'db_id': 'device', 'hardness': 'medium'}], 'university_basketball': [{'question': 'What is the founded year of the non public school that was founded most recently?', 'sql_query': "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1", 'db_id': 'university_basketball', 'hardness': 'hard'}, {'question': 'What is the team name and acc regular season score of the school that was founded for the longest time?', 'sql_query': 'SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1', 'db_id': 'university_basketball', 'hardness': 'hard'}, {'question': 'What are the all games score and location of the school called Clemson?', 'sql_query': "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'", 'db_id': 'university_basketball', 'hardness': 'medium'}, {'question': 'List all schools and their nicknames in the order of founded year.', 'sql_query': 'SELECT school ,  nickname FROM university ORDER BY founded', 'db_id': 'university_basketball', 'hardness': 'medium'}], 'bike_1': [{'question': 'What are all the different zip codes that have a maximum dew point that was always below 70?', 'sql_query': 'SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70', 'db_id': 'bike_1', 'hardness': 'hard'}, {'question': 'Give me the zip code where the average mean humidity is below 70 and at least 100 trips took place.', 'sql_query': 'SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100', 'db_id': 'bike_1', 'hardness': 'hard'}, {'question': 'What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?', 'sql_query': 'SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80', 'db_id': 'bike_1', 'hardness': 'medium'}, {'question': 'Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.', 'sql_query': 'SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60', 'db_id': 'bike_1', 'hardness': 'medium'}], 'shop_membership': [{'question': 'How many branches where have more than average number of memberships are there?', 'sql_query': 'SELECT count(*) FROM branch WHERE membership_amount  >  (SELECT avg(membership_amount) FROM branch)', 'db_id': 'shop_membership', 'hardness': 'hard'}, {'question': 'What is the number of branches that have more than the average number of memberships?', 'sql_query': 'SELECT count(*) FROM branch WHERE membership_amount  >  (SELECT avg(membership_amount) FROM branch)', 'db_id': 'shop_membership', 'hardness': 'hard'}, {'question': 'list the card number of all members whose hometown address includes word "Kentucky".', 'sql_query': 'SELECT card_number FROM member WHERE Hometown LIKE "%Kentucky%"', 'db_id': 'shop_membership', 'hardness': 'medium'}, {'question': 'For each city, how many branches opened before 2010?', 'sql_query': 'SELECT city ,  count(*) FROM branch WHERE open_year  <  2010 GROUP BY city', 'db_id': 'shop_membership', 'hardness': 'medium'}], 'workshop_paper': [{'question': 'Show the result of the submission with the highest score.', 'sql_query': 'SELECT T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID ORDER BY T2.Scores DESC LIMIT 1', 'db_id': 'workshop_paper', 'hardness': 'hard'}, {'question': 'Which colleges have both authors with submission score above 90 and authors with submission score below 80?', 'sql_query': 'SELECT College FROM submission WHERE Scores  >  90 INTERSECT SELECT College FROM submission WHERE Scores  <  80', 'db_id': 'workshop_paper', 'hardness': 'hard'}, {'question': 'Show the date and venue of each workshop in ascending alphabetical order of the venue.', 'sql_query': 'SELECT Date ,  Venue FROM workshop ORDER BY Venue', 'db_id': 'workshop_paper', 'hardness': 'medium'}, {'question': 'What are the authors of submissions and their colleges?', 'sql_query': 'SELECT Author ,  College FROM submission', 'db_id': 'workshop_paper', 'hardness': 'medium'}], 'poker_player': [{'question': 'List the names of people that are not poker players.', 'sql_query': 'SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)', 'db_id': 'poker_player', 'hardness': 'hard'}, {'question': 'Give the nationality that is most common across all people.', 'sql_query': 'SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'poker_player', 'hardness': 'hard'}, {'question': 'Give the names of poker players who have earnings above 300000.', 'sql_query': 'SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000', 'db_id': 'poker_player', 'hardness': 'medium'}, {'question': 'Return the names of poker players sorted by their earnings descending.', 'sql_query': 'SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC', 'db_id': 'poker_player', 'hardness': 'medium'}], 'aircraft': [{'question': 'what is the name and age of the youngest winning pilot?', 'sql_query': 'SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot ORDER BY t1.age LIMIT 1', 'db_id': 'aircraft', 'hardness': 'hard'}, {'question': 'What are the names of all aicrafts that have never won any match?', 'sql_query': 'SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)', 'db_id': 'aircraft', 'hardness': 'hard'}, {'question': 'Please list the location and the winning aircraft name.', 'sql_query': 'SELECT T2.Location ,  T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft', 'db_id': 'aircraft', 'hardness': 'medium'}, {'question': 'What is the location and name of the winning aircraft?', 'sql_query': 'SELECT T2.Location ,  T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft', 'db_id': 'aircraft', 'hardness': 'medium'}], 'railway': [{'question': 'Show the most common builder of railways.', 'sql_query': 'SELECT Builder FROM railway GROUP BY Builder ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'railway', 'hardness': 'hard'}, {'question': 'Show the countries that have both managers of age above 50 and managers of age below 46.', 'sql_query': 'SELECT Country FROM manager WHERE Age  >  50 INTERSECT SELECT Country FROM manager WHERE Age  <  46', 'db_id': 'railway', 'hardness': 'hard'}, {'question': 'Show different builders of railways, along with the corresponding number of railways using each builder.', 'sql_query': 'SELECT Builder ,  COUNT(*) FROM railway GROUP BY Builder', 'db_id': 'railway', 'hardness': 'medium'}, {'question': 'Show id and location of railways that are associated with more than one train.', 'sql_query': 'SELECT T2.Railway_ID ,  T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID GROUP BY T2.Railway_ID HAVING COUNT(*)  >  1', 'db_id': 'railway', 'hardness': 'medium'}], 'concert_singer': [{'question': 'What are all the song names by singers who are older than average?', 'sql_query': 'SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)', 'db_id': 'concert_singer', 'hardness': 'hard'}, {'question': 'Which year has most number of concerts?', 'sql_query': 'SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1', 'db_id': 'concert_singer', 'hardness': 'hard'}, {'question': 'Show the stadium name and the number of concerts in each stadium.', 'sql_query': 'SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id', 'db_id': 'concert_singer', 'hardness': 'medium'}, {'question': 'What is the name and capacity for the stadium with the highest average attendance?', 'sql_query': 'SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1', 'db_id': 'concert_singer', 'hardness': 'medium'}], 'decoration_competition': [{'question': 'Show the most common country across members.', 'sql_query': 'SELECT Country FROM member GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'decoration_competition', 'hardness': 'hard'}, {'question': 'List the names of members who did not participate in any round.', 'sql_query': 'SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM round)', 'db_id': 'decoration_competition', 'hardness': 'hard'}, {'question': 'Show the names of members in ascending order of their rank in rounds.', 'sql_query': 'SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID ORDER BY Rank_in_Round ASC', 'db_id': 'decoration_competition', 'hardness': 'medium'}, {'question': 'Show the names of members whose country is "United States" or "Canada".', 'sql_query': 'SELECT Name FROM member WHERE Country  =  "United States" OR Country  =  "Canada"', 'db_id': 'decoration_competition', 'hardness': 'medium'}], 'book_2': [{'question': 'Please show the most common publication date.', 'sql_query': 'SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'book_2', 'hardness': 'hard'}, {'question': 'Show the publishers that have publications with price higher than 10000000 and publications with price lower than 5000000.', 'sql_query': 'SELECT Publisher FROM publication WHERE Price  >  10000000 INTERSECT SELECT Publisher FROM publication WHERE Price  <  5000000', 'db_id': 'book_2', 'hardness': 'hard'}, {'question': 'What are the title and issues of the books?', 'sql_query': 'SELECT Title ,  Issues FROM book', 'db_id': 'book_2', 'hardness': 'medium'}, {'question': 'List the publisher of the publication with the highest price.', 'sql_query': 'SELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1', 'db_id': 'book_2', 'hardness': 'medium'}], 'flight_company': [{'question': 'What is the most common company type, and how many are there?', 'sql_query': 'SELECT TYPE ,  count(*) FROM operate_company GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1', 'db_id': 'flight_company', 'hardness': 'hard'}, {'question': "What are the different pilot names who had piloted a flight in the country 'United States' or in the airport named 'Billund Airport'?", 'sql_query': "SELECT DISTINCT T2.pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id WHERE T1.country  =  'United States' OR T1.name  =  'Billund Airport'", 'db_id': 'flight_company', 'hardness': 'hard'}, {'question': 'List the vehicle flight number, date and pilot of all the flights, ordered by altitude.', 'sql_query': 'SELECT vehicle_flight_number ,  date ,  pilot FROM flight ORDER BY altitude ASC', 'db_id': 'flight_company', 'hardness': 'medium'}, {'question': 'What are the distinct types of the companies that have operated any flights with velocity less than 200?', 'sql_query': 'SELECT DISTINCT T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T2.velocity  <  200', 'db_id': 'flight_company', 'hardness': 'medium'}], 'party_host': [{'question': 'Show the host names for parties with number of hosts greater than 20.', 'sql_query': 'SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20', 'db_id': 'party_host', 'hardness': 'hard'}, {'question': 'Which nationality has the most hosts?', 'sql_query': 'SELECT Nationality FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'party_host', 'hardness': 'hard'}, {'question': 'How many hosts does each nationality have? List the nationality and the count.', 'sql_query': 'SELECT Nationality ,  COUNT(*) FROM HOST GROUP BY Nationality', 'db_id': 'party_host', 'hardness': 'medium'}, {'question': 'For each party, return its theme and the name of its host.', 'sql_query': 'SELECT T3.Party_Theme ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID', 'db_id': 'party_host', 'hardness': 'medium'}], 'cre_Docs_and_Epenses': [{'question': 'What is the budget type code with most number of documents.', 'sql_query': 'SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC LIMIT 1', 'db_id': 'cre_Docs_and_Epenses', 'hardness': 'hard'}, {'question': 'Return the ids of documents that do not have expenses.', 'sql_query': 'SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_with_expenses', 'db_id': 'cre_Docs_and_Epenses', 'hardness': 'hard'}, {'question': 'What are the names and ids of documents that have the type code BK?', 'sql_query': 'SELECT document_name ,  document_id FROM Documents WHERE document_type_code  =  "BK"', 'db_id': 'cre_Docs_and_Epenses', 'hardness': 'medium'}, {'question': 'What is the project id and detail for the project with at least two documents?', 'sql_query': 'SELECT T1.project_id ,  T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id HAVING count(*)  >  2', 'db_id': 'cre_Docs_and_Epenses', 'hardness': 'medium'}], 'restaurants': [{'question': 'where is a good french restaurant in the yosemite and mono lake area ?', 'sql_query': 'SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  "yosemite and mono lake area" AND t1.food_type  =  "french" AND t1.rating  >  2.5;', 'db_id': 'restaurants', 'hardness': 'hard'}, {'question': 'give me a good place in the yosemite and mono lake area for french food ?', 'sql_query': 'SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  "yosemite and mono lake area" AND t1.food_type  =  "french" AND t1.rating  >  2.5;', 'db_id': 'restaurants', 'hardness': 'hard'}, {'question': 'how many buttercup kitchen are there in san francisco ?', 'sql_query': 'SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "san francisco" AND t1.name  =  "buttercup kitchen";', 'db_id': 'restaurants', 'hardness': 'medium'}, {'question': 'how many places for french food are there in palo alto ?', 'sql_query': 'SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "palo alto" AND t1.food_type  =  "french";', 'db_id': 'restaurants', 'hardness': 'medium'}], 'climbing': [{'question': 'Show the range that has the most number of mountains.', 'sql_query': 'SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'climbing', 'hardness': 'hard'}, {'question': 'List the names of mountains that do not have any climber.', 'sql_query': 'SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)', 'db_id': 'climbing', 'hardness': 'hard'}, {'question': 'What are the names of mountains that have a height of over 5000 or a prominence of over 1000?', 'sql_query': 'SELECT Name FROM mountain WHERE Height  >  5000 OR Prominence  >  1000', 'db_id': 'climbing', 'hardness': 'medium'}, {'question': 'Show the names of climbers and the heights of mountains they climb.', 'sql_query': 'SELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID', 'db_id': 'climbing', 'hardness': 'medium'}], 'pets_1': [{'question': 'What are the ids of the students who do not own cats as pets?', 'sql_query': "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'", 'db_id': 'pets_1', 'hardness': 'hard'}, {'question': 'Find the last name of the student who has a cat that is age 3.', 'sql_query': "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", 'db_id': 'pets_1', 'hardness': 'hard'}, {'question': 'What is the id and weight of every pet who is older than 1?', 'sql_query': 'SELECT petid ,  weight FROM pets WHERE pet_age  >  1', 'db_id': 'pets_1', 'hardness': 'medium'}, {'question': 'Find the average weight for each pet type.', 'sql_query': 'SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype', 'db_id': 'pets_1', 'hardness': 'medium'}], 'customers_and_products_contacts': [{'question': 'Show the names of customers who use Credit Card payment method and have more than 2 orders.', 'sql_query': "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.payment_method_code  =  'Credit Card' GROUP BY T1.customer_id HAVING count(*)  >  2", 'db_id': 'customers_and_products_contacts', 'hardness': 'hard'}, {'question': 'How many products have a price higher than the average?', 'sql_query': 'SELECT count(*) FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products)', 'db_id': 'customers_and_products_contacts', 'hardness': 'hard'}, {'question': 'Show the minimum, maximum, average price for all products.', 'sql_query': 'SELECT min(product_price) ,  max(product_price) ,  avg(product_price) FROM products', 'db_id': 'customers_and_products_contacts', 'hardness': 'medium'}, {'question': 'Show each state and the number of addresses in each state.', 'sql_query': 'SELECT state_province_county ,  count(*) FROM addresses GROUP BY state_province_county', 'db_id': 'customers_and_products_contacts', 'hardness': 'medium'}], 'entrepreneur': [{'question': 'What are the names of people who are not entrepreneurs?', 'sql_query': 'SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)', 'db_id': 'entrepreneur', 'hardness': 'hard'}, {'question': 'Return the name of the heaviest entrepreneur.', 'sql_query': 'SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1', 'db_id': 'entrepreneur', 'hardness': 'hard'}, {'question': 'What are the companies and investors that correspond to each entrepreneur?', 'sql_query': 'SELECT Company ,  Investor FROM entrepreneur', 'db_id': 'entrepreneur', 'hardness': 'medium'}, {'question': 'What are the names of entrepreneurs and their corresponding investors, ordered descending by the amount of money requested?', 'sql_query': 'SELECT T2.Name ,  T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested', 'db_id': 'entrepreneur', 'hardness': 'medium'}], 'mountain_photos': [{'question': 'What is the name of each camera lens and the number of photos taken by it? Order the result by the count of photos.', 'sql_query': 'SELECT T1.name ,  count(*) FROM camera_lens AS T1 JOIN photos AS T2 ON T1.id  =  T2.camera_lens_id GROUP BY T1.id ORDER BY count(*)', 'db_id': 'mountain_photos', 'hardness': 'hard'}, {'question': "What are the names of photos taken with the lens brand 'Sigma' or 'Olympus'?", 'sql_query': "SELECT T1.name FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id  =  T1.id WHERE T1.brand  =  'Sigma' OR T1.brand  =  'Olympus'", 'db_id': 'mountain_photos', 'hardness': 'hard'}, {'question': "What are the name, height and prominence of mountains which do not belong to the range 'Aberdare Range'?", 'sql_query': "SELECT name ,  height ,  prominence FROM mountain WHERE range != 'Aberdare Range'", 'db_id': 'mountain_photos', 'hardness': 'medium'}, {'question': "How many distinct kinds of camera lenses are used to take photos of mountains in the country 'Ethiopia'?", 'sql_query': "SELECT count(DISTINCT T2.camera_lens_id) FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id WHERE T1.country  =  'Ethiopia'", 'db_id': 'mountain_photos', 'hardness': 'medium'}], 'products_for_hire': [{'question': "What are the start date and end date of the booking that has booked the product named 'Book collection A'?", 'sql_query': "SELECT T3.booking_start_date ,   T3.booking_end_date FROM Products_for_hire AS T1 JOIN products_booked AS T2 ON T1.product_id  =  T2.product_id JOIN bookings AS T3 ON T2.booking_id  =  T3.booking_id WHERE T1.product_name  =  'Book collection A'", 'db_id': 'products_for_hire', 'hardness': 'hard'}, {'question': 'What is the maximum total amount paid by a customer? List the customer id and amount.', 'sql_query': 'SELECT customer_id ,  sum(amount_paid) FROM Payments GROUP BY customer_id ORDER BY sum(amount_paid) DESC LIMIT 1', 'db_id': 'products_for_hire', 'hardness': 'hard'}, {'question': "What are the payment date of the payment with amount paid higher than 300 or with payment type is 'Check'", 'sql_query': "SELECT payment_date FROM payments WHERE amount_paid  >  300 OR payment_type_code  =  'Check'", 'db_id': 'products_for_hire', 'hardness': 'medium'}, {'question': 'What are the first name, last name, and gender of all the good customers? Order by their last name.', 'sql_query': "SELECT first_name ,  last_name ,  gender_mf FROM customers WHERE good_or_bad_customer  =  'good' ORDER BY last_name", 'db_id': 'products_for_hire', 'hardness': 'medium'}], 'journal_committee': [{'question': 'Please show the most common age of editors.', 'sql_query': 'SELECT Age FROM editor GROUP BY Age ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'journal_committee', 'hardness': 'hard'}, {'question': 'List the names of editors that are not on any journal committee.', 'sql_query': 'SELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)', 'db_id': 'journal_committee', 'hardness': 'hard'}, {'question': 'Show the names of editors of age either 24 or 25.', 'sql_query': 'SELECT Name FROM editor WHERE Age  =  24 OR Age  =  25', 'db_id': 'journal_committee', 'hardness': 'medium'}, {'question': "What is the average sales of the journals that have an editor whose work type is 'Photo'?", 'sql_query': "SELECT avg(T1.sales) FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID  =  T2.journal_ID WHERE T2.work_type  =  'Photo'", 'db_id': 'journal_committee', 'hardness': 'medium'}], 'course_teach': [{'question': "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.", 'sql_query': 'SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name', 'db_id': 'course_teach', 'hardness': 'hard'}, {'question': 'List the most common hometown of teachers.', 'sql_query': 'SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'course_teach', 'hardness': 'hard'}, {'question': 'What are the names of the teachers and how many courses do they teach?', 'sql_query': 'SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name', 'db_id': 'course_teach', 'hardness': 'medium'}, {'question': 'What are the names of the teachers who teach at least two courses?', 'sql_query': 'SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2', 'db_id': 'course_teach', 'hardness': 'medium'}], 'theme_gallery': [{'question': 'What are the names of artist whose exhibitions draw over 200 attendees on average?', 'sql_query': 'SELECT T3.name FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id JOIN artist AS T3 ON T3.artist_id  =  T2.artist_id GROUP BY T3.artist_id HAVING avg(T1.attendance)  >  200', 'db_id': 'theme_gallery', 'hardness': 'hard'}, {'question': 'What are the names of artists who did not have an exhibition in 2004?', 'sql_query': 'SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004', 'db_id': 'theme_gallery', 'hardness': 'hard'}, {'question': 'Return the average and minimum ages across artists from the United States.', 'sql_query': "SELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'", 'db_id': 'theme_gallery', 'hardness': 'medium'}, {'question': 'Show all artist names and the year joined who are not from United States.', 'sql_query': "SELECT name ,  year_join FROM artist WHERE country != 'United States'", 'db_id': 'theme_gallery', 'hardness': 'medium'}], 'news_report': [{'question': 'Show the nations that have both journalists with more than 10 years of working and journalists with less than 3 years of working.', 'sql_query': 'SELECT Nationality FROM journalist WHERE Years_working  >  10 INTERSECT SELECT Nationality FROM journalist WHERE Years_working  <  3', 'db_id': 'news_report', 'hardness': 'hard'}, {'question': 'Show the names of journalists and the names of the events they reported in ascending order', 'sql_query': 'SELECT T3.Name ,  T2.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID ORDER BY T2.Event_Attendance ASC', 'db_id': 'news_report', 'hardness': 'hard'}, {'question': 'What are the nationalities and ages of journalists?', 'sql_query': 'SELECT Nationality ,  Age FROM journalist', 'db_id': 'news_report', 'hardness': 'medium'}, {'question': 'List the event venues and names that have the top 2 most number of people attended.', 'sql_query': 'SELECT venue ,  name FROM event ORDER BY Event_Attendance DESC LIMIT 2', 'db_id': 'news_report', 'hardness': 'medium'}]}