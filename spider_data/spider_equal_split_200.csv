,index_in_original,hardness,db_id,sql_query,question,context
0,1022,easy,geo,"SELECT state_name FROM city WHERE city_name  =  ""springfield"";",what states have a city named springfield,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );"
1,998,easy,geo,"SELECT border FROM border_info WHERE state_name  =  ""kentucky"";",which state border kentucky,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );"
2,4143,easy,cre_Doc_Control_Systems,"SELECT count(*) FROM Documents WHERE document_status_code = ""done"";",How many documents have the status code done?,"PRAGMA foreign_keys = ON; CREATE TABLE Ref_Document_Types ( document_type_code CHAR(15) NOT NULL, document_type_description VARCHAR(255) NOT NULL, PRIMARY KEY (document_type_code) ); CREATE TABLE Roles ( role_code CHAR(15) NOT NULL, role_description VARCHAR(255), PRIMARY KEY (role_code) ); CREATE TABLE Addresses ( address_id INTEGER NOT NULL, address_details VARCHAR(255), PRIMARY KEY (address_id) ); CREATE TABLE Ref_Document_Status ( document_status_code CHAR(15) NOT NULL, document_status_description VARCHAR(255) NOT NULL, PRIMARY KEY (document_status_code) ); CREATE TABLE Ref_Shipping_Agents ( shipping_agent_code CHAR(15) NOT NULL, shipping_agent_name VARCHAR(255) NOT NULL, shipping_agent_description VARCHAR(255) NOT NULL, PRIMARY KEY (shipping_agent_code) ); CREATE TABLE Documents ( document_id INTEGER NOT NULL, document_status_code CHAR(15) NOT NULL, document_type_code CHAR(15) NOT NULL, shipping_agent_code CHAR(15), receipt_date DATETIME, receipt_number VARCHAR(255), other_details VARCHAR(255), PRIMARY KEY (document_id), FOREIGN KEY (document_type_code) REFERENCES Ref_Document_Types (document_type_code), FOREIGN KEY (document_status_code) REFERENCES Ref_Document_Status (document_status_code), FOREIGN KEY (shipping_agent_code) REFERENCES Ref_Shipping_Agents (shipping_agent_code) ); CREATE TABLE Employees ( employee_id INTEGER NOT NULL, role_code CHAR(15) NOT NULL, employee_name VARCHAR(255), other_details VARCHAR(255), PRIMARY KEY (employee_id), FOREIGN KEY (role_code) REFERENCES Roles (role_code) ); CREATE TABLE Document_Drafts ( document_id INTEGER NOT NULL, draft_number INTEGER NOT NULL, draft_details VARCHAR(255), PRIMARY KEY (document_id, draft_number), FOREIGN KEY (document_id) REFERENCES Documents (document_id) ); CREATE TABLE Draft_Copies ( document_id INTEGER NOT NULL, draft_number INTEGER NOT NULL, copy_number INTEGER NOT NULL, PRIMARY KEY (document_id, draft_number, copy_number), FOREIGN KEY (document_id, draft_number) REFERENCES Document_Drafts (document_id,draft_number) ); CREATE TABLE Circulation_History ( document_id INTEGER NOT NULL, draft_number INTEGER NOT NULL, copy_number INTEGER NOT NULL, employee_id INTEGER NOT NULL, PRIMARY KEY (document_id, draft_number, copy_number, employee_id), FOREIGN KEY (document_id, draft_number, copy_number) REFERENCES Draft_Copies (document_id,draft_number,copy_number), FOREIGN KEY (employee_id) REFERENCES Employees (employee_id) ); CREATE TABLE Documents_Mailed ( document_id INTEGER NOT NULL, mailed_to_address_id INTEGER NOT NULL, mailing_date DATETIME, PRIMARY KEY (document_id, mailed_to_address_id), FOREIGN KEY (document_id) REFERENCES Documents (document_id), FOREIGN KEY (mailed_to_address_id) REFERENCES Addresses (address_id) );  "
3,513,easy,student_transcripts_tracking,SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea',What is the zip code of the address in the city Port Chelsea?,"PRAGMA foreign_keys = ON; CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `line_1` VARCHAR(255), `line_2` VARCHAR(255), `line_3` VARCHAR(255), `city` VARCHAR(255), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(255), `country` VARCHAR(255), `other_address_details` VARCHAR(255) ); CREATE TABLE `Courses` ( `course_id` INTEGER PRIMARY KEY, `course_name` VARCHAR(255), `course_description` VARCHAR(255), `other_details` VARCHAR(255) );  CREATE TABLE `Departments` ( `department_id` INTEGER PRIMARY KEY, `department_name` VARCHAR(255), `department_description` VARCHAR(255), `other_details` VARCHAR(255) ); CREATE TABLE `Degree_Programs` ( `degree_program_id` INTEGER PRIMARY KEY, `department_id` INTEGER NOT NULL, `degree_summary_name` VARCHAR(255), `degree_summary_description` VARCHAR(255), `other_details` VARCHAR(255), FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` ) );  CREATE TABLE `Sections` ( `section_id` INTEGER PRIMARY KEY, `course_id` INTEGER NOT NULL, `section_name` VARCHAR(255), `section_description` VARCHAR(255), `other_details` VARCHAR(255), FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ) ); CREATE TABLE `Semesters` ( `semester_id` INTEGER PRIMARY KEY, `semester_name` VARCHAR(255), `semester_description` VARCHAR(255), `other_details` VARCHAR(255) ); CREATE TABLE `Students` ( `student_id` INTEGER PRIMARY KEY, `current_address_id` INTEGER NOT NULL, `permanent_address_id` INTEGER NOT NULL, `first_name` VARCHAR(80), `middle_name` VARCHAR(40), `last_name` VARCHAR(40), `cell_mobile_number` VARCHAR(40), `email_address` VARCHAR(40), `ssn` VARCHAR(40), `date_first_registered` DATETIME, `date_left` DATETIME, `other_student_details` VARCHAR(255), FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` ) );  CREATE TABLE `Student_Enrolment` ( `student_enrolment_id` INTEGER PRIMARY KEY, `degree_program_id` INTEGER NOT NULL, `semester_id` INTEGER NOT NULL, `student_id` INTEGER NOT NULL, `other_details` VARCHAR(255), FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ), FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ), FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ) ); CREATE TABLE `Student_Enrolment_Courses` ( `student_course_id` INTEGER PRIMARY KEY, `course_id` INTEGER NOT NULL, `student_enrolment_id` INTEGER NOT NULL, FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ), FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` ) );  CREATE TABLE `Transcripts` ( `transcript_id` INTEGER PRIMARY KEY, `transcript_date` DATETIME, `other_details` VARCHAR(255) );  CREATE TABLE `Transcript_Contents` ( `student_course_id` INTEGER NOT NULL, `transcript_id` INTEGER NOT NULL, FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ), FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` ) );  "
4,2834,easy,product_catalog,SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3,Find the list of attribute data types possessed by more than 3 attribute definitions.,"PRAGMA foreign_keys = ON;  CREATE TABLE `Attribute_Definitions` ( `attribute_id` INTEGER PRIMARY KEY, `attribute_name` VARCHAR(30), `attribute_data_type` VARCHAR(10) ); CREATE TABLE `Catalogs` ( `catalog_id` INTEGER PRIMARY KEY, `catalog_name` VARCHAR(50), `catalog_publisher` VARCHAR(80), `date_of_publication` DATETIME, `date_of_latest_revision` DATETIME ); CREATE TABLE `Catalog_Structure` ( `catalog_level_number` INTEGER PRIMARY KEY, `catalog_id` INTEGER NOT NULL, `catalog_level_name` VARCHAR(50), FOREIGN KEY (`catalog_id` ) REFERENCES `Catalogs`(`catalog_id` ) );  CREATE TABLE `Catalog_Contents` ( `catalog_entry_id` INTEGER PRIMARY KEY, `catalog_level_number` INTEGER NOT NULL, `parent_entry_id` INTEGER, `previous_entry_id` INTEGER, `next_entry_id` INTEGER, `catalog_entry_name` VARCHAR(80), `product_stock_number` VARCHAR(50), `price_in_dollars` DOUBLE NULL, `price_in_euros` DOUBLE NULL, `price_in_pounds` DOUBLE NULL, `capacity` VARCHAR(20), `length` VARCHAR(20), `height` VARCHAR(20), `width` VARCHAR(20), FOREIGN KEY (`catalog_level_number` ) REFERENCES `Catalog_Structure`(`catalog_level_number` ) ); CREATE TABLE `Catalog_Contents_Additional_Attributes` ( `catalog_entry_id` INTEGER NOT NULL, `catalog_level_number` INTEGER NOT NULL, `attribute_id` INTEGER NOT NULL, `attribute_value` VARCHAR(255) NOT NULL, FOREIGN KEY (`catalog_entry_id` ) REFERENCES `Catalog_Contents`(`catalog_entry_id` ), FOREIGN KEY (`catalog_level_number` ) REFERENCES `Catalog_Structure`(`catalog_level_number` ) ); "
5,477,easy,wta_1,SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50,Find the codes of countries that have more than 50 players.,"CRloser_rank_pointsEATE TABLE players(     ""player_id"" INT PRIMARY KEY,     ""first_name"" TEXT,     ""last_name"" TEXT,     ""hand"" TEXT,     ""birth_date"" DATE,     ""country_code"" TEXT ); CREATE TABLE matches(   ""best_of"" INT,   ""draw_size"" INT,   ""loser_age"" FLOAT,   ""loser_entry"" TEXT,   ""loser_hand"" TEXT,   ""loser_ht"" INT,   ""loser_id"" INT,   ""loser_ioc"" TEXT,   ""loser_name"" TEXT,   ""loser_rank"" INT,   ""loser_rank_points"" INT,   ""loser_seed"" INT,   ""match_num"" INT,   ""minutes"" INT,   ""round"" TEXT,   ""score"" TEXT,   ""surface"" TEXT,   ""tourney_date"" DATE,   ""tourney_id"" TEXT,   ""tourney_level"" TEXT,   ""tourney_name"" TEXT,   ""winner_age"" FLOAT,   ""winner_entry"" TEXT,   ""winner_hand"" TEXT,   ""winner_ht"" INT,   ""winner_id"" INT,   ""winner_ioc"" TEXT,   ""winner_name"" TEXT,   ""winner_rank"" INT,   ""winner_rank_points"" INT,   ""winner_seed"" INT,   ""year"" INT,   FOREIGN KEY(loser_id) REFERENCES players(player_id),   FOREIGN KEY(winner_id) REFERENCES players(player_id) );    CREATE TABLE qualifying_matches(   ""best_of"" INT,   ""draw_size"" INT,   ""l_1stIn"" TEXT,   ""l_1stWon"" TEXT,   ""l_2ndWon"" TEXT,   ""l_SvGms"" TEXT,   ""l_ace"" TEXT,   ""l_bpFaced"" TEXT,   ""l_bpSaved"" TEXT,   ""l_df"" TEXT,   ""l_svpt"" TEXT,   ""loser_age"" FLOAT,   ""loser_entry"" TEXT,   ""loser_hand"" TEXT,   ""loser_ht"" INT,   ""loser_id"" INT,   ""loser_ioc"" TEXT,   ""loser_name"" TEXT,   ""loser_rank"" INT,   ""loser_rank_points"" INT,   ""loser_seed"" INT,   ""match_num"" INT,   ""minutes"" INT,   ""round"" TEXT,   ""score"" TEXT,   ""surface"" TEXT,   ""tourney_date"" DATE,   ""tourney_id"" TEXT,   ""tourney_level"" TEXT,   ""tourney_name"" TEXT,   ""w_1stIn"" TEXT,   ""w_1stWon"" TEXT,   ""w_2ndWon"" TEXT,   ""w_SvGms"" TEXT,   ""w_ace"" TEXT,   ""w_bpFaced"" TEXT,   ""w_bpSaved"" TEXT,   ""w_df"" TEXT,   ""w_svpt"" TEXT,   ""winner_age"" FLOAT,   ""winner_entry"" TEXT,   ""winner_hand"" TEXT,   ""winner_ht"" INT,   ""winner_id"" INT,   ""winner_ioc"" TEXT,   ""winner_name"" TEXT,   ""winner_rank"" INT,   ""winner_rank_points"" INT,   ""winner_seed"" INT,   ""year"" INT,   FOREIGN KEY(loser_id) REFERENCES players(player_id),   FOREIGN KEY(winner_id) REFERENCES players(player_id) );  CREATE TABLE rankings(   ""ranking_date"" DATE,   ""ranking"" INT,   ""player_id"" INT,   ""ranking_points"" INT,   ""tours"" INT,   FOREIGN KEY(player_id) REFERENCES players(player_id) );"
6,3676,easy,insurance_and_eClaims,SELECT count(*) FROM claims_processing_stages,How many claim processing stages are there in total?,"PRAGMA foreign_keys = ON; CREATE TABLE Customers ( Customer_ID INTEGER NOT NULL, Customer_Details VARCHAR(255) NOT NULL, PRIMARY KEY (Customer_ID) ); CREATE TABLE Staff ( Staff_ID INTEGER NOT NULL, Staff_Details VARCHAR(255) NOT NULL, PRIMARY KEY (Staff_ID) );  CREATE TABLE Policies ( Policy_ID INTEGER NOT NULL, Customer_ID INTEGER NOT NULL, Policy_Type_Code CHAR(15) NOT NULL, Start_Date DATETIME, End_Date DATETIME, PRIMARY KEY (Policy_ID), FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID) );   CREATE TABLE Claim_Headers ( Claim_Header_ID INTEGER NOT NULL, Claim_Status_Code CHAR(15) NOT NULL, Claim_Type_Code CHAR(15) NOT NULL, Policy_ID INTEGER NOT NULL, Date_of_Claim DATETIME, Date_of_Settlement DATETIME, Amount_Claimed DECIMAL(20,4), Amount_Piad DECIMAL(20,4), PRIMARY KEY (Claim_Header_ID), FOREIGN KEY (Policy_ID) REFERENCES Policies (Policy_ID) ); CREATE TABLE Claims_Documents ( Claim_ID INTEGER NOT NULL, Document_Type_Code CHAR(15) NOT NULL, Created_by_Staff_ID INTEGER, Created_Date INTEGER, PRIMARY KEY (Claim_ID, Document_Type_Code), FOREIGN KEY (Claim_ID) REFERENCES Claim_Headers (Claim_Header_ID), FOREIGN KEY (Created_by_Staff_ID) REFERENCES Staff (Staff_ID) ); CREATE TABLE Claims_Processing_Stages ( Claim_Stage_ID INTEGER NOT NULL, Next_Claim_Stage_ID INTEGER, Claim_Status_Name VARCHAR(255) NOT NULL, Claim_Status_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Claim_Stage_ID) ); CREATE TABLE Claims_Processing ( Claim_Processing_ID INTEGER NOT NULL, Claim_ID INTEGER NOT NULL, Claim_Outcome_Code CHAR(15) NOT NULL, Claim_Stage_ID INTEGER NOT NULL, Staff_ID INTEGER, PRIMARY KEY (Claim_Processing_ID), FOREIGN KEY (Claim_ID) REFERENCES Claim_Headers (Claim_Header_ID), FOREIGN KEY (Staff_ID) REFERENCES Staff (Staff_ID) ); "
7,1223,easy,geo,"SELECT density FROM state WHERE state_name  =  ""wyoming"";",what is the density of the wyoming,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );"
8,6325,easy,document_management,SELECT count(*) FROM users WHERE user_login  =  1,How many users are logged in?,"PRAGMA foreign_keys = ON;  CREATE TABLE `Roles` ( `role_code` VARCHAR(15) PRIMARY KEY, `role_description` VARCHAR(80) );  CREATE TABLE `Users` ( `user_id` INTEGER PRIMARY KEY, `role_code` VARCHAR(15) NOT NULL, `user_name` VARCHAR(40), `user_login` VARCHAR(40), `password` VARCHAR(40), FOREIGN KEY (`role_code` ) REFERENCES `Roles`(`role_code` ) ); CREATE TABLE `Document_Structures` ( `document_structure_code` VARCHAR(15) PRIMARY KEY, `parent_document_structure_code` VARCHAR(15), `document_structure_description` VARCHAR(80) ); CREATE TABLE `Functional_Areas` ( `functional_area_code` VARCHAR(15) PRIMARY KEY, `parent_functional_area_code` VARCHAR(15), `functional_area_description` VARCHAR(80) NOT NULL );  CREATE TABLE `Images` ( `image_id` INTEGER PRIMARY KEY, `image_alt_text` VARCHAR(80), `image_name` VARCHAR(40), `image_url` VARCHAR(255) ); CREATE TABLE `Documents` ( `document_code` VARCHAR(15) PRIMARY KEY, `document_structure_code` VARCHAR(15) NOT NULL, `document_type_code` VARCHAR(15) NOT NULL, `access_count` INTEGER, `document_name` VARCHAR(80), FOREIGN KEY (`document_structure_code` ) REFERENCES `Document_Structures`(`document_structure_code` ) );  CREATE TABLE `Document_Functional_Areas` ( `document_code` VARCHAR(15) NOT NULL, `functional_area_code` VARCHAR(15) NOT NULL, FOREIGN KEY (`document_code` ) REFERENCES `Documents`(`document_code` ), FOREIGN KEY (`functional_area_code` ) REFERENCES `Functional_Areas`(`functional_area_code` ) ); CREATE TABLE `Document_Sections` ( `section_id` INTEGER PRIMARY KEY, `document_code` VARCHAR(15) NOT NULL, `section_sequence` INTEGER, `section_code` VARCHAR(20), `section_title` VARCHAR(80), FOREIGN KEY (`document_code` ) REFERENCES `Documents`(`document_code` ) ); CREATE TABLE `Document_Sections_Images` ( `section_id` INTEGER NOT NULL, `image_id` INTEGER NOT NULL, PRIMARY KEY (`section_id`,`image_id`), FOREIGN KEY (`section_id` ) REFERENCES `Document_Sections`(`section_id` ), FOREIGN KEY (`image_id` ) REFERENCES `Images`(`image_id` ) );  "
9,6047,easy,club_1,SELECT clubname FROM club,Give me the name of each club.,"create table Student (          StuID        INTEGER PRIMARY KEY,          LName        VARCHAR(12),          Fname        VARCHAR(12),          Age      INTEGER,          Sex      VARCHAR(1),          Major        INTEGER,          Advisor      INTEGER,          city_code    VARCHAR(3)   );   create table Club (        ClubID           INTEGER PRIMARY KEY,        ClubName         VARCHAR(40),        ClubDesc         VARCHAR(1024),        ClubLocation VARCHAR(40) );  create table Member_of_club (        StuID            INTEGER,        ClubID           INTEGER,        Position     VARCHAR(40),        FOREIGN KEY(StuID) REFERENCES Student(StuID),        FOREIGN KEY(ClubID) REFERENCES Club(ClubID) );   teach kids and adults about computer basics.', 'AKW'); "
10,3361,easy,phone_1,"SELECT count(*) FROM phone WHERE Company_name = ""Nokia Corporation"";","How many phone hardware models are produced by the company named ""Nokia Corporation""?","PRAGMA foreign_keys=ON; BEGIN TRANSACTION; CREATE TABLE IF NOT EXISTS ""chip_model"" ( ""Model_name"" text, ""Launch_year"" real, ""RAM_MiB"" real, ""ROM_MiB"" real, ""Slots"" text, ""WiFi"" text, ""Bluetooth"" text, PRIMARY KEY (""Model_name"") ); CREATE TABLE IF NOT EXISTS ""screen_mode"" ( ""Graphics_mode"" real, ""Char_cells"" text, ""Pixels"" text, ""Hardware_colours"" real, ""used_kb"" real, ""map"" text, ""Type"" text, PRIMARY KEY (""Graphics_mode"") ); CREATE TABLE IF NOT EXISTS ""phone"" ( ""Company_name"" text, ""Hardware_Model_name"" text, ""Accreditation_type"" text, ""Accreditation_level"" text, ""Date"" text, ""chip_model"" text, ""screen_mode"" text, PRIMARY KEY(""Hardware_Model_name""), FOREIGN KEY (`screen_mode`) REFERENCES `screen_mode`(`Graphics_mode`), FOREIGN KEY (`chip_model`) REFERENCES `chip_model`(`Model_name`) ); COMMIT;"
11,6791,easy,soccer_2,SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie'),What is the count of states with college students playing in the mid position but not as goalies?,"/*   * SQL scripts for CS61 Intro to SQL lectures  * FILENAME SOCCER2.SQL  */  DROP TABLE  IF EXISTS Player; DROP TABLE  IF EXISTS Tryout; DROP TABLE  IF EXISTS College;  CREATE TABLE 	College    ( cName   	varchar(20) NOT NULL,     state   	varchar(2),     enr     	numeric(5,0),     PRIMARY KEY (cName)   );  CREATE TABLE 	Player   ( pID			numeric(5,0) NOT NULL,   	pName   	varchar(20),     yCard   	varchar(3),     HS      	numeric(5,0),     PRIMARY KEY (pID)   );  CREATE TABLE 	Tryout   ( pID			numeric(5,0),   	cName   	varchar(20),     pPos    	varchar(8),     decision    varchar(3),     PRIMARY KEY (pID, cName),     FOREIGN KEY (pID) REFERENCES Player(pID),     FOREIGN KEY (cName) REFERENCES College(cName)   );  /* note that ""left"" and ""right"" are reserved words in SQL */  "
12,1040,easy,geo,"SELECT population FROM city WHERE city_name  =  ""boulder"";",how many people in boulder,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );"
13,3898,easy,wrestler,SELECT Team FROM elimination GROUP BY Team HAVING COUNT(*)  >  3,Which teams had more than 3 eliminations?,"PRAGMA foreign_keys = ON;  CREATE TABLE ""wrestler"" ( ""Wrestler_ID"" int, ""Name"" text, ""Reign"" text, ""Days_held"" text, ""Location"" text, ""Event"" text, PRIMARY KEY (""Wrestler_ID"") );  CREATE TABLE ""Elimination"" ( ""Elimination_ID"" text, ""Wrestler_ID"" text, ""Team"" text, ""Eliminated_By"" text, ""Elimination_Move"" text, ""Time"" text, PRIMARY KEY (""Elimination_ID""), FOREIGN KEY (""Wrestler_ID"") REFERENCES ""wrestler""(""Wrestler_ID"") );  "
14,438,easy,wta_1,SELECT avg(winner_rank) FROM matches,What is the average rank for winners in all matches?,"CRloser_rank_pointsEATE TABLE players(     ""player_id"" INT PRIMARY KEY,     ""first_name"" TEXT,     ""last_name"" TEXT,     ""hand"" TEXT,     ""birth_date"" DATE,     ""country_code"" TEXT ); CREATE TABLE matches(   ""best_of"" INT,   ""draw_size"" INT,   ""loser_age"" FLOAT,   ""loser_entry"" TEXT,   ""loser_hand"" TEXT,   ""loser_ht"" INT,   ""loser_id"" INT,   ""loser_ioc"" TEXT,   ""loser_name"" TEXT,   ""loser_rank"" INT,   ""loser_rank_points"" INT,   ""loser_seed"" INT,   ""match_num"" INT,   ""minutes"" INT,   ""round"" TEXT,   ""score"" TEXT,   ""surface"" TEXT,   ""tourney_date"" DATE,   ""tourney_id"" TEXT,   ""tourney_level"" TEXT,   ""tourney_name"" TEXT,   ""winner_age"" FLOAT,   ""winner_entry"" TEXT,   ""winner_hand"" TEXT,   ""winner_ht"" INT,   ""winner_id"" INT,   ""winner_ioc"" TEXT,   ""winner_name"" TEXT,   ""winner_rank"" INT,   ""winner_rank_points"" INT,   ""winner_seed"" INT,   ""year"" INT,   FOREIGN KEY(loser_id) REFERENCES players(player_id),   FOREIGN KEY(winner_id) REFERENCES players(player_id) );    CREATE TABLE qualifying_matches(   ""best_of"" INT,   ""draw_size"" INT,   ""l_1stIn"" TEXT,   ""l_1stWon"" TEXT,   ""l_2ndWon"" TEXT,   ""l_SvGms"" TEXT,   ""l_ace"" TEXT,   ""l_bpFaced"" TEXT,   ""l_bpSaved"" TEXT,   ""l_df"" TEXT,   ""l_svpt"" TEXT,   ""loser_age"" FLOAT,   ""loser_entry"" TEXT,   ""loser_hand"" TEXT,   ""loser_ht"" INT,   ""loser_id"" INT,   ""loser_ioc"" TEXT,   ""loser_name"" TEXT,   ""loser_rank"" INT,   ""loser_rank_points"" INT,   ""loser_seed"" INT,   ""match_num"" INT,   ""minutes"" INT,   ""round"" TEXT,   ""score"" TEXT,   ""surface"" TEXT,   ""tourney_date"" DATE,   ""tourney_id"" TEXT,   ""tourney_level"" TEXT,   ""tourney_name"" TEXT,   ""w_1stIn"" TEXT,   ""w_1stWon"" TEXT,   ""w_2ndWon"" TEXT,   ""w_SvGms"" TEXT,   ""w_ace"" TEXT,   ""w_bpFaced"" TEXT,   ""w_bpSaved"" TEXT,   ""w_df"" TEXT,   ""w_svpt"" TEXT,   ""winner_age"" FLOAT,   ""winner_entry"" TEXT,   ""winner_hand"" TEXT,   ""winner_ht"" INT,   ""winner_id"" INT,   ""winner_ioc"" TEXT,   ""winner_name"" TEXT,   ""winner_rank"" INT,   ""winner_rank_points"" INT,   ""winner_seed"" INT,   ""year"" INT,   FOREIGN KEY(loser_id) REFERENCES players(player_id),   FOREIGN KEY(winner_id) REFERENCES players(player_id) );  CREATE TABLE rankings(   ""ranking_date"" DATE,   ""ranking"" INT,   ""player_id"" INT,   ""ranking_points"" INT,   ""tours"" INT,   FOREIGN KEY(player_id) REFERENCES players(player_id) );"
15,3182,easy,race_track,SELECT DISTINCT CLASS FROM race,What are the distinct classes that races can have?,"PRAGMA foreign_keys = ON;  CREATE TABLE ""race"" ( ""Race_ID"" int, ""Name"" text, ""Class"" text, ""Date"" text, ""Track_ID"" text, PRIMARY KEY (""Race_ID""), FOREIGN KEY (""Track_ID"") REFERENCES ""track""(""Track_ID"") );  CREATE TABLE ""track"" ( ""Track_ID"" int, ""Name"" text, ""Location"" text, ""Seating"" real, ""Year_Opened"" real, PRIMARY KEY (""Track_ID"") );  "
16,3406,easy,match_season,SELECT Name FROM Team,What are the names of all teams?,"PRAGMA foreign_keys = ON;   CREATE TABLE ""country"" (     ""Country_id"" int,     ""Country_name"" text,     ""Capital"" text,     ""Official_native_language"" text,     PRIMARY KEY (""Country_id"") );   CREATE TABLE `team` (       `Team_id` int,       `Name` text,       PRIMARY KEY (`Team_id`) ) ;  CREATE TABLE ""match_season"" (     ""Season"" real,     ""Player"" text,     ""Position"" text,     ""Country"" int,     ""Team"" int,     ""Draft_Pick_Number"" int,     ""Draft_Class"" text,     ""College"" text,     PRIMARY KEY (""Season""),     FOREIGN KEY (`Country`) REFERENCES `country`(`Country_id`),     FOREIGN KEY (`Team`) REFERENCES `team`(`Team_id`) );   CREATE TABLE ""player"" (     ""Player_ID"" int,     ""Player"" text,     ""Years_Played"" text,     ""Total_WL"" text,     ""Singles_WL"" text,     ""Doubles_WL"" text,     ""Team"" int,     PRIMARY KEY (""Player_ID""),     FOREIGN KEY (`Team`) REFERENCES `team`(`Team_id`) );    "
17,1220,easy,geo,SELECT SUM ( area ) FROM state;,what is the area of all the states combined,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );"
18,7422,easy,dorm_1,SELECT dorm_name FROM dorm WHERE gender  =  'F',Find the name of dorms only for female (F gender).," create table Student (         StuID        INTEGER PRIMARY KEY,         LName        VARCHAR(12),         Fname        VARCHAR(12),         Age      INTEGER,         Sex      VARCHAR(1),         Major        INTEGER,         Advisor      INTEGER,         city_code    VARCHAR(3)  );    create table Dorm (        dormid		INTEGER,        dorm_name	VARCHAR(20),        student_capacity	INTEGER,        gender			VARCHAR(1) ) ;  create table Dorm_amenity (        amenid			INTEGER,        amenity_name		VARCHAR(25) ) ;  create table Has_amenity (        dormid			INTEGER,        amenid				INTEGER, 	FOREIGN KEY (dormid) REFERENCES `Dorm`(dormid), 	FOREIGN KEY (amenid) REFERENCES `Dorm_amenity`(amenid) );  create table Lives_in (        stuid 	      INTEGER,        dormid		INTEGER,        room_number	INTEGER, 	FOREIGN KEY (stuid) REFERENCES `Student`(StuID),         FOREIGN KEY (dormid) REFERENCES `Dorm`(dormid) );  "
19,2563,easy,department_management,SELECT name FROM head WHERE born_state != 'California',What are the names of the heads who are born outside the California state?,"PRAGMA foreign_keys=ON; BEGIN TRANSACTION; CREATE TABLE IF NOT EXISTS ""department"" ( ""Department_ID"" int, ""Name"" text, ""Creation"" text, ""Ranking"" int, ""Budget_in_Billions"" real, ""Num_Employees"" real, PRIMARY KEY (""Department_ID"") ); CREATE TABLE IF NOT EXISTS ""head"" ( ""head_ID"" int, ""name"" text, ""born_state"" text, ""age"" real, PRIMARY KEY (""head_ID"") ); CREATE TABLE IF NOT EXISTS ""management"" ( ""department_ID"" int, ""head_ID"" int, ""temporary_acting"" text, PRIMARY KEY (""Department_ID"",""head_ID""), FOREIGN KEY (""Department_ID"") REFERENCES `department`(""Department_ID""), FOREIGN KEY (""head_ID"") REFERENCES `head`(""head_ID"") ); COMMIT; "
20,5991,easy,cre_Doc_Tracking_DB,SELECT count(*) FROM Employees,Find the number of employees we have.,"PRAGMA foreign_keys = ON; CREATE TABLE Ref_Document_Types ( Document_Type_Code CHAR(15) NOT NULL, Document_Type_Name VARCHAR(255) NOT NULL, Document_Type_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Document_Type_Code) );  CREATE TABLE Ref_Calendar ( Calendar_Date DATETIME NOT NULL, Day_Number INTEGER, PRIMARY KEY (Calendar_Date) ); CREATE TABLE Ref_Locations ( Location_Code CHAR(15) NOT NULL, Location_Name VARCHAR(255) NOT NULL, Location_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Location_Code) );  CREATE TABLE Roles ( Role_Code CHAR(15) NOT NULL, Role_Name VARCHAR(255), Role_Description VARCHAR(255), PRIMARY KEY (Role_Code) );  CREATE TABLE All_Documents ( Document_ID INTEGER NOT NULL, Date_Stored DATETIME, Document_Type_Code CHAR(15) NOT NULL, Document_Name CHAR(255), Document_Description CHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Document_ID), FOREIGN KEY (Document_Type_Code) REFERENCES Ref_Document_Types (Document_Type_Code), FOREIGN KEY (Date_Stored) REFERENCES Ref_Calendar (Calendar_Date) );  CREATE TABLE Employees ( Employee_ID INTEGER NOT NULL, Role_Code CHAR(15) NOT NULL, Employee_Name VARCHAR(255), Gender_MFU CHAR(1) NOT NULL, Date_of_Birth DATETIME NOT NULL, Other_Details VARCHAR(255), PRIMARY KEY (Employee_ID), FOREIGN KEY (Role_Code) REFERENCES Roles (Role_Code) );  CREATE TABLE Document_Locations ( Document_ID INTEGER NOT NULL, Location_Code CHAR(15) NOT NULL, Date_in_Location_From DATETIME NOT NULL, Date_in_Locaton_To DATETIME, PRIMARY KEY (Document_ID, Location_Code, Date_in_Location_From), FOREIGN KEY (Location_Code) REFERENCES Ref_Locations (Location_Code), FOREIGN KEY (Date_in_Location_From) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Date_in_Locaton_To) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Document_ID) REFERENCES All_Documents (Document_ID) );  CREATE TABLE Documents_to_be_Destroyed ( Document_ID INTEGER NOT NULL, Destruction_Authorised_by_Employee_ID INTEGER, Destroyed_by_Employee_ID INTEGER, Planned_Destruction_Date DATETIME, Actual_Destruction_Date DATETIME, Other_Details VARCHAR(255), PRIMARY KEY (Document_ID), FOREIGN KEY (Destroyed_by_Employee_ID) REFERENCES Employees (Employee_ID), FOREIGN KEY (Destruction_Authorised_by_Employee_ID) REFERENCES Employees (Employee_ID), FOREIGN KEY (Planned_Destruction_Date) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Actual_Destruction_Date) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Document_ID) REFERENCES All_Documents (Document_ID) ); "
21,4655,easy,inn_1,SELECT count(DISTINCT bedType) FROM Rooms;,Find the number of distinct bed types available in this inn.,"CREATE TABLE ""Rooms"" (  	""RoomId"" TEXT PRIMARY KEY, 	""roomName"" TEXT,  	""beds"" INTEGER,  	""bedType"" TEXT,  	""maxOccupancy"" INTEGER,  	""basePrice"" INTEGER,  	""decor"" TEXT  );  CREATE TABLE ""Reservations"" (  	""Code"" INTEGER PRIMARY KEY,  	""Room"" TEXT,  	""CheckIn"" TEXT,  	""CheckOut"" TEXT,  	""Rate"" REAL,  	""LastName"" TEXT,  	""FirstName"" TEXT,  	""Adults"" INTEGER,  	""Kids"" INTEGER, 	FOREIGN KEY (Room) REFERENCES Rooms(RoomId) ); "
22,7815,easy,customers_and_addresses,"SELECT customer_name FROM customers WHERE payment_method  =  ""Cash""","What are the names of customers who use payment method ""Cash""?","PRAGMA foreign_keys = ON;  CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `address_content` VARCHAR(80), `city` VARCHAR(50), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(50), `country` VARCHAR(50), `other_address_details` VARCHAR(255) );  CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_details` VARCHAR(255) ); CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `payment_method` VARCHAR(15) NOT NULL, `customer_name` VARCHAR(80), `date_became_customer` DATETIME, `other_customer_details` VARCHAR(255) ); CREATE TABLE `Customer_Addresses` ( `customer_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_address_from` DATETIME NOT NULL, `address_type` VARCHAR(15) NOT NULL, `date_address_to` DATETIME, FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) ); CREATE TABLE `Customer_Contact_Channels` ( `customer_id` INTEGER NOT NULL, `channel_code` VARCHAR(15) NOT NULL, `active_from_date` DATETIME NOT NULL, `active_to_date` DATETIME, `contact_number` VARCHAR(50) NOT NULL, FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) ); CREATE TABLE `Customer_Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `order_status` VARCHAR(15) NOT NULL, `order_date` DATETIME, `order_details` VARCHAR(255), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) );  CREATE TABLE `Order_Items` ( `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, `order_quantity` VARCHAR(15), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ), FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ) ); "
23,3086,easy,customers_card_transactions,SELECT count(*) FROM Accounts,How many accounts do we have?,"PRAGMA foreign_keys = ON;  CREATE TABLE `Accounts` ( `account_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `account_name` VARCHAR(50), `other_account_details` VARCHAR(255) ); CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_first_name` VARCHAR(20), `customer_last_name` VARCHAR(20), `customer_address` VARCHAR(255), `customer_phone` VARCHAR(255), `customer_email` VARCHAR(255), `other_customer_details` VARCHAR(255) ); CREATE TABLE `Customers_Cards` ( `card_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `card_type_code` VARCHAR(15) NOT NULL, `card_number` VARCHAR(80), `date_valid_from` DATETIME, `date_valid_to` DATETIME, `other_card_details` VARCHAR(255) ); CREATE TABLE `Financial_Transactions` ( `transaction_id` INTEGER NOT NULL , `previous_transaction_id` INTEGER, `account_id` INTEGER NOT NULL, `card_id` INTEGER NOT NULL, `transaction_type` VARCHAR(15) NOT NULL, `transaction_date` DATETIME, `transaction_amount` DOUBLE NULL, `transaction_comment` VARCHAR(255), `other_transaction_details` VARCHAR(255), FOREIGN KEY (`card_id` ) REFERENCES `Customers_Cards`(`card_id` ), FOREIGN KEY (`account_id` ) REFERENCES `Accounts`(`account_id` ) );                 "
24,1143,easy,geo,SELECT COUNT ( state_name ) FROM state;,how many states does usa have,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );"
25,6844,easy,cre_Drama_Workshop_Groups,SELECT count(*) FROM BOOKINGS,How many bookings do we have?,"PRAGMA foreign_keys = ON;  CREATE TABLE Ref_Payment_Methods ( payment_method_code CHAR(10) NOT NULL, payment_method_description VARCHAR(80), PRIMARY KEY (payment_method_code), UNIQUE (payment_method_code) ); CREATE TABLE Ref_Service_Types ( Service_Type_Code CHAR(15) NOT NULL, Parent_Service_Type_Code CHAR(15), Service_Type_Description VARCHAR(255), PRIMARY KEY (Service_Type_Code), UNIQUE (Service_Type_Code) );  CREATE TABLE Addresses ( Address_ID VARCHAR(100) NOT NULL, Line_1 VARCHAR(255), Line_2 VARCHAR(255), City_Town VARCHAR(255), State_County VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Address_ID), UNIQUE (Address_ID) ); CREATE TABLE Products ( Product_ID VARCHAR(100) NOT NULL, Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Product_Description VARCHAR(255), Other_Product_Service_Details VARCHAR(255), PRIMARY KEY (Product_ID), UNIQUE (Product_ID) ); CREATE TABLE Marketing_Regions ( Marketing_Region_Code CHAR(15) NOT NULL, Marketing_Region_Name VARCHAR(255) NOT NULL, Marketing_Region_Descriptrion VARCHAR(255) NOT NULL, Other_Details VARCHAR(255), PRIMARY KEY (Marketing_Region_Code), UNIQUE (Marketing_Region_Code) );  CREATE TABLE Clients ( Client_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Customer_Email_Address VARCHAR(255), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Client_ID), UNIQUE (Client_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) ); CREATE TABLE Drama_Workshop_Groups ( Workshop_Group_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Currency_Code CHAR(15) NOT NULL, Marketing_Region_Code CHAR(15) NOT NULL, Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Workshop_Group_ID), UNIQUE (Workshop_Group_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) ); CREATE TABLE Performers ( Performer_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Performer_ID), UNIQUE (Performer_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) ); CREATE TABLE Customers ( Customer_ID VARCHAR(100) NOT NULL, Address_ID INTEGER NOT NULL, Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Customer_ID), UNIQUE (Customer_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) ); CREATE TABLE Stores ( Store_ID VARCHAR(100) NOT NULL, Address_ID INTEGER NOT NULL, Marketing_Region_Code CHAR(15) NOT NULL, Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Store_ID), UNIQUE (Store_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID), FOREIGN KEY (Marketing_Region_Code) REFERENCES Marketing_Regions (Marketing_Region_Code) ); CREATE TABLE Bookings ( Booking_ID INTEGER NOT NULL , Customer_ID INTEGER NOT NULL, Workshop_Group_ID VARCHAR(100) NOT NULL, Status_Code CHAR(15) NOT NULL, Store_ID INTEGER NOT NULL, Order_Date DATETIME NOT NULL, Planned_Delivery_Date DATETIME NOT NULL, Actual_Delivery_Date DATETIME NOT NULL, Other_Order_Details VARCHAR(255), PRIMARY KEY (Booking_ID), UNIQUE (Booking_ID), FOREIGN KEY (Customer_ID) REFERENCES Clients (Client_ID), FOREIGN KEY (Workshop_Group_ID) REFERENCES Drama_Workshop_Groups (Workshop_Group_ID) ); CREATE TABLE Performers_in_Bookings ( Order_ID INTEGER NOT NULL, Performer_ID INTEGER NOT NULL, PRIMARY KEY (Order_ID, Performer_ID), FOREIGN KEY (Performer_ID) REFERENCES Performers (Performer_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID) ); CREATE TABLE Customer_Orders ( Order_ID INTEGER NOT NULL , Customer_ID INTEGER NOT NULL, Store_ID INTEGER NOT NULL, Order_Date DATETIME NOT NULL, Planned_Delivery_Date DATETIME NOT NULL, Actual_Delivery_Date DATETIME NOT NULL, Other_Order_Details VARCHAR(255), PRIMARY KEY (Order_ID), UNIQUE (Order_ID), FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY (Store_ID) REFERENCES Stores (Store_ID) ); CREATE TABLE Order_Items ( Order_Item_ID INTEGER NOT NULL , Order_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), PRIMARY KEY (Order_Item_ID), FOREIGN KEY (Order_ID) REFERENCES Customer_Orders (Order_ID), FOREIGN KEY (Product_ID) REFERENCES Products (Product_ID) ); CREATE TABLE Invoices ( Invoice_ID INTEGER NOT NULL, Order_ID INTEGER NOT NULL, payment_method_code CHAR(15), Product_ID INTEGER NOT NULL, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), Order_Item_ID INTEGER NOT NULL, PRIMARY KEY (Invoice_ID), FOREIGN KEY (Order_ID) REFERENCES Customer_Orders (Order_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID), FOREIGN KEY (payment_method_code) REFERENCES Ref_Payment_Methods (payment_method_code) ); CREATE TABLE Services ( Service_ID INTEGER NOT NULL, Service_Type_Code CHAR(15), Workshop_Group_ID INTEGER NOT NULL, Product_Description VARCHAR(255), Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Other_Product_Service_Details VARCHAR(255), PRIMARY KEY (Service_ID), UNIQUE (Service_ID), FOREIGN KEY (Workshop_Group_ID) REFERENCES Drama_Workshop_Groups (Workshop_Group_ID), FOREIGN KEY (Service_Type_Code) REFERENCES Ref_Service_Types (Service_Type_Code) ); CREATE TABLE Bookings_Services ( Order_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, PRIMARY KEY (Order_ID, Product_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID), FOREIGN KEY (Product_ID) REFERENCES Services (Service_ID) );  CREATE TABLE Invoice_Items ( Invoice_Item_ID INTEGER NOT NULL , Invoice_ID INTEGER NOT NULL, Order_ID INTEGER NOT NULL, Order_Item_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, Order_Quantity INTEGER, Other_Item_Details VARCHAR(255), PRIMARY KEY (Invoice_Item_ID), FOREIGN KEY (Order_Item_ID) REFERENCES Order_Items (Order_Item_ID), FOREIGN KEY (Invoice_ID) REFERENCES Invoices (Invoice_ID), FOREIGN KEY (Order_ID, Product_ID) REFERENCES Bookings_Services (Order_ID,Product_ID) ); "
26,5501,easy,baseball_1,SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4;,Which cities have 2 to 4 parks?,"PRAGMA foreign_keys=OFF; BEGIN TRANSACTION; CREATE TABLE all_star (     player_id TEXT,     year INTEGER,     game_num INTEGER,     game_id TEXT,     team_id TEXT,     league_id TEXT,     gp NUMERIC,     starting_pos NUMERIC,     foreign key (player_id) references player(player_id) ); CREATE TABLE appearances (     year INTEGER,     team_id TEXT,     league_id TEXT,     player_id TEXT,     g_all NUMERIC,     gs NUMERIC,     g_batting INTEGER,     g_defense NUMERIC,     g_p INTEGER,     g_c INTEGER,     g_1b INTEGER,     g_2b INTEGER,     g_3b INTEGER,     g_ss INTEGER,     g_lf INTEGER,     g_cf INTEGER,     g_rf INTEGER,     g_of INTEGER,     g_dh NUMERIC,     g_ph NUMERIC,     g_pr NUMERIC,     foreign key (team_id) references team(team_id),     foreign key (player_id) references player(player_id) ); CREATE TABLE manager_award (     player_id TEXT,     award_id TEXT,     year INTEGER,     league_id TEXT,     tie TEXT,     notes NUMERIC,     foreign key (player_id) references player(player_id) ); CREATE TABLE player_award (  	player_id TEXT,  	award_id TEXT,  	year INTEGER,  	league_id TEXT,     	tie TEXT,     	notes TEXT, 	foreign key (player_id) references player(player_id) ); CREATE TABLE manager_award_vote (     award_id TEXT,     year INTEGER,     league_id TEXT,     player_id TEXT,     points_won INTEGER,     points_max INTEGER,     votes_first INTEGER); CREATE TABLE player_award_vote (     award_id TEXT,     year INTEGER,     league_id TEXT,     player_id TEXT,     points_won NUMERIC,     points_max INTEGER,     votes_first NUMERIC,    foreign key (player_id) references player(player_id) ); CREATE TABLE batting ( player_id TEXT, year INTEGER, stint INTEGER, team_id TEXT, league_id TEXT, g INTEGER, ab NUMERIC,     r NUMERIC,     h NUMERIC,     double NUMERIC,     triple NUMERIC,     hr NUMERIC,     rbi NUMERIC,     sb NUMERIC,     cs NUMERIC,     bb NUMERIC,     so NUMERIC,     ibb NUMERIC,     hbp NUMERIC,     sh NUMERIC,     sf NUMERIC,     g_idp NUMERIC, foreign key (player_id) references player(player_id) ); CREATE TABLE batting_postseason (     year INTEGER,     round TEXT,     player_id TEXT,     team_id TEXT,     league_id TEXT,     g INTEGER,     ab INTEGER,     r INTEGER,     h INTEGER,     double INTEGER,     triple INTEGER,     hr INTEGER,     rbi INTEGER,     sb INTEGER,     cs NUMERIC,     bb INTEGER,     so INTEGER,     ibb NUMERIC,     hbp NUMERIC,     sh NUMERIC,     sf NUMERIC,     g_idp NUMERIC, 	foreign key (player_id) references player(player_id), 	foreign key (team_id) references team(team_id) ); CREATE TABLE player_college ( player_id TEXT,     college_id TEXT,     year INTEGER, 	foreign key (player_id) references player(player_id), 	foreign key (college_id) references college(college_id) ); CREATE TABLE fielding (     player_id TEXT,     year INTEGER,     stint INTEGER,     team_id TEXT,     league_id TEXT,     pos TEXT,     g INTEGER,     gs NUMERIC,     inn_outs NUMERIC,     po NUMERIC,     a NUMERIC,     e NUMERIC,     dp NUMERIC,     pb NUMERIC,     wp NUMERIC,     sb NUMERIC,     cs NUMERIC,     zr NUMERIC, 	foreign key (player_id) references player(player_id) ); CREATE TABLE fielding_outfield (     player_id TEXT,     year INTEGER,     stint INTEGER,     glf NUMERIC,     gcf NUMERIC,     grf NUMERIC, 	foreign key (player_id) references player(player_id) ); CREATE TABLE fielding_postseason (     player_id TEXT,     year INTEGER,     team_id TEXT,     league_id TEXT,     round TEXT,     pos TEXT,     g INTEGER,     gs NUMERIC,     inn_outs NUMERIC,     po INTEGER,     a INTEGER,     e INTEGER,     dp INTEGER,     tp INTEGER,     pb NUMERIC,     sb NUMERIC,     cs NUMERIC, 	foreign key (player_id) references player(player_id), 	foreign key (team_id) references player(team_id) ); CREATE TABLE hall_of_fame (     player_id TEXT,     yearid INTEGER,     votedby TEXT,     ballots NUMERIC,     needed NUMERIC,     votes NUMERIC,     inducted TEXT,     category TEXT,     needed_note TEXT, 	foreign key (player_id) references player(player_id) ); CREATE TABLE home_game (     year INTEGER,     league_id TEXT,     team_id TEXT,     park_id TEXT,     span_first TEXT,     span_last TEXT,     games INTEGER,     openings INTEGER,     attendance INTEGER, 	foreign key (team_id) references team(team_id), 	foreign key (park_id) references park(park_id) ); CREATE TABLE manager (     player_id TEXT,     year INTEGER,     team_id TEXT,     league_id TEXT,     inseason INTEGER,     g INTEGER,     w INTEGER,     l INTEGER,     rank NUMERIC,     plyr_mgr TEXT, 	foreign key (team_id) references team(team_id) ); CREATE TABLE manager_half (     player_id TEXT,     year INTEGER,     team_id TEXT,     league_id TEXT,     inseason INTEGER,     half INTEGER,     g INTEGER,     w INTEGER,     l INTEGER,     rank INTEGER, 	foreign key (team_id) references team(team_id) ); CREATE TABLE player (     player_id TEXT,     birth_year NUMERIC,     birth_month NUMERIC,     birth_day NUMERIC,     birth_country TEXT,     birth_state TEXT,     birth_city TEXT,     death_year NUMERIC,     death_month NUMERIC,     death_day NUMERIC,     death_country TEXT,     death_state TEXT,     death_city TEXT,     name_first TEXT,     name_last TEXT,     name_given TEXT,     weight NUMERIC,     height NUMERIC,     bats TEXT,     throws TEXT,     debut TEXT,     final_game TEXT,     retro_id TEXT,     bbref_id TEXT); Macomb County','Steve','Gromek','Stephen Joseph',180,74,'B','R','1941-08-18','1957-07-25','groms101','gromest01'); Calhoun Cty','Charlie','Grover','Charles Byrd',185,73,'L','R','1913-09-09','1913-09-12','grovc101','grovech01'); CREATE TABLE park (     park_id TEXT,     park_name TEXT,     park_alias TEXT,     city TEXT,     state TEXT,     country TEXT); Anaheim Stadium','Anaheim','CA','US'); Ameriquest Field','Arlington','TX','US'); Union Grounds','Chicago','IL','US'); Cubs Park','Chicago','IL','US'); Comiskey Park II','Chicago','IL','US'); Briggs Stadium','Detroit','MI','US'); Astros Field','Houston','TX','US'); Pro Player Stadium; Dolphin Stadium; LandShark Stadium','Miami','FL','US'); SBC Park','San Francisco','CA','US'); CREATE TABLE pitching (     player_id TEXT,     year INTEGER,     stint INTEGER,     team_id TEXT,     league_id TEXT,     w INTEGER,     l INTEGER,     g INTEGER,     gs INTEGER,     cg INTEGER,     sho INTEGER,     sv INTEGER,     ipouts NUMERIC,     h INTEGER,     er INTEGER,     hr INTEGER,     bb INTEGER,     so INTEGER,     baopp NUMERIC,     era NUMERIC,     ibb NUMERIC,     wp NUMERIC,     hbp NUMERIC,     bk INTEGER,     bfp NUMERIC,     gf NUMERIC,     r INTEGER,     sh NUMERIC,     sf NUMERIC,     g_idp NUMERIC); CREATE TABLE pitching_postseason (     player_id TEXT,     year INTEGER,     round TEXT,     team_id TEXT,     league_id TEXT,     w INTEGER,     l INTEGER,     g INTEGER,     gs INTEGER,     cg INTEGER,     sho INTEGER,     sv INTEGER,     ipouts INTEGER,     h INTEGER,     er INTEGER,     hr INTEGER,     bb INTEGER,     so INTEGER,     baopp TEXT,     era NUMERIC,     ibb NUMERIC,     wp NUMERIC,     hbp NUMERIC,     bk NUMERIC,     bfp NUMERIC,     gf INTEGER,     r INTEGER,     sh NUMERIC,     sf NUMERIC,     g_idp NUMERIC); CREATE TABLE salary (     year INTEGER,     team_id TEXT,     league_id TEXT,     player_id TEXT,     salary INTEGER); CREATE TABLE college (     college_id TEXT,     name_full TEXT,     city TEXT,     state TEXT,     country TEXT); CREATE TABLE postseason (     year INTEGER,     round TEXT,     team_id_winner TEXT,     league_id_winner TEXT,     team_id_loser TEXT,     league_id_loser TEXT,     wins INTEGER,     losses INTEGER,     ties INTEGER); CREATE TABLE team (     year INTEGER,     league_id TEXT,     team_id TEXT,     franchise_id TEXT,     div_id TEXT,     rank INTEGER,     g INTEGER,     ghome NUMERIC,     w INTEGER,     l INTEGER,     div_win TEXT,     wc_win TEXT,     lg_win TEXT,     ws_win TEXT,     r INTEGER,     ab INTEGER,     h INTEGER,     double INTEGER,     triple INTEGER,     hr INTEGER,     bb INTEGER,     so NUMERIC,     sb NUMERIC,     cs NUMERIC,     hbp NUMERIC,     sf NUMERIC,     ra INTEGER,     er INTEGER,     era NUMERIC,     cg INTEGER,     sho INTEGER,     sv INTEGER,     ipouts INTEGER,     ha INTEGER,     hra INTEGER,     bba INTEGER,     soa INTEGER,     e INTEGER,     dp NUMERIC,     fp NUMERIC,     name TEXT,     park TEXT,     attendance NUMERIC,     bpf INTEGER,     ppf INTEGER,     team_id_br TEXT,     team_id_lahman45 TEXT,     team_id_retro TEXT); CREATE TABLE team_franchise (     franchise_id TEXT,     franchise_name TEXT,     active TEXT,     na_assoc TEXT); CREATE TABLE team_half (     year INTEGER,     league_id TEXT,     team_id TEXT,     half INTEGER,     div_id TEXT,     div_win TEXT,     rank INTEGER,     g INTEGER,     w INTEGER,     l INTEGER); COMMIT;"
27,7648,easy,cre_Theme_park,SELECT Tourist_Details FROM VISITORS,What is the detail of each visitor?,"PRAGMA foreign_keys = ON; CREATE TABLE Ref_Hotel_Star_Ratings ( star_rating_code CHAR(15) NOT NULL, star_rating_description VARCHAR(80), PRIMARY KEY (star_rating_code), UNIQUE (star_rating_code) );   CREATE TABLE Locations ( Location_ID INTEGER NOT NULL, Location_Name VARCHAR(255), Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Location_ID) ); CREATE TABLE Ref_Attraction_Types ( Attraction_Type_Code CHAR(15) NOT NULL, Attraction_Type_Description VARCHAR(255), PRIMARY KEY (Attraction_Type_Code), UNIQUE (Attraction_Type_Code) );  CREATE TABLE Visitors ( Tourist_ID INTEGER NOT NULL, Tourist_Details VARCHAR(255), PRIMARY KEY (Tourist_ID), UNIQUE (Tourist_ID) ); CREATE TABLE Features ( Feature_ID INTEGER NOT NULL, Feature_Details VARCHAR(255), PRIMARY KEY (Feature_ID) );  CREATE TABLE Hotels ( hotel_id INTEGER NOT NULL, star_rating_code CHAR(15) NOT NULL, pets_allowed_yn CHAR(1), price_range real, other_hotel_details VARCHAR(255), PRIMARY KEY (hotel_id), FOREIGN KEY (star_rating_code) REFERENCES Ref_Hotel_Star_Ratings (star_rating_code) );  CREATE TABLE Tourist_Attractions ( Tourist_Attraction_ID INTEGER NOT NULL, Attraction_Type_Code CHAR(15) NOT NULL, Location_ID INTEGER NOT NULL, How_to_Get_There VARCHAR(255), Name VARCHAR(255), Description VARCHAR(255), Opening_Hours VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Tourist_Attraction_ID), FOREIGN KEY (Location_ID) REFERENCES Locations (Location_ID), FOREIGN KEY (Attraction_Type_Code) REFERENCES Ref_Attraction_Types (Attraction_Type_Code) );  CREATE TABLE Street_Markets ( Market_ID INTEGER NOT NULL, Market_Details VARCHAR(255), PRIMARY KEY (Market_ID), FOREIGN KEY (Market_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Shops ( Shop_ID INTEGER NOT NULL, Shop_Details VARCHAR(255), PRIMARY KEY (Shop_ID), FOREIGN KEY (Shop_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Museums ( Museum_ID INTEGER NOT NULL, Museum_Details VARCHAR(255), PRIMARY KEY (Museum_ID), FOREIGN KEY (Museum_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Royal_Family ( Royal_Family_ID INTEGER NOT NULL, Royal_Family_Details VARCHAR(255), PRIMARY KEY (Royal_Family_ID), FOREIGN KEY (Royal_Family_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Theme_Parks ( Theme_Park_ID INTEGER NOT NULL, Theme_Park_Details VARCHAR(255), PRIMARY KEY (Theme_Park_ID), FOREIGN KEY (Theme_Park_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) );   CREATE TABLE Visits ( Visit_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Tourist_ID INTEGER NOT NULL, Visit_Date DATETIME NOT NULL, Visit_Details VARCHAR(40) NOT NULL, PRIMARY KEY (Visit_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID), FOREIGN KEY (Tourist_ID) REFERENCES Visitors (Tourist_ID) );   CREATE TABLE Photos ( Photo_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Name VARCHAR(255), Description VARCHAR(255), Filename VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Photo_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Staff ( Staff_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Name VARCHAR(40), Other_Details VARCHAR(255), PRIMARY KEY (Staff_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) );   CREATE TABLE Tourist_Attraction_Features ( Tourist_Attraction_ID INTEGER NOT NULL, Feature_ID INTEGER NOT NULL, PRIMARY KEY (Tourist_Attraction_ID, Feature_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID), FOREIGN KEY (Feature_ID) REFERENCES Features (Feature_ID) ); "
28,3963,easy,cinema,SELECT count(*) FROM cinema,How many cinema do we have?," PRAGMA foreign_keys = ON;   CREATE TABLE ""film"" ( ""Film_ID"" int, ""Rank_in_series"" int, ""Number_in_season"" int, ""Title"" text, ""Directed_by"" text, ""Original_air_date"" text, ""Production_code"" text, PRIMARY KEY (""Film_ID"") );  CREATE TABLE ""cinema"" ( ""Cinema_ID"" int, ""Name"" text, ""Openning_year"" int, ""Capacity"" int, ""Location"" text, PRIMARY KEY (""Cinema_ID""));  CREATE TABLE ""schedule"" ( ""Cinema_ID"" int, ""Film_ID"" int, ""Date"" text, ""Show_times_per_day"" int, ""Price"" float, PRIMARY KEY (""Cinema_ID"",""Film_ID""), FOREIGN KEY (`Film_ID`) REFERENCES `film`(`Film_ID`), FOREIGN KEY (`Cinema_ID`) REFERENCES `cinema`(`Cinema_ID`) );   "
29,3553,easy,apartment_rentals,"SELECT date_of_birth FROM Guests WHERE gender_code  =  ""Male""","Return the date of birth for all the guests with gender code ""Male"".","PRAGMA foreign_keys = ON;  CREATE TABLE Apartment_Buildings ( building_id INTEGER NOT NULL, building_short_name CHAR(15), building_full_name VARCHAR(80), building_description VARCHAR(255), building_address VARCHAR(255), building_manager VARCHAR(50), building_phone VARCHAR(80), PRIMARY KEY (building_id), UNIQUE (building_id) );                  CREATE TABLE Apartments ( apt_id INTEGER NOT NULL , building_id INTEGER NOT NULL, apt_type_code CHAR(15), apt_number CHAR(10), bathroom_count INTEGER, bedroom_count INTEGER, room_count CHAR(5), PRIMARY KEY (apt_id), UNIQUE (apt_id), FOREIGN KEY (building_id) REFERENCES Apartment_Buildings (building_id) ); CREATE TABLE Apartment_Facilities ( apt_id INTEGER NOT NULL, facility_code CHAR(15) NOT NULL, PRIMARY KEY (apt_id, facility_code), FOREIGN KEY (apt_id) REFERENCES Apartments (apt_id) ); CREATE TABLE Guests ( guest_id INTEGER NOT NULL , gender_code CHAR(1), guest_first_name VARCHAR(80), guest_last_name VARCHAR(80), date_of_birth DATETIME, PRIMARY KEY (guest_id), UNIQUE (guest_id) );  CREATE TABLE Apartment_Bookings ( apt_booking_id INTEGER NOT NULL, apt_id INTEGER, guest_id INTEGER NOT NULL, booking_status_code CHAR(15) NOT NULL, booking_start_date DATETIME, booking_end_date DATETIME, PRIMARY KEY (apt_booking_id), UNIQUE (apt_booking_id), FOREIGN KEY (apt_id) REFERENCES Apartments (apt_id), FOREIGN KEY (guest_id) REFERENCES Guests (guest_id) ); CREATE TABLE View_Unit_Status ( apt_id INTEGER, apt_booking_id INTEGER, status_date DATETIME NOT NULL, available_yn BIT, PRIMARY KEY (status_date), FOREIGN KEY (apt_id) REFERENCES Apartments (apt_id), FOREIGN KEY (apt_booking_id) REFERENCES Apartment_Bookings (apt_booking_id) ); "
30,5126,easy,station_weather,SELECT count(DISTINCT services) FROM station,How many different services are provided by all stations?,"PRAGMA foreign_keys = ON;  CREATE TABLE ""train"" (     ""id"" int,     ""train_number"" int,     ""name"" text,     ""origin"" text,     ""destination"" text,     ""time"" text,     ""interval"" text,     primary key (""id"") );  CREATE TABLE ""station"" (     ""id"" int,     ""network_name"" text,     ""services"" text,     ""local_authority"" text,     primary key (""id"") );  CREATE TABLE ""route"" (     ""train_id"" int,     ""station_id"" int,     primary key (""train_id"", ""station_id""),     foreign key (""train_id"") references `train`(""id""),     foreign key (""station_id"") references `station`(""id"") );  CREATE TABLE ""weekly_weather"" (     ""station_id"" int,     ""day_of_week"" text,     ""high_temperature"" int,     ""low_temperature"" int,     ""precipitation"" real,     ""wind_speed_mph"" int,     primary key (""station_id"", ""day_of_week""),     foreign key (""station_id"") references ""station""(""id"") );  "
31,4167,easy,local_govt_in_alabama,SELECT service_type_code FROM services ORDER BY service_type_code,List the type of the services in alphabetical order.,"PRAGMA foreign_keys = ON;   CREATE TABLE Services ( Service_ID INTEGER NOT NULL, Service_Type_Code CHAR(15) NOT NULL, PRIMARY KEY (Service_ID) ); CREATE TABLE Participants ( Participant_ID INTEGER NOT NULL, Participant_Type_Code CHAR(15) NOT NULL, Participant_Details VARCHAR(255), PRIMARY KEY (Participant_ID) ); CREATE TABLE Events ( Event_ID INTEGER NOT NULL, Service_ID INTEGER NOT NULL, Event_Details VARCHAR(255), PRIMARY KEY (Event_ID), FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID) ); CREATE TABLE Participants_in_Events ( Event_ID INTEGER NOT NULL, Participant_ID INTEGER NOT NULL, PRIMARY KEY (Event_ID, Participant_ID), FOREIGN KEY (Participant_ID) REFERENCES Participants (Participant_ID), FOREIGN KEY (Event_ID) REFERENCES Events (Event_ID) ); "
32,7733,easy,game_1,"SELECT gtype FROM Video_games WHERE gname  =  ""Call of Destiny""",What is the type of video game Call of Destiny.,"create table Student (         StuID        INTEGER PRIMARY KEY,         LName        VARCHAR(12),         Fname        VARCHAR(12),         Age      INTEGER,         Sex      VARCHAR(1),         Major        INTEGER,         Advisor      INTEGER,         city_code    VARCHAR(3)  );  create table Video_Games (        GameID           INTEGER PRIMARY KEY,        GName            VARCHAR(40),        GType            VARCHAR(40) );  create table Plays_Games (        StuID                INTEGER,        GameID            INTEGER,        Hours_Played      INTEGER,        FOREIGN KEY(GameID) REFERENCES Video_Games(GameID),        FOREIGN KEY(StuID) REFERENCES Student(StuID) );  create table SportsInfo (   StuID INTEGER,   SportName VARCHAR(32),   HoursPerWeek INTEGER,   GamesPlayed INTEGER,   OnScholarship VARCHAR(1),   FOREIGN KEY(StuID) REFERENCES Student(StuID) );   "
33,289,easy,employee_hire_evaluation,SELECT sum(bonus) FROM evaluation,What is total bonus given in all evaluations?," PRAGMA foreign_keys = ON;  CREATE TABLE ""employee"" ( ""Employee_ID"" int, ""Name"" text, ""Age"" int, ""City"" text, PRIMARY KEY (""Employee_ID"") );   CREATE TABLE ""shop"" ( ""Shop_ID"" int, ""Name"" text, ""Location"" text, ""District"" text, ""Number_products"" int, ""Manager_name"" text, PRIMARY KEY (""Shop_ID"") );   CREATE TABLE ""hiring"" ( ""Shop_ID"" int, ""Employee_ID"" int, ""Start_from"" text, ""Is_full_time"" bool, PRIMARY KEY (""Employee_ID""), FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`), FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`) );  CREATE TABLE ""evaluation"" ( ""Employee_ID"" text, ""Year_awarded"" text, ""Bonus"" real, PRIMARY KEY (""Employee_ID"",""Year_awarded""), FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`) );   "
34,1160,easy,geo,"SELECT capital FROM state WHERE state_name  =  ""texas"";",what is the capital of texas,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );"
35,8313,easy,train_station,SELECT count(*) FROM station,How many train stations are there?,"PRAGMA foreign_keys = ON;  CREATE TABLE ""station"" ( ""Station_ID"" int, ""Name"" text, ""Annual_entry_exit"" real, ""Annual_interchanges"" real, ""Total_Passengers"" real, ""Location"" text, ""Main_Services"" text, ""Number_of_Platforms"" int, PRIMARY KEY (""Station_ID"") );  CREATE TABLE ""train"" ( ""Train_ID"" int, ""Name"" text, ""Time"" text, ""Service"" text, PRIMARY KEY (""Train_ID"") );  CREATE TABLE ""train_station"" ( ""Train_ID"" int, ""Station_ID"" int,	 PRIMARY KEY (""Train_ID"",""Station_ID""), FOREIGN KEY (""Train_ID"") REFERENCES ""train""(""Train_ID""), FOREIGN KEY (""Station_ID"") REFERENCES ""station""(""Station_ID"") );  "
36,2798,easy,musical,SELECT Name FROM actor WHERE Age != 20,List the name of actors whose age is not 20.,"PRAGMA foreign_keys = ON;  CREATE TABLE ""musical"" ( ""Musical_ID"" int, ""Name"" text, ""Year"" int, ""Award"" text, ""Category"" text, ""Nominee"" text, ""Result"" text, PRIMARY KEY (""Musical_ID"") );  CREATE TABLE ""actor"" ( ""Actor_ID"" int, ""Name"" text, ""Musical_ID"" int, ""Character"" text, ""Duration"" text, ""age"" int, PRIMARY KEY (""Actor_ID""), FOREIGN KEY (""Musical_ID"") REFERENCES ""actor""(""Actor_ID"") );  "
37,206,easy,flight_2,"SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  ""ATO""",Count the number of flights into ATO.,"CREATE TABLE 'airlines' ( 	uid INTEGER PRIMARY KEY,  	Airline TEXT,  	Abbreviation TEXT,  	Country TEXT ); CREATE TABLE 'airports' ( 	City TEXT,  	AirportCode TEXT PRIMARY KEY,  	AirportName TEXT,  	Country TEXT,  	CountryAbbrev TEXT ); CREATE TABLE 'flights' ( 	Airline INTEGER,  	FlightNo INTEGER,  	SourceAirport TEXT,  	DestAirport TEXT,  	PRIMARY KEY(Airline, FlightNo), 	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode), 	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode) );"
38,527,easy,student_transcripts_tracking,SELECT section_name FROM Sections ORDER BY section_name DESC,List the section_name in reversed lexicographical order.,"PRAGMA foreign_keys = ON; CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `line_1` VARCHAR(255), `line_2` VARCHAR(255), `line_3` VARCHAR(255), `city` VARCHAR(255), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(255), `country` VARCHAR(255), `other_address_details` VARCHAR(255) ); CREATE TABLE `Courses` ( `course_id` INTEGER PRIMARY KEY, `course_name` VARCHAR(255), `course_description` VARCHAR(255), `other_details` VARCHAR(255) );  CREATE TABLE `Departments` ( `department_id` INTEGER PRIMARY KEY, `department_name` VARCHAR(255), `department_description` VARCHAR(255), `other_details` VARCHAR(255) ); CREATE TABLE `Degree_Programs` ( `degree_program_id` INTEGER PRIMARY KEY, `department_id` INTEGER NOT NULL, `degree_summary_name` VARCHAR(255), `degree_summary_description` VARCHAR(255), `other_details` VARCHAR(255), FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` ) );  CREATE TABLE `Sections` ( `section_id` INTEGER PRIMARY KEY, `course_id` INTEGER NOT NULL, `section_name` VARCHAR(255), `section_description` VARCHAR(255), `other_details` VARCHAR(255), FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ) ); CREATE TABLE `Semesters` ( `semester_id` INTEGER PRIMARY KEY, `semester_name` VARCHAR(255), `semester_description` VARCHAR(255), `other_details` VARCHAR(255) ); CREATE TABLE `Students` ( `student_id` INTEGER PRIMARY KEY, `current_address_id` INTEGER NOT NULL, `permanent_address_id` INTEGER NOT NULL, `first_name` VARCHAR(80), `middle_name` VARCHAR(40), `last_name` VARCHAR(40), `cell_mobile_number` VARCHAR(40), `email_address` VARCHAR(40), `ssn` VARCHAR(40), `date_first_registered` DATETIME, `date_left` DATETIME, `other_student_details` VARCHAR(255), FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` ) );  CREATE TABLE `Student_Enrolment` ( `student_enrolment_id` INTEGER PRIMARY KEY, `degree_program_id` INTEGER NOT NULL, `semester_id` INTEGER NOT NULL, `student_id` INTEGER NOT NULL, `other_details` VARCHAR(255), FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ), FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ), FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ) ); CREATE TABLE `Student_Enrolment_Courses` ( `student_course_id` INTEGER PRIMARY KEY, `course_id` INTEGER NOT NULL, `student_enrolment_id` INTEGER NOT NULL, FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ), FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` ) );  CREATE TABLE `Transcripts` ( `transcript_id` INTEGER PRIMARY KEY, `transcript_date` DATETIME, `other_details` VARCHAR(255) );  CREATE TABLE `Transcript_Contents` ( `student_course_id` INTEGER NOT NULL, `transcript_id` INTEGER NOT NULL, FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ), FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` ) );  "
39,5568,easy,e_learning,SELECT address_line_1 FROM Course_Authors_and_Tutors,List the addresses of all the course authors or tutors.,"PRAGMA foreign_keys = ON; CREATE TABLE `Course_Authors_and_Tutors` ( `author_id` INTEGER PRIMARY KEY, `author_tutor_ATB` VARCHAR(3), `login_name` VARCHAR(40), `password` VARCHAR(40), `personal_name` VARCHAR(80), `middle_name` VARCHAR(80), `family_name` VARCHAR(80), `gender_mf` VARCHAR(1), `address_line_1` VARCHAR(80) );                  CREATE TABLE `Students` ( `student_id` INTEGER PRIMARY KEY, `date_of_registration` DATETIME, `date_of_latest_logon` DATETIME, `login_name` VARCHAR(40), `password` VARCHAR(10), `personal_name` VARCHAR(40), `middle_name` VARCHAR(40), `family_name` VARCHAR(40) ); CREATE TABLE `Subjects` ( `subject_id` INTEGER PRIMARY KEY, `subject_name` VARCHAR(120) ); CREATE TABLE `Courses` ( `course_id` INTEGER PRIMARY KEY, `author_id` INTEGER NOT NULL, `subject_id` INTEGER NOT NULL, `course_name` VARCHAR(120), `course_description` VARCHAR(255), FOREIGN KEY (`author_id` ) REFERENCES `Course_Authors_and_Tutors`(`author_id` ), FOREIGN KEY (`subject_id` ) REFERENCES `Subjects`(`subject_id` ) ); CREATE TABLE `Student_Course_Enrolment` ( `registration_id` INTEGER PRIMARY KEY, `student_id` INTEGER NOT NULL, `course_id` INTEGER NOT NULL, `date_of_enrolment` DATETIME NOT NULL, `date_of_completion` DATETIME NOT NULL, FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ), FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ) );  CREATE TABLE `Student_Tests_Taken` ( `registration_id` INTEGER NOT NULL, `date_test_taken` DATETIME NOT NULL, `test_result` VARCHAR(255), FOREIGN KEY (`registration_id` ) REFERENCES `Student_Course_Enrolment`(`registration_id` ) );  "
40,7643,easy,cre_Theme_park,SELECT DISTINCT Location_Name FROM LOCATIONS,Show all distinct location names.,"PRAGMA foreign_keys = ON; CREATE TABLE Ref_Hotel_Star_Ratings ( star_rating_code CHAR(15) NOT NULL, star_rating_description VARCHAR(80), PRIMARY KEY (star_rating_code), UNIQUE (star_rating_code) );   CREATE TABLE Locations ( Location_ID INTEGER NOT NULL, Location_Name VARCHAR(255), Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Location_ID) ); CREATE TABLE Ref_Attraction_Types ( Attraction_Type_Code CHAR(15) NOT NULL, Attraction_Type_Description VARCHAR(255), PRIMARY KEY (Attraction_Type_Code), UNIQUE (Attraction_Type_Code) );  CREATE TABLE Visitors ( Tourist_ID INTEGER NOT NULL, Tourist_Details VARCHAR(255), PRIMARY KEY (Tourist_ID), UNIQUE (Tourist_ID) ); CREATE TABLE Features ( Feature_ID INTEGER NOT NULL, Feature_Details VARCHAR(255), PRIMARY KEY (Feature_ID) );  CREATE TABLE Hotels ( hotel_id INTEGER NOT NULL, star_rating_code CHAR(15) NOT NULL, pets_allowed_yn CHAR(1), price_range real, other_hotel_details VARCHAR(255), PRIMARY KEY (hotel_id), FOREIGN KEY (star_rating_code) REFERENCES Ref_Hotel_Star_Ratings (star_rating_code) );  CREATE TABLE Tourist_Attractions ( Tourist_Attraction_ID INTEGER NOT NULL, Attraction_Type_Code CHAR(15) NOT NULL, Location_ID INTEGER NOT NULL, How_to_Get_There VARCHAR(255), Name VARCHAR(255), Description VARCHAR(255), Opening_Hours VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Tourist_Attraction_ID), FOREIGN KEY (Location_ID) REFERENCES Locations (Location_ID), FOREIGN KEY (Attraction_Type_Code) REFERENCES Ref_Attraction_Types (Attraction_Type_Code) );  CREATE TABLE Street_Markets ( Market_ID INTEGER NOT NULL, Market_Details VARCHAR(255), PRIMARY KEY (Market_ID), FOREIGN KEY (Market_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Shops ( Shop_ID INTEGER NOT NULL, Shop_Details VARCHAR(255), PRIMARY KEY (Shop_ID), FOREIGN KEY (Shop_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Museums ( Museum_ID INTEGER NOT NULL, Museum_Details VARCHAR(255), PRIMARY KEY (Museum_ID), FOREIGN KEY (Museum_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Royal_Family ( Royal_Family_ID INTEGER NOT NULL, Royal_Family_Details VARCHAR(255), PRIMARY KEY (Royal_Family_ID), FOREIGN KEY (Royal_Family_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Theme_Parks ( Theme_Park_ID INTEGER NOT NULL, Theme_Park_Details VARCHAR(255), PRIMARY KEY (Theme_Park_ID), FOREIGN KEY (Theme_Park_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) );   CREATE TABLE Visits ( Visit_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Tourist_ID INTEGER NOT NULL, Visit_Date DATETIME NOT NULL, Visit_Details VARCHAR(40) NOT NULL, PRIMARY KEY (Visit_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID), FOREIGN KEY (Tourist_ID) REFERENCES Visitors (Tourist_ID) );   CREATE TABLE Photos ( Photo_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Name VARCHAR(255), Description VARCHAR(255), Filename VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Photo_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Staff ( Staff_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Name VARCHAR(40), Other_Details VARCHAR(255), PRIMARY KEY (Staff_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) );   CREATE TABLE Tourist_Attraction_Features ( Tourist_Attraction_ID INTEGER NOT NULL, Feature_ID INTEGER NOT NULL, PRIMARY KEY (Tourist_Attraction_ID, Feature_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID), FOREIGN KEY (Feature_ID) REFERENCES Features (Feature_ID) ); "
41,5048,easy,behavior_monitoring,SELECT DISTINCT detention_type_code FROM Detention,Return all distinct detention type codes.,"PRAGMA foreign_keys = ON; CREATE TABLE `Ref_Address_Types` ( `address_type_code` VARCHAR(15) PRIMARY KEY, `address_type_description` VARCHAR(80) ); CREATE TABLE `Ref_Detention_Type` ( `detention_type_code` VARCHAR(10) PRIMARY KEY, `detention_type_description` VARCHAR(80) ); CREATE TABLE `Ref_Incident_Type` ( `incident_type_code` VARCHAR(10) PRIMARY KEY, `incident_type_description` VARCHAR(80) );  CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `line_1` VARCHAR(120), `line_2` VARCHAR(120), `line_3` VARCHAR(120), `city` VARCHAR(80), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(50), `country` VARCHAR(50), `other_address_details` VARCHAR(255) );  CREATE TABLE `Students` ( `student_id` INTEGER PRIMARY KEY, `address_id` INTEGER NOT NULL, `first_name` VARCHAR(80), `middle_name` VARCHAR(40), `last_name` VARCHAR(40), `cell_mobile_number` VARCHAR(40), `email_address` VARCHAR(40), `date_first_rental` DATETIME, `date_left_university` DATETIME, `other_student_details` VARCHAR(255), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ) );  CREATE TABLE `Teachers` ( `teacher_id` INTEGER PRIMARY KEY, `address_id` INTEGER NOT NULL, `first_name` VARCHAR(80), `middle_name` VARCHAR(80), `last_name` VARCHAR(80), `gender` VARCHAR(1), `cell_mobile_number` VARCHAR(40), `email_address` VARCHAR(40), `other_details` VARCHAR(255), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ) ); CREATE TABLE `Assessment_Notes` ( `notes_id` INTEGER NOT NULL , `student_id` INTEGER, `teacher_id` INTEGER NOT NULL, `date_of_notes` DATETIME, `text_of_notes` VARCHAR(255), `other_details` VARCHAR(255), FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ), FOREIGN KEY (`teacher_id` ) REFERENCES `Teachers`(`teacher_id` ) ); CREATE TABLE `Behavior_Incident` ( `incident_id` INTEGER PRIMARY KEY, `incident_type_code` VARCHAR(10) NOT NULL, `student_id` INTEGER NOT NULL, `date_incident_start` DATETIME, `date_incident_end` DATETIME, `incident_summary` VARCHAR(255), `recommendations` VARCHAR(255), `other_details` VARCHAR(255), FOREIGN KEY (`incident_type_code` ) REFERENCES `Ref_Incident_Type`(`incident_type_code` ), FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ) ); CREATE TABLE `Detention` ( `detention_id` INTEGER PRIMARY KEY, `detention_type_code` VARCHAR(10) NOT NULL, `teacher_id` INTEGER, `datetime_detention_start` DATETIME, `datetime_detention_end` DATETIME, `detention_summary` VARCHAR(255), `other_details` VARCHAR(255), FOREIGN KEY (`detention_type_code` ) REFERENCES `Ref_Detention_Type`(`detention_type_code` ), FOREIGN KEY (`teacher_id` ) REFERENCES `Teachers`(`teacher_id` ) );  CREATE TABLE `Student_Addresses` ( `student_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_address_from` DATETIME NOT NULL, `date_address_to` DATETIME, `monthly_rental` DECIMAL(19,4), `other_details` VARCHAR(255), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ) );  CREATE TABLE `Students_in_Detention` ( `student_id` INTEGER NOT NULL, `detention_id` INTEGER NOT NULL, `incident_id` INTEGER NOT NULL, FOREIGN KEY (`incident_id` ) REFERENCES `Behavior_Incident`(`incident_id` ), FOREIGN KEY (`detention_id` ) REFERENCES `Detention`(`detention_id` ), FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ) );  "
42,7428,easy,dorm_1,SELECT fname FROM student WHERE age  >  20,Find the first name of students who is older than 20.," create table Student (         StuID        INTEGER PRIMARY KEY,         LName        VARCHAR(12),         Fname        VARCHAR(12),         Age      INTEGER,         Sex      VARCHAR(1),         Major        INTEGER,         Advisor      INTEGER,         city_code    VARCHAR(3)  );    create table Dorm (        dormid		INTEGER,        dorm_name	VARCHAR(20),        student_capacity	INTEGER,        gender			VARCHAR(1) ) ;  create table Dorm_amenity (        amenid			INTEGER,        amenity_name		VARCHAR(25) ) ;  create table Has_amenity (        dormid			INTEGER,        amenid				INTEGER, 	FOREIGN KEY (dormid) REFERENCES `Dorm`(dormid), 	FOREIGN KEY (amenid) REFERENCES `Dorm_amenity`(amenid) );  create table Lives_in (        stuid 	      INTEGER,        dormid		INTEGER,        room_number	INTEGER, 	FOREIGN KEY (stuid) REFERENCES `Student`(StuID),         FOREIGN KEY (dormid) REFERENCES `Dorm`(dormid) );  "
43,2923,easy,flight_1,SELECT flno FROM Flight WHERE distance  >  2000,What are the numbers of all flights that can cover a distance of more than 2000?,"-- drop table flight cascade constraints; -- drop table aircraft cascade constraints; -- drop table employee cascade constraints; -- drop table certificate cascade constraints;  create table flight( 	flno number(4,0) primary key, 	origin varchar2(20), 	destination varchar2(20), 	distance number(6,0), 	departure_date date, 	arrival_date date, 	price number(7,2),     aid number(9,0),     foreign key(""aid"") references `aircraft`(""aid""));  create table aircraft( 	aid number(9,0) primary key, 	name varchar2(30), 	distance number(6,0));  create table employee( 	eid number(9,0) primary key, 	name varchar2(30), 	salary number(10,2));  create table certificate( 	eid number(9,0), 	aid number(9,0), 	primary key(eid,aid), 	foreign key(""eid"") references `employee`(""eid""), 	foreign key(""aid"") references `aircraft`(""aid""));   "
44,3110,easy,customers_card_transactions,SELECT count(*) FROM Customers,How many customers do we have?,"PRAGMA foreign_keys = ON;  CREATE TABLE `Accounts` ( `account_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `account_name` VARCHAR(50), `other_account_details` VARCHAR(255) ); CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_first_name` VARCHAR(20), `customer_last_name` VARCHAR(20), `customer_address` VARCHAR(255), `customer_phone` VARCHAR(255), `customer_email` VARCHAR(255), `other_customer_details` VARCHAR(255) ); CREATE TABLE `Customers_Cards` ( `card_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `card_type_code` VARCHAR(15) NOT NULL, `card_number` VARCHAR(80), `date_valid_from` DATETIME, `date_valid_to` DATETIME, `other_card_details` VARCHAR(255) ); CREATE TABLE `Financial_Transactions` ( `transaction_id` INTEGER NOT NULL , `previous_transaction_id` INTEGER, `account_id` INTEGER NOT NULL, `card_id` INTEGER NOT NULL, `transaction_type` VARCHAR(15) NOT NULL, `transaction_date` DATETIME, `transaction_amount` DOUBLE NULL, `transaction_comment` VARCHAR(255), `other_transaction_details` VARCHAR(255), FOREIGN KEY (`card_id` ) REFERENCES `Customers_Cards`(`card_id` ), FOREIGN KEY (`account_id` ) REFERENCES `Accounts`(`account_id` ) );                 "
45,695,easy,orchestra,SELECT avg(Attendance) FROM SHOW,What is the average attendance of shows?," PRAGMA foreign_keys = ON;    CREATE TABLE ""conductor"" ( ""Conductor_ID"" int, ""Name"" text, ""Age"" int, ""Nationality"" text, ""Year_of_Work"" int, PRIMARY KEY (""Conductor_ID"") );  CREATE TABLE ""orchestra"" ( ""Orchestra_ID"" int, ""Orchestra"" text, ""Conductor_ID"" int, ""Record_Company"" text, ""Year_of_Founded"" real, ""Major_Record_Format"" text, PRIMARY KEY (""Orchestra_ID""), FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`) );  CREATE TABLE ""performance"" ( ""Performance_ID"" int, ""Orchestra_ID"" int, ""Type"" text, ""Date"" text, ""Official_ratings_(millions)"" real, ""Weekly_rank"" text, ""Share"" text, PRIMARY KEY (""Performance_ID""), FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`) );  CREATE TABLE ""show"" ( ""Show_ID"" int, ""Performance_ID"" int, ""If_first_show"" bool, ""Result"" text, ""Attendance"" real, FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`) );    "
46,5699,easy,hospital_1,SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn,List the names of patients who have made appointments.,"-- https://en.wikibooks.org/wiki/SQL_Exercises/The_Hospital  DROP TABLE IF EXISTS Physician; CREATE TABLE Physician (   EmployeeID INTEGER NOT NULL,   Name VARCHAR(30) NOT NULL,   Position VARCHAR(30) NOT NULL,   SSN INTEGER NOT NULL,   CONSTRAINT pk_physician PRIMARY KEY(EmployeeID) );   DROP TABLE IF EXISTS Department; CREATE TABLE Department (   DepartmentID INTEGER NOT NULL,   Name VARCHAR(30) NOT NULL,   Head INTEGER NOT NULL,   CONSTRAINT pk_Department PRIMARY KEY(DepartmentID),   CONSTRAINT fk_Department_Physician_EmployeeID FOREIGN KEY(Head) REFERENCES Physician(EmployeeID) );   DROP TABLE IF EXISTS Affiliated_With; CREATE TABLE Affiliated_With (   Physician INTEGER NOT NULL,   Department INTEGER NOT NULL,   PrimaryAffiliation BOOLEAN NOT NULL,   CONSTRAINT fk_Affiliated_With_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),   CONSTRAINT fk_Affiliated_With_Department_DepartmentID FOREIGN KEY(Department) REFERENCES Department(DepartmentID),   PRIMARY KEY(Physician, Department) );  DROP TABLE IF EXISTS Procedures; CREATE TABLE Procedures (   Code INTEGER PRIMARY KEY NOT NULL,   Name VARCHAR(30) NOT NULL,   Cost REAL NOT NULL );  DROP TABLE IF EXISTS Trained_In; CREATE TABLE Trained_In (   Physician INTEGER NOT NULL,   Treatment INTEGER NOT NULL,   CertificationDate DATETIME NOT NULL,   CertificationExpires DATETIME NOT NULL,   CONSTRAINT fk_Trained_In_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),   CONSTRAINT fk_Trained_In_Procedures_Code FOREIGN KEY(Treatment) REFERENCES Procedures(Code),   PRIMARY KEY(Physician, Treatment) );  DROP TABLE IF EXISTS Patient; CREATE TABLE Patient (   SSN INTEGER PRIMARY KEY NOT NULL,   Name VARCHAR(30) NOT NULL,   Address VARCHAR(30) NOT NULL,   Phone VARCHAR(30) NOT NULL,   InsuranceID INTEGER NOT NULL,   PCP INTEGER NOT NULL,   CONSTRAINT fk_Patient_Physician_EmployeeID FOREIGN KEY(PCP) REFERENCES Physician(EmployeeID) );  DROP TABLE IF EXISTS Nurse; CREATE TABLE Nurse (   EmployeeID INTEGER PRIMARY KEY NOT NULL,   Name VARCHAR(30) NOT NULL,   Position VARCHAR(30) NOT NULL,   Registered BOOLEAN NOT NULL,   SSN INTEGER NOT NULL );  DROP TABLE IF EXISTS Appointment; CREATE TABLE Appointment (   AppointmentID INTEGER PRIMARY KEY NOT NULL,   Patient INTEGER NOT NULL,       PrepNurse INTEGER,   Physician INTEGER NOT NULL,   Start DATETIME NOT NULL,   End DATETIME NOT NULL,   ExaminationRoom TEXT NOT NULL,   CONSTRAINT fk_Appointment_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),   CONSTRAINT fk_Appointment_Nurse_EmployeeID FOREIGN KEY(PrepNurse) REFERENCES Nurse(EmployeeID),   CONSTRAINT fk_Appointment_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID) );  DROP TABLE IF EXISTS Medication; CREATE TABLE Medication (   Code INTEGER PRIMARY KEY NOT NULL,   Name VARCHAR(30) NOT NULL,   Brand VARCHAR(30) NOT NULL,   Description VARCHAR(30) NOT NULL );   DROP TABLE IF EXISTS Prescribes; CREATE TABLE Prescribes (   Physician INTEGER NOT NULL,   Patient INTEGER NOT NULL,    Medication INTEGER NOT NULL,    Date DATETIME NOT NULL,   Appointment INTEGER,     Dose VARCHAR(30) NOT NULL,   PRIMARY KEY(Physician, Patient, Medication, Date),   CONSTRAINT fk_Prescribes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),   CONSTRAINT fk_Prescribes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),   CONSTRAINT fk_Prescribes_Medication_Code FOREIGN KEY(Medication) REFERENCES Medication(Code),   CONSTRAINT fk_Prescribes_Appointment_AppointmentID FOREIGN KEY(Appointment) REFERENCES Appointment(AppointmentID) );  DROP TABLE IF EXISTS Block; CREATE TABLE Block (   BlockFloor INTEGER NOT NULL,   BlockCode INTEGER NOT NULL,   PRIMARY KEY(BlockFloor, BlockCode) );   DROP TABLE IF EXISTS Room; CREATE TABLE Room (   RoomNumber INTEGER PRIMARY KEY NOT NULL,   RoomType VARCHAR(30) NOT NULL,   BlockFloor INTEGER NOT NULL,     BlockCode INTEGER NOT NULL,     Unavailable BOOLEAN NOT NULL,   CONSTRAINT fk_Room_Block_PK FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode) );  DROP TABLE IF EXISTS On_Call; CREATE TABLE On_Call (   Nurse INTEGER NOT NULL,   BlockFloor INTEGER NOT NULL,    BlockCode INTEGER NOT NULL,   OnCallStart DATETIME NOT NULL,   OnCallEnd DATETIME NOT NULL,   PRIMARY KEY(Nurse, BlockFloor, BlockCode, OnCallStart, OnCallEnd),   CONSTRAINT fk_OnCall_Nurse_EmployeeID FOREIGN KEY(Nurse) REFERENCES Nurse(EmployeeID),   CONSTRAINT fk_OnCall_Block_Floor FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode)  );  DROP TABLE IF EXISTS Stay; CREATE TABLE Stay (   StayID INTEGER PRIMARY KEY NOT NULL,   Patient INTEGER NOT NULL,   Room INTEGER NOT NULL,   StayStart DATETIME NOT NULL,   StayEnd DATETIME NOT NULL,   CONSTRAINT fk_Stay_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),   CONSTRAINT fk_Stay_Room_Number FOREIGN KEY(Room) REFERENCES Room(RoomNumber) );  DROP TABLE IF EXISTS Undergoes; CREATE TABLE Undergoes (   Patient INTEGER NOT NULL,   Procedures INTEGER NOT NULL,   Stay INTEGER NOT NULL,   DateUndergoes DATETIME NOT NULL,   Physician INTEGER NOT NULL,   AssistingNurse INTEGER,   PRIMARY KEY(Patient, Procedures, Stay, DateUndergoes),   CONSTRAINT fk_Undergoes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),   CONSTRAINT fk_Undergoes_Procedures_Code FOREIGN KEY(Procedures) REFERENCES Procedures(Code),   CONSTRAINT fk_Undergoes_Stay_StayID FOREIGN KEY(Stay) REFERENCES Stay(StayID),   CONSTRAINT fk_Undergoes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),   CONSTRAINT fk_Undergoes_Nurse_EmployeeID FOREIGN KEY(AssistingNurse) REFERENCES Nurse(EmployeeID) );   "
47,4046,easy,gas_company,SELECT count(*) FROM gas_station WHERE open_year BETWEEN 2000 AND 2005,How many gas station are opened between 2000 and 2005?," PRAGMA foreign_keys = ON;   CREATE TABLE ""company"" ( ""Company_ID"" int, ""Rank"" int, ""Company"" text, ""Headquarters"" text, ""Main_Industry"" text, ""Sales_billion"" real, ""Profits_billion"" real, ""Assets_billion"" real, ""Market_Value"" real, PRIMARY KEY (""Company_ID"") );  CREATE TABLE ""gas_station"" ( ""Station_ID"" int, ""Open_Year"" int, ""Location"" text, ""Manager_Name"" text, ""Vice_Manager_Name"" text, ""Representative_Name"" text, PRIMARY KEY (""Station_ID"") );  CREATE TABLE ""station_company"" ( ""Station_ID"" int, ""Company_ID"" int, ""Rank_of_the_Year"" int, PRIMARY KEY (""Station_ID"",""Company_ID""), FOREIGN KEY (`Station_ID`) REFERENCES `gas_station`(`Station_ID`), FOREIGN KEY (`Company_ID`) REFERENCES `company`(`Company_ID`) );  "
48,1005,easy,geo,"SELECT river_name FROM river WHERE traverse  =  ""illinois"";",what rivers are there in illinois,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );"
49,3613,easy,game_injury,SELECT average_attendance FROM stadium WHERE capacity_percentage  >  100,What is the average attendance of stadiums with capacity percentage higher than 100%?,"PRAGMA foreign_keys = ON;   CREATE TABLE ""stadium"" ( ""id"" int, ""name"" text, ""Home_Games"" int, ""Average_Attendance"" real, ""Total_Attendance"" real, ""Capacity_Percentage"" real, primary key (""id"") );  CREATE TABLE ""game"" ( ""stadium_id"" int, ""id"" int, ""Season"" int, ""Date"" text, ""Home_team"" text, ""Away_team"" text, ""Score"" text, ""Competition"" text, primary key (""id""), foreign key (""stadium_id"") references `stadium`(""id"") );  CREATE TABLE ""injury_accident"" ( ""game_id"" int, ""id"" int, ""Player"" text, ""Injury"" text, ""Number_of_matches"" text, ""Source"" text, primary key (""id""), foreign key (""game_id"") references `game`(""id"") );   "
50,7718,extra,cre_Theme_park,"SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  ""Vincent"" INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  ""Marcelle""",Which tourist attractions do the tourists Vincent and Marcelle visit? Tell me the names of the attractions.,"PRAGMA foreign_keys = ON; CREATE TABLE Ref_Hotel_Star_Ratings ( star_rating_code CHAR(15) NOT NULL, star_rating_description VARCHAR(80), PRIMARY KEY (star_rating_code), UNIQUE (star_rating_code) );   CREATE TABLE Locations ( Location_ID INTEGER NOT NULL, Location_Name VARCHAR(255), Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Location_ID) ); CREATE TABLE Ref_Attraction_Types ( Attraction_Type_Code CHAR(15) NOT NULL, Attraction_Type_Description VARCHAR(255), PRIMARY KEY (Attraction_Type_Code), UNIQUE (Attraction_Type_Code) );  CREATE TABLE Visitors ( Tourist_ID INTEGER NOT NULL, Tourist_Details VARCHAR(255), PRIMARY KEY (Tourist_ID), UNIQUE (Tourist_ID) ); CREATE TABLE Features ( Feature_ID INTEGER NOT NULL, Feature_Details VARCHAR(255), PRIMARY KEY (Feature_ID) );  CREATE TABLE Hotels ( hotel_id INTEGER NOT NULL, star_rating_code CHAR(15) NOT NULL, pets_allowed_yn CHAR(1), price_range real, other_hotel_details VARCHAR(255), PRIMARY KEY (hotel_id), FOREIGN KEY (star_rating_code) REFERENCES Ref_Hotel_Star_Ratings (star_rating_code) );  CREATE TABLE Tourist_Attractions ( Tourist_Attraction_ID INTEGER NOT NULL, Attraction_Type_Code CHAR(15) NOT NULL, Location_ID INTEGER NOT NULL, How_to_Get_There VARCHAR(255), Name VARCHAR(255), Description VARCHAR(255), Opening_Hours VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Tourist_Attraction_ID), FOREIGN KEY (Location_ID) REFERENCES Locations (Location_ID), FOREIGN KEY (Attraction_Type_Code) REFERENCES Ref_Attraction_Types (Attraction_Type_Code) );  CREATE TABLE Street_Markets ( Market_ID INTEGER NOT NULL, Market_Details VARCHAR(255), PRIMARY KEY (Market_ID), FOREIGN KEY (Market_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Shops ( Shop_ID INTEGER NOT NULL, Shop_Details VARCHAR(255), PRIMARY KEY (Shop_ID), FOREIGN KEY (Shop_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Museums ( Museum_ID INTEGER NOT NULL, Museum_Details VARCHAR(255), PRIMARY KEY (Museum_ID), FOREIGN KEY (Museum_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Royal_Family ( Royal_Family_ID INTEGER NOT NULL, Royal_Family_Details VARCHAR(255), PRIMARY KEY (Royal_Family_ID), FOREIGN KEY (Royal_Family_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Theme_Parks ( Theme_Park_ID INTEGER NOT NULL, Theme_Park_Details VARCHAR(255), PRIMARY KEY (Theme_Park_ID), FOREIGN KEY (Theme_Park_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) );   CREATE TABLE Visits ( Visit_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Tourist_ID INTEGER NOT NULL, Visit_Date DATETIME NOT NULL, Visit_Details VARCHAR(40) NOT NULL, PRIMARY KEY (Visit_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID), FOREIGN KEY (Tourist_ID) REFERENCES Visitors (Tourist_ID) );   CREATE TABLE Photos ( Photo_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Name VARCHAR(255), Description VARCHAR(255), Filename VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Photo_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Staff ( Staff_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Name VARCHAR(40), Other_Details VARCHAR(255), PRIMARY KEY (Staff_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) );   CREATE TABLE Tourist_Attraction_Features ( Tourist_Attraction_ID INTEGER NOT NULL, Feature_ID INTEGER NOT NULL, PRIMARY KEY (Tourist_Attraction_ID, Feature_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID), FOREIGN KEY (Feature_ID) REFERENCES Features (Feature_ID) ); "
51,4062,extra,gas_company,SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1,Show the manager name with most number of gas stations opened after 2000.," PRAGMA foreign_keys = ON;   CREATE TABLE ""company"" ( ""Company_ID"" int, ""Rank"" int, ""Company"" text, ""Headquarters"" text, ""Main_Industry"" text, ""Sales_billion"" real, ""Profits_billion"" real, ""Assets_billion"" real, ""Market_Value"" real, PRIMARY KEY (""Company_ID"") );  CREATE TABLE ""gas_station"" ( ""Station_ID"" int, ""Open_Year"" int, ""Location"" text, ""Manager_Name"" text, ""Vice_Manager_Name"" text, ""Representative_Name"" text, PRIMARY KEY (""Station_ID"") );  CREATE TABLE ""station_company"" ( ""Station_ID"" int, ""Company_ID"" int, ""Rank_of_the_Year"" int, PRIMARY KEY (""Station_ID"",""Company_ID""), FOREIGN KEY (`Station_ID`) REFERENCES `gas_station`(`Station_ID`), FOREIGN KEY (`Company_ID`) REFERENCES `company`(`Company_ID`) );  "
52,6884,extra,cre_Drama_Workshop_Groups,"SELECT T1.Service_Type_Description , T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T1.Service_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",What is the description and code of the type of service that is performed the most often?,"PRAGMA foreign_keys = ON;  CREATE TABLE Ref_Payment_Methods ( payment_method_code CHAR(10) NOT NULL, payment_method_description VARCHAR(80), PRIMARY KEY (payment_method_code), UNIQUE (payment_method_code) ); CREATE TABLE Ref_Service_Types ( Service_Type_Code CHAR(15) NOT NULL, Parent_Service_Type_Code CHAR(15), Service_Type_Description VARCHAR(255), PRIMARY KEY (Service_Type_Code), UNIQUE (Service_Type_Code) );  CREATE TABLE Addresses ( Address_ID VARCHAR(100) NOT NULL, Line_1 VARCHAR(255), Line_2 VARCHAR(255), City_Town VARCHAR(255), State_County VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Address_ID), UNIQUE (Address_ID) ); CREATE TABLE Products ( Product_ID VARCHAR(100) NOT NULL, Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Product_Description VARCHAR(255), Other_Product_Service_Details VARCHAR(255), PRIMARY KEY (Product_ID), UNIQUE (Product_ID) ); CREATE TABLE Marketing_Regions ( Marketing_Region_Code CHAR(15) NOT NULL, Marketing_Region_Name VARCHAR(255) NOT NULL, Marketing_Region_Descriptrion VARCHAR(255) NOT NULL, Other_Details VARCHAR(255), PRIMARY KEY (Marketing_Region_Code), UNIQUE (Marketing_Region_Code) );  CREATE TABLE Clients ( Client_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Customer_Email_Address VARCHAR(255), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Client_ID), UNIQUE (Client_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) ); CREATE TABLE Drama_Workshop_Groups ( Workshop_Group_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Currency_Code CHAR(15) NOT NULL, Marketing_Region_Code CHAR(15) NOT NULL, Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Workshop_Group_ID), UNIQUE (Workshop_Group_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) ); CREATE TABLE Performers ( Performer_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Performer_ID), UNIQUE (Performer_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) ); CREATE TABLE Customers ( Customer_ID VARCHAR(100) NOT NULL, Address_ID INTEGER NOT NULL, Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Customer_ID), UNIQUE (Customer_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) ); CREATE TABLE Stores ( Store_ID VARCHAR(100) NOT NULL, Address_ID INTEGER NOT NULL, Marketing_Region_Code CHAR(15) NOT NULL, Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Store_ID), UNIQUE (Store_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID), FOREIGN KEY (Marketing_Region_Code) REFERENCES Marketing_Regions (Marketing_Region_Code) ); CREATE TABLE Bookings ( Booking_ID INTEGER NOT NULL , Customer_ID INTEGER NOT NULL, Workshop_Group_ID VARCHAR(100) NOT NULL, Status_Code CHAR(15) NOT NULL, Store_ID INTEGER NOT NULL, Order_Date DATETIME NOT NULL, Planned_Delivery_Date DATETIME NOT NULL, Actual_Delivery_Date DATETIME NOT NULL, Other_Order_Details VARCHAR(255), PRIMARY KEY (Booking_ID), UNIQUE (Booking_ID), FOREIGN KEY (Customer_ID) REFERENCES Clients (Client_ID), FOREIGN KEY (Workshop_Group_ID) REFERENCES Drama_Workshop_Groups (Workshop_Group_ID) ); CREATE TABLE Performers_in_Bookings ( Order_ID INTEGER NOT NULL, Performer_ID INTEGER NOT NULL, PRIMARY KEY (Order_ID, Performer_ID), FOREIGN KEY (Performer_ID) REFERENCES Performers (Performer_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID) ); CREATE TABLE Customer_Orders ( Order_ID INTEGER NOT NULL , Customer_ID INTEGER NOT NULL, Store_ID INTEGER NOT NULL, Order_Date DATETIME NOT NULL, Planned_Delivery_Date DATETIME NOT NULL, Actual_Delivery_Date DATETIME NOT NULL, Other_Order_Details VARCHAR(255), PRIMARY KEY (Order_ID), UNIQUE (Order_ID), FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY (Store_ID) REFERENCES Stores (Store_ID) ); CREATE TABLE Order_Items ( Order_Item_ID INTEGER NOT NULL , Order_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), PRIMARY KEY (Order_Item_ID), FOREIGN KEY (Order_ID) REFERENCES Customer_Orders (Order_ID), FOREIGN KEY (Product_ID) REFERENCES Products (Product_ID) ); CREATE TABLE Invoices ( Invoice_ID INTEGER NOT NULL, Order_ID INTEGER NOT NULL, payment_method_code CHAR(15), Product_ID INTEGER NOT NULL, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), Order_Item_ID INTEGER NOT NULL, PRIMARY KEY (Invoice_ID), FOREIGN KEY (Order_ID) REFERENCES Customer_Orders (Order_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID), FOREIGN KEY (payment_method_code) REFERENCES Ref_Payment_Methods (payment_method_code) ); CREATE TABLE Services ( Service_ID INTEGER NOT NULL, Service_Type_Code CHAR(15), Workshop_Group_ID INTEGER NOT NULL, Product_Description VARCHAR(255), Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Other_Product_Service_Details VARCHAR(255), PRIMARY KEY (Service_ID), UNIQUE (Service_ID), FOREIGN KEY (Workshop_Group_ID) REFERENCES Drama_Workshop_Groups (Workshop_Group_ID), FOREIGN KEY (Service_Type_Code) REFERENCES Ref_Service_Types (Service_Type_Code) ); CREATE TABLE Bookings_Services ( Order_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, PRIMARY KEY (Order_ID, Product_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID), FOREIGN KEY (Product_ID) REFERENCES Services (Service_ID) );  CREATE TABLE Invoice_Items ( Invoice_Item_ID INTEGER NOT NULL , Invoice_ID INTEGER NOT NULL, Order_ID INTEGER NOT NULL, Order_Item_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, Order_Quantity INTEGER, Other_Item_Details VARCHAR(255), PRIMARY KEY (Invoice_Item_ID), FOREIGN KEY (Order_Item_ID) REFERENCES Order_Items (Order_Item_ID), FOREIGN KEY (Invoice_ID) REFERENCES Invoices (Invoice_ID), FOREIGN KEY (Order_ID, Product_ID) REFERENCES Bookings_Services (Order_ID,Product_ID) ); "
53,4624,extra,inn_1,SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T2.decor ORDER BY count(T2.decor) ASC LIMIT 1;,What kind of decor has the least number of reservations?,"CREATE TABLE ""Rooms"" (  	""RoomId"" TEXT PRIMARY KEY, 	""roomName"" TEXT,  	""beds"" INTEGER,  	""bedType"" TEXT,  	""maxOccupancy"" INTEGER,  	""basePrice"" INTEGER,  	""decor"" TEXT  );  CREATE TABLE ""Reservations"" (  	""Code"" INTEGER PRIMARY KEY,  	""Room"" TEXT,  	""CheckIn"" TEXT,  	""CheckOut"" TEXT,  	""Rate"" REAL,  	""LastName"" TEXT,  	""FirstName"" TEXT,  	""Adults"" INTEGER,  	""Kids"" INTEGER, 	FOREIGN KEY (Room) REFERENCES Rooms(RoomId) ); "
54,6517,extra,department_store,"SELECT T1.customer_name ,  T1.customer_phone ,  T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T2.customer_id ORDER BY count(*) DESC LIMIT 1","What are the name, phone number and email address of the customer who made the largest number of orders?","PRAGMA foreign_keys = ON; CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `address_details` VARCHAR(255) );                   CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `staff_gender` VARCHAR(1), `staff_name` VARCHAR(80) );  CREATE TABLE `Suppliers` ( `supplier_id` INTEGER PRIMARY KEY, `supplier_name` VARCHAR(80), `supplier_phone` VARCHAR(80) );  CREATE TABLE `Department_Store_Chain` ( `dept_store_chain_id` INTEGER PRIMARY KEY, `dept_store_chain_name` VARCHAR(80) );  CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `payment_method_code` VARCHAR(10) NOT NULL, `customer_code` VARCHAR(20), `customer_name` VARCHAR(80), `customer_address` VARCHAR(255), `customer_phone` VARCHAR(80), `customer_email` VARCHAR(80) );                  CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_type_code` VARCHAR(10) NOT NULL, `product_name` VARCHAR(80), `product_price` DECIMAL(19,4) ); CREATE TABLE `Supplier_Addresses` ( `supplier_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_from` DATETIME NOT NULL, `date_to` DATETIME, PRIMARY KEY (`supplier_id`, `address_id`), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`supplier_id` ) REFERENCES `Suppliers`(`supplier_id` ) );  CREATE TABLE `Customer_Addresses` ( `customer_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_from` DATETIME NOT NULL, `date_to` DATETIME, PRIMARY KEY (`customer_id`, `address_id`), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) );   CREATE TABLE `Customer_Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `order_status_code` VARCHAR(10) NOT NULL, `order_date` DATETIME NOT NULL, FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) );  CREATE TABLE `Department_Stores` ( `dept_store_id` INTEGER PRIMARY KEY, `dept_store_chain_id` INTEGER, `store_name` VARCHAR(80), `store_address` VARCHAR(255), `store_phone` VARCHAR(80), `store_email` VARCHAR(80), FOREIGN KEY (`dept_store_chain_id` ) REFERENCES `Department_Store_Chain`(`dept_store_chain_id` ) );                    CREATE TABLE `Departments` ( `department_id` INTEGER PRIMARY KEY, `dept_store_id` INTEGER NOT NULL, `department_name` VARCHAR(80), FOREIGN KEY (`dept_store_id` ) REFERENCES `Department_Stores`(`dept_store_id` ) ); CREATE TABLE `Order_Items` ( `order_item_id` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) ); CREATE TABLE `Product_Suppliers` ( `product_id` INTEGER NOT NULL, `supplier_id` INTEGER NOT NULL, `date_supplied_from` DATETIME NOT NULL, `date_supplied_to` DATETIME, `total_amount_purchased` VARCHAR(80), `total_value_purchased` DECIMAL(19,4), PRIMARY KEY (`product_id`, `supplier_id`), FOREIGN KEY (`supplier_id` ) REFERENCES `Suppliers`(`supplier_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) );   CREATE TABLE `Staff_Department_Assignments` ( `staff_id` INTEGER NOT NULL, `department_id` INTEGER NOT NULL, `date_assigned_from` DATETIME NOT NULL, `job_title_code` VARCHAR(10) NOT NULL, `date_assigned_to` DATETIME, PRIMARY KEY (`staff_id`, `department_id`), FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` ), FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ) );  "
55,3177,extra,race_track,"SELECT name ,  LOCATION ,  year_opened FROM track WHERE seating  >  (SELECT avg(seating) FROM track)","What are the names, locations, and years of opening for tracks with seating higher than average?","PRAGMA foreign_keys = ON;  CREATE TABLE ""race"" ( ""Race_ID"" int, ""Name"" text, ""Class"" text, ""Date"" text, ""Track_ID"" text, PRIMARY KEY (""Race_ID""), FOREIGN KEY (""Track_ID"") REFERENCES ""track""(""Track_ID"") );  CREATE TABLE ""track"" ( ""Track_ID"" int, ""Name"" text, ""Location"" text, ""Seating"" real, ""Year_Opened"" real, PRIMARY KEY (""Track_ID"") );  "
56,1609,extra,scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  ""Parsing"" AND t3.year  =  2012 AND t4.venuename  =  ""acl"";",acl papers in 2012 about Parsing,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); "
57,1838,extra,scholar,"SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""ohad shamir"" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",What paper by ohad shamir has the most citation ?,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); "
58,5663,extra,insurance_policies,"SELECT count(*) ,  T1.claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY T1.Date_Claim_Settled DESC LIMIT 1",Find the claim id and the number of settlements made for the claim with the most recent settlement date.,"PRAGMA foreign_keys = ON; CREATE TABLE Customers ( Customer_ID INTEGER NOT NULL, Customer_Details VARCHAR(255) NOT NULL, PRIMARY KEY (Customer_ID) ); CREATE TABLE Customer_Policies ( Policy_ID INTEGER NOT NULL, Customer_ID INTEGER NOT NULL, Policy_Type_Code CHAR(15) NOT NULL, Start_Date DATE, End_Date DATE, PRIMARY KEY (Policy_ID), FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID) );  CREATE TABLE Claims ( Claim_ID INTEGER NOT NULL, Policy_ID INTEGER NOT NULL, Date_Claim_Made DATE, Date_Claim_Settled DATE, Amount_Claimed INTEGER, Amount_Settled INTEGER, PRIMARY KEY (Claim_ID), FOREIGN KEY (Policy_ID) REFERENCES Customer_Policies (Policy_ID) );  CREATE TABLE Settlements ( Settlement_ID INTEGER NOT NULL, Claim_ID INTEGER NOT NULL, Date_Claim_Made DATE, Date_Claim_Settled DATE, Amount_Claimed INTEGER, Amount_Settled INTEGER, Customer_Policy_ID INTEGER NOT NULL, PRIMARY KEY (Settlement_ID), FOREIGN KEY (Claim_ID) REFERENCES Claims (Claim_ID) ); CREATE TABLE Payments ( Payment_ID INTEGER NOT NULL, Settlement_ID INTEGER NOT NULL, Payment_Method_Code VARCHAR(255), Date_Payment_Made DATE, Amount_Payment INTEGER, PRIMARY KEY (Payment_ID), FOREIGN KEY (Settlement_ID) REFERENCES Settlements (Settlement_ID) );    "
59,1785,extra,scholar,"SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  ""jitendra malik"";",What datasets have jitendra malik used,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); "
60,5095,extra,assets_maintenance,"SELECT count(*) ,  T1.fault_log_entry_id FROM Fault_Log AS T1 JOIN Engineer_Visits AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1",How many engineer visits are required at most for a single fault log? List the number and the log entry id.,"PRAGMA foreign_keys = ON;  CREATE TABLE `Third_Party_Companies` ( `company_id` INTEGER PRIMARY KEY , `company_type` VARCHAR(5) NOT NULL, `company_name` VARCHAR(255), `company_address` VARCHAR(255), `other_company_details` VARCHAR(255) );  CREATE TABLE `Maintenance_Contracts` ( `maintenance_contract_id` INTEGER PRIMARY KEY, `maintenance_contract_company_id` INTEGER NOT NULL, `contract_start_date` DATETIME, `contract_end_date` DATETIME, `other_contract_details` VARCHAR(255), FOREIGN KEY (`maintenance_contract_company_id` ) REFERENCES `Third_Party_Companies`(`company_id` ) );  CREATE TABLE `Parts` ( `part_id` INTEGER PRIMARY KEY, `part_name` VARCHAR(255), `chargeable_yn` VARCHAR(1), `chargeable_amount` VARCHAR(20), `other_part_details` VARCHAR(255) );  CREATE TABLE `Skills` ( `skill_id` INTEGER PRIMARY KEY, `skill_code` VARCHAR(20), `skill_description` VARCHAR(255) );  CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `staff_name` VARCHAR(255), `gender` VARCHAR(1), `other_staff_details` VARCHAR(255) ); CREATE TABLE `Assets` ( `asset_id` INTEGER PRIMARY KEY, `maintenance_contract_id` INTEGER NOT NULL, `supplier_company_id` INTEGER NOT NULL, `asset_details` VARCHAR(255), `asset_make` VARCHAR(20), `asset_model` VARCHAR(20), `asset_acquired_date` DATETIME, `asset_disposed_date` DATETIME, `other_asset_details` VARCHAR(255), FOREIGN KEY (`maintenance_contract_id` ) REFERENCES `Maintenance_Contracts`(`maintenance_contract_id` ), FOREIGN KEY (`supplier_company_id` ) REFERENCES `Third_Party_Companies`(`company_id` ) );    CREATE TABLE `Asset_Parts` ( `asset_id` INTEGER NOT NULL, `part_id` INTEGER NOT NULL, FOREIGN KEY (`part_id` ) REFERENCES `Parts`(`part_id` ), FOREIGN KEY (`asset_id` ) REFERENCES `Assets`(`asset_id` ) );  CREATE TABLE `Maintenance_Engineers` ( `engineer_id` INTEGER PRIMARY KEY, `company_id` INTEGER NOT NULL, `first_name` VARCHAR(50), `last_name` VARCHAR(50), `other_details` VARCHAR(255), FOREIGN KEY (`company_id` ) REFERENCES `Third_Party_Companies`(`company_id` ) );   CREATE TABLE `Engineer_Skills` ( `engineer_id` INTEGER NOT NULL, `skill_id` INTEGER NOT NULL, FOREIGN KEY (`engineer_id` ) REFERENCES `Maintenance_Engineers`(`engineer_id` ), FOREIGN KEY (`skill_id` ) REFERENCES `Skills`(`skill_id` ) );  CREATE TABLE `Fault_Log` ( `fault_log_entry_id` INTEGER PRIMARY KEY, `asset_id` INTEGER NOT NULL, `recorded_by_staff_id` INTEGER NOT NULL, `fault_log_entry_datetime` DATETIME, `fault_description` VARCHAR(255), `other_fault_details` VARCHAR(255), FOREIGN KEY (`asset_id` ) REFERENCES `Assets`(`asset_id` ), FOREIGN KEY (`recorded_by_staff_id` ) REFERENCES `Staff`(`staff_id` ) );  CREATE TABLE `Engineer_Visits` ( `engineer_visit_id` INTEGER PRIMARY KEY, `contact_staff_id` INTEGER, `engineer_id` INTEGER NOT NULL, `fault_log_entry_id` INTEGER NOT NULL, `fault_status` VARCHAR(10) NOT NULL, `visit_start_datetime` DATETIME, `visit_end_datetime` DATETIME, `other_visit_details` VARCHAR(255), FOREIGN KEY (`fault_log_entry_id` ) REFERENCES `Fault_Log`(`fault_log_entry_id` ), FOREIGN KEY (`engineer_id` ) REFERENCES `Maintenance_Engineers`(`engineer_id` ), FOREIGN KEY (`contact_staff_id` ) REFERENCES `Staff`(`staff_id` ) );    CREATE TABLE `Part_Faults` ( `part_fault_id` INTEGER PRIMARY KEY, `part_id` INTEGER NOT NULL, `fault_short_name` VARCHAR(20), `fault_description` VARCHAR(255), `other_fault_details` VARCHAR(255), FOREIGN KEY (`part_id` ) REFERENCES `Parts`(`part_id` ) );   CREATE TABLE `Fault_Log_Parts` ( `fault_log_entry_id` INTEGER NOT NULL, `part_fault_id` INTEGER NOT NULL, `fault_status` VARCHAR(10) NOT NULL, FOREIGN KEY (`part_fault_id` ) REFERENCES `Part_Faults`(`part_fault_id` ), FOREIGN KEY (`fault_log_entry_id` ) REFERENCES `Fault_Log`(`fault_log_entry_id` ) );  CREATE TABLE `Skills_Required_To_Fix` ( `part_fault_id` INTEGER NOT NULL, `skill_id` INTEGER NOT NULL, FOREIGN KEY (`part_fault_id` ) REFERENCES `Part_Faults`(`part_fault_id` ), FOREIGN KEY (`skill_id` ) REFERENCES `Skills`(`skill_id` ) );     "
61,6259,extra,network_2,SELECT DISTINCT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  <  (SELECT avg(age) FROM person),What are the different names of friends who are younger than the average age for a friend?,"CREATE TABLE Person (   name varchar(20) PRIMARY KEY,   age INTEGER,   city TEXT,   gender TEXT,   job TEXT );  CREATE TABLE PersonFriend (   name varchar(20),   friend varchar(20),   year INTEGER,   FOREIGN KEY (name) REFERENCES Person(name),   FOREIGN KEY (friend) REFERENCES Person(name) );  "
62,7150,extra,tracking_software_problems,"SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = ""rem"" EXCEPT SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = ""aut""","Find the first and last name of the staff members who reported problems from the product ""rem"" but not ""aut""?","PRAGMA foreign_keys = ON; CREATE TABLE `Problem_Category_Codes` ( `problem_category_code` VARCHAR(20) PRIMARY KEY, `problem_category_description` VARCHAR(80) ); CREATE TABLE `Problem_Log` ( `problem_log_id` INTEGER PRIMARY KEY, `assigned_to_staff_id` INTEGER NOT NULL, `problem_id` INTEGER NOT NULL, `problem_category_code` VARCHAR(20) NOT NULL, `problem_status_code` VARCHAR(20) NOT NULL, `log_entry_date` DATETIME, `log_entry_description` VARCHAR(255), `log_entry_fix` VARCHAR(255), `other_log_details` VARCHAR(255), FOREIGN KEY (`problem_category_code` ) REFERENCES `Problem_Category_Codes`(`problem_category_code` ),FOREIGN KEY (`assigned_to_staff_id` ) REFERENCES `Staff`(`staff_id` ),FOREIGN KEY (`problem_id` ) REFERENCES `Problems`(`problem_id` ),FOREIGN KEY (`problem_status_code` ) REFERENCES `Problem_Status_Codes`(`problem_status_code` ) ); CREATE TABLE `Problem_Status_Codes` ( `problem_status_code` VARCHAR(20) PRIMARY KEY, `problem_status_description` VARCHAR(80) ); CREATE TABLE `Product` ( `product_id` INTEGER PRIMARY KEY, `product_name` VARCHAR(80), `product_details` VARCHAR(255) ); CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `staff_first_name` VARCHAR(80), `staff_last_name` VARCHAR(80), `other_staff_details` VARCHAR(255) );  CREATE TABLE `Problems` ( `problem_id` INTEGER PRIMARY KEY, `product_id` INTEGER NOT NULL, `closure_authorised_by_staff_id` INTEGER NOT NULL, `reported_by_staff_id` INTEGER NOT NULL, `date_problem_reported` DATETIME NOT NULL, `date_problem_closed` DATETIME, `problem_description` VARCHAR(255), `other_problem_details` VARCHAR(255), FOREIGN KEY (`closure_authorised_by_staff_id` ) REFERENCES `Staff`(`staff_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Product`(`product_id` ), FOREIGN KEY (`reported_by_staff_id` ) REFERENCES `Staff`(`staff_id` ) );   "
63,7722,extra,cre_Theme_park,SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits ),Count the number of tourists who did not visit any place.,"PRAGMA foreign_keys = ON; CREATE TABLE Ref_Hotel_Star_Ratings ( star_rating_code CHAR(15) NOT NULL, star_rating_description VARCHAR(80), PRIMARY KEY (star_rating_code), UNIQUE (star_rating_code) );   CREATE TABLE Locations ( Location_ID INTEGER NOT NULL, Location_Name VARCHAR(255), Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Location_ID) ); CREATE TABLE Ref_Attraction_Types ( Attraction_Type_Code CHAR(15) NOT NULL, Attraction_Type_Description VARCHAR(255), PRIMARY KEY (Attraction_Type_Code), UNIQUE (Attraction_Type_Code) );  CREATE TABLE Visitors ( Tourist_ID INTEGER NOT NULL, Tourist_Details VARCHAR(255), PRIMARY KEY (Tourist_ID), UNIQUE (Tourist_ID) ); CREATE TABLE Features ( Feature_ID INTEGER NOT NULL, Feature_Details VARCHAR(255), PRIMARY KEY (Feature_ID) );  CREATE TABLE Hotels ( hotel_id INTEGER NOT NULL, star_rating_code CHAR(15) NOT NULL, pets_allowed_yn CHAR(1), price_range real, other_hotel_details VARCHAR(255), PRIMARY KEY (hotel_id), FOREIGN KEY (star_rating_code) REFERENCES Ref_Hotel_Star_Ratings (star_rating_code) );  CREATE TABLE Tourist_Attractions ( Tourist_Attraction_ID INTEGER NOT NULL, Attraction_Type_Code CHAR(15) NOT NULL, Location_ID INTEGER NOT NULL, How_to_Get_There VARCHAR(255), Name VARCHAR(255), Description VARCHAR(255), Opening_Hours VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Tourist_Attraction_ID), FOREIGN KEY (Location_ID) REFERENCES Locations (Location_ID), FOREIGN KEY (Attraction_Type_Code) REFERENCES Ref_Attraction_Types (Attraction_Type_Code) );  CREATE TABLE Street_Markets ( Market_ID INTEGER NOT NULL, Market_Details VARCHAR(255), PRIMARY KEY (Market_ID), FOREIGN KEY (Market_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Shops ( Shop_ID INTEGER NOT NULL, Shop_Details VARCHAR(255), PRIMARY KEY (Shop_ID), FOREIGN KEY (Shop_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Museums ( Museum_ID INTEGER NOT NULL, Museum_Details VARCHAR(255), PRIMARY KEY (Museum_ID), FOREIGN KEY (Museum_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Royal_Family ( Royal_Family_ID INTEGER NOT NULL, Royal_Family_Details VARCHAR(255), PRIMARY KEY (Royal_Family_ID), FOREIGN KEY (Royal_Family_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Theme_Parks ( Theme_Park_ID INTEGER NOT NULL, Theme_Park_Details VARCHAR(255), PRIMARY KEY (Theme_Park_ID), FOREIGN KEY (Theme_Park_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) );   CREATE TABLE Visits ( Visit_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Tourist_ID INTEGER NOT NULL, Visit_Date DATETIME NOT NULL, Visit_Details VARCHAR(40) NOT NULL, PRIMARY KEY (Visit_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID), FOREIGN KEY (Tourist_ID) REFERENCES Visitors (Tourist_ID) );   CREATE TABLE Photos ( Photo_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Name VARCHAR(255), Description VARCHAR(255), Filename VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Photo_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Staff ( Staff_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Name VARCHAR(40), Other_Details VARCHAR(255), PRIMARY KEY (Staff_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) );   CREATE TABLE Tourist_Attraction_Features ( Tourist_Attraction_ID INTEGER NOT NULL, Feature_ID INTEGER NOT NULL, PRIMARY KEY (Tourist_Attraction_ID, Feature_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID), FOREIGN KEY (Feature_ID) REFERENCES Features (Feature_ID) ); "
64,6274,extra,network_2,SELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin'),What is the total number of people who has no friend living in the city of Austin.,"CREATE TABLE Person (   name varchar(20) PRIMARY KEY,   age INTEGER,   city TEXT,   gender TEXT,   job TEXT );  CREATE TABLE PersonFriend (   name varchar(20),   friend varchar(20),   year INTEGER,   FOREIGN KEY (name) REFERENCES Person(name),   FOREIGN KEY (friend) REFERENCES Person(name) );  "
65,4520,extra,movie_1,"SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) DESC LIMIT 1",Find the movies with the highest average rating. Return the movie titles and average rating.,"-- dbext:type=SQLITE:dbname=movie_rating.db  /* Delete the tables if they already exist */ drop table if exists Movie; drop table if exists Reviewer; drop table if exists Rating;  /* Create the schema for our tables */ create table Movie( 	mID int primary key,  	title text,  	year int,  	director text ); create table Reviewer( 	rID int primary key,  	name text);  create table Rating( 	rID int,  	mID int,  	stars int,  	ratingDate date, 	FOREIGN KEY (mID) references Movie(mID), 	FOREIGN KEY (rID) references Reviewer(rID) );  /* Populate the tables with our data */ "
66,5103,extra,assets_maintenance,"SELECT T1.engineer_id ,  T1.first_name ,  T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 ON T1.engineer_id  =  T2.engineer_id GROUP BY T1.engineer_id ORDER BY count(*) ASC LIMIT 1","Among those engineers who have visited, which engineer makes the least number of visits? List the engineer id, first name and last name.","PRAGMA foreign_keys = ON;  CREATE TABLE `Third_Party_Companies` ( `company_id` INTEGER PRIMARY KEY , `company_type` VARCHAR(5) NOT NULL, `company_name` VARCHAR(255), `company_address` VARCHAR(255), `other_company_details` VARCHAR(255) );  CREATE TABLE `Maintenance_Contracts` ( `maintenance_contract_id` INTEGER PRIMARY KEY, `maintenance_contract_company_id` INTEGER NOT NULL, `contract_start_date` DATETIME, `contract_end_date` DATETIME, `other_contract_details` VARCHAR(255), FOREIGN KEY (`maintenance_contract_company_id` ) REFERENCES `Third_Party_Companies`(`company_id` ) );  CREATE TABLE `Parts` ( `part_id` INTEGER PRIMARY KEY, `part_name` VARCHAR(255), `chargeable_yn` VARCHAR(1), `chargeable_amount` VARCHAR(20), `other_part_details` VARCHAR(255) );  CREATE TABLE `Skills` ( `skill_id` INTEGER PRIMARY KEY, `skill_code` VARCHAR(20), `skill_description` VARCHAR(255) );  CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `staff_name` VARCHAR(255), `gender` VARCHAR(1), `other_staff_details` VARCHAR(255) ); CREATE TABLE `Assets` ( `asset_id` INTEGER PRIMARY KEY, `maintenance_contract_id` INTEGER NOT NULL, `supplier_company_id` INTEGER NOT NULL, `asset_details` VARCHAR(255), `asset_make` VARCHAR(20), `asset_model` VARCHAR(20), `asset_acquired_date` DATETIME, `asset_disposed_date` DATETIME, `other_asset_details` VARCHAR(255), FOREIGN KEY (`maintenance_contract_id` ) REFERENCES `Maintenance_Contracts`(`maintenance_contract_id` ), FOREIGN KEY (`supplier_company_id` ) REFERENCES `Third_Party_Companies`(`company_id` ) );    CREATE TABLE `Asset_Parts` ( `asset_id` INTEGER NOT NULL, `part_id` INTEGER NOT NULL, FOREIGN KEY (`part_id` ) REFERENCES `Parts`(`part_id` ), FOREIGN KEY (`asset_id` ) REFERENCES `Assets`(`asset_id` ) );  CREATE TABLE `Maintenance_Engineers` ( `engineer_id` INTEGER PRIMARY KEY, `company_id` INTEGER NOT NULL, `first_name` VARCHAR(50), `last_name` VARCHAR(50), `other_details` VARCHAR(255), FOREIGN KEY (`company_id` ) REFERENCES `Third_Party_Companies`(`company_id` ) );   CREATE TABLE `Engineer_Skills` ( `engineer_id` INTEGER NOT NULL, `skill_id` INTEGER NOT NULL, FOREIGN KEY (`engineer_id` ) REFERENCES `Maintenance_Engineers`(`engineer_id` ), FOREIGN KEY (`skill_id` ) REFERENCES `Skills`(`skill_id` ) );  CREATE TABLE `Fault_Log` ( `fault_log_entry_id` INTEGER PRIMARY KEY, `asset_id` INTEGER NOT NULL, `recorded_by_staff_id` INTEGER NOT NULL, `fault_log_entry_datetime` DATETIME, `fault_description` VARCHAR(255), `other_fault_details` VARCHAR(255), FOREIGN KEY (`asset_id` ) REFERENCES `Assets`(`asset_id` ), FOREIGN KEY (`recorded_by_staff_id` ) REFERENCES `Staff`(`staff_id` ) );  CREATE TABLE `Engineer_Visits` ( `engineer_visit_id` INTEGER PRIMARY KEY, `contact_staff_id` INTEGER, `engineer_id` INTEGER NOT NULL, `fault_log_entry_id` INTEGER NOT NULL, `fault_status` VARCHAR(10) NOT NULL, `visit_start_datetime` DATETIME, `visit_end_datetime` DATETIME, `other_visit_details` VARCHAR(255), FOREIGN KEY (`fault_log_entry_id` ) REFERENCES `Fault_Log`(`fault_log_entry_id` ), FOREIGN KEY (`engineer_id` ) REFERENCES `Maintenance_Engineers`(`engineer_id` ), FOREIGN KEY (`contact_staff_id` ) REFERENCES `Staff`(`staff_id` ) );    CREATE TABLE `Part_Faults` ( `part_fault_id` INTEGER PRIMARY KEY, `part_id` INTEGER NOT NULL, `fault_short_name` VARCHAR(20), `fault_description` VARCHAR(255), `other_fault_details` VARCHAR(255), FOREIGN KEY (`part_id` ) REFERENCES `Parts`(`part_id` ) );   CREATE TABLE `Fault_Log_Parts` ( `fault_log_entry_id` INTEGER NOT NULL, `part_fault_id` INTEGER NOT NULL, `fault_status` VARCHAR(10) NOT NULL, FOREIGN KEY (`part_fault_id` ) REFERENCES `Part_Faults`(`part_fault_id` ), FOREIGN KEY (`fault_log_entry_id` ) REFERENCES `Fault_Log`(`fault_log_entry_id` ) );  CREATE TABLE `Skills_Required_To_Fix` ( `part_fault_id` INTEGER NOT NULL, `skill_id` INTEGER NOT NULL, FOREIGN KEY (`part_fault_id` ) REFERENCES `Part_Faults`(`part_fault_id` ), FOREIGN KEY (`skill_id` ) REFERENCES `Skills`(`skill_id` ) );     "
67,5295,extra,hr_1,"SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  ( SELECT department_id FROM employees WHERE first_name  =  ""Clara"") AND first_name != ""Clara""",display the employee name ( first name and last name ) and hire date for all employees in the same department as Clara excluding Clara.,"-- phpMyAdmin SQL Dump -- version 4.0.10.7 -- http://www.phpmyadmin.net -- -- Host: localhost -- Generation Time: Mar 20, 2015 at 01:43 AM -- Server version: 5.5.34-cll-lve -- PHP Version: 5.4.23    /*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */; /*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */; /*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */; /*!40101 SET NAMES utf8 */; CREATE TABLE IF NOT EXISTS `regions` (   `REGION_ID` decimal(5,0) NOT NULL,   `REGION_NAME` varchar(25) DEFAULT NULL,   PRIMARY KEY (`REGION_ID`) );  -- -- Dumping data for table `regions` --   -- -- Database: `wrpracti_bookinfo` --  -- --------------------------------------------------------  -- -- Table structure for table `countries` --  CREATE TABLE IF NOT EXISTS `countries` (   `COUNTRY_ID` varchar(2) NOT NULL,   `COUNTRY_NAME` varchar(40) DEFAULT NULL,   `REGION_ID` decimal(10,0) DEFAULT NULL,   PRIMARY KEY (`COUNTRY_ID`),   FOREIGN KEY (`REGION_ID`) REFERENCES regions (`REGION_ID`) );  -- -- Dumping data for table `countries` --    -- --------------------------------------------------------  -- -- Table structure for table `departments` --  CREATE TABLE IF NOT EXISTS `departments` (   `DEPARTMENT_ID` decimal(4,0) NOT NULL DEFAULT '0',   `DEPARTMENT_NAME` varchar(30) NOT NULL,   `MANAGER_ID` decimal(6,0) DEFAULT NULL,   `LOCATION_ID` decimal(4,0) DEFAULT NULL,   PRIMARY KEY (`DEPARTMENT_ID`) );  -- -- Dumping data for table `departments` --     CREATE TABLE IF NOT EXISTS `jobs` (   `JOB_ID` varchar(10) NOT NULL DEFAULT '',   `JOB_TITLE` varchar(35) NOT NULL,   `MIN_SALARY` decimal(6,0) DEFAULT NULL,   `MAX_SALARY` decimal(6,0) DEFAULT NULL,   PRIMARY KEY (`JOB_ID`) );  -- -- Dumping data for table `jobs` --    -- --------------------------------------------------------  -- -- Table structure for table `employees` --  CREATE TABLE IF NOT EXISTS `employees` (   `EMPLOYEE_ID` decimal(6,0) NOT NULL DEFAULT '0',   `FIRST_NAME` varchar(20) DEFAULT NULL,   `LAST_NAME` varchar(25) NOT NULL,   `EMAIL` varchar(25) NOT NULL,   `PHONE_NUMBER` varchar(20) DEFAULT NULL,   `HIRE_DATE` date NOT NULL,   `JOB_ID` varchar(10) NOT NULL,   `SALARY` decimal(8,2) DEFAULT NULL,   `COMMISSION_PCT` decimal(2,2) DEFAULT NULL,   `MANAGER_ID` decimal(6,0) DEFAULT NULL,   `DEPARTMENT_ID` decimal(4,0) DEFAULT NULL,   PRIMARY KEY (`EMPLOYEE_ID`),   FOREIGN KEY (`DEPARTMENT_ID`) REFERENCES departments(`DEPARTMENT_ID`),   FOREIGN KEY (`JOB_ID`) REFERENCES jobs(`JOB_ID`) );  -- -- Dumping data for table `employees` --    -- --------------------------------------------------------  -- -- Table structure for table `job_history` --  CREATE TABLE IF NOT EXISTS `job_history` (   `EMPLOYEE_ID` decimal(6,0) NOT NULL,   `START_DATE` date NOT NULL,   `END_DATE` date NOT NULL,   `JOB_ID` varchar(10) NOT NULL,   `DEPARTMENT_ID` decimal(4,0) DEFAULT NULL,   PRIMARY KEY (`EMPLOYEE_ID`,`START_DATE`),   FOREIGN KEY (`EMPLOYEE_ID`) REFERENCES employees(`EMPLOYEE_ID`),   FOREIGN KEY (`DEPARTMENT_ID`) REFERENCES departments(`DEPARTMENT_ID`),   FOREIGN KEY (`JOB_ID`) REFERENCES jobs(`JOB_ID`) );  -- -- Dumping data for table `job_history` --    -- --------------------------------------------------------  -- -- Table structure for table `jobs` --   -- -- Table structure for table `locations` --  CREATE TABLE IF NOT EXISTS `locations` (   `LOCATION_ID` decimal(4,0) NOT NULL DEFAULT '0',   `STREET_ADDRESS` varchar(40) DEFAULT NULL,   `POSTAL_CODE` varchar(12) DEFAULT NULL,   `CITY` varchar(30) NOT NULL,   `STATE_PROVINCE` varchar(25) DEFAULT NULL,   `COUNTRY_ID` varchar(2) DEFAULT NULL,   PRIMARY KEY (`LOCATION_ID`),   FOREIGN KEY (`COUNTRY_ID`) REFERENCES countries(`COUNTRY_ID`) );  -- -- Dumping data for table `locations` --    -- --------------------------------------------------------  -- -- Table structure for table `regions` --   /*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */; /*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */; /*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;"
68,1179,extra,geo,"SELECT city_name FROM city WHERE population  >  150000 AND state_name IN ( SELECT traverse FROM river WHERE LENGTH  >  750 AND river_name  =  ""mississippi"" );",what are the major cities in states through which the mississippi runs,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );"
69,1612,extra,scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  ""Parsing"" AND t3.year  =  2012 AND t4.venuename  =  ""acl"";",how many Parsing papers did acl 2012 have ?,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); "
70,1715,extra,scholar,"SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname LIKE ""ImageNet"";",How many papers written on ImageNet ?,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); "
71,1486,extra,scholar,"SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  ""syntactic parsing"" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",who has the most publications in syntactic parsing ?,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); "
72,2967,extra,flight_1,"SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1",What is the salaray and name of the employee that is certified to fly the most planes?,"-- drop table flight cascade constraints; -- drop table aircraft cascade constraints; -- drop table employee cascade constraints; -- drop table certificate cascade constraints;  create table flight( 	flno number(4,0) primary key, 	origin varchar2(20), 	destination varchar2(20), 	distance number(6,0), 	departure_date date, 	arrival_date date, 	price number(7,2),     aid number(9,0),     foreign key(""aid"") references `aircraft`(""aid""));  create table aircraft( 	aid number(9,0) primary key, 	name varchar2(30), 	distance number(6,0));  create table employee( 	eid number(9,0) primary key, 	name varchar2(30), 	salary number(10,2));  create table certificate( 	eid number(9,0), 	aid number(9,0), 	primary key(eid,aid), 	foreign key(""eid"") references `employee`(""eid""), 	foreign key(""aid"") references `aircraft`(""aid""));   "
73,2432,extra,imdb,"SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.name  =  ""Gabriele Ferzetti"" ORDER BY t3.release_year DESC LIMIT 1;","Find the latest movie which "" Gabriele Ferzetti "" acted in","PRAGMA foreign_keys = ON; CREATE TABLE ""actor"" ( ""aid"" int, ""gender"" text, ""name"" text, ""nationality"" text, ""birth_city"" text, ""birth_year"" int, primary key(""aid"") );   CREATE TABLE ""copyright"" ( ""id"" int, ""msid"" int, ""cid"" int, primary key(""id"") ); CREATE TABLE ""cast"" ( ""id"" int, ""msid"" int, ""aid"" int, ""role"" int, primary key(""id""), foreign key(""aid"") references `actor`(""aid""), foreign key(""msid"") references `copyright`(""msid"") );  CREATE TABLE ""genre"" ( ""gid"" int, ""genre"" text, primary key(""gid"") );  CREATE TABLE ""classification"" ( ""id"" int, ""msid"" int, ""gid"" int, primary key(""id""), foreign key(""gid"") references `genre`(""gid""), foreign key(""msid"") references `copyright`(""msid"") );  CREATE TABLE ""company"" ( ""id"" int, ""name"" text, ""country_code"" text, primary key(""id"") );   CREATE TABLE ""director"" ( ""did"" int, ""gender"" text, ""name"" text, ""nationality"" text, ""birth_city"" text, ""birth_year"" int, primary key(""did"") );  CREATE TABLE ""producer"" ( ""pid"" int, ""gender"" text, ""name"" text, ""nationality"" text, ""birth_city"" text, ""birth_year"" int, primary key(""pid"") );  CREATE TABLE ""directed_by"" ( ""id"" int, ""msid"" int, ""did"" int, primary key(""id""), foreign key(""msid"") references `copyright`(""msid""), foreign key(""did"") references `director`(""did"") );  CREATE TABLE ""keyword"" ( ""id"" int, ""keyword"" text, primary key(""id"") );  CREATE TABLE ""made_by"" ( ""id"" int, ""msid"" int, ""pid"" int, primary key(""id""), foreign key(""msid"") references `copyright`(""msid""), foreign key(""pid"") references `producer`(""pid"") );  CREATE TABLE ""movie"" ( ""mid"" int, ""title"" text, ""release_year"" int, ""title_aka"" text, ""budget"" text, primary key(""mid"") ); CREATE TABLE ""tags"" ( ""id"" int, ""msid"" int, ""kid"" int, primary key(""id""), foreign key(""msid"") references `copyright`(""msid""), foreign key(""kid"") references `keyword`(""kid"") ); CREATE TABLE ""tv_series"" ( ""sid"" int, ""title"" text, ""release_year"" int, ""num_of_seasons"" int, ""num_of_episodes"" int, ""title_aka"" text, ""budget"" text, primary key(""sid"") ); CREATE TABLE ""writer"" ( ""wid"" int, ""gender"" text, ""name"" int, ""nationality"" int, ""num_of_episodes"" int, ""birth_city"" text, ""birth_year"" int, primary key(""wid"") ); CREATE TABLE ""written_by"" ( ""id"" int, ""msid"" int, ""wid"" int, foreign key(""msid"") references `copyright`(""msid""), foreign key(""wid"") references `writer`(""wid"") );"
74,7350,extra,products_gen_characteristics,"SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id","What are the names, details and data types of the characteristics which are never used by any product?","PRAGMA foreign_keys = ON; CREATE TABLE `Ref_Characteristic_Types` ( `characteristic_type_code` VARCHAR(15) PRIMARY KEY, `characteristic_type_description` VARCHAR(80) ); CREATE TABLE `Ref_Colors` ( `color_code` VARCHAR(15) PRIMARY KEY, `color_description` VARCHAR(80) ); CREATE TABLE `Ref_Product_Categories` ( `product_category_code` VARCHAR(15) PRIMARY KEY, `product_category_description` VARCHAR(80), `unit_of_measure` VARCHAR(20) ); CREATE TABLE `Characteristics` ( `characteristic_id` INTEGER PRIMARY KEY, `characteristic_type_code` VARCHAR(15) NOT NULL, `characteristic_data_type` VARCHAR(10), `characteristic_name` VARCHAR(80), `other_characteristic_details` VARCHAR(255), FOREIGN KEY (`characteristic_type_code` ) REFERENCES `Ref_Characteristic_Types`(`characteristic_type_code` ) ); CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `color_code` VARCHAR(15) NOT NULL, `product_category_code` VARCHAR(15) NOT NULL, `product_name` VARCHAR(80), `typical_buying_price` VARCHAR(20), `typical_selling_price` VARCHAR(20), `product_description` VARCHAR(255), `other_product_details` VARCHAR(255), FOREIGN KEY (`product_category_code` ) REFERENCES `Ref_Product_Categories`(`product_category_code` ),FOREIGN KEY (`color_code` ) REFERENCES `Ref_Colors`(`color_code` ) ); CREATE TABLE `Product_Characteristics` ( `product_id` INTEGER NOT NULL, `characteristic_id` INTEGER NOT NULL, `product_characteristic_value` VARCHAR(50), FOREIGN KEY (`characteristic_id` ) REFERENCES `Characteristics`(`characteristic_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) ); "
75,7896,extra,customers_and_addresses,SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Americano',What are the names of customers who have purchased both products Latte and Americano?,"PRAGMA foreign_keys = ON;  CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `address_content` VARCHAR(80), `city` VARCHAR(50), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(50), `country` VARCHAR(50), `other_address_details` VARCHAR(255) );  CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_details` VARCHAR(255) ); CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `payment_method` VARCHAR(15) NOT NULL, `customer_name` VARCHAR(80), `date_became_customer` DATETIME, `other_customer_details` VARCHAR(255) ); CREATE TABLE `Customer_Addresses` ( `customer_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_address_from` DATETIME NOT NULL, `address_type` VARCHAR(15) NOT NULL, `date_address_to` DATETIME, FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) ); CREATE TABLE `Customer_Contact_Channels` ( `customer_id` INTEGER NOT NULL, `channel_code` VARCHAR(15) NOT NULL, `active_from_date` DATETIME NOT NULL, `active_to_date` DATETIME, `contact_number` VARCHAR(50) NOT NULL, FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) ); CREATE TABLE `Customer_Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `order_status` VARCHAR(15) NOT NULL, `order_date` DATETIME, `order_details` VARCHAR(255), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) );  CREATE TABLE `Order_Items` ( `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, `order_quantity` VARCHAR(15), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ), FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ) ); "
76,2374,extra,imdb,"SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN directed_by AS t2 ON t4.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  ""Taraneh Alidoosti"" AND t3.name  =  ""Asghar Farhadi"";","List all the movies directed by "" Asghar Farhadi "" in which "" Taraneh Alidoosti "" played","PRAGMA foreign_keys = ON; CREATE TABLE ""actor"" ( ""aid"" int, ""gender"" text, ""name"" text, ""nationality"" text, ""birth_city"" text, ""birth_year"" int, primary key(""aid"") );   CREATE TABLE ""copyright"" ( ""id"" int, ""msid"" int, ""cid"" int, primary key(""id"") ); CREATE TABLE ""cast"" ( ""id"" int, ""msid"" int, ""aid"" int, ""role"" int, primary key(""id""), foreign key(""aid"") references `actor`(""aid""), foreign key(""msid"") references `copyright`(""msid"") );  CREATE TABLE ""genre"" ( ""gid"" int, ""genre"" text, primary key(""gid"") );  CREATE TABLE ""classification"" ( ""id"" int, ""msid"" int, ""gid"" int, primary key(""id""), foreign key(""gid"") references `genre`(""gid""), foreign key(""msid"") references `copyright`(""msid"") );  CREATE TABLE ""company"" ( ""id"" int, ""name"" text, ""country_code"" text, primary key(""id"") );   CREATE TABLE ""director"" ( ""did"" int, ""gender"" text, ""name"" text, ""nationality"" text, ""birth_city"" text, ""birth_year"" int, primary key(""did"") );  CREATE TABLE ""producer"" ( ""pid"" int, ""gender"" text, ""name"" text, ""nationality"" text, ""birth_city"" text, ""birth_year"" int, primary key(""pid"") );  CREATE TABLE ""directed_by"" ( ""id"" int, ""msid"" int, ""did"" int, primary key(""id""), foreign key(""msid"") references `copyright`(""msid""), foreign key(""did"") references `director`(""did"") );  CREATE TABLE ""keyword"" ( ""id"" int, ""keyword"" text, primary key(""id"") );  CREATE TABLE ""made_by"" ( ""id"" int, ""msid"" int, ""pid"" int, primary key(""id""), foreign key(""msid"") references `copyright`(""msid""), foreign key(""pid"") references `producer`(""pid"") );  CREATE TABLE ""movie"" ( ""mid"" int, ""title"" text, ""release_year"" int, ""title_aka"" text, ""budget"" text, primary key(""mid"") ); CREATE TABLE ""tags"" ( ""id"" int, ""msid"" int, ""kid"" int, primary key(""id""), foreign key(""msid"") references `copyright`(""msid""), foreign key(""kid"") references `keyword`(""kid"") ); CREATE TABLE ""tv_series"" ( ""sid"" int, ""title"" text, ""release_year"" int, ""num_of_seasons"" int, ""num_of_episodes"" int, ""title_aka"" text, ""budget"" text, primary key(""sid"") ); CREATE TABLE ""writer"" ( ""wid"" int, ""gender"" text, ""name"" int, ""nationality"" int, ""num_of_episodes"" int, ""birth_city"" text, ""birth_year"" int, primary key(""wid"") ); CREATE TABLE ""written_by"" ( ""id"" int, ""msid"" int, ""wid"" int, foreign key(""msid"") references `copyright`(""msid""), foreign key(""wid"") references `writer`(""wid"") );"
77,6584,extra,department_store,"SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  ""Sales Person"" EXCEPT SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  ""Clerical Staff""","What are the names and genders of staff who have held the title Sales Person, but never Clerical Staff?","PRAGMA foreign_keys = ON; CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `address_details` VARCHAR(255) );                   CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `staff_gender` VARCHAR(1), `staff_name` VARCHAR(80) );  CREATE TABLE `Suppliers` ( `supplier_id` INTEGER PRIMARY KEY, `supplier_name` VARCHAR(80), `supplier_phone` VARCHAR(80) );  CREATE TABLE `Department_Store_Chain` ( `dept_store_chain_id` INTEGER PRIMARY KEY, `dept_store_chain_name` VARCHAR(80) );  CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `payment_method_code` VARCHAR(10) NOT NULL, `customer_code` VARCHAR(20), `customer_name` VARCHAR(80), `customer_address` VARCHAR(255), `customer_phone` VARCHAR(80), `customer_email` VARCHAR(80) );                  CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_type_code` VARCHAR(10) NOT NULL, `product_name` VARCHAR(80), `product_price` DECIMAL(19,4) ); CREATE TABLE `Supplier_Addresses` ( `supplier_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_from` DATETIME NOT NULL, `date_to` DATETIME, PRIMARY KEY (`supplier_id`, `address_id`), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`supplier_id` ) REFERENCES `Suppliers`(`supplier_id` ) );  CREATE TABLE `Customer_Addresses` ( `customer_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_from` DATETIME NOT NULL, `date_to` DATETIME, PRIMARY KEY (`customer_id`, `address_id`), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) );   CREATE TABLE `Customer_Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `order_status_code` VARCHAR(10) NOT NULL, `order_date` DATETIME NOT NULL, FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) );  CREATE TABLE `Department_Stores` ( `dept_store_id` INTEGER PRIMARY KEY, `dept_store_chain_id` INTEGER, `store_name` VARCHAR(80), `store_address` VARCHAR(255), `store_phone` VARCHAR(80), `store_email` VARCHAR(80), FOREIGN KEY (`dept_store_chain_id` ) REFERENCES `Department_Store_Chain`(`dept_store_chain_id` ) );                    CREATE TABLE `Departments` ( `department_id` INTEGER PRIMARY KEY, `dept_store_id` INTEGER NOT NULL, `department_name` VARCHAR(80), FOREIGN KEY (`dept_store_id` ) REFERENCES `Department_Stores`(`dept_store_id` ) ); CREATE TABLE `Order_Items` ( `order_item_id` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) ); CREATE TABLE `Product_Suppliers` ( `product_id` INTEGER NOT NULL, `supplier_id` INTEGER NOT NULL, `date_supplied_from` DATETIME NOT NULL, `date_supplied_to` DATETIME, `total_amount_purchased` VARCHAR(80), `total_value_purchased` DECIMAL(19,4), PRIMARY KEY (`product_id`, `supplier_id`), FOREIGN KEY (`supplier_id` ) REFERENCES `Suppliers`(`supplier_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) );   CREATE TABLE `Staff_Department_Assignments` ( `staff_id` INTEGER NOT NULL, `department_id` INTEGER NOT NULL, `date_assigned_from` DATETIME NOT NULL, `job_title_code` VARCHAR(10) NOT NULL, `date_assigned_to` DATETIME, PRIMARY KEY (`staff_id`, `department_id`), FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` ), FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ) );  "
78,5001,extra,loan_1,SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Auto',What are the names of customers who have taken both Mortgage and Auto loans?,"CREATE TABLE bank ( branch_ID int PRIMARY KEY, bname varchar(20), no_of_customers int, city varchar(10), state varchar(20));   CREATE TABLE customer ( cust_ID varchar(3) PRIMARY KEY, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_ID int, state varchar(20), FOREIGN KEY(branch_ID) REFERENCES bank(branch_ID));   CREATE TABLE loan ( loan_ID varchar(3) PRIMARY KEY, loan_type varchar(15), cust_ID varchar(3), branch_ID varchar(3), amount int, FOREIGN KEY(branch_ID) REFERENCES bank(branch_ID), FOREIGN KEY(Cust_ID) REFERENCES customer(Cust_ID));  "
79,228,extra,flight_2,SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1,Give the code of the airport with the least flights.,"CREATE TABLE 'airlines' ( 	uid INTEGER PRIMARY KEY,  	Airline TEXT,  	Abbreviation TEXT,  	Country TEXT ); CREATE TABLE 'airports' ( 	City TEXT,  	AirportCode TEXT PRIMARY KEY,  	AirportName TEXT,  	Country TEXT,  	CountryAbbrev TEXT ); CREATE TABLE 'flights' ( 	Airline INTEGER,  	FlightNo INTEGER,  	SourceAirport TEXT,  	DestAirport TEXT,  	PRIMARY KEY(Airline, FlightNo), 	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode), 	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode) );"
80,1476,extra,scholar,"SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  ""Peter Mertens"" AND t1.authorname  =  ""Dina Barbian"";",Have Peter Mertens and Dina Barbian written a paper together ?,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); "
81,843,extra,dog_kennels,SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments ),How many dogs have not gone through any treatment?,"PRAGMA foreign_keys = ON; CREATE TABLE `Breeds` ( `breed_code` VARCHAR(10) PRIMARY KEY , `breed_name` VARCHAR(80) ); CREATE TABLE `Charges` ( `charge_id` INTEGER PRIMARY KEY , `charge_type` VARCHAR(10), `charge_amount` DECIMAL(19,4) ); CREATE TABLE `Sizes` ( `size_code` VARCHAR(10) PRIMARY KEY , `size_description` VARCHAR(80) );  CREATE TABLE `Treatment_Types` ( `treatment_type_code` VARCHAR(10) PRIMARY KEY , `treatment_type_description` VARCHAR(80) ); CREATE TABLE `Owners` ( `owner_id` INTEGER PRIMARY KEY , `first_name` VARCHAR(50), `last_name` VARCHAR(50), `street` VARCHAR(50), `city` VARCHAR(50), `state` VARCHAR(20), `zip_code` VARCHAR(20), `email_address` VARCHAR(50), `home_phone` VARCHAR(20), `cell_number` VARCHAR(20) ); CREATE TABLE `Dogs` ( `dog_id` INTEGER PRIMARY KEY , `owner_id` INTEGER NOT NULL, `abandoned_yn` VARCHAR(1), `breed_code` VARCHAR(10) NOT NULL, `size_code` VARCHAR(10) NOT NULL, `name` VARCHAR(50), `age` VARCHAR(20), `date_of_birth` DATETIME, `gender` VARCHAR(1), `weight` VARCHAR(20), `date_arrived` DATETIME, `date_adopted` DATETIME, `date_departed` DATETIME, FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ), FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ), FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ), FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ) );  CREATE TABLE `Professionals` ( `professional_id` INTEGER PRIMARY KEY , `role_code` VARCHAR(10) NOT NULL, `first_name` VARCHAR(50), `street` VARCHAR(50), `city` VARCHAR(50), `state` VARCHAR(20), `zip_code` VARCHAR(20), `last_name` VARCHAR(50), `email_address` VARCHAR(50), `home_phone` VARCHAR(20), `cell_number` VARCHAR(20) );  CREATE TABLE `Treatments` ( `treatment_id` INTEGER PRIMARY KEY , `dog_id` INTEGER NOT NULL, `professional_id` INTEGER NOT NULL, `treatment_type_code` VARCHAR(10) NOT NULL, `date_of_treatment` DATETIME, `cost_of_treatment` DECIMAL(19,4), FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ), FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ), FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` ) );                 "
82,8031,extra,e_government,SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id  =  t2.party_id WHERE t2.form_id  =  (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1),What are the party emails associated with parties that used the party form that is the most common?,"PRAGMA foreign_keys = ON; CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `line_1_number_building` VARCHAR(80), `town_city` VARCHAR(50), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(50), `country` VARCHAR(50) ); CREATE TABLE `Services` ( `service_id` INTEGER PRIMARY KEY, `service_type_code` VARCHAR(15) NOT NULL, `service_name` VARCHAR(80), `service_descriptio` VARCHAR(255) ); CREATE TABLE `Forms` ( `form_id` INTEGER PRIMARY KEY, `form_type_code` VARCHAR(15) NOT NULL, `service_id` INTEGER, `form_number` VARCHAR(50), `form_name` VARCHAR(80), `form_description` VARCHAR(255), FOREIGN KEY (`service_id` ) REFERENCES `Services`(`service_id` ) );   CREATE TABLE `Individuals` ( `individual_id` INTEGER PRIMARY KEY, `individual_first_name` VARCHAR(80), `individual_middle_name` VARCHAR(80), `inidividual_phone` VARCHAR(80), `individual_email` VARCHAR(80), `individual_address` VARCHAR(255), `individual_last_name` VARCHAR(80) ); CREATE TABLE `Organizations` ( `organization_id` INTEGER PRIMARY KEY, `date_formed` DATETIME, `organization_name` VARCHAR(255), `uk_vat_number` VARCHAR(20) ); CREATE TABLE `Parties` ( `party_id` INTEGER PRIMARY KEY, `payment_method_code` VARCHAR(15) NOT NULL, `party_phone` VARCHAR(80), `party_email` VARCHAR(80) ); CREATE TABLE `Organization_Contact_Individuals` ( `individual_id` INTEGER NOT NULL, `organization_id` INTEGER NOT NULL, `date_contact_from` DATETIME NOT NULL, `date_contact_to` DATETIME, PRIMARY KEY (`individual_id`,`organization_id` ), FOREIGN KEY (`organization_id` ) REFERENCES `Organizations`(`organization_id` ), FOREIGN KEY (`individual_id` ) REFERENCES `Individuals`(`individual_id` ) ); CREATE TABLE `Party_Addresses` ( `party_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_address_from` DATETIME NOT NULL, `address_type_code` VARCHAR(15) NOT NULL, `date_address_to` DATETIME, PRIMARY KEY (`party_id`, `address_id`), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`party_id` ) REFERENCES `Parties`(`party_id` ) ); CREATE TABLE `Party_Forms` ( `party_id` INTEGER NOT NULL, `form_id` INTEGER NOT NULL, `date_completion_started` DATETIME NOT NULL, `form_status_code` VARCHAR(15) NOT NULL, `date_fully_completed` DATETIME, PRIMARY KEY (`party_id`, `form_id`), FOREIGN KEY (`party_id` ) REFERENCES `Parties`(`party_id` ), FOREIGN KEY (`form_id` ) REFERENCES `Forms`(`form_id` ) ); CREATE TABLE `Party_Services` ( `booking_id` INTEGER NOT NULL , `customer_id` INTEGER NOT NULL, `service_id` INTEGER NOT NULL, `service_datetime` DATETIME NOT NULL, `booking_made_date` DATETIME, FOREIGN KEY (`service_id` ) REFERENCES `Services`(`service_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Parties`(`party_id` ) ); "
83,6116,extra,tracking_grants_for_research,SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id WHERE T2.outcome_code  =  'Paper' INTERSECT SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id WHERE T2.outcome_code  =  'Patent',List the project details of the project both producing patent and paper as outcomes.,"PRAGMA foreign_keys = ON; CREATE TABLE `Document_Types` ( `document_type_code` VARCHAR(10) PRIMARY KEY, `document_description` VARCHAR(255) NOT NULL ); CREATE TABLE `Documents` ( `document_id` INTEGER PRIMARY KEY, `document_type_code` VARCHAR(10), `grant_id` INTEGER NOT NULL, `sent_date` DATETIME NOT NULL, `response_received_date` DATETIME NOT NULL, `other_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`document_type_code` ) REFERENCES `Document_Types`(`document_type_code` ), FOREIGN KEY (`grant_id` ) REFERENCES `Grants`(`grant_id` ) ); CREATE TABLE `Grants` ( `grant_id` INTEGER PRIMARY KEY, `organisation_id` INTEGER NOT NULL, `grant_amount` DECIMAL(19,4) NOT NULL DEFAULT 0, `grant_start_date` DATETIME NOT NULL, `grant_end_date` DATETIME NOT NULL, `other_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`organisation_id` ) REFERENCES `Organisations`(`organisation_id` ) ); CREATE TABLE `Organisation_Types` ( `organisation_type` VARCHAR(10) PRIMARY KEY, `organisation_type_description` VARCHAR(255) NOT NULL ); CREATE TABLE `Organisations` ( `organisation_id` INTEGER PRIMARY KEY, `organisation_type` VARCHAR(10) NOT NULL, `organisation_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`organisation_type` ) REFERENCES `Organisation_Types`(`organisation_type` ) ); CREATE TABLE `Project_Outcomes` ( `project_id` INTEGER NOT NULL, `outcome_code` VARCHAR(10) NOT NULL, `outcome_details` VARCHAR(255), FOREIGN KEY (`project_id` ) REFERENCES `Projects`(`project_id` ),FOREIGN KEY (`outcome_code` ) REFERENCES `Research_Outcomes`(`outcome_code` ) ); CREATE TABLE `Project_Staff` ( `staff_id` DOUBLE PRIMARY KEY, `project_id` INTEGER NOT NULL, `role_code` VARCHAR(10) NOT NULL, `date_from` DATETIME, `date_to` DATETIME, `other_details` VARCHAR(255), FOREIGN KEY (`project_id` ) REFERENCES `Projects`(`project_id` ),FOREIGN KEY (`role_code` ) REFERENCES `Staff_Roles`(`role_code` ) ); CREATE TABLE `Projects` ( `project_id` INTEGER PRIMARY KEY, `organisation_id` INTEGER NOT NULL, `project_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`organisation_id` ) REFERENCES `Organisations`(`organisation_id` ) ); CREATE TABLE `Research_Outcomes` ( `outcome_code` VARCHAR(10) PRIMARY KEY, `outcome_description` VARCHAR(255) NOT NULL ); CREATE TABLE `Research_Staff` ( `staff_id` INTEGER PRIMARY KEY, `employer_organisation_id` INTEGER NOT NULL, `staff_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`employer_organisation_id` ) REFERENCES `Organisations`(`organisation_id` ) ); CREATE TABLE `Staff_Roles` ( `role_code` VARCHAR(10) PRIMARY KEY, `role_description` VARCHAR(255) NOT NULL ); CREATE TABLE `Tasks` ( `task_id` INTEGER PRIMARY KEY, `project_id` INTEGER NOT NULL, `task_details` VARCHAR(255) NOT NULL, `eg Agree Objectives` VARCHAR(1), FOREIGN KEY (`project_id` ) REFERENCES `Projects`(`project_id` ) ); "
84,5953,extra,film_rank,"SELECT title ,  director FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.market_id  =  T2.Market_ID WHERE country  =  'China')",Return the titles and directors of films that were never in the market of China.," PRAGMA foreign_keys = ON;    CREATE TABLE ""film"" ( ""Film_ID"" int, ""Title"" text, ""Studio"" text, ""Director"" text, ""Gross_in_dollar"" int, PRIMARY KEY (""Film_ID"") );   CREATE TABLE ""market"" ( ""Market_ID"" int, ""Country"" text, ""Number_cities"" int, PRIMARY KEY (""Market_ID"") );  CREATE TABLE ""film_market_estimation"" ( ""Estimation_ID"" int, ""Low_Estimate"" real, ""High_Estimate"" real, ""Film_ID"" int, ""Type"" text, ""Market_ID"" int, ""Year"" int, PRIMARY KEY (""Estimation_ID""), FOREIGN KEY (""Film_ID"") REFERENCES film(""Film_ID""), FOREIGN KEY (""Market_ID"") REFERENCES market(""Market_ID"") );   "
85,2194,extra,academic,"SELECT t2.name FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t1.keyword  =  ""Relational Database"";","return me the authors who have papers containing keyword "" Relational Database "" .","PRAGMA foreign_keys = ON; CREATE TABLE ""author"" ( ""aid"" int, ""homepage"" text, ""name"" text, ""oid"" int, primary key(""aid"") ); CREATE TABLE ""conference"" ( ""cid"" int, ""homepage"" text, ""name"" text, primary key (""cid"") ); CREATE TABLE ""domain"" ( ""did"" int, ""name"" text, primary key (""did"") ); CREATE TABLE ""domain_author"" ( ""aid"" int,  ""did"" int, primary key (""did"", ""aid""), foreign key(""aid"") references `author`(""aid""), foreign key(""did"") references `domain`(""did"") );  CREATE TABLE ""domain_conference"" ( ""cid"" int, ""did"" int, primary key (""did"", ""cid""), foreign key(""cid"") references `conference`(""cid""), foreign key(""did"") references `domain`(""did"") ); CREATE TABLE ""journal"" ( ""homepage"" text, ""jid"" int, ""name"" text, primary key(""jid"") ); CREATE TABLE ""domain_journal"" ( ""did"" int, ""jid"" int, primary key (""did"", ""jid""), foreign key(""jid"") references ""journal""(""jid""), foreign key(""did"") references ""domain""(""did"") ); CREATE TABLE ""keyword"" ( ""keyword"" text, ""kid"" int, primary key(""kid"") ); CREATE TABLE ""domain_keyword"" ( ""did"" int, ""kid"" int, primary key (""did"", ""kid""), foreign key(""kid"") references ""keyword""(""kid""), foreign key(""did"") references ""domain""(""did"") ); CREATE TABLE ""publication"" ( ""abstract"" text, ""cid"" text, ""citation_num"" int, ""jid"" int, ""pid"" int, ""reference_num"" int, ""title"" text, ""year"" int, primary key(""pid""), foreign key(""jid"") references ""journal""(""jid""), foreign key(""cid"") references ""conference""(""cid"") ); CREATE TABLE ""domain_publication"" ( ""did"" int, ""pid"" int, primary key (""did"", ""pid""), foreign key(""pid"") references ""publication""(""pid""), foreign key(""did"") references ""domain""(""did"") );  CREATE TABLE ""organization"" ( ""continent"" text, ""homepage"" text, ""name"" text, ""oid"" int, primary key(""oid"") );  CREATE TABLE ""publication_keyword"" ( ""pid"" int, ""kid"" int, primary key (""kid"", ""pid""), foreign key(""pid"") references ""publication""(""pid""), foreign key(""kid"") references ""keyword""(""kid"") ); CREATE TABLE ""writes"" ( ""aid"" int, ""pid"" int, primary key (""aid"", ""pid""), foreign key(""pid"") references ""publication""(""pid""), foreign key(""aid"") references ""author""(""aid"") ); CREATE TABLE ""cite"" ( ""cited"" int, ""citing""  int, foreign key(""cited"") references ""publication""(""pid""), foreign key(""citing"") references ""publication""(""pid"") );"
86,2397,extra,imdb,"SELECT t3.name FROM director AS t3 JOIN directed_by AS t2 ON t3.did  =  t2.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN tags AS t5 ON t5.msid  =  t4.mid JOIN keyword AS t1 ON t5.kid  =  t1.id WHERE t1.keyword  =  ""nuclear weapons"";",List all the directors of movies about nuclear weapons,"PRAGMA foreign_keys = ON; CREATE TABLE ""actor"" ( ""aid"" int, ""gender"" text, ""name"" text, ""nationality"" text, ""birth_city"" text, ""birth_year"" int, primary key(""aid"") );   CREATE TABLE ""copyright"" ( ""id"" int, ""msid"" int, ""cid"" int, primary key(""id"") ); CREATE TABLE ""cast"" ( ""id"" int, ""msid"" int, ""aid"" int, ""role"" int, primary key(""id""), foreign key(""aid"") references `actor`(""aid""), foreign key(""msid"") references `copyright`(""msid"") );  CREATE TABLE ""genre"" ( ""gid"" int, ""genre"" text, primary key(""gid"") );  CREATE TABLE ""classification"" ( ""id"" int, ""msid"" int, ""gid"" int, primary key(""id""), foreign key(""gid"") references `genre`(""gid""), foreign key(""msid"") references `copyright`(""msid"") );  CREATE TABLE ""company"" ( ""id"" int, ""name"" text, ""country_code"" text, primary key(""id"") );   CREATE TABLE ""director"" ( ""did"" int, ""gender"" text, ""name"" text, ""nationality"" text, ""birth_city"" text, ""birth_year"" int, primary key(""did"") );  CREATE TABLE ""producer"" ( ""pid"" int, ""gender"" text, ""name"" text, ""nationality"" text, ""birth_city"" text, ""birth_year"" int, primary key(""pid"") );  CREATE TABLE ""directed_by"" ( ""id"" int, ""msid"" int, ""did"" int, primary key(""id""), foreign key(""msid"") references `copyright`(""msid""), foreign key(""did"") references `director`(""did"") );  CREATE TABLE ""keyword"" ( ""id"" int, ""keyword"" text, primary key(""id"") );  CREATE TABLE ""made_by"" ( ""id"" int, ""msid"" int, ""pid"" int, primary key(""id""), foreign key(""msid"") references `copyright`(""msid""), foreign key(""pid"") references `producer`(""pid"") );  CREATE TABLE ""movie"" ( ""mid"" int, ""title"" text, ""release_year"" int, ""title_aka"" text, ""budget"" text, primary key(""mid"") ); CREATE TABLE ""tags"" ( ""id"" int, ""msid"" int, ""kid"" int, primary key(""id""), foreign key(""msid"") references `copyright`(""msid""), foreign key(""kid"") references `keyword`(""kid"") ); CREATE TABLE ""tv_series"" ( ""sid"" int, ""title"" text, ""release_year"" int, ""num_of_seasons"" int, ""num_of_episodes"" int, ""title_aka"" text, ""budget"" text, primary key(""sid"") ); CREATE TABLE ""writer"" ( ""wid"" int, ""gender"" text, ""name"" int, ""nationality"" int, ""num_of_episodes"" int, ""birth_city"" text, ""birth_year"" int, primary key(""wid"") ); CREATE TABLE ""written_by"" ( ""id"" int, ""msid"" int, ""wid"" int, foreign key(""msid"") references `copyright`(""msid""), foreign key(""wid"") references `writer`(""wid"") );"
87,1971,extra,scholar,"SELECT DISTINCT COUNT ( DISTINCT t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname LIKE ""Ye Cao"" GROUP BY t3.year ORDER BY COUNT ( DISTINCT t3.paperid ) DESC;",What year did Ye Cao publish the most papers,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); "
88,796,extra,dog_kennels,"SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1","Return the owner id, first name and last name of the owner who has the most dogs.","PRAGMA foreign_keys = ON; CREATE TABLE `Breeds` ( `breed_code` VARCHAR(10) PRIMARY KEY , `breed_name` VARCHAR(80) ); CREATE TABLE `Charges` ( `charge_id` INTEGER PRIMARY KEY , `charge_type` VARCHAR(10), `charge_amount` DECIMAL(19,4) ); CREATE TABLE `Sizes` ( `size_code` VARCHAR(10) PRIMARY KEY , `size_description` VARCHAR(80) );  CREATE TABLE `Treatment_Types` ( `treatment_type_code` VARCHAR(10) PRIMARY KEY , `treatment_type_description` VARCHAR(80) ); CREATE TABLE `Owners` ( `owner_id` INTEGER PRIMARY KEY , `first_name` VARCHAR(50), `last_name` VARCHAR(50), `street` VARCHAR(50), `city` VARCHAR(50), `state` VARCHAR(20), `zip_code` VARCHAR(20), `email_address` VARCHAR(50), `home_phone` VARCHAR(20), `cell_number` VARCHAR(20) ); CREATE TABLE `Dogs` ( `dog_id` INTEGER PRIMARY KEY , `owner_id` INTEGER NOT NULL, `abandoned_yn` VARCHAR(1), `breed_code` VARCHAR(10) NOT NULL, `size_code` VARCHAR(10) NOT NULL, `name` VARCHAR(50), `age` VARCHAR(20), `date_of_birth` DATETIME, `gender` VARCHAR(1), `weight` VARCHAR(20), `date_arrived` DATETIME, `date_adopted` DATETIME, `date_departed` DATETIME, FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ), FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ), FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ), FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ) );  CREATE TABLE `Professionals` ( `professional_id` INTEGER PRIMARY KEY , `role_code` VARCHAR(10) NOT NULL, `first_name` VARCHAR(50), `street` VARCHAR(50), `city` VARCHAR(50), `state` VARCHAR(20), `zip_code` VARCHAR(20), `last_name` VARCHAR(50), `email_address` VARCHAR(50), `home_phone` VARCHAR(20), `cell_number` VARCHAR(20) );  CREATE TABLE `Treatments` ( `treatment_id` INTEGER PRIMARY KEY , `dog_id` INTEGER NOT NULL, `professional_id` INTEGER NOT NULL, `treatment_type_code` VARCHAR(10) NOT NULL, `date_of_treatment` DATETIME, `cost_of_treatment` DECIMAL(19,4), FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ), FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ), FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` ) );                 "
89,5313,extra,hr_1,"SELECT T1.first_name ,  T1.last_name ,  T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id WHERE T1.first_name LIKE '%z%'","display those employees who contain a letter z to their first name and also display their last name, city.","-- phpMyAdmin SQL Dump -- version 4.0.10.7 -- http://www.phpmyadmin.net -- -- Host: localhost -- Generation Time: Mar 20, 2015 at 01:43 AM -- Server version: 5.5.34-cll-lve -- PHP Version: 5.4.23    /*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */; /*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */; /*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */; /*!40101 SET NAMES utf8 */; CREATE TABLE IF NOT EXISTS `regions` (   `REGION_ID` decimal(5,0) NOT NULL,   `REGION_NAME` varchar(25) DEFAULT NULL,   PRIMARY KEY (`REGION_ID`) );  -- -- Dumping data for table `regions` --   -- -- Database: `wrpracti_bookinfo` --  -- --------------------------------------------------------  -- -- Table structure for table `countries` --  CREATE TABLE IF NOT EXISTS `countries` (   `COUNTRY_ID` varchar(2) NOT NULL,   `COUNTRY_NAME` varchar(40) DEFAULT NULL,   `REGION_ID` decimal(10,0) DEFAULT NULL,   PRIMARY KEY (`COUNTRY_ID`),   FOREIGN KEY (`REGION_ID`) REFERENCES regions (`REGION_ID`) );  -- -- Dumping data for table `countries` --    -- --------------------------------------------------------  -- -- Table structure for table `departments` --  CREATE TABLE IF NOT EXISTS `departments` (   `DEPARTMENT_ID` decimal(4,0) NOT NULL DEFAULT '0',   `DEPARTMENT_NAME` varchar(30) NOT NULL,   `MANAGER_ID` decimal(6,0) DEFAULT NULL,   `LOCATION_ID` decimal(4,0) DEFAULT NULL,   PRIMARY KEY (`DEPARTMENT_ID`) );  -- -- Dumping data for table `departments` --     CREATE TABLE IF NOT EXISTS `jobs` (   `JOB_ID` varchar(10) NOT NULL DEFAULT '',   `JOB_TITLE` varchar(35) NOT NULL,   `MIN_SALARY` decimal(6,0) DEFAULT NULL,   `MAX_SALARY` decimal(6,0) DEFAULT NULL,   PRIMARY KEY (`JOB_ID`) );  -- -- Dumping data for table `jobs` --    -- --------------------------------------------------------  -- -- Table structure for table `employees` --  CREATE TABLE IF NOT EXISTS `employees` (   `EMPLOYEE_ID` decimal(6,0) NOT NULL DEFAULT '0',   `FIRST_NAME` varchar(20) DEFAULT NULL,   `LAST_NAME` varchar(25) NOT NULL,   `EMAIL` varchar(25) NOT NULL,   `PHONE_NUMBER` varchar(20) DEFAULT NULL,   `HIRE_DATE` date NOT NULL,   `JOB_ID` varchar(10) NOT NULL,   `SALARY` decimal(8,2) DEFAULT NULL,   `COMMISSION_PCT` decimal(2,2) DEFAULT NULL,   `MANAGER_ID` decimal(6,0) DEFAULT NULL,   `DEPARTMENT_ID` decimal(4,0) DEFAULT NULL,   PRIMARY KEY (`EMPLOYEE_ID`),   FOREIGN KEY (`DEPARTMENT_ID`) REFERENCES departments(`DEPARTMENT_ID`),   FOREIGN KEY (`JOB_ID`) REFERENCES jobs(`JOB_ID`) );  -- -- Dumping data for table `employees` --    -- --------------------------------------------------------  -- -- Table structure for table `job_history` --  CREATE TABLE IF NOT EXISTS `job_history` (   `EMPLOYEE_ID` decimal(6,0) NOT NULL,   `START_DATE` date NOT NULL,   `END_DATE` date NOT NULL,   `JOB_ID` varchar(10) NOT NULL,   `DEPARTMENT_ID` decimal(4,0) DEFAULT NULL,   PRIMARY KEY (`EMPLOYEE_ID`,`START_DATE`),   FOREIGN KEY (`EMPLOYEE_ID`) REFERENCES employees(`EMPLOYEE_ID`),   FOREIGN KEY (`DEPARTMENT_ID`) REFERENCES departments(`DEPARTMENT_ID`),   FOREIGN KEY (`JOB_ID`) REFERENCES jobs(`JOB_ID`) );  -- -- Dumping data for table `job_history` --    -- --------------------------------------------------------  -- -- Table structure for table `jobs` --   -- -- Table structure for table `locations` --  CREATE TABLE IF NOT EXISTS `locations` (   `LOCATION_ID` decimal(4,0) NOT NULL DEFAULT '0',   `STREET_ADDRESS` varchar(40) DEFAULT NULL,   `POSTAL_CODE` varchar(12) DEFAULT NULL,   `CITY` varchar(30) NOT NULL,   `STATE_PROVINCE` varchar(25) DEFAULT NULL,   `COUNTRY_ID` varchar(2) DEFAULT NULL,   PRIMARY KEY (`LOCATION_ID`),   FOREIGN KEY (`COUNTRY_ID`) REFERENCES countries(`COUNTRY_ID`) );  -- -- Dumping data for table `locations` --    -- --------------------------------------------------------  -- -- Table structure for table `regions` --   /*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */; /*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */; /*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;"
90,1611,extra,scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  ""Parsing"" AND t3.year  =  2012 AND t4.venuename  =  ""acl"";",papers on Parsing appeared at acl in 2012,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); "
91,1788,extra,scholar,"SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""deep learning"" ORDER BY t3.year DESC;",What are the latest publications on deep learning ?,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); "
92,6234,extra,network_2,"SELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Alice'",Find the name and age of the person who is a friend of both Dan and Alice.,"CREATE TABLE Person (   name varchar(20) PRIMARY KEY,   age INTEGER,   city TEXT,   gender TEXT,   job TEXT );  CREATE TABLE PersonFriend (   name varchar(20),   friend varchar(20),   year INTEGER,   FOREIGN KEY (name) REFERENCES Person(name),   FOREIGN KEY (friend) REFERENCES Person(name) );  "
93,7565,extra,customer_complaints,SELECT t1.first_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id GROUP BY t2.staff_id ORDER BY count(*) LIMIT 5,Return the first names of the 5 staff members who have handled the most complaints.,"PRAGMA foreign_keys = ON;   CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `gender` VARCHAR(1), `first_name` VARCHAR(80), `last_name` VARCHAR(80), `email_address` VARCHAR(255), `phone_number` VARCHAR(80) ); CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_type_code` VARCHAR(20) NOT NULL, `address_line_1` VARCHAR(80), `address_line_2` VARCHAR(80), `town_city` VARCHAR(80), `state` VARCHAR(80), `email_address` VARCHAR(255), `phone_number` VARCHAR(80) ); CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `parent_product_id` INTEGER, `product_category_code` VARCHAR(20) NOT NULL, `date_product_first_available` DATETIME, `date_product_discontinued` DATETIME, `product_name` VARCHAR(80), `product_description` VARCHAR(255), `product_price` DECIMAL(19,4) ); CREATE TABLE `Complaints` ( `complaint_id` INTEGER NOT NULL , `product_id` INTEGER NOT NULL, `customer_id` INTEGER NOT NULL, `complaint_outcome_code` VARCHAR(20) NOT NULL, `complaint_status_code` VARCHAR(20) NOT NULL, `complaint_type_code` VARCHAR(20) NOT NULL, `date_complaint_raised` DATETIME, `date_complaint_closed` DATETIME, `staff_id` INTEGER NOT NULL , FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) ); "
94,2229,extra,academic,"SELECT COUNT ( DISTINCT t4.title ) FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  ""H. V. Jagadish"" AND t2.name  =  ""PVLDB"" AND t4.year  >  2000;","return me the number of papers by "" H. V. Jagadish "" on PVLDB after 2000 .","PRAGMA foreign_keys = ON; CREATE TABLE ""author"" ( ""aid"" int, ""homepage"" text, ""name"" text, ""oid"" int, primary key(""aid"") ); CREATE TABLE ""conference"" ( ""cid"" int, ""homepage"" text, ""name"" text, primary key (""cid"") ); CREATE TABLE ""domain"" ( ""did"" int, ""name"" text, primary key (""did"") ); CREATE TABLE ""domain_author"" ( ""aid"" int,  ""did"" int, primary key (""did"", ""aid""), foreign key(""aid"") references `author`(""aid""), foreign key(""did"") references `domain`(""did"") );  CREATE TABLE ""domain_conference"" ( ""cid"" int, ""did"" int, primary key (""did"", ""cid""), foreign key(""cid"") references `conference`(""cid""), foreign key(""did"") references `domain`(""did"") ); CREATE TABLE ""journal"" ( ""homepage"" text, ""jid"" int, ""name"" text, primary key(""jid"") ); CREATE TABLE ""domain_journal"" ( ""did"" int, ""jid"" int, primary key (""did"", ""jid""), foreign key(""jid"") references ""journal""(""jid""), foreign key(""did"") references ""domain""(""did"") ); CREATE TABLE ""keyword"" ( ""keyword"" text, ""kid"" int, primary key(""kid"") ); CREATE TABLE ""domain_keyword"" ( ""did"" int, ""kid"" int, primary key (""did"", ""kid""), foreign key(""kid"") references ""keyword""(""kid""), foreign key(""did"") references ""domain""(""did"") ); CREATE TABLE ""publication"" ( ""abstract"" text, ""cid"" text, ""citation_num"" int, ""jid"" int, ""pid"" int, ""reference_num"" int, ""title"" text, ""year"" int, primary key(""pid""), foreign key(""jid"") references ""journal""(""jid""), foreign key(""cid"") references ""conference""(""cid"") ); CREATE TABLE ""domain_publication"" ( ""did"" int, ""pid"" int, primary key (""did"", ""pid""), foreign key(""pid"") references ""publication""(""pid""), foreign key(""did"") references ""domain""(""did"") );  CREATE TABLE ""organization"" ( ""continent"" text, ""homepage"" text, ""name"" text, ""oid"" int, primary key(""oid"") );  CREATE TABLE ""publication_keyword"" ( ""pid"" int, ""kid"" int, primary key (""kid"", ""pid""), foreign key(""pid"") references ""publication""(""pid""), foreign key(""kid"") references ""keyword""(""kid"") ); CREATE TABLE ""writes"" ( ""aid"" int, ""pid"" int, primary key (""aid"", ""pid""), foreign key(""pid"") references ""publication""(""pid""), foreign key(""aid"") references ""author""(""aid"") ); CREATE TABLE ""cite"" ( ""cited"" int, ""citing""  int, foreign key(""cited"") references ""publication""(""pid""), foreign key(""citing"") references ""publication""(""pid"") );"
95,1493,extra,scholar,"SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  ""syntactic parsing"" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",who published the most in syntactic parsing ?,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); "
96,4607,extra,inn_1,"SELECT T2.roomName ,  T1.Rate ,  T1.CheckIn ,  T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT 1;","Return the name, rate, check in and check out date for the room with the highest rate.","CREATE TABLE ""Rooms"" (  	""RoomId"" TEXT PRIMARY KEY, 	""roomName"" TEXT,  	""beds"" INTEGER,  	""bedType"" TEXT,  	""maxOccupancy"" INTEGER,  	""basePrice"" INTEGER,  	""decor"" TEXT  );  CREATE TABLE ""Reservations"" (  	""Code"" INTEGER PRIMARY KEY,  	""Room"" TEXT,  	""CheckIn"" TEXT,  	""CheckOut"" TEXT,  	""Rate"" REAL,  	""LastName"" TEXT,  	""FirstName"" TEXT,  	""Adults"" INTEGER,  	""Kids"" INTEGER, 	FOREIGN KEY (Room) REFERENCES Rooms(RoomId) ); "
97,3104,extra,customers_card_transactions,"SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",Show the first names and last names of customers without any account.,"PRAGMA foreign_keys = ON;  CREATE TABLE `Accounts` ( `account_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `account_name` VARCHAR(50), `other_account_details` VARCHAR(255) ); CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_first_name` VARCHAR(20), `customer_last_name` VARCHAR(20), `customer_address` VARCHAR(255), `customer_phone` VARCHAR(255), `customer_email` VARCHAR(255), `other_customer_details` VARCHAR(255) ); CREATE TABLE `Customers_Cards` ( `card_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `card_type_code` VARCHAR(15) NOT NULL, `card_number` VARCHAR(80), `date_valid_from` DATETIME, `date_valid_to` DATETIME, `other_card_details` VARCHAR(255) ); CREATE TABLE `Financial_Transactions` ( `transaction_id` INTEGER NOT NULL , `previous_transaction_id` INTEGER, `account_id` INTEGER NOT NULL, `card_id` INTEGER NOT NULL, `transaction_type` VARCHAR(15) NOT NULL, `transaction_date` DATETIME, `transaction_amount` DOUBLE NULL, `transaction_comment` VARCHAR(255), `other_transaction_details` VARCHAR(255), FOREIGN KEY (`card_id` ) REFERENCES `Customers_Cards`(`card_id` ), FOREIGN KEY (`account_id` ) REFERENCES `Accounts`(`account_id` ) );                 "
98,7138,extra,tracking_software_problems,"SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = ""Dameon"" AND T2.staff_last_name = ""Frami"" UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = ""Jolie"" AND T2.staff_last_name = ""Weber""",What are the id of problems reported by the staff named Dameon Frami or Jolie Weber?,"PRAGMA foreign_keys = ON; CREATE TABLE `Problem_Category_Codes` ( `problem_category_code` VARCHAR(20) PRIMARY KEY, `problem_category_description` VARCHAR(80) ); CREATE TABLE `Problem_Log` ( `problem_log_id` INTEGER PRIMARY KEY, `assigned_to_staff_id` INTEGER NOT NULL, `problem_id` INTEGER NOT NULL, `problem_category_code` VARCHAR(20) NOT NULL, `problem_status_code` VARCHAR(20) NOT NULL, `log_entry_date` DATETIME, `log_entry_description` VARCHAR(255), `log_entry_fix` VARCHAR(255), `other_log_details` VARCHAR(255), FOREIGN KEY (`problem_category_code` ) REFERENCES `Problem_Category_Codes`(`problem_category_code` ),FOREIGN KEY (`assigned_to_staff_id` ) REFERENCES `Staff`(`staff_id` ),FOREIGN KEY (`problem_id` ) REFERENCES `Problems`(`problem_id` ),FOREIGN KEY (`problem_status_code` ) REFERENCES `Problem_Status_Codes`(`problem_status_code` ) ); CREATE TABLE `Problem_Status_Codes` ( `problem_status_code` VARCHAR(20) PRIMARY KEY, `problem_status_description` VARCHAR(80) ); CREATE TABLE `Product` ( `product_id` INTEGER PRIMARY KEY, `product_name` VARCHAR(80), `product_details` VARCHAR(255) ); CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `staff_first_name` VARCHAR(80), `staff_last_name` VARCHAR(80), `other_staff_details` VARCHAR(255) );  CREATE TABLE `Problems` ( `problem_id` INTEGER PRIMARY KEY, `product_id` INTEGER NOT NULL, `closure_authorised_by_staff_id` INTEGER NOT NULL, `reported_by_staff_id` INTEGER NOT NULL, `date_problem_reported` DATETIME NOT NULL, `date_problem_closed` DATETIME, `problem_description` VARCHAR(255), `other_problem_details` VARCHAR(255), FOREIGN KEY (`closure_authorised_by_staff_id` ) REFERENCES `Staff`(`staff_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Product`(`product_id` ), FOREIGN KEY (`reported_by_staff_id` ) REFERENCES `Staff`(`staff_id` ) );   "
99,4660,extra,inn_1,SELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations),Find the number of rooms that do not have any reservation.,"CREATE TABLE ""Rooms"" (  	""RoomId"" TEXT PRIMARY KEY, 	""roomName"" TEXT,  	""beds"" INTEGER,  	""bedType"" TEXT,  	""maxOccupancy"" INTEGER,  	""basePrice"" INTEGER,  	""decor"" TEXT  );  CREATE TABLE ""Reservations"" (  	""Code"" INTEGER PRIMARY KEY,  	""Room"" TEXT,  	""CheckIn"" TEXT,  	""CheckOut"" TEXT,  	""Rate"" REAL,  	""LastName"" TEXT,  	""FirstName"" TEXT,  	""Adults"" INTEGER,  	""Kids"" INTEGER, 	FOREIGN KEY (Room) REFERENCES Rooms(RoomId) ); "
100,1760,hard,scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""question answering"" AND t3.year  =  2016;",What papers were written on question answering this year ?,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); "
101,4742,hard,storm_record,SELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region),Show the name of storms which don't have affected region in record.," PRAGMA foreign_keys = ON;  CREATE TABLE ""storm"" ( ""Storm_ID"" int, ""Name"" text, ""Dates_active"" text, ""Max_speed"" int, ""Damage_millions_USD"" real, ""Number_Deaths"" int, PRIMARY KEY (""Storm_ID"") );  CREATE TABLE ""region"" ( `Region_id` int, `Region_code` text, `Region_name` text, PRIMARY KEY (""Region_id"") );  CREATE TABLE `affected_region` ( `Region_id` int, `Storm_ID` int, `Number_city_affected` real, PRIMARY KEY (`Region_id`,`Storm_ID`), FOREIGN KEY (`Region_id`) REFERENCES `region`(`Region_id`), FOREIGN KEY (`Storm_ID`) REFERENCES `storm`(`Storm_ID`) );  "
102,2170,hard,academic,"SELECT t1.name FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t3.title  =  ""Making database systems usable"";","return me the authors of "" Making database systems usable "" .","PRAGMA foreign_keys = ON; CREATE TABLE ""author"" ( ""aid"" int, ""homepage"" text, ""name"" text, ""oid"" int, primary key(""aid"") ); CREATE TABLE ""conference"" ( ""cid"" int, ""homepage"" text, ""name"" text, primary key (""cid"") ); CREATE TABLE ""domain"" ( ""did"" int, ""name"" text, primary key (""did"") ); CREATE TABLE ""domain_author"" ( ""aid"" int,  ""did"" int, primary key (""did"", ""aid""), foreign key(""aid"") references `author`(""aid""), foreign key(""did"") references `domain`(""did"") );  CREATE TABLE ""domain_conference"" ( ""cid"" int, ""did"" int, primary key (""did"", ""cid""), foreign key(""cid"") references `conference`(""cid""), foreign key(""did"") references `domain`(""did"") ); CREATE TABLE ""journal"" ( ""homepage"" text, ""jid"" int, ""name"" text, primary key(""jid"") ); CREATE TABLE ""domain_journal"" ( ""did"" int, ""jid"" int, primary key (""did"", ""jid""), foreign key(""jid"") references ""journal""(""jid""), foreign key(""did"") references ""domain""(""did"") ); CREATE TABLE ""keyword"" ( ""keyword"" text, ""kid"" int, primary key(""kid"") ); CREATE TABLE ""domain_keyword"" ( ""did"" int, ""kid"" int, primary key (""did"", ""kid""), foreign key(""kid"") references ""keyword""(""kid""), foreign key(""did"") references ""domain""(""did"") ); CREATE TABLE ""publication"" ( ""abstract"" text, ""cid"" text, ""citation_num"" int, ""jid"" int, ""pid"" int, ""reference_num"" int, ""title"" text, ""year"" int, primary key(""pid""), foreign key(""jid"") references ""journal""(""jid""), foreign key(""cid"") references ""conference""(""cid"") ); CREATE TABLE ""domain_publication"" ( ""did"" int, ""pid"" int, primary key (""did"", ""pid""), foreign key(""pid"") references ""publication""(""pid""), foreign key(""did"") references ""domain""(""did"") );  CREATE TABLE ""organization"" ( ""continent"" text, ""homepage"" text, ""name"" text, ""oid"" int, primary key(""oid"") );  CREATE TABLE ""publication_keyword"" ( ""pid"" int, ""kid"" int, primary key (""kid"", ""pid""), foreign key(""pid"") references ""publication""(""pid""), foreign key(""kid"") references ""keyword""(""kid"") ); CREATE TABLE ""writes"" ( ""aid"" int, ""pid"" int, primary key (""aid"", ""pid""), foreign key(""pid"") references ""publication""(""pid""), foreign key(""aid"") references ""author""(""aid"") ); CREATE TABLE ""cite"" ( ""cited"" int, ""citing""  int, foreign key(""cited"") references ""publication""(""pid""), foreign key(""citing"") references ""publication""(""pid"") );"
103,5347,hard,music_1,"SELECT artist_name FROM artist WHERE country  =  ""UK"" INTERSECT SELECT artist_name FROM song WHERE languages  =  ""english""",Find the names of the artists who are from UK and have produced English songs.," --data definition  create table genre( 	g_name varchar2(20) not null, 	rating varchar2(10), 	most_popular_in varchar2(50), 	primary key(g_name) );  create table artist( 	artist_name varchar2(50) not null, 	country varchar2(20), 	gender varchar2(20), 	preferred_genre varchar2(50), 	constraint a_name primary key(artist_name), 	foreign key(preferred_genre) references genre(g_name) ON DELETE CASCADE );  create table files( 	f_id number(10) not null, 	artist_name varchar2(50), 	file_size varchar2(20), 	duration varchar2(20), 	formats varchar2(20), 	primary key(f_id), 	foreign key(artist_name) references artist(artist_name) ON DELETE CASCADE );   create table song( 	song_name varchar2(50), 	artist_name varchar2(50), 	country varchar2(20), 	f_id number(10),     	genre_is varchar2(20), 	rating number(10) check(rating>0 and rating<11), 	languages varchar2(20), 	releasedate Date,  	resolution number(10) not null, 	constraint s_name primary key(song_name), 	foreign key(artist_name) references artist(artist_name) ON DELETE CASCADE, 	foreign key(f_id) references files(f_id) ON DELETE CASCADE, 	foreign key(genre_is) references genre(g_name) ON DELETE CASCADE );   --insertion of attributes in the table   "
104,1446,hard,geo,SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );,what rivers flow through the largest state,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );"
105,7681,hard,cre_Theme_park,"SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  ""walk"" OR  T2.How_to_Get_There  =  ""bus""",What are the details of the markets that can be accessed by walk or bus?,"PRAGMA foreign_keys = ON; CREATE TABLE Ref_Hotel_Star_Ratings ( star_rating_code CHAR(15) NOT NULL, star_rating_description VARCHAR(80), PRIMARY KEY (star_rating_code), UNIQUE (star_rating_code) );   CREATE TABLE Locations ( Location_ID INTEGER NOT NULL, Location_Name VARCHAR(255), Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Location_ID) ); CREATE TABLE Ref_Attraction_Types ( Attraction_Type_Code CHAR(15) NOT NULL, Attraction_Type_Description VARCHAR(255), PRIMARY KEY (Attraction_Type_Code), UNIQUE (Attraction_Type_Code) );  CREATE TABLE Visitors ( Tourist_ID INTEGER NOT NULL, Tourist_Details VARCHAR(255), PRIMARY KEY (Tourist_ID), UNIQUE (Tourist_ID) ); CREATE TABLE Features ( Feature_ID INTEGER NOT NULL, Feature_Details VARCHAR(255), PRIMARY KEY (Feature_ID) );  CREATE TABLE Hotels ( hotel_id INTEGER NOT NULL, star_rating_code CHAR(15) NOT NULL, pets_allowed_yn CHAR(1), price_range real, other_hotel_details VARCHAR(255), PRIMARY KEY (hotel_id), FOREIGN KEY (star_rating_code) REFERENCES Ref_Hotel_Star_Ratings (star_rating_code) );  CREATE TABLE Tourist_Attractions ( Tourist_Attraction_ID INTEGER NOT NULL, Attraction_Type_Code CHAR(15) NOT NULL, Location_ID INTEGER NOT NULL, How_to_Get_There VARCHAR(255), Name VARCHAR(255), Description VARCHAR(255), Opening_Hours VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Tourist_Attraction_ID), FOREIGN KEY (Location_ID) REFERENCES Locations (Location_ID), FOREIGN KEY (Attraction_Type_Code) REFERENCES Ref_Attraction_Types (Attraction_Type_Code) );  CREATE TABLE Street_Markets ( Market_ID INTEGER NOT NULL, Market_Details VARCHAR(255), PRIMARY KEY (Market_ID), FOREIGN KEY (Market_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Shops ( Shop_ID INTEGER NOT NULL, Shop_Details VARCHAR(255), PRIMARY KEY (Shop_ID), FOREIGN KEY (Shop_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Museums ( Museum_ID INTEGER NOT NULL, Museum_Details VARCHAR(255), PRIMARY KEY (Museum_ID), FOREIGN KEY (Museum_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Royal_Family ( Royal_Family_ID INTEGER NOT NULL, Royal_Family_Details VARCHAR(255), PRIMARY KEY (Royal_Family_ID), FOREIGN KEY (Royal_Family_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Theme_Parks ( Theme_Park_ID INTEGER NOT NULL, Theme_Park_Details VARCHAR(255), PRIMARY KEY (Theme_Park_ID), FOREIGN KEY (Theme_Park_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) );   CREATE TABLE Visits ( Visit_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Tourist_ID INTEGER NOT NULL, Visit_Date DATETIME NOT NULL, Visit_Details VARCHAR(40) NOT NULL, PRIMARY KEY (Visit_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID), FOREIGN KEY (Tourist_ID) REFERENCES Visitors (Tourist_ID) );   CREATE TABLE Photos ( Photo_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Name VARCHAR(255), Description VARCHAR(255), Filename VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Photo_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Staff ( Staff_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Name VARCHAR(40), Other_Details VARCHAR(255), PRIMARY KEY (Staff_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) );   CREATE TABLE Tourist_Attraction_Features ( Tourist_Attraction_ID INTEGER NOT NULL, Feature_ID INTEGER NOT NULL, PRIMARY KEY (Tourist_Attraction_ID, Feature_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID), FOREIGN KEY (Feature_ID) REFERENCES Features (Feature_ID) ); "
106,1200,hard,geo,SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );,what is the biggest city in the usa,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );"
107,1814,hard,scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""character recognition"" AND t3.year  <  2010;",character recognition papers earlier than 2010,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); "
108,6538,hard,department_store,SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1,Return the id of the department with the fewest staff assignments.,"PRAGMA foreign_keys = ON; CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `address_details` VARCHAR(255) );                   CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `staff_gender` VARCHAR(1), `staff_name` VARCHAR(80) );  CREATE TABLE `Suppliers` ( `supplier_id` INTEGER PRIMARY KEY, `supplier_name` VARCHAR(80), `supplier_phone` VARCHAR(80) );  CREATE TABLE `Department_Store_Chain` ( `dept_store_chain_id` INTEGER PRIMARY KEY, `dept_store_chain_name` VARCHAR(80) );  CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `payment_method_code` VARCHAR(10) NOT NULL, `customer_code` VARCHAR(20), `customer_name` VARCHAR(80), `customer_address` VARCHAR(255), `customer_phone` VARCHAR(80), `customer_email` VARCHAR(80) );                  CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_type_code` VARCHAR(10) NOT NULL, `product_name` VARCHAR(80), `product_price` DECIMAL(19,4) ); CREATE TABLE `Supplier_Addresses` ( `supplier_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_from` DATETIME NOT NULL, `date_to` DATETIME, PRIMARY KEY (`supplier_id`, `address_id`), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`supplier_id` ) REFERENCES `Suppliers`(`supplier_id` ) );  CREATE TABLE `Customer_Addresses` ( `customer_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_from` DATETIME NOT NULL, `date_to` DATETIME, PRIMARY KEY (`customer_id`, `address_id`), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) );   CREATE TABLE `Customer_Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `order_status_code` VARCHAR(10) NOT NULL, `order_date` DATETIME NOT NULL, FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) );  CREATE TABLE `Department_Stores` ( `dept_store_id` INTEGER PRIMARY KEY, `dept_store_chain_id` INTEGER, `store_name` VARCHAR(80), `store_address` VARCHAR(255), `store_phone` VARCHAR(80), `store_email` VARCHAR(80), FOREIGN KEY (`dept_store_chain_id` ) REFERENCES `Department_Store_Chain`(`dept_store_chain_id` ) );                    CREATE TABLE `Departments` ( `department_id` INTEGER PRIMARY KEY, `dept_store_id` INTEGER NOT NULL, `department_name` VARCHAR(80), FOREIGN KEY (`dept_store_id` ) REFERENCES `Department_Stores`(`dept_store_id` ) ); CREATE TABLE `Order_Items` ( `order_item_id` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) ); CREATE TABLE `Product_Suppliers` ( `product_id` INTEGER NOT NULL, `supplier_id` INTEGER NOT NULL, `date_supplied_from` DATETIME NOT NULL, `date_supplied_to` DATETIME, `total_amount_purchased` VARCHAR(80), `total_value_purchased` DECIMAL(19,4), PRIMARY KEY (`product_id`, `supplier_id`), FOREIGN KEY (`supplier_id` ) REFERENCES `Suppliers`(`supplier_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) );   CREATE TABLE `Staff_Department_Assignments` ( `staff_id` INTEGER NOT NULL, `department_id` INTEGER NOT NULL, `date_assigned_from` DATETIME NOT NULL, `job_title_code` VARCHAR(10) NOT NULL, `date_assigned_to` DATETIME, PRIMARY KEY (`staff_id`, `department_id`), FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` ), FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ) );  "
109,6095,hard,club_1,"SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  ""Bootup Baltimore"" AND t3.age  >  18","Count the number of members in club ""Bootup Baltimore"" whose age is above 18.","create table Student (          StuID        INTEGER PRIMARY KEY,          LName        VARCHAR(12),          Fname        VARCHAR(12),          Age      INTEGER,          Sex      VARCHAR(1),          Major        INTEGER,          Advisor      INTEGER,          city_code    VARCHAR(3)   );   create table Club (        ClubID           INTEGER PRIMARY KEY,        ClubName         VARCHAR(40),        ClubDesc         VARCHAR(1024),        ClubLocation VARCHAR(40) );  create table Member_of_club (        StuID            INTEGER,        ClubID           INTEGER,        Position     VARCHAR(40),        FOREIGN KEY(StuID) REFERENCES Student(StuID),        FOREIGN KEY(ClubID) REFERENCES Club(ClubID) );   teach kids and adults about computer basics.', 'AKW'); "
110,636,hard,tvshow,SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey',What are the countries that are not playing cartoons written by Todd Casey?,"PRAGMA foreign_keys=ON; BEGIN TRANSACTION;  CREATE TABLE IF NOT EXISTS ""TV_Channel"" ( ""id"" text, ""series_name"" text, ""Country"" text, ""Language"" text, ""Content"" text, ""Pixel_aspect_ratio_PAR"" text, ""Hight_definition_TV"" text, ""Pay_per_view_PPV"" text, ""Package_Option"" text, PRIMARY KEY (""id"") );  CREATE TABLE IF NOT EXISTS ""TV_series"" ( ""id"" real, ""Episode"" text, ""Air_Date"" text, ""Rating"" text, ""Share"" real, ""18_49_Rating_Share"" text, ""Viewers_m"" text, ""Weekly_Rank"" real, ""Channel"" text, PRIMARY KEY (""id""), FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`) );  CREATE TABLE IF NOT EXISTS ""Cartoon"" ( ""id"" real, ""Title"" text, ""Directed_by"" text, ""Written_by"" text, ""Original_air_date"" text, ""Production_code"" real, ""Channel"" text, PRIMARY KEY (""id""), FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`) );   COMMIT;"
111,6553,hard,department_store,"SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.date_assigned_from LIKE ""2016%""",Return the name and gender of the staff who was assigned in 2016.,"PRAGMA foreign_keys = ON; CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `address_details` VARCHAR(255) );                   CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `staff_gender` VARCHAR(1), `staff_name` VARCHAR(80) );  CREATE TABLE `Suppliers` ( `supplier_id` INTEGER PRIMARY KEY, `supplier_name` VARCHAR(80), `supplier_phone` VARCHAR(80) );  CREATE TABLE `Department_Store_Chain` ( `dept_store_chain_id` INTEGER PRIMARY KEY, `dept_store_chain_name` VARCHAR(80) );  CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `payment_method_code` VARCHAR(10) NOT NULL, `customer_code` VARCHAR(20), `customer_name` VARCHAR(80), `customer_address` VARCHAR(255), `customer_phone` VARCHAR(80), `customer_email` VARCHAR(80) );                  CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_type_code` VARCHAR(10) NOT NULL, `product_name` VARCHAR(80), `product_price` DECIMAL(19,4) ); CREATE TABLE `Supplier_Addresses` ( `supplier_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_from` DATETIME NOT NULL, `date_to` DATETIME, PRIMARY KEY (`supplier_id`, `address_id`), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`supplier_id` ) REFERENCES `Suppliers`(`supplier_id` ) );  CREATE TABLE `Customer_Addresses` ( `customer_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_from` DATETIME NOT NULL, `date_to` DATETIME, PRIMARY KEY (`customer_id`, `address_id`), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) );   CREATE TABLE `Customer_Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `order_status_code` VARCHAR(10) NOT NULL, `order_date` DATETIME NOT NULL, FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) );  CREATE TABLE `Department_Stores` ( `dept_store_id` INTEGER PRIMARY KEY, `dept_store_chain_id` INTEGER, `store_name` VARCHAR(80), `store_address` VARCHAR(255), `store_phone` VARCHAR(80), `store_email` VARCHAR(80), FOREIGN KEY (`dept_store_chain_id` ) REFERENCES `Department_Store_Chain`(`dept_store_chain_id` ) );                    CREATE TABLE `Departments` ( `department_id` INTEGER PRIMARY KEY, `dept_store_id` INTEGER NOT NULL, `department_name` VARCHAR(80), FOREIGN KEY (`dept_store_id` ) REFERENCES `Department_Stores`(`dept_store_id` ) ); CREATE TABLE `Order_Items` ( `order_item_id` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) ); CREATE TABLE `Product_Suppliers` ( `product_id` INTEGER NOT NULL, `supplier_id` INTEGER NOT NULL, `date_supplied_from` DATETIME NOT NULL, `date_supplied_to` DATETIME, `total_amount_purchased` VARCHAR(80), `total_value_purchased` DECIMAL(19,4), PRIMARY KEY (`product_id`, `supplier_id`), FOREIGN KEY (`supplier_id` ) REFERENCES `Suppliers`(`supplier_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) );   CREATE TABLE `Staff_Department_Assignments` ( `staff_id` INTEGER NOT NULL, `department_id` INTEGER NOT NULL, `date_assigned_from` DATETIME NOT NULL, `job_title_code` VARCHAR(10) NOT NULL, `date_assigned_to` DATETIME, PRIMARY KEY (`staff_id`, `department_id`), FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` ), FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ) );  "
112,6836,hard,device,SELECT Shop_Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM stock),List the names of shops that have no devices in stock.,"PRAGMA foreign_keys = ON;  CREATE TABLE ""device"" ( ""Device_ID"" int, ""Device"" text, ""Carrier"" text, ""Package_Version"" text, ""Applications"" text, ""Software_Platform"" text, PRIMARY KEY (""Device_ID"") );  CREATE TABLE ""shop"" ( ""Shop_ID"" int, ""Shop_Name"" text, ""Location"" text, ""Open_Date"" text, ""Open_Year"" int, PRIMARY KEY (""Shop_ID"") );  CREATE TABLE ""stock"" ( ""Shop_ID"" int, ""Device_ID"" int, ""Quantity"" int, PRIMARY KEY (""Shop_ID"",""Device_ID""), FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`), FOREIGN KEY (`Device_ID`) REFERENCES `device`(`Device_ID`) );  "
113,5161,hard,sports_competition,SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC LIMIT 1,List the most common type of competition.," PRAGMA foreign_keys = ON;  CREATE TABLE ""club"" ( ""Club_ID"" int, ""name"" text, ""Region"" text, ""Start_year"" text, PRIMARY KEY (""Club_ID"") );  CREATE TABLE ""club_rank"" ( ""Rank"" real, ""Club_ID"" int, ""Gold"" real, ""Silver"" real, ""Bronze"" real, ""Total"" real, PRIMARY KEY (""Rank"",""Club_ID"") FOREIGN KEY (`Club_ID`) REFERENCES `club`(`Club_ID`) );  CREATE TABLE ""player"" ( ""Player_ID"" int, ""name"" text, ""Position"" text, ""Club_ID"" int, ""Apps"" real, ""Tries"" real, ""Goals"" text, ""Points"" real, PRIMARY KEY (""Player_ID""), FOREIGN KEY (`Club_ID`) REFERENCES `club`(`Club_ID`) );  CREATE TABLE ""competition"" ( ""Competition_ID"" int, ""Year"" real, ""Competition_type"" text, ""Country"" text, PRIMARY KEY (""Competition_ID"") );  CREATE TABLE ""competition_result"" ( ""Competition_ID"" int, ""Club_ID_1"" int, ""Club_ID_2"" int, ""Score"" text, PRIMARY KEY (""Competition_ID"",""Club_ID_1"",""Club_ID_2""), FOREIGN KEY (`Club_ID_1`) REFERENCES `club`(`Club_ID`), FOREIGN KEY (`Club_ID_2`) REFERENCES `club`(`Club_ID`), FOREIGN KEY (`Competition_ID`) REFERENCES `competition`(`Competition_ID`) );   "
114,5082,hard,behavior_monitoring,SELECT last_name FROM Teachers EXCEPT SELECT T1.last_name FROM Teachers AS T1 JOIN Detention AS T2 ON T1.teacher_id  =  T2.teacher_id,Find the last names of teachers who are not involved in any detention.,"PRAGMA foreign_keys = ON; CREATE TABLE `Ref_Address_Types` ( `address_type_code` VARCHAR(15) PRIMARY KEY, `address_type_description` VARCHAR(80) ); CREATE TABLE `Ref_Detention_Type` ( `detention_type_code` VARCHAR(10) PRIMARY KEY, `detention_type_description` VARCHAR(80) ); CREATE TABLE `Ref_Incident_Type` ( `incident_type_code` VARCHAR(10) PRIMARY KEY, `incident_type_description` VARCHAR(80) );  CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `line_1` VARCHAR(120), `line_2` VARCHAR(120), `line_3` VARCHAR(120), `city` VARCHAR(80), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(50), `country` VARCHAR(50), `other_address_details` VARCHAR(255) );  CREATE TABLE `Students` ( `student_id` INTEGER PRIMARY KEY, `address_id` INTEGER NOT NULL, `first_name` VARCHAR(80), `middle_name` VARCHAR(40), `last_name` VARCHAR(40), `cell_mobile_number` VARCHAR(40), `email_address` VARCHAR(40), `date_first_rental` DATETIME, `date_left_university` DATETIME, `other_student_details` VARCHAR(255), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ) );  CREATE TABLE `Teachers` ( `teacher_id` INTEGER PRIMARY KEY, `address_id` INTEGER NOT NULL, `first_name` VARCHAR(80), `middle_name` VARCHAR(80), `last_name` VARCHAR(80), `gender` VARCHAR(1), `cell_mobile_number` VARCHAR(40), `email_address` VARCHAR(40), `other_details` VARCHAR(255), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ) ); CREATE TABLE `Assessment_Notes` ( `notes_id` INTEGER NOT NULL , `student_id` INTEGER, `teacher_id` INTEGER NOT NULL, `date_of_notes` DATETIME, `text_of_notes` VARCHAR(255), `other_details` VARCHAR(255), FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ), FOREIGN KEY (`teacher_id` ) REFERENCES `Teachers`(`teacher_id` ) ); CREATE TABLE `Behavior_Incident` ( `incident_id` INTEGER PRIMARY KEY, `incident_type_code` VARCHAR(10) NOT NULL, `student_id` INTEGER NOT NULL, `date_incident_start` DATETIME, `date_incident_end` DATETIME, `incident_summary` VARCHAR(255), `recommendations` VARCHAR(255), `other_details` VARCHAR(255), FOREIGN KEY (`incident_type_code` ) REFERENCES `Ref_Incident_Type`(`incident_type_code` ), FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ) ); CREATE TABLE `Detention` ( `detention_id` INTEGER PRIMARY KEY, `detention_type_code` VARCHAR(10) NOT NULL, `teacher_id` INTEGER, `datetime_detention_start` DATETIME, `datetime_detention_end` DATETIME, `detention_summary` VARCHAR(255), `other_details` VARCHAR(255), FOREIGN KEY (`detention_type_code` ) REFERENCES `Ref_Detention_Type`(`detention_type_code` ), FOREIGN KEY (`teacher_id` ) REFERENCES `Teachers`(`teacher_id` ) );  CREATE TABLE `Student_Addresses` ( `student_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_address_from` DATETIME NOT NULL, `date_address_to` DATETIME, `monthly_rental` DECIMAL(19,4), `other_details` VARCHAR(255), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ) );  CREATE TABLE `Students_in_Detention` ( `student_id` INTEGER NOT NULL, `detention_id` INTEGER NOT NULL, `incident_id` INTEGER NOT NULL, FOREIGN KEY (`incident_id` ) REFERENCES `Behavior_Incident`(`incident_id` ), FOREIGN KEY (`detention_id` ) REFERENCES `Detention`(`detention_id` ), FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ) );  "
115,4508,hard,movie_1,SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Chris Jackson',Find the titles of all movies not reviewed by Chris Jackson.,"-- dbext:type=SQLITE:dbname=movie_rating.db  /* Delete the tables if they already exist */ drop table if exists Movie; drop table if exists Reviewer; drop table if exists Rating;  /* Create the schema for our tables */ create table Movie( 	mID int primary key,  	title text,  	year int,  	director text ); create table Reviewer( 	rID int primary key,  	name text);  create table Rating( 	rID int,  	mID int,  	stars int,  	ratingDate date, 	FOREIGN KEY (mID) references Movie(mID), 	FOREIGN KEY (rID) references Reviewer(rID) );  /* Populate the tables with our data */ "
116,4994,hard,loan_1,SELECT cust_name FROM customer WHERE acc_type  =  'saving' INTERSECT SELECT cust_name FROM customer WHERE acc_type  =  'checking',Find the name of customers who have both saving and checking account types.,"CREATE TABLE bank ( branch_ID int PRIMARY KEY, bname varchar(20), no_of_customers int, city varchar(10), state varchar(20));   CREATE TABLE customer ( cust_ID varchar(3) PRIMARY KEY, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_ID int, state varchar(20), FOREIGN KEY(branch_ID) REFERENCES bank(branch_ID));   CREATE TABLE loan ( loan_ID varchar(3) PRIMARY KEY, loan_type varchar(15), cust_ID varchar(3), branch_ID varchar(3), amount int, FOREIGN KEY(branch_ID) REFERENCES bank(branch_ID), FOREIGN KEY(Cust_ID) REFERENCES customer(Cust_ID));  "
117,5772,hard,hospital_1,"SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  ""John Wen""",Find the names of procedures which physician John Wen was trained in.,"-- https://en.wikibooks.org/wiki/SQL_Exercises/The_Hospital  DROP TABLE IF EXISTS Physician; CREATE TABLE Physician (   EmployeeID INTEGER NOT NULL,   Name VARCHAR(30) NOT NULL,   Position VARCHAR(30) NOT NULL,   SSN INTEGER NOT NULL,   CONSTRAINT pk_physician PRIMARY KEY(EmployeeID) );   DROP TABLE IF EXISTS Department; CREATE TABLE Department (   DepartmentID INTEGER NOT NULL,   Name VARCHAR(30) NOT NULL,   Head INTEGER NOT NULL,   CONSTRAINT pk_Department PRIMARY KEY(DepartmentID),   CONSTRAINT fk_Department_Physician_EmployeeID FOREIGN KEY(Head) REFERENCES Physician(EmployeeID) );   DROP TABLE IF EXISTS Affiliated_With; CREATE TABLE Affiliated_With (   Physician INTEGER NOT NULL,   Department INTEGER NOT NULL,   PrimaryAffiliation BOOLEAN NOT NULL,   CONSTRAINT fk_Affiliated_With_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),   CONSTRAINT fk_Affiliated_With_Department_DepartmentID FOREIGN KEY(Department) REFERENCES Department(DepartmentID),   PRIMARY KEY(Physician, Department) );  DROP TABLE IF EXISTS Procedures; CREATE TABLE Procedures (   Code INTEGER PRIMARY KEY NOT NULL,   Name VARCHAR(30) NOT NULL,   Cost REAL NOT NULL );  DROP TABLE IF EXISTS Trained_In; CREATE TABLE Trained_In (   Physician INTEGER NOT NULL,   Treatment INTEGER NOT NULL,   CertificationDate DATETIME NOT NULL,   CertificationExpires DATETIME NOT NULL,   CONSTRAINT fk_Trained_In_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),   CONSTRAINT fk_Trained_In_Procedures_Code FOREIGN KEY(Treatment) REFERENCES Procedures(Code),   PRIMARY KEY(Physician, Treatment) );  DROP TABLE IF EXISTS Patient; CREATE TABLE Patient (   SSN INTEGER PRIMARY KEY NOT NULL,   Name VARCHAR(30) NOT NULL,   Address VARCHAR(30) NOT NULL,   Phone VARCHAR(30) NOT NULL,   InsuranceID INTEGER NOT NULL,   PCP INTEGER NOT NULL,   CONSTRAINT fk_Patient_Physician_EmployeeID FOREIGN KEY(PCP) REFERENCES Physician(EmployeeID) );  DROP TABLE IF EXISTS Nurse; CREATE TABLE Nurse (   EmployeeID INTEGER PRIMARY KEY NOT NULL,   Name VARCHAR(30) NOT NULL,   Position VARCHAR(30) NOT NULL,   Registered BOOLEAN NOT NULL,   SSN INTEGER NOT NULL );  DROP TABLE IF EXISTS Appointment; CREATE TABLE Appointment (   AppointmentID INTEGER PRIMARY KEY NOT NULL,   Patient INTEGER NOT NULL,       PrepNurse INTEGER,   Physician INTEGER NOT NULL,   Start DATETIME NOT NULL,   End DATETIME NOT NULL,   ExaminationRoom TEXT NOT NULL,   CONSTRAINT fk_Appointment_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),   CONSTRAINT fk_Appointment_Nurse_EmployeeID FOREIGN KEY(PrepNurse) REFERENCES Nurse(EmployeeID),   CONSTRAINT fk_Appointment_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID) );  DROP TABLE IF EXISTS Medication; CREATE TABLE Medication (   Code INTEGER PRIMARY KEY NOT NULL,   Name VARCHAR(30) NOT NULL,   Brand VARCHAR(30) NOT NULL,   Description VARCHAR(30) NOT NULL );   DROP TABLE IF EXISTS Prescribes; CREATE TABLE Prescribes (   Physician INTEGER NOT NULL,   Patient INTEGER NOT NULL,    Medication INTEGER NOT NULL,    Date DATETIME NOT NULL,   Appointment INTEGER,     Dose VARCHAR(30) NOT NULL,   PRIMARY KEY(Physician, Patient, Medication, Date),   CONSTRAINT fk_Prescribes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),   CONSTRAINT fk_Prescribes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),   CONSTRAINT fk_Prescribes_Medication_Code FOREIGN KEY(Medication) REFERENCES Medication(Code),   CONSTRAINT fk_Prescribes_Appointment_AppointmentID FOREIGN KEY(Appointment) REFERENCES Appointment(AppointmentID) );  DROP TABLE IF EXISTS Block; CREATE TABLE Block (   BlockFloor INTEGER NOT NULL,   BlockCode INTEGER NOT NULL,   PRIMARY KEY(BlockFloor, BlockCode) );   DROP TABLE IF EXISTS Room; CREATE TABLE Room (   RoomNumber INTEGER PRIMARY KEY NOT NULL,   RoomType VARCHAR(30) NOT NULL,   BlockFloor INTEGER NOT NULL,     BlockCode INTEGER NOT NULL,     Unavailable BOOLEAN NOT NULL,   CONSTRAINT fk_Room_Block_PK FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode) );  DROP TABLE IF EXISTS On_Call; CREATE TABLE On_Call (   Nurse INTEGER NOT NULL,   BlockFloor INTEGER NOT NULL,    BlockCode INTEGER NOT NULL,   OnCallStart DATETIME NOT NULL,   OnCallEnd DATETIME NOT NULL,   PRIMARY KEY(Nurse, BlockFloor, BlockCode, OnCallStart, OnCallEnd),   CONSTRAINT fk_OnCall_Nurse_EmployeeID FOREIGN KEY(Nurse) REFERENCES Nurse(EmployeeID),   CONSTRAINT fk_OnCall_Block_Floor FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode)  );  DROP TABLE IF EXISTS Stay; CREATE TABLE Stay (   StayID INTEGER PRIMARY KEY NOT NULL,   Patient INTEGER NOT NULL,   Room INTEGER NOT NULL,   StayStart DATETIME NOT NULL,   StayEnd DATETIME NOT NULL,   CONSTRAINT fk_Stay_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),   CONSTRAINT fk_Stay_Room_Number FOREIGN KEY(Room) REFERENCES Room(RoomNumber) );  DROP TABLE IF EXISTS Undergoes; CREATE TABLE Undergoes (   Patient INTEGER NOT NULL,   Procedures INTEGER NOT NULL,   Stay INTEGER NOT NULL,   DateUndergoes DATETIME NOT NULL,   Physician INTEGER NOT NULL,   AssistingNurse INTEGER,   PRIMARY KEY(Patient, Procedures, Stay, DateUndergoes),   CONSTRAINT fk_Undergoes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),   CONSTRAINT fk_Undergoes_Procedures_Code FOREIGN KEY(Procedures) REFERENCES Procedures(Code),   CONSTRAINT fk_Undergoes_Stay_StayID FOREIGN KEY(Stay) REFERENCES Stay(StayID),   CONSTRAINT fk_Undergoes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),   CONSTRAINT fk_Undergoes_Nurse_EmployeeID FOREIGN KEY(AssistingNurse) REFERENCES Nurse(EmployeeID) );   "
118,281,hard,employee_hire_evaluation,SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation),Find the names of employees who never won any award in the evaluation.," PRAGMA foreign_keys = ON;  CREATE TABLE ""employee"" ( ""Employee_ID"" int, ""Name"" text, ""Age"" int, ""City"" text, PRIMARY KEY (""Employee_ID"") );   CREATE TABLE ""shop"" ( ""Shop_ID"" int, ""Name"" text, ""Location"" text, ""District"" text, ""Number_products"" int, ""Manager_name"" text, PRIMARY KEY (""Shop_ID"") );   CREATE TABLE ""hiring"" ( ""Shop_ID"" int, ""Employee_ID"" int, ""Start_from"" text, ""Is_full_time"" bool, PRIMARY KEY (""Employee_ID""), FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`), FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`) );  CREATE TABLE ""evaluation"" ( ""Employee_ID"" text, ""Year_awarded"" text, ""Bonus"" real, PRIMARY KEY (""Employee_ID"",""Year_awarded""), FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`) );   "
119,4527,hard,movie_1,"SELECT T2.title ,  T1.stars ,  T2.director ,  max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE director != ""null"" GROUP BY director","For each director, what are the titles and ratings for all the movies they reviewed?","-- dbext:type=SQLITE:dbname=movie_rating.db  /* Delete the tables if they already exist */ drop table if exists Movie; drop table if exists Reviewer; drop table if exists Rating;  /* Create the schema for our tables */ create table Movie( 	mID int primary key,  	title text,  	year int,  	director text ); create table Reviewer( 	rID int primary key,  	name text);  create table Rating( 	rID int,  	mID int,  	stars int,  	ratingDate date, 	FOREIGN KEY (mID) references Movie(mID), 	FOREIGN KEY (rID) references Reviewer(rID) );  /* Populate the tables with our data */ "
120,6837,hard,device,SELECT Shop_Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM stock),What are the names of shops that do not have any devices in stock?,"PRAGMA foreign_keys = ON;  CREATE TABLE ""device"" ( ""Device_ID"" int, ""Device"" text, ""Carrier"" text, ""Package_Version"" text, ""Applications"" text, ""Software_Platform"" text, PRIMARY KEY (""Device_ID"") );  CREATE TABLE ""shop"" ( ""Shop_ID"" int, ""Shop_Name"" text, ""Location"" text, ""Open_Date"" text, ""Open_Year"" int, PRIMARY KEY (""Shop_ID"") );  CREATE TABLE ""stock"" ( ""Shop_ID"" int, ""Device_ID"" int, ""Quantity"" int, PRIMARY KEY (""Shop_ID"",""Device_ID""), FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`), FOREIGN KEY (`Device_ID`) REFERENCES `device`(`Device_ID`) );  "
121,1073,hard,geo,SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );,what state is the biggest,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );"
122,1322,hard,geo,SELECT state_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX ( mountain_altitude ) FROM mountain );,where is the highest mountain of the united states,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );"
123,3325,hard,university_basketball,SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1,Return the primary conference of the school with the lowest acc percentage score.,"CREATE TABLE ""basketball_match"" ( ""Team_ID"" int, ""School_ID"" int, ""Team_Name"" text, ""ACC_Regular_Season"" text, ""ACC_Percent"" text, ""ACC_Home"" text, ""ACC_Road"" text, ""All_Games"" text, ""All_Games_Percent"" int, ""All_Home"" text, ""All_Road"" text, ""All_Neutral"" text, PRIMARY KEY (""Team_ID""), FOREIGN KEY (`School_ID`) REFERENCES `university`(`School_ID`) );  CREATE TABLE ""university"" ( ""School_ID"" int, ""School"" text, ""Location"" text, ""Founded"" real, ""Affiliation"" text, ""Enrollment"" real, ""Nickname"" text, ""Primary_conference"" text, PRIMARY KEY (""School_ID"") );  "
124,5719,hard,hospital_1,SELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1,What is the id of the patient who stayed in room 111 most recently?,"-- https://en.wikibooks.org/wiki/SQL_Exercises/The_Hospital  DROP TABLE IF EXISTS Physician; CREATE TABLE Physician (   EmployeeID INTEGER NOT NULL,   Name VARCHAR(30) NOT NULL,   Position VARCHAR(30) NOT NULL,   SSN INTEGER NOT NULL,   CONSTRAINT pk_physician PRIMARY KEY(EmployeeID) );   DROP TABLE IF EXISTS Department; CREATE TABLE Department (   DepartmentID INTEGER NOT NULL,   Name VARCHAR(30) NOT NULL,   Head INTEGER NOT NULL,   CONSTRAINT pk_Department PRIMARY KEY(DepartmentID),   CONSTRAINT fk_Department_Physician_EmployeeID FOREIGN KEY(Head) REFERENCES Physician(EmployeeID) );   DROP TABLE IF EXISTS Affiliated_With; CREATE TABLE Affiliated_With (   Physician INTEGER NOT NULL,   Department INTEGER NOT NULL,   PrimaryAffiliation BOOLEAN NOT NULL,   CONSTRAINT fk_Affiliated_With_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),   CONSTRAINT fk_Affiliated_With_Department_DepartmentID FOREIGN KEY(Department) REFERENCES Department(DepartmentID),   PRIMARY KEY(Physician, Department) );  DROP TABLE IF EXISTS Procedures; CREATE TABLE Procedures (   Code INTEGER PRIMARY KEY NOT NULL,   Name VARCHAR(30) NOT NULL,   Cost REAL NOT NULL );  DROP TABLE IF EXISTS Trained_In; CREATE TABLE Trained_In (   Physician INTEGER NOT NULL,   Treatment INTEGER NOT NULL,   CertificationDate DATETIME NOT NULL,   CertificationExpires DATETIME NOT NULL,   CONSTRAINT fk_Trained_In_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),   CONSTRAINT fk_Trained_In_Procedures_Code FOREIGN KEY(Treatment) REFERENCES Procedures(Code),   PRIMARY KEY(Physician, Treatment) );  DROP TABLE IF EXISTS Patient; CREATE TABLE Patient (   SSN INTEGER PRIMARY KEY NOT NULL,   Name VARCHAR(30) NOT NULL,   Address VARCHAR(30) NOT NULL,   Phone VARCHAR(30) NOT NULL,   InsuranceID INTEGER NOT NULL,   PCP INTEGER NOT NULL,   CONSTRAINT fk_Patient_Physician_EmployeeID FOREIGN KEY(PCP) REFERENCES Physician(EmployeeID) );  DROP TABLE IF EXISTS Nurse; CREATE TABLE Nurse (   EmployeeID INTEGER PRIMARY KEY NOT NULL,   Name VARCHAR(30) NOT NULL,   Position VARCHAR(30) NOT NULL,   Registered BOOLEAN NOT NULL,   SSN INTEGER NOT NULL );  DROP TABLE IF EXISTS Appointment; CREATE TABLE Appointment (   AppointmentID INTEGER PRIMARY KEY NOT NULL,   Patient INTEGER NOT NULL,       PrepNurse INTEGER,   Physician INTEGER NOT NULL,   Start DATETIME NOT NULL,   End DATETIME NOT NULL,   ExaminationRoom TEXT NOT NULL,   CONSTRAINT fk_Appointment_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),   CONSTRAINT fk_Appointment_Nurse_EmployeeID FOREIGN KEY(PrepNurse) REFERENCES Nurse(EmployeeID),   CONSTRAINT fk_Appointment_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID) );  DROP TABLE IF EXISTS Medication; CREATE TABLE Medication (   Code INTEGER PRIMARY KEY NOT NULL,   Name VARCHAR(30) NOT NULL,   Brand VARCHAR(30) NOT NULL,   Description VARCHAR(30) NOT NULL );   DROP TABLE IF EXISTS Prescribes; CREATE TABLE Prescribes (   Physician INTEGER NOT NULL,   Patient INTEGER NOT NULL,    Medication INTEGER NOT NULL,    Date DATETIME NOT NULL,   Appointment INTEGER,     Dose VARCHAR(30) NOT NULL,   PRIMARY KEY(Physician, Patient, Medication, Date),   CONSTRAINT fk_Prescribes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),   CONSTRAINT fk_Prescribes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),   CONSTRAINT fk_Prescribes_Medication_Code FOREIGN KEY(Medication) REFERENCES Medication(Code),   CONSTRAINT fk_Prescribes_Appointment_AppointmentID FOREIGN KEY(Appointment) REFERENCES Appointment(AppointmentID) );  DROP TABLE IF EXISTS Block; CREATE TABLE Block (   BlockFloor INTEGER NOT NULL,   BlockCode INTEGER NOT NULL,   PRIMARY KEY(BlockFloor, BlockCode) );   DROP TABLE IF EXISTS Room; CREATE TABLE Room (   RoomNumber INTEGER PRIMARY KEY NOT NULL,   RoomType VARCHAR(30) NOT NULL,   BlockFloor INTEGER NOT NULL,     BlockCode INTEGER NOT NULL,     Unavailable BOOLEAN NOT NULL,   CONSTRAINT fk_Room_Block_PK FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode) );  DROP TABLE IF EXISTS On_Call; CREATE TABLE On_Call (   Nurse INTEGER NOT NULL,   BlockFloor INTEGER NOT NULL,    BlockCode INTEGER NOT NULL,   OnCallStart DATETIME NOT NULL,   OnCallEnd DATETIME NOT NULL,   PRIMARY KEY(Nurse, BlockFloor, BlockCode, OnCallStart, OnCallEnd),   CONSTRAINT fk_OnCall_Nurse_EmployeeID FOREIGN KEY(Nurse) REFERENCES Nurse(EmployeeID),   CONSTRAINT fk_OnCall_Block_Floor FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode)  );  DROP TABLE IF EXISTS Stay; CREATE TABLE Stay (   StayID INTEGER PRIMARY KEY NOT NULL,   Patient INTEGER NOT NULL,   Room INTEGER NOT NULL,   StayStart DATETIME NOT NULL,   StayEnd DATETIME NOT NULL,   CONSTRAINT fk_Stay_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),   CONSTRAINT fk_Stay_Room_Number FOREIGN KEY(Room) REFERENCES Room(RoomNumber) );  DROP TABLE IF EXISTS Undergoes; CREATE TABLE Undergoes (   Patient INTEGER NOT NULL,   Procedures INTEGER NOT NULL,   Stay INTEGER NOT NULL,   DateUndergoes DATETIME NOT NULL,   Physician INTEGER NOT NULL,   AssistingNurse INTEGER,   PRIMARY KEY(Patient, Procedures, Stay, DateUndergoes),   CONSTRAINT fk_Undergoes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),   CONSTRAINT fk_Undergoes_Procedures_Code FOREIGN KEY(Procedures) REFERENCES Procedures(Code),   CONSTRAINT fk_Undergoes_Stay_StayID FOREIGN KEY(Stay) REFERENCES Stay(StayID),   CONSTRAINT fk_Undergoes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),   CONSTRAINT fk_Undergoes_Nurse_EmployeeID FOREIGN KEY(AssistingNurse) REFERENCES Nurse(EmployeeID) );   "
125,5255,hard,hr_1,"SELECT T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id",Find employee with ID and name of the country presently where (s)he is working.,"-- phpMyAdmin SQL Dump -- version 4.0.10.7 -- http://www.phpmyadmin.net -- -- Host: localhost -- Generation Time: Mar 20, 2015 at 01:43 AM -- Server version: 5.5.34-cll-lve -- PHP Version: 5.4.23    /*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */; /*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */; /*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */; /*!40101 SET NAMES utf8 */; CREATE TABLE IF NOT EXISTS `regions` (   `REGION_ID` decimal(5,0) NOT NULL,   `REGION_NAME` varchar(25) DEFAULT NULL,   PRIMARY KEY (`REGION_ID`) );  -- -- Dumping data for table `regions` --   -- -- Database: `wrpracti_bookinfo` --  -- --------------------------------------------------------  -- -- Table structure for table `countries` --  CREATE TABLE IF NOT EXISTS `countries` (   `COUNTRY_ID` varchar(2) NOT NULL,   `COUNTRY_NAME` varchar(40) DEFAULT NULL,   `REGION_ID` decimal(10,0) DEFAULT NULL,   PRIMARY KEY (`COUNTRY_ID`),   FOREIGN KEY (`REGION_ID`) REFERENCES regions (`REGION_ID`) );  -- -- Dumping data for table `countries` --    -- --------------------------------------------------------  -- -- Table structure for table `departments` --  CREATE TABLE IF NOT EXISTS `departments` (   `DEPARTMENT_ID` decimal(4,0) NOT NULL DEFAULT '0',   `DEPARTMENT_NAME` varchar(30) NOT NULL,   `MANAGER_ID` decimal(6,0) DEFAULT NULL,   `LOCATION_ID` decimal(4,0) DEFAULT NULL,   PRIMARY KEY (`DEPARTMENT_ID`) );  -- -- Dumping data for table `departments` --     CREATE TABLE IF NOT EXISTS `jobs` (   `JOB_ID` varchar(10) NOT NULL DEFAULT '',   `JOB_TITLE` varchar(35) NOT NULL,   `MIN_SALARY` decimal(6,0) DEFAULT NULL,   `MAX_SALARY` decimal(6,0) DEFAULT NULL,   PRIMARY KEY (`JOB_ID`) );  -- -- Dumping data for table `jobs` --    -- --------------------------------------------------------  -- -- Table structure for table `employees` --  CREATE TABLE IF NOT EXISTS `employees` (   `EMPLOYEE_ID` decimal(6,0) NOT NULL DEFAULT '0',   `FIRST_NAME` varchar(20) DEFAULT NULL,   `LAST_NAME` varchar(25) NOT NULL,   `EMAIL` varchar(25) NOT NULL,   `PHONE_NUMBER` varchar(20) DEFAULT NULL,   `HIRE_DATE` date NOT NULL,   `JOB_ID` varchar(10) NOT NULL,   `SALARY` decimal(8,2) DEFAULT NULL,   `COMMISSION_PCT` decimal(2,2) DEFAULT NULL,   `MANAGER_ID` decimal(6,0) DEFAULT NULL,   `DEPARTMENT_ID` decimal(4,0) DEFAULT NULL,   PRIMARY KEY (`EMPLOYEE_ID`),   FOREIGN KEY (`DEPARTMENT_ID`) REFERENCES departments(`DEPARTMENT_ID`),   FOREIGN KEY (`JOB_ID`) REFERENCES jobs(`JOB_ID`) );  -- -- Dumping data for table `employees` --    -- --------------------------------------------------------  -- -- Table structure for table `job_history` --  CREATE TABLE IF NOT EXISTS `job_history` (   `EMPLOYEE_ID` decimal(6,0) NOT NULL,   `START_DATE` date NOT NULL,   `END_DATE` date NOT NULL,   `JOB_ID` varchar(10) NOT NULL,   `DEPARTMENT_ID` decimal(4,0) DEFAULT NULL,   PRIMARY KEY (`EMPLOYEE_ID`,`START_DATE`),   FOREIGN KEY (`EMPLOYEE_ID`) REFERENCES employees(`EMPLOYEE_ID`),   FOREIGN KEY (`DEPARTMENT_ID`) REFERENCES departments(`DEPARTMENT_ID`),   FOREIGN KEY (`JOB_ID`) REFERENCES jobs(`JOB_ID`) );  -- -- Dumping data for table `job_history` --    -- --------------------------------------------------------  -- -- Table structure for table `jobs` --   -- -- Table structure for table `locations` --  CREATE TABLE IF NOT EXISTS `locations` (   `LOCATION_ID` decimal(4,0) NOT NULL DEFAULT '0',   `STREET_ADDRESS` varchar(40) DEFAULT NULL,   `POSTAL_CODE` varchar(12) DEFAULT NULL,   `CITY` varchar(30) NOT NULL,   `STATE_PROVINCE` varchar(25) DEFAULT NULL,   `COUNTRY_ID` varchar(2) DEFAULT NULL,   PRIMARY KEY (`LOCATION_ID`),   FOREIGN KEY (`COUNTRY_ID`) REFERENCES countries(`COUNTRY_ID`) );  -- -- Dumping data for table `locations` --    -- --------------------------------------------------------  -- -- Table structure for table `regions` --   /*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */; /*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */; /*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;"
126,1267,hard,geo,SELECT state_name FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );,what is the state with the largest density in usa,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );"
127,7010,hard,music_2,"SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.lastname  =  ""Heilo"" AND T2.title  =  ""Der Kapitan""","Which vocal type did the musician with last name ""Heilo"" played in the song with title ""Der Kapitan""?","  CREATE TABLE ""Songs"" (  	""SongId"" INTEGER PRIMARY KEY,  	""Title"" TEXT  ); CREATE TABLE ""Albums"" (  	""AId"" INTEGER PRIMARY KEY,  	""Title"" TEXT,  	""Year"" INTEGER,  	""Label"" TEXT,  	""Type"" TEXT ); CREATE TABLE ""Band"" (  	""Id"" INTEGER PRIMARY KEY,  	""Firstname"" TEXT,  	""Lastname"" TEXT ); CREATE TABLE ""Instruments"" (  	""SongId"" INTEGER,  	""BandmateId"" INTEGER,  	""Instrument"" TEXT , 	PRIMARY KEY(SongId, BandmateId, Instrument), 	FOREIGN KEY (SongId) REFERENCES Songs(SongId), 	FOREIGN KEY (BandmateId) REFERENCES Band(Id) ); CREATE TABLE ""Performance"" (  	""SongId"" INTEGER,  	""Bandmate"" INTEGER,  	""StagePosition"" TEXT, 	PRIMARY KEY(SongId, Bandmate), 	FOREIGN KEY (SongId) REFERENCES Songs(SongId), 	FOREIGN KEY (Bandmate) REFERENCES Band(Id) ); CREATE TABLE ""Tracklists"" (  	""AlbumId"" INTEGER,  	""Position"" INTEGER,  	""SongId"" INTEGER , 	PRIMARY KEY(AlbumId, Position), 	FOREIGN KEY (SongId) REFERENCES Songs(SongId), 	FOREIGN KEY (AlbumId) REFERENCES Albums(AId) ); CREATE TABLE ""Vocals"" (  	""SongId"" INTEGER,  	""Bandmate"" INTEGER,  	""Type"" TEXT, 	PRIMARY KEY(SongId, Bandmate), 	FOREIGN KEY (SongId) REFERENCES Songs(SongId), 	FOREIGN KEY (Bandmate) REFERENCES Band(Id) ); "
128,3493,hard,body_builder,SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1,What is the name of the body builder with the greatest body weight?,"PRAGMA foreign_keys = ON;  CREATE TABLE ""body_builder"" ( ""Body_Builder_ID"" int, ""People_ID"" int, ""Snatch"" real, ""Clean_Jerk"" real, ""Total"" real, PRIMARY KEY (""Body_Builder_ID""), FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"") );  CREATE TABLE ""people"" ( ""People_ID"" int, ""Name"" text, ""Height"" real, ""Weight"" real, ""Birth_Date"" text, ""Birth_Place"" text, PRIMARY KEY (""People_ID"") );  "
129,2700,hard,bike_1,"SELECT id FROM station WHERE city  =  ""San Francisco"" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10",What are the ids of the stations in San Francisco that normally have more than 10 bikes available?,"PRAGMA foreign_keys=OFF; BEGIN TRANSACTION; CREATE TABLE station (     id INTEGER PRIMARY KEY,     name TEXT,     lat NUMERIC,     long NUMERIC,     dock_count INTEGER,     city TEXT,     installation_date TEXT); CREATE TABLE status (     station_id INTEGER,     bikes_available INTEGER,     docks_available INTEGER,     time TEXT,     FOREIGN KEY (station_id) REFERENCES station(id) ); CREATE TABLE trip (     id INTEGER PRIMARY KEY,     duration INTEGER,     start_date TEXT,     start_station_name TEXT, -- this should be removed     start_station_id INTEGER,     end_date TEXT,     end_station_name TEXT, -- this should be removed     end_station_id INTEGER,     bike_id INTEGER,     subscription_type TEXT,     zip_code INTEGER); CREATE TABLE weather (     date TEXT,     max_temperature_f INTEGER,     mean_temperature_f INTEGER,     min_temperature_f INTEGER,     max_dew_point_f INTEGER,     mean_dew_point_f INTEGER,     min_dew_point_f INTEGER,     max_humidity INTEGER,     mean_humidity INTEGER,     min_humidity INTEGER,     max_sea_level_pressure_inches NUMERIC,     mean_sea_level_pressure_inches NUMERIC,     min_sea_level_pressure_inches NUMERIC,     max_visibility_miles INTEGER,     mean_visibility_miles INTEGER,     min_visibility_miles INTEGER,     max_wind_Speed_mph INTEGER,     mean_wind_speed_mph INTEGER,     max_gust_speed_mph INTEGER,     precipitation_inches INTEGER,     cloud_cover INTEGER,     events TEXT,     wind_dir_degrees INTEGER,     zip_code INTEGER); COMMIT;"
130,2399,hard,imdb,"SELECT COUNT ( DISTINCT t1.name  ) FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t3.title  =  ""Saving Private Ryan"";","What is the number of actors in the movie "" Saving Private Ryan "" ?","PRAGMA foreign_keys = ON; CREATE TABLE ""actor"" ( ""aid"" int, ""gender"" text, ""name"" text, ""nationality"" text, ""birth_city"" text, ""birth_year"" int, primary key(""aid"") );   CREATE TABLE ""copyright"" ( ""id"" int, ""msid"" int, ""cid"" int, primary key(""id"") ); CREATE TABLE ""cast"" ( ""id"" int, ""msid"" int, ""aid"" int, ""role"" int, primary key(""id""), foreign key(""aid"") references `actor`(""aid""), foreign key(""msid"") references `copyright`(""msid"") );  CREATE TABLE ""genre"" ( ""gid"" int, ""genre"" text, primary key(""gid"") );  CREATE TABLE ""classification"" ( ""id"" int, ""msid"" int, ""gid"" int, primary key(""id""), foreign key(""gid"") references `genre`(""gid""), foreign key(""msid"") references `copyright`(""msid"") );  CREATE TABLE ""company"" ( ""id"" int, ""name"" text, ""country_code"" text, primary key(""id"") );   CREATE TABLE ""director"" ( ""did"" int, ""gender"" text, ""name"" text, ""nationality"" text, ""birth_city"" text, ""birth_year"" int, primary key(""did"") );  CREATE TABLE ""producer"" ( ""pid"" int, ""gender"" text, ""name"" text, ""nationality"" text, ""birth_city"" text, ""birth_year"" int, primary key(""pid"") );  CREATE TABLE ""directed_by"" ( ""id"" int, ""msid"" int, ""did"" int, primary key(""id""), foreign key(""msid"") references `copyright`(""msid""), foreign key(""did"") references `director`(""did"") );  CREATE TABLE ""keyword"" ( ""id"" int, ""keyword"" text, primary key(""id"") );  CREATE TABLE ""made_by"" ( ""id"" int, ""msid"" int, ""pid"" int, primary key(""id""), foreign key(""msid"") references `copyright`(""msid""), foreign key(""pid"") references `producer`(""pid"") );  CREATE TABLE ""movie"" ( ""mid"" int, ""title"" text, ""release_year"" int, ""title_aka"" text, ""budget"" text, primary key(""mid"") ); CREATE TABLE ""tags"" ( ""id"" int, ""msid"" int, ""kid"" int, primary key(""id""), foreign key(""msid"") references `copyright`(""msid""), foreign key(""kid"") references `keyword`(""kid"") ); CREATE TABLE ""tv_series"" ( ""sid"" int, ""title"" text, ""release_year"" int, ""num_of_seasons"" int, ""num_of_episodes"" int, ""title_aka"" text, ""budget"" text, primary key(""sid"") ); CREATE TABLE ""writer"" ( ""wid"" int, ""gender"" text, ""name"" int, ""nationality"" int, ""num_of_episodes"" int, ""birth_city"" text, ""birth_year"" int, primary key(""wid"") ); CREATE TABLE ""written_by"" ( ""id"" int, ""msid"" int, ""wid"" int, foreign key(""msid"") references `copyright`(""msid""), foreign key(""wid"") references `writer`(""wid"") );"
131,1705,hard,scholar,"SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  ""acl"";",who published at acl 2016 ?,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); "
132,7175,hard,shop_membership,"SELECT T3.name ,  T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id ORDER BY T1.register_year",What are the names of the members and branches at which they are registered sorted by year of registration?,"PRAGMA foreign_keys = ON;  CREATE TABLE ""member"" ( ""Member_ID"" int, ""Card_Number"" text, ""Name"" text, ""Hometown"" text, ""Level"" int, PRIMARY KEY (""Member_ID"") );   CREATE TABLE ""branch"" ( ""Branch_ID"" int, ""Name"" text, ""Open_year"" text, ""Address_road"" text, ""City"" text, ""membership_amount"" text, PRIMARY KEY (""Branch_ID"") );   CREATE TABLE ""membership_register_branch"" ( ""Member_ID"" int, ""Branch_ID"" text, ""Register_Year"" text, PRIMARY KEY (""Member_ID""), FOREIGN KEY (""Member_ID"") REFERENCES ""member""(""Member_ID""), FOREIGN KEY (""Branch_ID"") REFERENCES ""branch""(""Branch_ID"") );  CREATE TABLE ""purchase"" ( ""Member_ID"" int, ""Branch_ID"" text, ""Year"" text, ""Total_pounds"" real, PRIMARY KEY (""Member_ID"",""Branch_ID"",""Year""), FOREIGN KEY (""Member_ID"") REFERENCES ""member""(""Member_ID""), FOREIGN KEY (""Branch_ID"") REFERENCES ""branch""(""Branch_ID"") );  "
133,4112,hard,party_people,"SELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  ""United Kingdom"" AND t3.Event_Name  =  ""Annaual Meeting""",How many Annual Meeting events happened in the United Kingdom region?," PRAGMA foreign_keys = ON;   CREATE TABLE ""region"" ( ""Region_ID"" int, ""Region_name"" text, ""Date"" text, ""Label"" text, ""Format"" text, ""Catalogue"" text, PRIMARY KEY (""Region_ID"") );   CREATE TABLE ""party"" ( ""Party_ID"" int, ""Minister"" text, ""Took_office"" text, ""Left_office"" text, ""Region_ID"" int, ""Party_name"" text, PRIMARY KEY (""Party_ID""), FOREIGN KEY (`Region_ID`) REFERENCES `region`(`Region_ID`) );  CREATE TABLE ""member"" ( ""Member_ID"" int, ""Member_Name"" text, ""Party_ID"" text, ""In_office"" text, PRIMARY KEY (""Member_ID""), FOREIGN KEY (`Party_ID`) REFERENCES `party`(`Party_ID`) );   CREATE TABLE ""party_events"" ( ""Event_ID"" int, ""Event_Name"" text, ""Party_ID"" int, ""Member_in_charge_ID"" int, PRIMARY KEY (""Event_ID""), FOREIGN KEY (`Party_ID`) REFERENCES `party`(`Party_ID`), FOREIGN KEY (`Member_in_charge_ID`) REFERENCES `member`(`Member_ID`) );   "
134,488,hard,wta_1,"SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1","What is the first name, country code, and birth date of the player with the most winner rank points across all matches?","CRloser_rank_pointsEATE TABLE players(     ""player_id"" INT PRIMARY KEY,     ""first_name"" TEXT,     ""last_name"" TEXT,     ""hand"" TEXT,     ""birth_date"" DATE,     ""country_code"" TEXT ); CREATE TABLE matches(   ""best_of"" INT,   ""draw_size"" INT,   ""loser_age"" FLOAT,   ""loser_entry"" TEXT,   ""loser_hand"" TEXT,   ""loser_ht"" INT,   ""loser_id"" INT,   ""loser_ioc"" TEXT,   ""loser_name"" TEXT,   ""loser_rank"" INT,   ""loser_rank_points"" INT,   ""loser_seed"" INT,   ""match_num"" INT,   ""minutes"" INT,   ""round"" TEXT,   ""score"" TEXT,   ""surface"" TEXT,   ""tourney_date"" DATE,   ""tourney_id"" TEXT,   ""tourney_level"" TEXT,   ""tourney_name"" TEXT,   ""winner_age"" FLOAT,   ""winner_entry"" TEXT,   ""winner_hand"" TEXT,   ""winner_ht"" INT,   ""winner_id"" INT,   ""winner_ioc"" TEXT,   ""winner_name"" TEXT,   ""winner_rank"" INT,   ""winner_rank_points"" INT,   ""winner_seed"" INT,   ""year"" INT,   FOREIGN KEY(loser_id) REFERENCES players(player_id),   FOREIGN KEY(winner_id) REFERENCES players(player_id) );    CREATE TABLE qualifying_matches(   ""best_of"" INT,   ""draw_size"" INT,   ""l_1stIn"" TEXT,   ""l_1stWon"" TEXT,   ""l_2ndWon"" TEXT,   ""l_SvGms"" TEXT,   ""l_ace"" TEXT,   ""l_bpFaced"" TEXT,   ""l_bpSaved"" TEXT,   ""l_df"" TEXT,   ""l_svpt"" TEXT,   ""loser_age"" FLOAT,   ""loser_entry"" TEXT,   ""loser_hand"" TEXT,   ""loser_ht"" INT,   ""loser_id"" INT,   ""loser_ioc"" TEXT,   ""loser_name"" TEXT,   ""loser_rank"" INT,   ""loser_rank_points"" INT,   ""loser_seed"" INT,   ""match_num"" INT,   ""minutes"" INT,   ""round"" TEXT,   ""score"" TEXT,   ""surface"" TEXT,   ""tourney_date"" DATE,   ""tourney_id"" TEXT,   ""tourney_level"" TEXT,   ""tourney_name"" TEXT,   ""w_1stIn"" TEXT,   ""w_1stWon"" TEXT,   ""w_2ndWon"" TEXT,   ""w_SvGms"" TEXT,   ""w_ace"" TEXT,   ""w_bpFaced"" TEXT,   ""w_bpSaved"" TEXT,   ""w_df"" TEXT,   ""w_svpt"" TEXT,   ""winner_age"" FLOAT,   ""winner_entry"" TEXT,   ""winner_hand"" TEXT,   ""winner_ht"" INT,   ""winner_id"" INT,   ""winner_ioc"" TEXT,   ""winner_name"" TEXT,   ""winner_rank"" INT,   ""winner_rank_points"" INT,   ""winner_seed"" INT,   ""year"" INT,   FOREIGN KEY(loser_id) REFERENCES players(player_id),   FOREIGN KEY(winner_id) REFERENCES players(player_id) );  CREATE TABLE rankings(   ""ranking_date"" DATE,   ""ranking"" INT,   ""player_id"" INT,   ""ranking_points"" INT,   ""tours"" INT,   FOREIGN KEY(player_id) REFERENCES players(player_id) );"
135,282,hard,employee_hire_evaluation,SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation),What are the names of the employees who never received any evaluation?," PRAGMA foreign_keys = ON;  CREATE TABLE ""employee"" ( ""Employee_ID"" int, ""Name"" text, ""Age"" int, ""City"" text, PRIMARY KEY (""Employee_ID"") );   CREATE TABLE ""shop"" ( ""Shop_ID"" int, ""Name"" text, ""Location"" text, ""District"" text, ""Number_products"" int, ""Manager_name"" text, PRIMARY KEY (""Shop_ID"") );   CREATE TABLE ""hiring"" ( ""Shop_ID"" int, ""Employee_ID"" int, ""Start_from"" text, ""Is_full_time"" bool, PRIMARY KEY (""Employee_ID""), FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`), FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`) );  CREATE TABLE ""evaluation"" ( ""Employee_ID"" text, ""Year_awarded"" text, ""Bonus"" real, PRIMARY KEY (""Employee_ID"",""Year_awarded""), FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`) );   "
136,6162,hard,tracking_grants_for_research,"SELECT grant_id ,  count(*) FROM Documents GROUP BY grant_id ORDER BY count(*) DESC LIMIT 1",How many documents can one grant have at most? List the grant id and number.,"PRAGMA foreign_keys = ON; CREATE TABLE `Document_Types` ( `document_type_code` VARCHAR(10) PRIMARY KEY, `document_description` VARCHAR(255) NOT NULL ); CREATE TABLE `Documents` ( `document_id` INTEGER PRIMARY KEY, `document_type_code` VARCHAR(10), `grant_id` INTEGER NOT NULL, `sent_date` DATETIME NOT NULL, `response_received_date` DATETIME NOT NULL, `other_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`document_type_code` ) REFERENCES `Document_Types`(`document_type_code` ), FOREIGN KEY (`grant_id` ) REFERENCES `Grants`(`grant_id` ) ); CREATE TABLE `Grants` ( `grant_id` INTEGER PRIMARY KEY, `organisation_id` INTEGER NOT NULL, `grant_amount` DECIMAL(19,4) NOT NULL DEFAULT 0, `grant_start_date` DATETIME NOT NULL, `grant_end_date` DATETIME NOT NULL, `other_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`organisation_id` ) REFERENCES `Organisations`(`organisation_id` ) ); CREATE TABLE `Organisation_Types` ( `organisation_type` VARCHAR(10) PRIMARY KEY, `organisation_type_description` VARCHAR(255) NOT NULL ); CREATE TABLE `Organisations` ( `organisation_id` INTEGER PRIMARY KEY, `organisation_type` VARCHAR(10) NOT NULL, `organisation_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`organisation_type` ) REFERENCES `Organisation_Types`(`organisation_type` ) ); CREATE TABLE `Project_Outcomes` ( `project_id` INTEGER NOT NULL, `outcome_code` VARCHAR(10) NOT NULL, `outcome_details` VARCHAR(255), FOREIGN KEY (`project_id` ) REFERENCES `Projects`(`project_id` ),FOREIGN KEY (`outcome_code` ) REFERENCES `Research_Outcomes`(`outcome_code` ) ); CREATE TABLE `Project_Staff` ( `staff_id` DOUBLE PRIMARY KEY, `project_id` INTEGER NOT NULL, `role_code` VARCHAR(10) NOT NULL, `date_from` DATETIME, `date_to` DATETIME, `other_details` VARCHAR(255), FOREIGN KEY (`project_id` ) REFERENCES `Projects`(`project_id` ),FOREIGN KEY (`role_code` ) REFERENCES `Staff_Roles`(`role_code` ) ); CREATE TABLE `Projects` ( `project_id` INTEGER PRIMARY KEY, `organisation_id` INTEGER NOT NULL, `project_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`organisation_id` ) REFERENCES `Organisations`(`organisation_id` ) ); CREATE TABLE `Research_Outcomes` ( `outcome_code` VARCHAR(10) PRIMARY KEY, `outcome_description` VARCHAR(255) NOT NULL ); CREATE TABLE `Research_Staff` ( `staff_id` INTEGER PRIMARY KEY, `employer_organisation_id` INTEGER NOT NULL, `staff_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`employer_organisation_id` ) REFERENCES `Organisations`(`organisation_id` ) ); CREATE TABLE `Staff_Roles` ( `role_code` VARCHAR(10) PRIMARY KEY, `role_description` VARCHAR(255) NOT NULL ); CREATE TABLE `Tasks` ( `task_id` INTEGER PRIMARY KEY, `project_id` INTEGER NOT NULL, `task_details` VARCHAR(255) NOT NULL, `eg Agree Objectives` VARCHAR(1), FOREIGN KEY (`project_id` ) REFERENCES `Projects`(`project_id` ) ); "
137,7567,hard,customer_complaints,SELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT 1,Give the state that has the most customers.,"PRAGMA foreign_keys = ON;   CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `gender` VARCHAR(1), `first_name` VARCHAR(80), `last_name` VARCHAR(80), `email_address` VARCHAR(255), `phone_number` VARCHAR(80) ); CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_type_code` VARCHAR(20) NOT NULL, `address_line_1` VARCHAR(80), `address_line_2` VARCHAR(80), `town_city` VARCHAR(80), `state` VARCHAR(80), `email_address` VARCHAR(255), `phone_number` VARCHAR(80) ); CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `parent_product_id` INTEGER, `product_category_code` VARCHAR(20) NOT NULL, `date_product_first_available` DATETIME, `date_product_discontinued` DATETIME, `product_name` VARCHAR(80), `product_description` VARCHAR(255), `product_price` DECIMAL(19,4) ); CREATE TABLE `Complaints` ( `complaint_id` INTEGER NOT NULL , `product_id` INTEGER NOT NULL, `customer_id` INTEGER NOT NULL, `complaint_outcome_code` VARCHAR(20) NOT NULL, `complaint_status_code` VARCHAR(20) NOT NULL, `complaint_type_code` VARCHAR(20) NOT NULL, `date_complaint_raised` DATETIME, `date_complaint_closed` DATETIME, `staff_id` INTEGER NOT NULL , FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) ); "
138,2413,hard,imdb,"SELECT COUNT ( DISTINCT t3.title  ) FROM tags AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.id JOIN movie AS t3 ON t2.msid  =  t3.mid WHERE t1.keyword  =  ""Persians"" AND t3.release_year  >  1990;",How many movies about Persians were released after 1990 ?,"PRAGMA foreign_keys = ON; CREATE TABLE ""actor"" ( ""aid"" int, ""gender"" text, ""name"" text, ""nationality"" text, ""birth_city"" text, ""birth_year"" int, primary key(""aid"") );   CREATE TABLE ""copyright"" ( ""id"" int, ""msid"" int, ""cid"" int, primary key(""id"") ); CREATE TABLE ""cast"" ( ""id"" int, ""msid"" int, ""aid"" int, ""role"" int, primary key(""id""), foreign key(""aid"") references `actor`(""aid""), foreign key(""msid"") references `copyright`(""msid"") );  CREATE TABLE ""genre"" ( ""gid"" int, ""genre"" text, primary key(""gid"") );  CREATE TABLE ""classification"" ( ""id"" int, ""msid"" int, ""gid"" int, primary key(""id""), foreign key(""gid"") references `genre`(""gid""), foreign key(""msid"") references `copyright`(""msid"") );  CREATE TABLE ""company"" ( ""id"" int, ""name"" text, ""country_code"" text, primary key(""id"") );   CREATE TABLE ""director"" ( ""did"" int, ""gender"" text, ""name"" text, ""nationality"" text, ""birth_city"" text, ""birth_year"" int, primary key(""did"") );  CREATE TABLE ""producer"" ( ""pid"" int, ""gender"" text, ""name"" text, ""nationality"" text, ""birth_city"" text, ""birth_year"" int, primary key(""pid"") );  CREATE TABLE ""directed_by"" ( ""id"" int, ""msid"" int, ""did"" int, primary key(""id""), foreign key(""msid"") references `copyright`(""msid""), foreign key(""did"") references `director`(""did"") );  CREATE TABLE ""keyword"" ( ""id"" int, ""keyword"" text, primary key(""id"") );  CREATE TABLE ""made_by"" ( ""id"" int, ""msid"" int, ""pid"" int, primary key(""id""), foreign key(""msid"") references `copyright`(""msid""), foreign key(""pid"") references `producer`(""pid"") );  CREATE TABLE ""movie"" ( ""mid"" int, ""title"" text, ""release_year"" int, ""title_aka"" text, ""budget"" text, primary key(""mid"") ); CREATE TABLE ""tags"" ( ""id"" int, ""msid"" int, ""kid"" int, primary key(""id""), foreign key(""msid"") references `copyright`(""msid""), foreign key(""kid"") references `keyword`(""kid"") ); CREATE TABLE ""tv_series"" ( ""sid"" int, ""title"" text, ""release_year"" int, ""num_of_seasons"" int, ""num_of_episodes"" int, ""title_aka"" text, ""budget"" text, primary key(""sid"") ); CREATE TABLE ""writer"" ( ""wid"" int, ""gender"" text, ""name"" int, ""nationality"" int, ""num_of_episodes"" int, ""birth_city"" text, ""birth_year"" int, primary key(""wid"") ); CREATE TABLE ""written_by"" ( ""id"" int, ""msid"" int, ""wid"" int, foreign key(""msid"") references `copyright`(""msid""), foreign key(""wid"") references `writer`(""wid"") );"
139,2414,hard,imdb,"SELECT COUNT ( DISTINCT t3.title  ) FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  ""Quentin Tarantino"" AND t3.release_year  >  2010;","How many movies did "" Quentin Tarantino "" direct after 2010 ?","PRAGMA foreign_keys = ON; CREATE TABLE ""actor"" ( ""aid"" int, ""gender"" text, ""name"" text, ""nationality"" text, ""birth_city"" text, ""birth_year"" int, primary key(""aid"") );   CREATE TABLE ""copyright"" ( ""id"" int, ""msid"" int, ""cid"" int, primary key(""id"") ); CREATE TABLE ""cast"" ( ""id"" int, ""msid"" int, ""aid"" int, ""role"" int, primary key(""id""), foreign key(""aid"") references `actor`(""aid""), foreign key(""msid"") references `copyright`(""msid"") );  CREATE TABLE ""genre"" ( ""gid"" int, ""genre"" text, primary key(""gid"") );  CREATE TABLE ""classification"" ( ""id"" int, ""msid"" int, ""gid"" int, primary key(""id""), foreign key(""gid"") references `genre`(""gid""), foreign key(""msid"") references `copyright`(""msid"") );  CREATE TABLE ""company"" ( ""id"" int, ""name"" text, ""country_code"" text, primary key(""id"") );   CREATE TABLE ""director"" ( ""did"" int, ""gender"" text, ""name"" text, ""nationality"" text, ""birth_city"" text, ""birth_year"" int, primary key(""did"") );  CREATE TABLE ""producer"" ( ""pid"" int, ""gender"" text, ""name"" text, ""nationality"" text, ""birth_city"" text, ""birth_year"" int, primary key(""pid"") );  CREATE TABLE ""directed_by"" ( ""id"" int, ""msid"" int, ""did"" int, primary key(""id""), foreign key(""msid"") references `copyright`(""msid""), foreign key(""did"") references `director`(""did"") );  CREATE TABLE ""keyword"" ( ""id"" int, ""keyword"" text, primary key(""id"") );  CREATE TABLE ""made_by"" ( ""id"" int, ""msid"" int, ""pid"" int, primary key(""id""), foreign key(""msid"") references `copyright`(""msid""), foreign key(""pid"") references `producer`(""pid"") );  CREATE TABLE ""movie"" ( ""mid"" int, ""title"" text, ""release_year"" int, ""title_aka"" text, ""budget"" text, primary key(""mid"") ); CREATE TABLE ""tags"" ( ""id"" int, ""msid"" int, ""kid"" int, primary key(""id""), foreign key(""msid"") references `copyright`(""msid""), foreign key(""kid"") references `keyword`(""kid"") ); CREATE TABLE ""tv_series"" ( ""sid"" int, ""title"" text, ""release_year"" int, ""num_of_seasons"" int, ""num_of_episodes"" int, ""title_aka"" text, ""budget"" text, primary key(""sid"") ); CREATE TABLE ""writer"" ( ""wid"" int, ""gender"" text, ""name"" int, ""nationality"" int, ""num_of_episodes"" int, ""birth_city"" text, ""birth_year"" int, primary key(""wid"") ); CREATE TABLE ""written_by"" ( ""id"" int, ""msid"" int, ""wid"" int, foreign key(""msid"") references `copyright`(""msid""), foreign key(""wid"") references `writer`(""wid"") );"
140,6015,hard,cre_Doc_Tracking_DB,"SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id  =  T2.document_id JOIN Ref_locations AS T3 ON T2.location_code  =  T3.location_code WHERE T1.document_name  =  ""Robin CV""","What is the location name of the document ""Robin CV""?","PRAGMA foreign_keys = ON; CREATE TABLE Ref_Document_Types ( Document_Type_Code CHAR(15) NOT NULL, Document_Type_Name VARCHAR(255) NOT NULL, Document_Type_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Document_Type_Code) );  CREATE TABLE Ref_Calendar ( Calendar_Date DATETIME NOT NULL, Day_Number INTEGER, PRIMARY KEY (Calendar_Date) ); CREATE TABLE Ref_Locations ( Location_Code CHAR(15) NOT NULL, Location_Name VARCHAR(255) NOT NULL, Location_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Location_Code) );  CREATE TABLE Roles ( Role_Code CHAR(15) NOT NULL, Role_Name VARCHAR(255), Role_Description VARCHAR(255), PRIMARY KEY (Role_Code) );  CREATE TABLE All_Documents ( Document_ID INTEGER NOT NULL, Date_Stored DATETIME, Document_Type_Code CHAR(15) NOT NULL, Document_Name CHAR(255), Document_Description CHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Document_ID), FOREIGN KEY (Document_Type_Code) REFERENCES Ref_Document_Types (Document_Type_Code), FOREIGN KEY (Date_Stored) REFERENCES Ref_Calendar (Calendar_Date) );  CREATE TABLE Employees ( Employee_ID INTEGER NOT NULL, Role_Code CHAR(15) NOT NULL, Employee_Name VARCHAR(255), Gender_MFU CHAR(1) NOT NULL, Date_of_Birth DATETIME NOT NULL, Other_Details VARCHAR(255), PRIMARY KEY (Employee_ID), FOREIGN KEY (Role_Code) REFERENCES Roles (Role_Code) );  CREATE TABLE Document_Locations ( Document_ID INTEGER NOT NULL, Location_Code CHAR(15) NOT NULL, Date_in_Location_From DATETIME NOT NULL, Date_in_Locaton_To DATETIME, PRIMARY KEY (Document_ID, Location_Code, Date_in_Location_From), FOREIGN KEY (Location_Code) REFERENCES Ref_Locations (Location_Code), FOREIGN KEY (Date_in_Location_From) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Date_in_Locaton_To) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Document_ID) REFERENCES All_Documents (Document_ID) );  CREATE TABLE Documents_to_be_Destroyed ( Document_ID INTEGER NOT NULL, Destruction_Authorised_by_Employee_ID INTEGER, Destroyed_by_Employee_ID INTEGER, Planned_Destruction_Date DATETIME, Actual_Destruction_Date DATETIME, Other_Details VARCHAR(255), PRIMARY KEY (Document_ID), FOREIGN KEY (Destroyed_by_Employee_ID) REFERENCES Employees (Employee_ID), FOREIGN KEY (Destruction_Authorised_by_Employee_ID) REFERENCES Employees (Employee_ID), FOREIGN KEY (Planned_Destruction_Date) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Actual_Destruction_Date) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Document_ID) REFERENCES All_Documents (Document_ID) ); "
141,4482,hard,movie_1,SELECT title FROM Movie WHERE mID NOT IN (SELECT mID FROM Rating),Find the titles of all movies that have no ratings.,"-- dbext:type=SQLITE:dbname=movie_rating.db  /* Delete the tables if they already exist */ drop table if exists Movie; drop table if exists Reviewer; drop table if exists Rating;  /* Create the schema for our tables */ create table Movie( 	mID int primary key,  	title text,  	year int,  	director text ); create table Reviewer( 	rID int primary key,  	name text);  create table Rating( 	rID int,  	mID int,  	stars int,  	ratingDate date, 	FOREIGN KEY (mID) references Movie(mID), 	FOREIGN KEY (rID) references Reviewer(rID) );  /* Populate the tables with our data */ "
142,6065,hard,club_1,"SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  ""Bootup Baltimore"" AND t3.sex  =  ""F""","Give me the first name and last name for all the female members of the club ""Bootup Baltimore"".","create table Student (          StuID        INTEGER PRIMARY KEY,          LName        VARCHAR(12),          Fname        VARCHAR(12),          Age      INTEGER,          Sex      VARCHAR(1),          Major        INTEGER,          Advisor      INTEGER,          city_code    VARCHAR(3)   );   create table Club (        ClubID           INTEGER PRIMARY KEY,        ClubName         VARCHAR(40),        ClubDesc         VARCHAR(1024),        ClubLocation VARCHAR(40) );  create table Member_of_club (        StuID            INTEGER,        ClubID           INTEGER,        Position     VARCHAR(40),        FOREIGN KEY(StuID) REFERENCES Student(StuID),        FOREIGN KEY(ClubID) REFERENCES Club(ClubID) );   teach kids and adults about computer basics.', 'AKW'); "
143,5641,hard,e_learning,SELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students,What are the login names used both by some course authors and some students?,"PRAGMA foreign_keys = ON; CREATE TABLE `Course_Authors_and_Tutors` ( `author_id` INTEGER PRIMARY KEY, `author_tutor_ATB` VARCHAR(3), `login_name` VARCHAR(40), `password` VARCHAR(40), `personal_name` VARCHAR(80), `middle_name` VARCHAR(80), `family_name` VARCHAR(80), `gender_mf` VARCHAR(1), `address_line_1` VARCHAR(80) );                  CREATE TABLE `Students` ( `student_id` INTEGER PRIMARY KEY, `date_of_registration` DATETIME, `date_of_latest_logon` DATETIME, `login_name` VARCHAR(40), `password` VARCHAR(10), `personal_name` VARCHAR(40), `middle_name` VARCHAR(40), `family_name` VARCHAR(40) ); CREATE TABLE `Subjects` ( `subject_id` INTEGER PRIMARY KEY, `subject_name` VARCHAR(120) ); CREATE TABLE `Courses` ( `course_id` INTEGER PRIMARY KEY, `author_id` INTEGER NOT NULL, `subject_id` INTEGER NOT NULL, `course_name` VARCHAR(120), `course_description` VARCHAR(255), FOREIGN KEY (`author_id` ) REFERENCES `Course_Authors_and_Tutors`(`author_id` ), FOREIGN KEY (`subject_id` ) REFERENCES `Subjects`(`subject_id` ) ); CREATE TABLE `Student_Course_Enrolment` ( `registration_id` INTEGER PRIMARY KEY, `student_id` INTEGER NOT NULL, `course_id` INTEGER NOT NULL, `date_of_enrolment` DATETIME NOT NULL, `date_of_completion` DATETIME NOT NULL, FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ), FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ) );  CREATE TABLE `Student_Tests_Taken` ( `registration_id` INTEGER NOT NULL, `date_test_taken` DATETIME NOT NULL, `test_result` VARCHAR(255), FOREIGN KEY (`registration_id` ) REFERENCES `Student_Course_Enrolment`(`registration_id` ) );  "
144,5674,hard,insurance_policies,SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) ASC LIMIT 1,With which kind of payment method were the least number of payments processed?,"PRAGMA foreign_keys = ON; CREATE TABLE Customers ( Customer_ID INTEGER NOT NULL, Customer_Details VARCHAR(255) NOT NULL, PRIMARY KEY (Customer_ID) ); CREATE TABLE Customer_Policies ( Policy_ID INTEGER NOT NULL, Customer_ID INTEGER NOT NULL, Policy_Type_Code CHAR(15) NOT NULL, Start_Date DATE, End_Date DATE, PRIMARY KEY (Policy_ID), FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID) );  CREATE TABLE Claims ( Claim_ID INTEGER NOT NULL, Policy_ID INTEGER NOT NULL, Date_Claim_Made DATE, Date_Claim_Settled DATE, Amount_Claimed INTEGER, Amount_Settled INTEGER, PRIMARY KEY (Claim_ID), FOREIGN KEY (Policy_ID) REFERENCES Customer_Policies (Policy_ID) );  CREATE TABLE Settlements ( Settlement_ID INTEGER NOT NULL, Claim_ID INTEGER NOT NULL, Date_Claim_Made DATE, Date_Claim_Settled DATE, Amount_Claimed INTEGER, Amount_Settled INTEGER, Customer_Policy_ID INTEGER NOT NULL, PRIMARY KEY (Settlement_ID), FOREIGN KEY (Claim_ID) REFERENCES Claims (Claim_ID) ); CREATE TABLE Payments ( Payment_ID INTEGER NOT NULL, Settlement_ID INTEGER NOT NULL, Payment_Method_Code VARCHAR(255), Date_Payment_Made DATE, Amount_Payment INTEGER, PRIMARY KEY (Payment_ID), FOREIGN KEY (Settlement_ID) REFERENCES Settlements (Settlement_ID) );    "
145,5180,hard,sports_competition,SELECT country FROM competition WHERE competition_type  =  'Friendly' INTERSECT SELECT country FROM competition WHERE competition_type  =  'Tournament',What are the countries that participated in both friendly and tournament type competitions?," PRAGMA foreign_keys = ON;  CREATE TABLE ""club"" ( ""Club_ID"" int, ""name"" text, ""Region"" text, ""Start_year"" text, PRIMARY KEY (""Club_ID"") );  CREATE TABLE ""club_rank"" ( ""Rank"" real, ""Club_ID"" int, ""Gold"" real, ""Silver"" real, ""Bronze"" real, ""Total"" real, PRIMARY KEY (""Rank"",""Club_ID"") FOREIGN KEY (`Club_ID`) REFERENCES `club`(`Club_ID`) );  CREATE TABLE ""player"" ( ""Player_ID"" int, ""name"" text, ""Position"" text, ""Club_ID"" int, ""Apps"" real, ""Tries"" real, ""Goals"" text, ""Points"" real, PRIMARY KEY (""Player_ID""), FOREIGN KEY (`Club_ID`) REFERENCES `club`(`Club_ID`) );  CREATE TABLE ""competition"" ( ""Competition_ID"" int, ""Year"" real, ""Competition_type"" text, ""Country"" text, PRIMARY KEY (""Competition_ID"") );  CREATE TABLE ""competition_result"" ( ""Competition_ID"" int, ""Club_ID_1"" int, ""Club_ID_2"" int, ""Score"" text, PRIMARY KEY (""Competition_ID"",""Club_ID_1"",""Club_ID_2""), FOREIGN KEY (`Club_ID_1`) REFERENCES `club`(`Club_ID`), FOREIGN KEY (`Club_ID_2`) REFERENCES `club`(`Club_ID`), FOREIGN KEY (`Competition_ID`) REFERENCES `competition`(`Competition_ID`) );   "
146,1333,hard,geo,SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );,which state has the highest elevation,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );"
147,5776,hard,hospital_1,"SELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  ""John Wen""",Find the names of all procedures which cost more than 1000 but which physician John Wen was not trained in?,"-- https://en.wikibooks.org/wiki/SQL_Exercises/The_Hospital  DROP TABLE IF EXISTS Physician; CREATE TABLE Physician (   EmployeeID INTEGER NOT NULL,   Name VARCHAR(30) NOT NULL,   Position VARCHAR(30) NOT NULL,   SSN INTEGER NOT NULL,   CONSTRAINT pk_physician PRIMARY KEY(EmployeeID) );   DROP TABLE IF EXISTS Department; CREATE TABLE Department (   DepartmentID INTEGER NOT NULL,   Name VARCHAR(30) NOT NULL,   Head INTEGER NOT NULL,   CONSTRAINT pk_Department PRIMARY KEY(DepartmentID),   CONSTRAINT fk_Department_Physician_EmployeeID FOREIGN KEY(Head) REFERENCES Physician(EmployeeID) );   DROP TABLE IF EXISTS Affiliated_With; CREATE TABLE Affiliated_With (   Physician INTEGER NOT NULL,   Department INTEGER NOT NULL,   PrimaryAffiliation BOOLEAN NOT NULL,   CONSTRAINT fk_Affiliated_With_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),   CONSTRAINT fk_Affiliated_With_Department_DepartmentID FOREIGN KEY(Department) REFERENCES Department(DepartmentID),   PRIMARY KEY(Physician, Department) );  DROP TABLE IF EXISTS Procedures; CREATE TABLE Procedures (   Code INTEGER PRIMARY KEY NOT NULL,   Name VARCHAR(30) NOT NULL,   Cost REAL NOT NULL );  DROP TABLE IF EXISTS Trained_In; CREATE TABLE Trained_In (   Physician INTEGER NOT NULL,   Treatment INTEGER NOT NULL,   CertificationDate DATETIME NOT NULL,   CertificationExpires DATETIME NOT NULL,   CONSTRAINT fk_Trained_In_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),   CONSTRAINT fk_Trained_In_Procedures_Code FOREIGN KEY(Treatment) REFERENCES Procedures(Code),   PRIMARY KEY(Physician, Treatment) );  DROP TABLE IF EXISTS Patient; CREATE TABLE Patient (   SSN INTEGER PRIMARY KEY NOT NULL,   Name VARCHAR(30) NOT NULL,   Address VARCHAR(30) NOT NULL,   Phone VARCHAR(30) NOT NULL,   InsuranceID INTEGER NOT NULL,   PCP INTEGER NOT NULL,   CONSTRAINT fk_Patient_Physician_EmployeeID FOREIGN KEY(PCP) REFERENCES Physician(EmployeeID) );  DROP TABLE IF EXISTS Nurse; CREATE TABLE Nurse (   EmployeeID INTEGER PRIMARY KEY NOT NULL,   Name VARCHAR(30) NOT NULL,   Position VARCHAR(30) NOT NULL,   Registered BOOLEAN NOT NULL,   SSN INTEGER NOT NULL );  DROP TABLE IF EXISTS Appointment; CREATE TABLE Appointment (   AppointmentID INTEGER PRIMARY KEY NOT NULL,   Patient INTEGER NOT NULL,       PrepNurse INTEGER,   Physician INTEGER NOT NULL,   Start DATETIME NOT NULL,   End DATETIME NOT NULL,   ExaminationRoom TEXT NOT NULL,   CONSTRAINT fk_Appointment_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),   CONSTRAINT fk_Appointment_Nurse_EmployeeID FOREIGN KEY(PrepNurse) REFERENCES Nurse(EmployeeID),   CONSTRAINT fk_Appointment_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID) );  DROP TABLE IF EXISTS Medication; CREATE TABLE Medication (   Code INTEGER PRIMARY KEY NOT NULL,   Name VARCHAR(30) NOT NULL,   Brand VARCHAR(30) NOT NULL,   Description VARCHAR(30) NOT NULL );   DROP TABLE IF EXISTS Prescribes; CREATE TABLE Prescribes (   Physician INTEGER NOT NULL,   Patient INTEGER NOT NULL,    Medication INTEGER NOT NULL,    Date DATETIME NOT NULL,   Appointment INTEGER,     Dose VARCHAR(30) NOT NULL,   PRIMARY KEY(Physician, Patient, Medication, Date),   CONSTRAINT fk_Prescribes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),   CONSTRAINT fk_Prescribes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),   CONSTRAINT fk_Prescribes_Medication_Code FOREIGN KEY(Medication) REFERENCES Medication(Code),   CONSTRAINT fk_Prescribes_Appointment_AppointmentID FOREIGN KEY(Appointment) REFERENCES Appointment(AppointmentID) );  DROP TABLE IF EXISTS Block; CREATE TABLE Block (   BlockFloor INTEGER NOT NULL,   BlockCode INTEGER NOT NULL,   PRIMARY KEY(BlockFloor, BlockCode) );   DROP TABLE IF EXISTS Room; CREATE TABLE Room (   RoomNumber INTEGER PRIMARY KEY NOT NULL,   RoomType VARCHAR(30) NOT NULL,   BlockFloor INTEGER NOT NULL,     BlockCode INTEGER NOT NULL,     Unavailable BOOLEAN NOT NULL,   CONSTRAINT fk_Room_Block_PK FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode) );  DROP TABLE IF EXISTS On_Call; CREATE TABLE On_Call (   Nurse INTEGER NOT NULL,   BlockFloor INTEGER NOT NULL,    BlockCode INTEGER NOT NULL,   OnCallStart DATETIME NOT NULL,   OnCallEnd DATETIME NOT NULL,   PRIMARY KEY(Nurse, BlockFloor, BlockCode, OnCallStart, OnCallEnd),   CONSTRAINT fk_OnCall_Nurse_EmployeeID FOREIGN KEY(Nurse) REFERENCES Nurse(EmployeeID),   CONSTRAINT fk_OnCall_Block_Floor FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode)  );  DROP TABLE IF EXISTS Stay; CREATE TABLE Stay (   StayID INTEGER PRIMARY KEY NOT NULL,   Patient INTEGER NOT NULL,   Room INTEGER NOT NULL,   StayStart DATETIME NOT NULL,   StayEnd DATETIME NOT NULL,   CONSTRAINT fk_Stay_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),   CONSTRAINT fk_Stay_Room_Number FOREIGN KEY(Room) REFERENCES Room(RoomNumber) );  DROP TABLE IF EXISTS Undergoes; CREATE TABLE Undergoes (   Patient INTEGER NOT NULL,   Procedures INTEGER NOT NULL,   Stay INTEGER NOT NULL,   DateUndergoes DATETIME NOT NULL,   Physician INTEGER NOT NULL,   AssistingNurse INTEGER,   PRIMARY KEY(Patient, Procedures, Stay, DateUndergoes),   CONSTRAINT fk_Undergoes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),   CONSTRAINT fk_Undergoes_Procedures_Code FOREIGN KEY(Procedures) REFERENCES Procedures(Code),   CONSTRAINT fk_Undergoes_Stay_StayID FOREIGN KEY(Stay) REFERENCES Stay(StayID),   CONSTRAINT fk_Undergoes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),   CONSTRAINT fk_Undergoes_Nurse_EmployeeID FOREIGN KEY(AssistingNurse) REFERENCES Nurse(EmployeeID) );   "
148,2658,hard,student_assessment,SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance,What are the ids of the students who either registered or attended a course?,"PRAGMA foreign_keys = ON;  CREATE TABLE Addresses ( address_id INTEGER NOT NULL, line_1 VARCHAR(80), line_2 VARCHAR(80), city VARCHAR(50), zip_postcode CHAR(20), state_province_county VARCHAR(50), country VARCHAR(50), PRIMARY KEY (address_id) );                  CREATE TABLE People ( person_id INTEGER NOT NULL, first_name VARCHAR(255), middle_name VARCHAR(255), last_name VARCHAR(255), cell_mobile_number VARCHAR(40), email_address VARCHAR(40), login_name VARCHAR(40), password VARCHAR(40), PRIMARY KEY (person_id) ); CREATE TABLE Students ( student_id INTEGER NOT NULL, student_details VARCHAR(255), PRIMARY KEY (student_id), FOREIGN KEY (student_id) REFERENCES People (person_id) ); CREATE TABLE Courses ( course_id VARCHAR(100) NOT NULL, course_name VARCHAR(120), course_description VARCHAR(255), other_details VARCHAR(255), PRIMARY KEY (course_id) ); CREATE TABLE People_Addresses ( person_address_id INTEGER NOT NULL, person_id INTEGER NOT NULL, address_id INTEGER NOT NULL, date_from DATETIME, date_to DATETIME, PRIMARY KEY (person_address_id), FOREIGN KEY (person_id) REFERENCES People (person_id), FOREIGN KEY (address_id) REFERENCES Addresses (address_id) ); CREATE TABLE Student_Course_Registrations ( student_id INTEGER NOT NULL, course_id INTEGER NOT NULL, registration_date DATETIME NOT NULL, PRIMARY KEY (student_id, course_id), FOREIGN KEY (student_id) REFERENCES Students (student_id), FOREIGN KEY (course_id) REFERENCES Courses (course_id) );  CREATE TABLE Student_Course_Attendance ( student_id INTEGER NOT NULL, course_id INTEGER NOT NULL, date_of_attendance DATETIME NOT NULL, PRIMARY KEY (student_id, course_id), FOREIGN KEY (student_id, course_id) REFERENCES Student_Course_Registrations (student_id,course_id) );  CREATE TABLE Candidates ( candidate_id INTEGER NOT NULL , candidate_details VARCHAR(255), PRIMARY KEY (candidate_id), FOREIGN KEY (candidate_id) REFERENCES People (person_id) ); CREATE TABLE Candidate_Assessments ( candidate_id INTEGER NOT NULL, qualification CHAR(15) NOT NULL, assessment_date DATETIME NOT NULL, asessment_outcome_code CHAR(15) NOT NULL, PRIMARY KEY (candidate_id, qualification), FOREIGN KEY (candidate_id) REFERENCES Candidates (candidate_id) ); "
149,3639,hard,performance_attendance,"SELECT T2.Name ,  T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T2.Name ASC",Show the names of members and the location of performances they attended in ascending alphabetical order of their names.,"PRAGMA foreign_keys = ON;   CREATE TABLE ""member"" (     ""Member_ID"" text,     ""Name"" text,     ""Nationality"" text,     ""Role"" text,     PRIMARY KEY (""Member_ID"") );    CREATE TABLE ""performance"" (     ""Performance_ID"" real,     ""Date"" text,     ""Host"" text,     ""Location"" text,     ""Attendance"" int,     PRIMARY KEY (""Performance_ID"") );  CREATE TABLE ""member_attendance"" (     ""Member_ID"" int,     ""Performance_ID"" int,     ""Num_of_Pieces"" int,     PRIMARY KEY (""Member_ID"",""Performance_ID""),     FOREIGN KEY (""Member_ID"") REFERENCES `member`(""Member_ID""),     FOREIGN KEY (""Performance_ID"") REFERENCES `performance`(""Performance_ID"") );  "
150,10,medium,concert_singer,"SELECT country ,  count(*) FROM singer GROUP BY country",Show all countries and the number of singers in each country.,"PRAGMA foreign_keys = ON;   CREATE TABLE ""stadium"" ( ""Stadium_ID"" int, ""Location"" text, ""Name"" text, ""Capacity"" int, ""Highest"" int, ""Lowest"" int, ""Average"" int, PRIMARY KEY (""Stadium_ID"") );   CREATE TABLE ""singer"" ( ""Singer_ID"" int, ""Name"" text, ""Country"" text, ""Song_Name"" text, ""Song_release_year"" text, ""Age"" int, ""Is_male"" bool, PRIMARY KEY (""Singer_ID"") );    CREATE TABLE ""concert"" ( ""concert_ID"" int, ""concert_Name"" text, ""Theme"" text, ""Stadium_ID"" text, ""Year"" text, PRIMARY KEY (""concert_ID""), FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"") );    CREATE TABLE ""singer_in_concert"" ( ""concert_ID"" int, ""Singer_ID"" text, PRIMARY KEY (""concert_ID"",""Singer_ID""), FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""), FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"") );  "
151,4400,medium,csu_1,"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2004 AND T2.campus  =  ""San Francisco State University""","How many faculty lines are there in ""San Francisco State University"" in year 2004?","CREATE TABLE ""Campuses"" ( 	""Id"" INTEGER PRIMARY KEY,  	""Campus"" TEXT,  	""Location"" TEXT,  	""County"" TEXT,  	""Year"" INTEGER  );  CREATE TABLE ""csu_fees"" (  	""Campus"" INTEGER PRIMARY KEY,  	""Year"" INTEGER,  	""CampusFee"" INTEGER, 	FOREIGN KEY (Campus) REFERENCES Campuses(Id) );  CREATE TABLE ""degrees"" (  	""Year"" INTEGER, 	""Campus"" INTEGER,  	""Degrees"" INTEGER, 	PRIMARY KEY (Year, Campus), 	FOREIGN KEY (Campus) REFERENCES Campuses(Id) );    CREATE TABLE ""discipline_enrollments"" (  	""Campus"" INTEGER,  	""Discipline"" INTEGER,  	""Year"" INTEGER,  	""Undergraduate"" INTEGER,  	""Graduate"" INTEGER, 	PRIMARY KEY (Campus, Discipline), 	FOREIGN KEY (Campus) REFERENCES Campuses(Id) );    CREATE TABLE ""enrollments"" (  	""Campus"" INTEGER,  	""Year"" INTEGER,  	""TotalEnrollment_AY"" INTEGER,  	""FTE_AY"" INTEGER, 	PRIMARY KEY(Campus, Year), 	FOREIGN KEY (Campus) REFERENCES Campuses(Id) );  CREATE TABLE ""faculty"" (  	""Campus"" INTEGER,  	""Year"" INTEGER,  	""Faculty"" REAL, 	FOREIGN KEY (Campus) REFERENCES Campuses(Id)  );  "
152,4201,medium,formula_1,"SELECT forename ,  surname FROM drivers WHERE nationality = ""German""",Find the forename and surname of drivers whose nationality is German?,"BEGIN TRANSACTION; CREATE TABLE IF NOT EXISTS ""circuits"" ( ""circuitId"" INTEGER PRIMARY KEY,   ""circuitRef"" TEXT,   ""name"" TEXT,   ""location"" TEXT,   ""country"" TEXT,   ""lat"" REAL,   ""lng"" REAL,   ""alt"" INTEGER,   ""url"" TEXT ); CREATE TABLE IF NOT EXISTS ""races"" ( ""raceId"" INTEGER PRIMARY KEY,   ""year"" INTEGER,   ""round"" INTEGER,   ""circuitId"" INTEGER,   ""name"" TEXT,   ""date"" TEXT,   ""time"" TEXT,   ""url"" TEXT,   FOREIGN KEY (""circuitId"") REFERENCES ""circuits""(""circuitId"") );  CREATE TABLE IF NOT EXISTS ""drivers"" ( ""driverId"" INTEGER PRIMARY KEY,   ""driverRef"" TEXT,   ""number"" INTEGER,   ""code"" TEXT,   ""forename"" TEXT,   ""surname"" TEXT,   ""dob"" TEXT,   ""nationality"" TEXT,   ""url"" TEXT ); CREATE TABLE IF NOT EXISTS ""status"" ( ""statusId"" INTEGER PRIMARY KEY,   ""status"" TEXT ); CREATE TABLE IF NOT EXISTS ""seasons"" ( ""year"" INTEGER PRIMARY KEY,   ""url"" TEXT ); CREATE TABLE IF NOT EXISTS ""constructors"" ( 	""constructorId"" INTEGER PRIMARY KEY,   ""constructorRef"" TEXT,   ""name"" TEXT,   ""nationality"" TEXT,   ""url"" TEXT ); CREATE TABLE IF NOT EXISTS ""constructorStandings"" ( 	""constructorStandingsId"" INTEGER PRIMARY KEY,   ""raceId"" INTEGER,   ""constructorId"" INTEGER,   ""points"" REAL,   ""position"" INTEGER,   ""positionText"" TEXT,   ""wins"" INTEGER,   FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),   FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId"") ); CREATE TABLE IF NOT EXISTS ""results"" ( ""resultId"" INTEGER PRIMARY KEY,   ""raceId"" INTEGER,   ""driverId"" INTEGER,   ""constructorId"" INTEGER,   ""number"" INTEGER,   ""grid"" INTEGER,   ""position"" INTEGER,   ""positionText"" TEXT,   ""positionOrder"" INTEGER,   ""points"" REAL,   ""laps"" INTEGER,   ""time"" TEXT,   ""milliseconds"" INTEGER,   ""fastestLap"" INTEGER,   ""rank"" INTEGER,   ""fastestLapTime"" TEXT,   ""fastestLapSpeed"" TEXT,   ""statusId"" INTEGER,   FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),   FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),   FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId"") ); CREATE TABLE IF NOT EXISTS ""driverStandings"" ( ""driverStandingsId"" INTEGER PRIMARY KEY,   ""raceId"" INTEGER,   ""driverId"" INTEGER,   ""points"" REAL,   ""position"" INTEGER,   ""positionText"" TEXT,   ""wins"" INTEGER,   FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),   FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId"") ); CREATE TABLE IF NOT EXISTS ""constructorResults"" ( ""constructorResultsId"" INTEGER PRIMARY KEY,   ""raceId"" INTEGER,   ""constructorId"" INTEGER,   ""points"" REAL,   ""status"" REAL,   FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),   FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId"") ); CREATE TABLE IF NOT EXISTS ""qualifying"" ( ""qualifyId"" INTEGER PRIMARY KEY,   ""raceId"" INTEGER,   ""driverId"" INTEGER,   ""constructorId"" INTEGER,   ""number"" INTEGER,   ""position"" INTEGER,   ""q1"" TEXT,   ""q2"" TEXT,   ""q3"" TEXT,   FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),   FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),   FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId"") ); CREATE TABLE IF NOT EXISTS ""pitStops"" ( ""raceId"" INTEGER,   ""driverId"" INTEGER,   ""stop"" INTEGER,   ""lap"" INTEGER,   ""time"" TEXT,   ""duration"" TEXT,   ""milliseconds"" INTEGER,   PRIMARY KEY (""raceId"", ""driverId"", ""stop""),   FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),   FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId"") ); CREATE TABLE IF NOT EXISTS ""lapTimes"" ( ""raceId"" INTEGER,   ""driverId"" INTEGER,   ""lap"" INTEGER,   ""position"" INTEGER,   ""time"" TEXT,   ""milliseconds"" INTEGER,   PRIMARY KEY(""raceId"", ""driverId"", ""lap""),   FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),   FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId"") );COMMIT;"
153,8453,medium,activity_1,"SELECT building FROM Faculty WHERE rank  =  ""Professor"" GROUP BY building HAVING count(*)  >=  10",Show all the buildings that have at least 10 professors.,"create table Activity (   actid INTEGER PRIMARY KEY,   activity_name varchar(25) );  create table Participates_in (   stuid INTEGER,   actid INTEGER,   FOREIGN KEY(stuid) REFERENCES Student(StuID),   FOREIGN KEY(actid) REFERENCES Activity(actid) );  create table Faculty_Participates_in (   FacID INTEGER,   actid INTEGER,   FOREIGN KEY(FacID) REFERENCES Faculty(FacID),   FOREIGN KEY(actid) REFERENCES Activity(actid) );  create table Student (         StuID        INTEGER PRIMARY KEY,         LName        VARCHAR(12),         Fname        VARCHAR(12),         Age      INTEGER,         Sex      VARCHAR(1),         Major        INTEGER,         Advisor      INTEGER,         city_code    VARCHAR(3)  );  create table Faculty (        FacID 	       INTEGER PRIMARY KEY,        Lname		VARCHAR(15),        Fname		VARCHAR(15),        Rank		VARCHAR(15),        Sex		VARCHAR(1),        Phone		INTEGER,        Room		VARCHAR(5),        Building		VARCHAR(13) );   "
154,6646,medium,local_govt_and_lot,SELECT count(DISTINCT T2.Location_Code) FROM Things AS T1 JOIN Timed_Locations_of_Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.service_details  =  'Unsatisfied',How many distinct locations have the things with service detail 'Unsatisfied' been located in?,"PRAGMA foreign_keys = ON;  CREATE TABLE Customers ( customer_id INTEGER NOT NULL, customer_details VARCHAR(255), PRIMARY KEY (customer_id) ); CREATE TABLE Properties ( property_id INTEGER NOT NULL, property_type_code CHAR(15) NOT NULL, property_address VARCHAR(255), other_details VARCHAR(255), PRIMARY KEY (property_id) ); CREATE TABLE Residents ( resident_id INTEGER NOT NULL, property_id INTEGER NOT NULL, date_moved_in DATETIME NOT NULL, date_moved_out DATETIME NOT NULL, other_details VARCHAR(255), PRIMARY KEY (resident_id, property_id, date_moved_in), FOREIGN KEY (property_id) REFERENCES Properties (property_id) );  CREATE TABLE Organizations ( organization_id INTEGER NOT NULL, parent_organization_id INTEGER, organization_details VARCHAR(255), PRIMARY KEY (organization_id) );  CREATE TABLE Services ( service_id INTEGER NOT NULL, organization_id INTEGER NOT NULL, service_type_code CHAR(15) NOT NULL, service_details VARCHAR(255), PRIMARY KEY (service_id), FOREIGN KEY (organization_id) REFERENCES Organizations (organization_id) ); CREATE TABLE Residents_Services ( resident_id INTEGER NOT NULL, service_id INTEGER NOT NULL, date_moved_in DATETIME, property_id INTEGER, date_requested DATETIME, date_provided DATETIME, other_details VARCHAR(255), PRIMARY KEY (resident_id, service_id), FOREIGN KEY (service_id) REFERENCES Services (service_id), FOREIGN KEY (resident_id, property_id, date_moved_in) REFERENCES Residents (resident_id,property_id,date_moved_in) );  CREATE TABLE Things ( thing_id INTEGER NOT NULL, organization_id INTEGER NOT NULL, Type_of_Thing_Code CHAR(15) NOT NULL, service_type_code CHAR(10) NOT NULL, service_details VARCHAR(255), PRIMARY KEY (thing_id), FOREIGN KEY (organization_id) REFERENCES Organizations (organization_id) ); CREATE TABLE Customer_Events ( Customer_Event_ID INTEGER NOT NULL, customer_id INTEGER, date_moved_in DATETIME, property_id INTEGER, resident_id INTEGER, thing_id INTEGER NOT NULL, PRIMARY KEY (Customer_Event_ID), FOREIGN KEY (thing_id) REFERENCES Things (thing_id), FOREIGN KEY (customer_id) REFERENCES Customers (customer_id), FOREIGN KEY (resident_id, property_id, date_moved_in) REFERENCES Residents (resident_id,property_id,date_moved_in) ); CREATE TABLE Customer_Event_Notes ( Customer_Event_Note_ID INTEGER NOT NULL, Customer_Event_ID INTEGER NOT NULL, service_type_code CHAR(15) NOT NULL, resident_id INTEGER NOT NULL, property_id INTEGER NOT NULL, date_moved_in DATETIME NOT NULL, PRIMARY KEY (Customer_Event_Note_ID), FOREIGN KEY (Customer_Event_ID) REFERENCES Customer_Events (Customer_Event_ID) );  CREATE TABLE Timed_Status_of_Things ( thing_id INTEGER NOT NULL, Date_and_Date DATETIME NOT NULL, Status_of_Thing_Code CHAR(15) NOT NULL, PRIMARY KEY (thing_id, Date_and_Date, Status_of_Thing_Code), FOREIGN KEY (thing_id) REFERENCES Things (thing_id) ); CREATE TABLE Timed_Locations_of_Things ( thing_id INTEGER NOT NULL, Date_and_Time DATETIME NOT NULL, Location_Code CHAR(15) NOT NULL, PRIMARY KEY (thing_id, Date_and_Time, Location_Code), FOREIGN KEY (thing_id) REFERENCES Things (thing_id));   "
155,698,medium,orchestra,"SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != ""Live final""","Return the maximum and minimum shares for performances that do not have the type ""Live final""."," PRAGMA foreign_keys = ON;    CREATE TABLE ""conductor"" ( ""Conductor_ID"" int, ""Name"" text, ""Age"" int, ""Nationality"" text, ""Year_of_Work"" int, PRIMARY KEY (""Conductor_ID"") );  CREATE TABLE ""orchestra"" ( ""Orchestra_ID"" int, ""Orchestra"" text, ""Conductor_ID"" int, ""Record_Company"" text, ""Year_of_Founded"" real, ""Major_Record_Format"" text, PRIMARY KEY (""Orchestra_ID""), FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`) );  CREATE TABLE ""performance"" ( ""Performance_ID"" int, ""Orchestra_ID"" int, ""Type"" text, ""Date"" text, ""Official_ratings_(millions)"" real, ""Weekly_rank"" text, ""Share"" text, PRIMARY KEY (""Performance_ID""), FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`) );  CREATE TABLE ""show"" ( ""Show_ID"" int, ""Performance_ID"" int, ""If_first_show"" bool, ""Result"" text, ""Attendance"" real, FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`) );    "
156,6285,medium,decoration_competition,"SELECT Leader_Name ,  College_Location FROM college",Show the leader names and locations of colleges.,"PRAGMA foreign_keys = ON;  CREATE TABLE ""college"" ( ""College_ID"" int, ""Name"" text, ""Leader_Name"" text, ""College_Location"" text, PRIMARY KEY (""College_ID"") );    CREATE TABLE ""member"" ( ""Member_ID"" int, ""Name"" text, ""Country"" text, ""College_ID"" int, PRIMARY KEY (""Member_ID""), FOREIGN KEY (""College_ID"") REFERENCES `college`(""College_ID"") );   CREATE TABLE ""round"" ( ""Round_ID"" int, ""Member_ID"" int, ""Decoration_Theme"" text, ""Rank_in_Round"" int, PRIMARY KEY (""Member_ID"",""Round_ID""), FOREIGN KEY (""Member_ID"") REFERENCES ""member""(""Member_ID"") );   "
157,5004,medium,loan_1,SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1,Find the branch name of the bank that has the most number of customers.,"CREATE TABLE bank ( branch_ID int PRIMARY KEY, bname varchar(20), no_of_customers int, city varchar(10), state varchar(20));   CREATE TABLE customer ( cust_ID varchar(3) PRIMARY KEY, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_ID int, state varchar(20), FOREIGN KEY(branch_ID) REFERENCES bank(branch_ID));   CREATE TABLE loan ( loan_ID varchar(3) PRIMARY KEY, loan_type varchar(15), cust_ID varchar(3), branch_ID varchar(3), amount int, FOREIGN KEY(branch_ID) REFERENCES bank(branch_ID), FOREIGN KEY(Cust_ID) REFERENCES customer(Cust_ID));  "
158,2931,medium,flight_1,SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3,What are the numbers of the shortest flights?,"-- drop table flight cascade constraints; -- drop table aircraft cascade constraints; -- drop table employee cascade constraints; -- drop table certificate cascade constraints;  create table flight( 	flno number(4,0) primary key, 	origin varchar2(20), 	destination varchar2(20), 	distance number(6,0), 	departure_date date, 	arrival_date date, 	price number(7,2),     aid number(9,0),     foreign key(""aid"") references `aircraft`(""aid""));  create table aircraft( 	aid number(9,0) primary key, 	name varchar2(30), 	distance number(6,0));  create table employee( 	eid number(9,0) primary key, 	name varchar2(30), 	salary number(10,2));  create table certificate( 	eid number(9,0), 	aid number(9,0), 	primary key(eid,aid), 	foreign key(""eid"") references `employee`(""eid""), 	foreign key(""aid"") references `aircraft`(""aid""));   "
159,7737,medium,game_1,"SELECT gtype ,  count(*) FROM Video_games GROUP BY gtype",Show all video game types and the number of video games in each type.,"create table Student (         StuID        INTEGER PRIMARY KEY,         LName        VARCHAR(12),         Fname        VARCHAR(12),         Age      INTEGER,         Sex      VARCHAR(1),         Major        INTEGER,         Advisor      INTEGER,         city_code    VARCHAR(3)  );  create table Video_Games (        GameID           INTEGER PRIMARY KEY,        GName            VARCHAR(40),        GType            VARCHAR(40) );  create table Plays_Games (        StuID                INTEGER,        GameID            INTEGER,        Hours_Played      INTEGER,        FOREIGN KEY(GameID) REFERENCES Video_Games(GameID),        FOREIGN KEY(StuID) REFERENCES Student(StuID) );  create table SportsInfo (   StuID INTEGER,   SportName VARCHAR(32),   HoursPerWeek INTEGER,   GamesPlayed INTEGER,   OnScholarship VARCHAR(1),   FOREIGN KEY(StuID) REFERENCES Student(StuID) );   "
160,4528,medium,movie_1,"SELECT T2.title ,  T1.rID ,  T1.stars ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.rID",Find the title and star rating of the movie that got the least rating star for each reviewer.,"-- dbext:type=SQLITE:dbname=movie_rating.db  /* Delete the tables if they already exist */ drop table if exists Movie; drop table if exists Reviewer; drop table if exists Rating;  /* Create the schema for our tables */ create table Movie( 	mID int primary key,  	title text,  	year int,  	director text ); create table Reviewer( 	rID int primary key,  	name text);  create table Rating( 	rID int,  	mID int,  	stars int,  	ratingDate date, 	FOREIGN KEY (mID) references Movie(mID), 	FOREIGN KEY (rID) references Reviewer(rID) );  /* Populate the tables with our data */ "
161,3375,medium,phone_1,"SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE t2.Company_name  =  ""Nokia Corporation"" AND T1.Type != ""Text"";","List the hardware model name for the phons that were produced by ""Nokia Corporation"" but whose screen mode type is not Text.","PRAGMA foreign_keys=ON; BEGIN TRANSACTION; CREATE TABLE IF NOT EXISTS ""chip_model"" ( ""Model_name"" text, ""Launch_year"" real, ""RAM_MiB"" real, ""ROM_MiB"" real, ""Slots"" text, ""WiFi"" text, ""Bluetooth"" text, PRIMARY KEY (""Model_name"") ); CREATE TABLE IF NOT EXISTS ""screen_mode"" ( ""Graphics_mode"" real, ""Char_cells"" text, ""Pixels"" text, ""Hardware_colours"" real, ""used_kb"" real, ""map"" text, ""Type"" text, PRIMARY KEY (""Graphics_mode"") ); CREATE TABLE IF NOT EXISTS ""phone"" ( ""Company_name"" text, ""Hardware_Model_name"" text, ""Accreditation_type"" text, ""Accreditation_level"" text, ""Date"" text, ""chip_model"" text, ""screen_mode"" text, PRIMARY KEY(""Hardware_Model_name""), FOREIGN KEY (`screen_mode`) REFERENCES `screen_mode`(`Graphics_mode`), FOREIGN KEY (`chip_model`) REFERENCES `chip_model`(`Model_name`) ); COMMIT;"
162,7069,medium,manufactory_1,"SELECT count(DISTINCT T1.name) ,  T2.Headquarter FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.Headquarter",How many different products are produced in each headquarter city?,"-- LINK: https://en.wikibooks.org/wiki/SQL_Exercises/The_computer_store  CREATE TABLE Manufacturers (   Code INTEGER,   Name VARCHAR(255) NOT NULL,   Headquarter VARCHAR(255) NOT NULL,   Founder VARCHAR(255) NOT NULL,   Revenue REAL,   PRIMARY KEY (Code)    );  CREATE TABLE Products (   Code INTEGER,   Name VARCHAR(255) NOT NULL ,   Price DECIMAL NOT NULL ,   Manufacturer INTEGER NOT NULL,   PRIMARY KEY (Code),    FOREIGN KEY (Manufacturer) REFERENCES Manufacturers(Code) );  "
163,2174,medium,academic,"SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  ""PVLDB"";",return me the papers on PVLDB .,"PRAGMA foreign_keys = ON; CREATE TABLE ""author"" ( ""aid"" int, ""homepage"" text, ""name"" text, ""oid"" int, primary key(""aid"") ); CREATE TABLE ""conference"" ( ""cid"" int, ""homepage"" text, ""name"" text, primary key (""cid"") ); CREATE TABLE ""domain"" ( ""did"" int, ""name"" text, primary key (""did"") ); CREATE TABLE ""domain_author"" ( ""aid"" int,  ""did"" int, primary key (""did"", ""aid""), foreign key(""aid"") references `author`(""aid""), foreign key(""did"") references `domain`(""did"") );  CREATE TABLE ""domain_conference"" ( ""cid"" int, ""did"" int, primary key (""did"", ""cid""), foreign key(""cid"") references `conference`(""cid""), foreign key(""did"") references `domain`(""did"") ); CREATE TABLE ""journal"" ( ""homepage"" text, ""jid"" int, ""name"" text, primary key(""jid"") ); CREATE TABLE ""domain_journal"" ( ""did"" int, ""jid"" int, primary key (""did"", ""jid""), foreign key(""jid"") references ""journal""(""jid""), foreign key(""did"") references ""domain""(""did"") ); CREATE TABLE ""keyword"" ( ""keyword"" text, ""kid"" int, primary key(""kid"") ); CREATE TABLE ""domain_keyword"" ( ""did"" int, ""kid"" int, primary key (""did"", ""kid""), foreign key(""kid"") references ""keyword""(""kid""), foreign key(""did"") references ""domain""(""did"") ); CREATE TABLE ""publication"" ( ""abstract"" text, ""cid"" text, ""citation_num"" int, ""jid"" int, ""pid"" int, ""reference_num"" int, ""title"" text, ""year"" int, primary key(""pid""), foreign key(""jid"") references ""journal""(""jid""), foreign key(""cid"") references ""conference""(""cid"") ); CREATE TABLE ""domain_publication"" ( ""did"" int, ""pid"" int, primary key (""did"", ""pid""), foreign key(""pid"") references ""publication""(""pid""), foreign key(""did"") references ""domain""(""did"") );  CREATE TABLE ""organization"" ( ""continent"" text, ""homepage"" text, ""name"" text, ""oid"" int, primary key(""oid"") );  CREATE TABLE ""publication_keyword"" ( ""pid"" int, ""kid"" int, primary key (""kid"", ""pid""), foreign key(""pid"") references ""publication""(""pid""), foreign key(""kid"") references ""keyword""(""kid"") ); CREATE TABLE ""writes"" ( ""aid"" int, ""pid"" int, primary key (""aid"", ""pid""), foreign key(""pid"") references ""publication""(""pid""), foreign key(""aid"") references ""author""(""aid"") ); CREATE TABLE ""cite"" ( ""cited"" int, ""citing""  int, foreign key(""cited"") references ""publication""(""pid""), foreign key(""citing"") references ""publication""(""pid"") );"
164,2780,medium,book_2,"SELECT T1.Title ,  T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID",Show the title and publication dates of books.,"PRAGMA foreign_keys = ON;  CREATE TABLE ""publication"" ( ""Publication_ID"" int, ""Book_ID"" int, ""Publisher"" text, ""Publication_Date"" text, ""Price"" real, PRIMARY KEY (""Publication_ID""), FOREIGN KEY (""Book_ID"") REFERENCES ""book""(""Book_ID"") );  CREATE TABLE ""book"" ( ""Book_ID"" int, ""Title"" text, ""Issues"" real, ""Writer"" text, PRIMARY KEY (""Book_ID"") );   "
165,8096,medium,flight_company,"SELECT count(*) ,  country FROM airport GROUP BY country",how many airports are there in each country?,"PRAGMA foreign_keys = ON;  CREATE TABLE ""airport"" ( ""id"" int, ""City"" text, ""Country"" text, ""IATA"" text, ""ICAO"" text, ""name"" text, primary key(""id"") );   CREATE TABLE ""operate_company"" ( ""id"" int, ""name"" text, ""Type"" text, ""Principal_activities"" text, ""Incorporated_in"" text, ""Group_Equity_Shareholding"" real, primary key (""id"") );  CREATE TABLE ""flight"" ( ""id"" int, ""Vehicle_Flight_number"" text, ""Date"" text, ""Pilot"" text, ""Velocity"" real, ""Altitude"" real, ""airport_id"" int, ""company_id"" int, primary key (""id""), foreign key (""airport_id"") references `airport`(""id""), foreign key (""company_id"") references `operate_company`(""id"") );    "
166,4688,medium,party_host,"SELECT Party_Theme ,  LOCATION FROM party",What are the themes and locations of parties?," PRAGMA foreign_keys = ON;  CREATE TABLE ""party"" ( ""Party_ID"" int, ""Party_Theme"" text, ""Location"" text, ""First_year"" text, ""Last_year"" text, ""Number_of_hosts"" int, PRIMARY KEY (""Party_ID"") );  CREATE TABLE ""host"" ( ""Host_ID"" int, ""Name"" text, ""Nationality"" text, ""Age"" text, PRIMARY KEY (""Host_ID"") );  CREATE TABLE ""party_host"" ( ""Party_ID"" int, ""Host_ID"" int, ""Is_Main_in_Charge"" bool, PRIMARY KEY (""Party_ID"",""Host_ID""), FOREIGN KEY (""Host_ID"") REFERENCES `host`(""Host_ID""), FOREIGN KEY (""Party_ID"") REFERENCES `party`(""Party_ID"") );  "
167,8137,medium,cre_Docs_and_Epenses,"SELECT T1.statement_details ,  T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id  =  T2.document_id WHERE T1.statement_details  =  'Private Project'",Show the statement detail and the corresponding document name for the statement with detail 'Private Project'.,"PRAGMA foreign_keys = ON;  CREATE TABLE Ref_Document_Types ( Document_Type_Code CHAR(15) NOT NULL, Document_Type_Name VARCHAR(255) NOT NULL, Document_Type_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Document_Type_Code) ); CREATE TABLE Ref_Budget_Codes ( Budget_Type_Code CHAR(15) NOT NULL, Budget_Type_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Budget_Type_Code) ); CREATE TABLE Projects ( Project_ID INTEGER NOT NULL, Project_Details VARCHAR(255), PRIMARY KEY (Project_ID) ); CREATE TABLE Documents ( Document_ID INTEGER NOT NULL, Document_Type_Code CHAR(15) NOT NULL, Project_ID INTEGER NOT NULL, Document_Date DATETIME, Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Document_ID), FOREIGN KEY (Document_Type_Code) REFERENCES Ref_Document_Types (Document_Type_Code), FOREIGN KEY (Project_ID) REFERENCES Projects (Project_ID) ); CREATE TABLE Statements ( Statement_ID INTEGER NOT NULL, Statement_Details VARCHAR(255), PRIMARY KEY (Statement_ID), FOREIGN KEY (Statement_ID) REFERENCES Documents (Document_ID) ); CREATE TABLE Documents_with_Expenses ( Document_ID INTEGER NOT NULL, Budget_Type_Code CHAR(15) NOT NULL, Document_Details VARCHAR(255), PRIMARY KEY (Document_ID), FOREIGN KEY (Budget_Type_Code) REFERENCES Ref_Budget_Codes (Budget_Type_Code), FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID) ); CREATE TABLE Accounts ( Account_ID INTEGER NOT NULL, Statement_ID INTEGER NOT NULL, Account_Details VARCHAR(255), PRIMARY KEY (Account_ID), FOREIGN KEY (Statement_ID) REFERENCES Statements (Statement_ID) ); "
168,5849,medium,student_1,"SELECT DISTINCT firstname ,  lastname FROM teachers",What are the first name and last name of all the teachers?,"CREATE TABLE ""list"" (  	""LastName"" TEXT,  	""FirstName"" TEXT,  	""Grade"" INTEGER,  	""Classroom"" INTEGER, 	PRIMARY KEY(LastName, FirstName) ); CREATE TABLE ""teachers"" (  	""LastName"" TEXT,  	""FirstName"" TEXT,  	""Classroom"" INTEGER, 	PRIMARY KEY(LastName, FirstName) );"
169,3313,medium,university_basketball,"SELECT school ,  nickname FROM university ORDER BY founded","What are the different schools and their nicknames, ordered by their founding years?","CREATE TABLE ""basketball_match"" ( ""Team_ID"" int, ""School_ID"" int, ""Team_Name"" text, ""ACC_Regular_Season"" text, ""ACC_Percent"" text, ""ACC_Home"" text, ""ACC_Road"" text, ""All_Games"" text, ""All_Games_Percent"" int, ""All_Home"" text, ""All_Road"" text, ""All_Neutral"" text, PRIMARY KEY (""Team_ID""), FOREIGN KEY (`School_ID`) REFERENCES `university`(`School_ID`) );  CREATE TABLE ""university"" ( ""School_ID"" int, ""School"" text, ""Location"" text, ""Founded"" real, ""Affiliation"" text, ""Enrollment"" real, ""Nickname"" text, ""Primary_conference"" text, PRIMARY KEY (""School_ID"") );  "
170,3738,medium,customers_and_invoices,"SELECT transaction_type ,  sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type",Show the transaction types and the total amount of transactions.,"PRAGMA foreign_keys = ON; CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_first_name` VARCHAR(50), `customer_middle_initial` VARCHAR(1), `customer_last_name` VARCHAR(50), `gender` VARCHAR(1), `email_address` VARCHAR(255), `login_name` VARCHAR(80), `login_password` VARCHAR(20), `phone_number` VARCHAR(255), `town_city` VARCHAR(50), `state_county_province` VARCHAR(50), `country` VARCHAR(50) );  CREATE TABLE `Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `date_order_placed` DATETIME NOT NULL, `order_details` VARCHAR(255), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) ); CREATE TABLE `Invoices` ( `invoice_number` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `invoice_date` DATETIME, FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ) ); CREATE TABLE `Accounts` ( `account_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `date_account_opened` DATETIME, `account_name` VARCHAR(50), `other_account_details` VARCHAR(255), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) );    CREATE TABLE `Product_Categories` ( `production_type_code` VARCHAR(15) PRIMARY KEY, `product_type_description` VARCHAR(80), `vat_rating` DECIMAL(19,4) ); CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `parent_product_id` INTEGER, `production_type_code` VARCHAR(15) NOT NULL, `unit_price` DECIMAL(19,4), `product_name` VARCHAR(80), `product_color` VARCHAR(20), `product_size` VARCHAR(20), FOREIGN KEY (`production_type_code` ) REFERENCES `Product_Categories`(`production_type_code` ) );  CREATE TABLE `Financial_Transactions` ( `transaction_id` INTEGER NOT NULL , `account_id` INTEGER NOT NULL, `invoice_number` INTEGER, `transaction_type` VARCHAR(15) NOT NULL, `transaction_date` DATETIME, `transaction_amount` DECIMAL(19,4), `transaction_comment` VARCHAR(255), `other_transaction_details` VARCHAR(255), FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ), FOREIGN KEY (`account_id` ) REFERENCES `Accounts`(`account_id` ) ); CREATE TABLE `Order_Items` ( `order_item_id` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, `product_quantity` VARCHAR(50), `other_order_item_details` VARCHAR(255), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ), FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ) );   CREATE TABLE `Invoice_Line_Items` ( `order_item_id` INTEGER NOT NULL, `invoice_number` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, `product_title` VARCHAR(80), `product_quantity` VARCHAR(50), `product_price` DECIMAL(19,4), `derived_product_cost` DECIMAL(19,4), `derived_vat_payable` DECIMAL(19,4), `derived_total_cost` DECIMAL(19,4), FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ), FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) ); "
171,5916,medium,film_rank,"SELECT max(Number_cities) ,  min(Number_cities) FROM market",What are the maximum and minimum number of cities in all markets.," PRAGMA foreign_keys = ON;    CREATE TABLE ""film"" ( ""Film_ID"" int, ""Title"" text, ""Studio"" text, ""Director"" text, ""Gross_in_dollar"" int, PRIMARY KEY (""Film_ID"") );   CREATE TABLE ""market"" ( ""Market_ID"" int, ""Country"" text, ""Number_cities"" int, PRIMARY KEY (""Market_ID"") );  CREATE TABLE ""film_market_estimation"" ( ""Estimation_ID"" int, ""Low_Estimate"" real, ""High_Estimate"" real, ""Film_ID"" int, ""Type"" text, ""Market_ID"" int, ""Year"" int, PRIMARY KEY (""Estimation_ID""), FOREIGN KEY (""Film_ID"") REFERENCES film(""Film_ID""), FOREIGN KEY (""Market_ID"") REFERENCES market(""Market_ID"") );   "
172,4603,medium,inn_1,"SELECT kids FROM Reservations WHERE FirstName = ""ROY"" AND LastName  =  ""SWEAZY"";",Find the number of kids staying in the rooms reserved by a person called ROY SWEAZ.,"CREATE TABLE ""Rooms"" (  	""RoomId"" TEXT PRIMARY KEY, 	""roomName"" TEXT,  	""beds"" INTEGER,  	""bedType"" TEXT,  	""maxOccupancy"" INTEGER,  	""basePrice"" INTEGER,  	""decor"" TEXT  );  CREATE TABLE ""Reservations"" (  	""Code"" INTEGER PRIMARY KEY,  	""Room"" TEXT,  	""CheckIn"" TEXT,  	""CheckOut"" TEXT,  	""Rate"" REAL,  	""LastName"" TEXT,  	""FirstName"" TEXT,  	""Adults"" INTEGER,  	""Kids"" INTEGER, 	FOREIGN KEY (Room) REFERENCES Rooms(RoomId) ); "
173,5917,medium,film_rank,"SELECT max(Number_cities) ,  min(Number_cities) FROM market",Return the maximum and minimum number of cities across all markets.," PRAGMA foreign_keys = ON;    CREATE TABLE ""film"" ( ""Film_ID"" int, ""Title"" text, ""Studio"" text, ""Director"" text, ""Gross_in_dollar"" int, PRIMARY KEY (""Film_ID"") );   CREATE TABLE ""market"" ( ""Market_ID"" int, ""Country"" text, ""Number_cities"" int, PRIMARY KEY (""Market_ID"") );  CREATE TABLE ""film_market_estimation"" ( ""Estimation_ID"" int, ""Low_Estimate"" real, ""High_Estimate"" real, ""Film_ID"" int, ""Type"" text, ""Market_ID"" int, ""Year"" int, PRIMARY KEY (""Estimation_ID""), FOREIGN KEY (""Film_ID"") REFERENCES film(""Film_ID""), FOREIGN KEY (""Market_ID"") REFERENCES market(""Market_ID"") );   "
174,2439,medium,restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t1.name  =  ""jamerican cuisine"";",where is jamerican cuisine ?,"PRAGMA foreign_keys = ON; CREATE TABLE ""GEOGRAPHIC"" ( ""CITY_NAME"" text, ""COUNTY"" text, ""REGION"" text, primary key(""CITY_NAME"") ); CREATE TABLE ""RESTAURANT"" ( ""ID"" int, ""NAME"" text, ""FOOD_TYPE"" text, ""CITY_NAME"" text, ""RATING"" real, primary key(""ID""), foreign key (""CITY_NAME"") references `GEOGRAPHIC`(""CITY_NAME"") ); CREATE TABLE ""LOCATION"" ( ""RESTAURANT_ID"" int, ""HOUSE_NUMBER"" int, ""STREET_NAME"" text, ""CITY_NAME"" text, primary key(""RESTAURANT_ID""), foreign key (""CITY_NAME"") references `GEOGRAPHIC`(""CITY_NAME"") foreign key (""RESTAURANT_ID"") references `RESTAURANT`(""RESTAURANT_ID"") );"
175,3377,medium,phone_1,"SELECT Accreditation_type ,  count(*) FROM phone GROUP BY Accreditation_type",Find the number of phones for each accreditation type.,"PRAGMA foreign_keys=ON; BEGIN TRANSACTION; CREATE TABLE IF NOT EXISTS ""chip_model"" ( ""Model_name"" text, ""Launch_year"" real, ""RAM_MiB"" real, ""ROM_MiB"" real, ""Slots"" text, ""WiFi"" text, ""Bluetooth"" text, PRIMARY KEY (""Model_name"") ); CREATE TABLE IF NOT EXISTS ""screen_mode"" ( ""Graphics_mode"" real, ""Char_cells"" text, ""Pixels"" text, ""Hardware_colours"" real, ""used_kb"" real, ""map"" text, ""Type"" text, PRIMARY KEY (""Graphics_mode"") ); CREATE TABLE IF NOT EXISTS ""phone"" ( ""Company_name"" text, ""Hardware_Model_name"" text, ""Accreditation_type"" text, ""Accreditation_level"" text, ""Date"" text, ""chip_model"" text, ""screen_mode"" text, PRIMARY KEY(""Hardware_Model_name""), FOREIGN KEY (`screen_mode`) REFERENCES `screen_mode`(`Graphics_mode`), FOREIGN KEY (`chip_model`) REFERENCES `chip_model`(`Model_name`) ); COMMIT;"
176,5484,medium,baseball_1,SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 1907 AND T2.park_name = 'Columbia Park';,"Count the number of games taken place in park ""Columbia Park"" in 1907.","PRAGMA foreign_keys=OFF; BEGIN TRANSACTION; CREATE TABLE all_star (     player_id TEXT,     year INTEGER,     game_num INTEGER,     game_id TEXT,     team_id TEXT,     league_id TEXT,     gp NUMERIC,     starting_pos NUMERIC,     foreign key (player_id) references player(player_id) ); CREATE TABLE appearances (     year INTEGER,     team_id TEXT,     league_id TEXT,     player_id TEXT,     g_all NUMERIC,     gs NUMERIC,     g_batting INTEGER,     g_defense NUMERIC,     g_p INTEGER,     g_c INTEGER,     g_1b INTEGER,     g_2b INTEGER,     g_3b INTEGER,     g_ss INTEGER,     g_lf INTEGER,     g_cf INTEGER,     g_rf INTEGER,     g_of INTEGER,     g_dh NUMERIC,     g_ph NUMERIC,     g_pr NUMERIC,     foreign key (team_id) references team(team_id),     foreign key (player_id) references player(player_id) ); CREATE TABLE manager_award (     player_id TEXT,     award_id TEXT,     year INTEGER,     league_id TEXT,     tie TEXT,     notes NUMERIC,     foreign key (player_id) references player(player_id) ); CREATE TABLE player_award (  	player_id TEXT,  	award_id TEXT,  	year INTEGER,  	league_id TEXT,     	tie TEXT,     	notes TEXT, 	foreign key (player_id) references player(player_id) ); CREATE TABLE manager_award_vote (     award_id TEXT,     year INTEGER,     league_id TEXT,     player_id TEXT,     points_won INTEGER,     points_max INTEGER,     votes_first INTEGER); CREATE TABLE player_award_vote (     award_id TEXT,     year INTEGER,     league_id TEXT,     player_id TEXT,     points_won NUMERIC,     points_max INTEGER,     votes_first NUMERIC,    foreign key (player_id) references player(player_id) ); CREATE TABLE batting ( player_id TEXT, year INTEGER, stint INTEGER, team_id TEXT, league_id TEXT, g INTEGER, ab NUMERIC,     r NUMERIC,     h NUMERIC,     double NUMERIC,     triple NUMERIC,     hr NUMERIC,     rbi NUMERIC,     sb NUMERIC,     cs NUMERIC,     bb NUMERIC,     so NUMERIC,     ibb NUMERIC,     hbp NUMERIC,     sh NUMERIC,     sf NUMERIC,     g_idp NUMERIC, foreign key (player_id) references player(player_id) ); CREATE TABLE batting_postseason (     year INTEGER,     round TEXT,     player_id TEXT,     team_id TEXT,     league_id TEXT,     g INTEGER,     ab INTEGER,     r INTEGER,     h INTEGER,     double INTEGER,     triple INTEGER,     hr INTEGER,     rbi INTEGER,     sb INTEGER,     cs NUMERIC,     bb INTEGER,     so INTEGER,     ibb NUMERIC,     hbp NUMERIC,     sh NUMERIC,     sf NUMERIC,     g_idp NUMERIC, 	foreign key (player_id) references player(player_id), 	foreign key (team_id) references team(team_id) ); CREATE TABLE player_college ( player_id TEXT,     college_id TEXT,     year INTEGER, 	foreign key (player_id) references player(player_id), 	foreign key (college_id) references college(college_id) ); CREATE TABLE fielding (     player_id TEXT,     year INTEGER,     stint INTEGER,     team_id TEXT,     league_id TEXT,     pos TEXT,     g INTEGER,     gs NUMERIC,     inn_outs NUMERIC,     po NUMERIC,     a NUMERIC,     e NUMERIC,     dp NUMERIC,     pb NUMERIC,     wp NUMERIC,     sb NUMERIC,     cs NUMERIC,     zr NUMERIC, 	foreign key (player_id) references player(player_id) ); CREATE TABLE fielding_outfield (     player_id TEXT,     year INTEGER,     stint INTEGER,     glf NUMERIC,     gcf NUMERIC,     grf NUMERIC, 	foreign key (player_id) references player(player_id) ); CREATE TABLE fielding_postseason (     player_id TEXT,     year INTEGER,     team_id TEXT,     league_id TEXT,     round TEXT,     pos TEXT,     g INTEGER,     gs NUMERIC,     inn_outs NUMERIC,     po INTEGER,     a INTEGER,     e INTEGER,     dp INTEGER,     tp INTEGER,     pb NUMERIC,     sb NUMERIC,     cs NUMERIC, 	foreign key (player_id) references player(player_id), 	foreign key (team_id) references player(team_id) ); CREATE TABLE hall_of_fame (     player_id TEXT,     yearid INTEGER,     votedby TEXT,     ballots NUMERIC,     needed NUMERIC,     votes NUMERIC,     inducted TEXT,     category TEXT,     needed_note TEXT, 	foreign key (player_id) references player(player_id) ); CREATE TABLE home_game (     year INTEGER,     league_id TEXT,     team_id TEXT,     park_id TEXT,     span_first TEXT,     span_last TEXT,     games INTEGER,     openings INTEGER,     attendance INTEGER, 	foreign key (team_id) references team(team_id), 	foreign key (park_id) references park(park_id) ); CREATE TABLE manager (     player_id TEXT,     year INTEGER,     team_id TEXT,     league_id TEXT,     inseason INTEGER,     g INTEGER,     w INTEGER,     l INTEGER,     rank NUMERIC,     plyr_mgr TEXT, 	foreign key (team_id) references team(team_id) ); CREATE TABLE manager_half (     player_id TEXT,     year INTEGER,     team_id TEXT,     league_id TEXT,     inseason INTEGER,     half INTEGER,     g INTEGER,     w INTEGER,     l INTEGER,     rank INTEGER, 	foreign key (team_id) references team(team_id) ); CREATE TABLE player (     player_id TEXT,     birth_year NUMERIC,     birth_month NUMERIC,     birth_day NUMERIC,     birth_country TEXT,     birth_state TEXT,     birth_city TEXT,     death_year NUMERIC,     death_month NUMERIC,     death_day NUMERIC,     death_country TEXT,     death_state TEXT,     death_city TEXT,     name_first TEXT,     name_last TEXT,     name_given TEXT,     weight NUMERIC,     height NUMERIC,     bats TEXT,     throws TEXT,     debut TEXT,     final_game TEXT,     retro_id TEXT,     bbref_id TEXT); Macomb County','Steve','Gromek','Stephen Joseph',180,74,'B','R','1941-08-18','1957-07-25','groms101','gromest01'); Calhoun Cty','Charlie','Grover','Charles Byrd',185,73,'L','R','1913-09-09','1913-09-12','grovc101','grovech01'); CREATE TABLE park (     park_id TEXT,     park_name TEXT,     park_alias TEXT,     city TEXT,     state TEXT,     country TEXT); Anaheim Stadium','Anaheim','CA','US'); Ameriquest Field','Arlington','TX','US'); Union Grounds','Chicago','IL','US'); Cubs Park','Chicago','IL','US'); Comiskey Park II','Chicago','IL','US'); Briggs Stadium','Detroit','MI','US'); Astros Field','Houston','TX','US'); Pro Player Stadium; Dolphin Stadium; LandShark Stadium','Miami','FL','US'); SBC Park','San Francisco','CA','US'); CREATE TABLE pitching (     player_id TEXT,     year INTEGER,     stint INTEGER,     team_id TEXT,     league_id TEXT,     w INTEGER,     l INTEGER,     g INTEGER,     gs INTEGER,     cg INTEGER,     sho INTEGER,     sv INTEGER,     ipouts NUMERIC,     h INTEGER,     er INTEGER,     hr INTEGER,     bb INTEGER,     so INTEGER,     baopp NUMERIC,     era NUMERIC,     ibb NUMERIC,     wp NUMERIC,     hbp NUMERIC,     bk INTEGER,     bfp NUMERIC,     gf NUMERIC,     r INTEGER,     sh NUMERIC,     sf NUMERIC,     g_idp NUMERIC); CREATE TABLE pitching_postseason (     player_id TEXT,     year INTEGER,     round TEXT,     team_id TEXT,     league_id TEXT,     w INTEGER,     l INTEGER,     g INTEGER,     gs INTEGER,     cg INTEGER,     sho INTEGER,     sv INTEGER,     ipouts INTEGER,     h INTEGER,     er INTEGER,     hr INTEGER,     bb INTEGER,     so INTEGER,     baopp TEXT,     era NUMERIC,     ibb NUMERIC,     wp NUMERIC,     hbp NUMERIC,     bk NUMERIC,     bfp NUMERIC,     gf INTEGER,     r INTEGER,     sh NUMERIC,     sf NUMERIC,     g_idp NUMERIC); CREATE TABLE salary (     year INTEGER,     team_id TEXT,     league_id TEXT,     player_id TEXT,     salary INTEGER); CREATE TABLE college (     college_id TEXT,     name_full TEXT,     city TEXT,     state TEXT,     country TEXT); CREATE TABLE postseason (     year INTEGER,     round TEXT,     team_id_winner TEXT,     league_id_winner TEXT,     team_id_loser TEXT,     league_id_loser TEXT,     wins INTEGER,     losses INTEGER,     ties INTEGER); CREATE TABLE team (     year INTEGER,     league_id TEXT,     team_id TEXT,     franchise_id TEXT,     div_id TEXT,     rank INTEGER,     g INTEGER,     ghome NUMERIC,     w INTEGER,     l INTEGER,     div_win TEXT,     wc_win TEXT,     lg_win TEXT,     ws_win TEXT,     r INTEGER,     ab INTEGER,     h INTEGER,     double INTEGER,     triple INTEGER,     hr INTEGER,     bb INTEGER,     so NUMERIC,     sb NUMERIC,     cs NUMERIC,     hbp NUMERIC,     sf NUMERIC,     ra INTEGER,     er INTEGER,     era NUMERIC,     cg INTEGER,     sho INTEGER,     sv INTEGER,     ipouts INTEGER,     ha INTEGER,     hra INTEGER,     bba INTEGER,     soa INTEGER,     e INTEGER,     dp NUMERIC,     fp NUMERIC,     name TEXT,     park TEXT,     attendance NUMERIC,     bpf INTEGER,     ppf INTEGER,     team_id_br TEXT,     team_id_lahman45 TEXT,     team_id_retro TEXT); CREATE TABLE team_franchise (     franchise_id TEXT,     franchise_name TEXT,     active TEXT,     na_assoc TEXT); CREATE TABLE team_half (     year INTEGER,     league_id TEXT,     team_id TEXT,     half INTEGER,     div_id TEXT,     div_win TEXT,     rank INTEGER,     g INTEGER,     w INTEGER,     l INTEGER); COMMIT;"
177,3472,medium,climbing,"SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  ""Uganda""",What are the times used by climbers who climbed mountains in the country of Uganda?,"PRAGMA foreign_keys = ON;  CREATE TABLE ""mountain"" ( ""Mountain_ID"" int, ""Name"" text, ""Height"" real, ""Prominence"" real, ""Range"" text, ""Country"" text, PRIMARY KEY (""Mountain_ID"") );  CREATE TABLE ""climber"" ( ""Climber_ID"" int, ""Name"" text, ""Country"" text, ""Time"" text, ""Points"" real, ""Mountain_ID"" int, PRIMARY KEY (""Climber_ID""), FOREIGN KEY (""Mountain_ID"") REFERENCES ""mountain""(""Mountain_ID"") );  "
178,4513,medium,movie_1,"SELECT T1.title ,  T1.year FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title","For each director who directed more than one movie, what are the titles and dates of release for all those movies?","-- dbext:type=SQLITE:dbname=movie_rating.db  /* Delete the tables if they already exist */ drop table if exists Movie; drop table if exists Reviewer; drop table if exists Rating;  /* Create the schema for our tables */ create table Movie( 	mID int primary key,  	title text,  	year int,  	director text ); create table Reviewer( 	rID int primary key,  	name text);  create table Rating( 	rID int,  	mID int,  	stars int,  	ratingDate date, 	FOREIGN KEY (mID) references Movie(mID), 	FOREIGN KEY (rID) references Reviewer(rID) );  /* Populate the tables with our data */ "
179,6540,medium,department_store,"SELECT product_type_code ,  max(product_price) ,  min(product_price) FROM products GROUP BY product_type_code",What are the maximum and minimum product prices for each product type?,"PRAGMA foreign_keys = ON; CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `address_details` VARCHAR(255) );                   CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `staff_gender` VARCHAR(1), `staff_name` VARCHAR(80) );  CREATE TABLE `Suppliers` ( `supplier_id` INTEGER PRIMARY KEY, `supplier_name` VARCHAR(80), `supplier_phone` VARCHAR(80) );  CREATE TABLE `Department_Store_Chain` ( `dept_store_chain_id` INTEGER PRIMARY KEY, `dept_store_chain_name` VARCHAR(80) );  CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `payment_method_code` VARCHAR(10) NOT NULL, `customer_code` VARCHAR(20), `customer_name` VARCHAR(80), `customer_address` VARCHAR(255), `customer_phone` VARCHAR(80), `customer_email` VARCHAR(80) );                  CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_type_code` VARCHAR(10) NOT NULL, `product_name` VARCHAR(80), `product_price` DECIMAL(19,4) ); CREATE TABLE `Supplier_Addresses` ( `supplier_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_from` DATETIME NOT NULL, `date_to` DATETIME, PRIMARY KEY (`supplier_id`, `address_id`), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`supplier_id` ) REFERENCES `Suppliers`(`supplier_id` ) );  CREATE TABLE `Customer_Addresses` ( `customer_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_from` DATETIME NOT NULL, `date_to` DATETIME, PRIMARY KEY (`customer_id`, `address_id`), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) );   CREATE TABLE `Customer_Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `order_status_code` VARCHAR(10) NOT NULL, `order_date` DATETIME NOT NULL, FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) );  CREATE TABLE `Department_Stores` ( `dept_store_id` INTEGER PRIMARY KEY, `dept_store_chain_id` INTEGER, `store_name` VARCHAR(80), `store_address` VARCHAR(255), `store_phone` VARCHAR(80), `store_email` VARCHAR(80), FOREIGN KEY (`dept_store_chain_id` ) REFERENCES `Department_Store_Chain`(`dept_store_chain_id` ) );                    CREATE TABLE `Departments` ( `department_id` INTEGER PRIMARY KEY, `dept_store_id` INTEGER NOT NULL, `department_name` VARCHAR(80), FOREIGN KEY (`dept_store_id` ) REFERENCES `Department_Stores`(`dept_store_id` ) ); CREATE TABLE `Order_Items` ( `order_item_id` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) ); CREATE TABLE `Product_Suppliers` ( `product_id` INTEGER NOT NULL, `supplier_id` INTEGER NOT NULL, `date_supplied_from` DATETIME NOT NULL, `date_supplied_to` DATETIME, `total_amount_purchased` VARCHAR(80), `total_value_purchased` DECIMAL(19,4), PRIMARY KEY (`product_id`, `supplier_id`), FOREIGN KEY (`supplier_id` ) REFERENCES `Suppliers`(`supplier_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) );   CREATE TABLE `Staff_Department_Assignments` ( `staff_id` INTEGER NOT NULL, `department_id` INTEGER NOT NULL, `date_assigned_from` DATETIME NOT NULL, `job_title_code` VARCHAR(10) NOT NULL, `date_assigned_to` DATETIME, PRIMARY KEY (`staff_id`, `department_id`), FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` ), FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ) );  "
180,6,medium,concert_singer,"SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",Show the name and the release year of the song by the youngest singer.,"PRAGMA foreign_keys = ON;   CREATE TABLE ""stadium"" ( ""Stadium_ID"" int, ""Location"" text, ""Name"" text, ""Capacity"" int, ""Highest"" int, ""Lowest"" int, ""Average"" int, PRIMARY KEY (""Stadium_ID"") );   CREATE TABLE ""singer"" ( ""Singer_ID"" int, ""Name"" text, ""Country"" text, ""Song_Name"" text, ""Song_release_year"" text, ""Age"" int, ""Is_male"" bool, PRIMARY KEY (""Singer_ID"") );    CREATE TABLE ""concert"" ( ""concert_ID"" int, ""concert_Name"" text, ""Theme"" text, ""Stadium_ID"" text, ""Year"" text, PRIMARY KEY (""concert_ID""), FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"") );    CREATE TABLE ""singer_in_concert"" ( ""concert_ID"" int, ""Singer_ID"" text, PRIMARY KEY (""concert_ID"",""Singer_ID""), FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""), FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"") );  "
181,3495,medium,body_builder,SELECT T2.Height FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  <  315,What are the heights of body builders with total score smaller than 315?,"PRAGMA foreign_keys = ON;  CREATE TABLE ""body_builder"" ( ""Body_Builder_ID"" int, ""People_ID"" int, ""Snatch"" real, ""Clean_Jerk"" real, ""Total"" real, PRIMARY KEY (""Body_Builder_ID""), FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"") );  CREATE TABLE ""people"" ( ""People_ID"" int, ""Name"" text, ""Height"" real, ""Weight"" real, ""Birth_Date"" text, ""Birth_Place"" text, PRIMARY KEY (""People_ID"") );  "
182,4786,medium,election,SELECT count(DISTINCT T2.Delegate) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  >  50000,How many distinct delegates are from counties with population larger than 50000?,"PRAGMA foreign_keys = ON;  CREATE TABLE ""county"" ( ""County_Id"" int, ""County_name"" text, ""Population"" real, ""Zip_code"" text, PRIMARY KEY (""County_Id"") );  CREATE TABLE ""party"" ( ""Party_ID"" int, ""Year"" real, ""Party"" text, ""Governor"" text, ""Lieutenant_Governor"" text, ""Comptroller"" text, ""Attorney_General"" text, ""US_Senate"" text, PRIMARY KEY (""Party_ID"") );   CREATE TABLE ""election"" ( ""Election_ID"" int, ""Counties_Represented"" text, ""District"" int, ""Delegate"" text, ""Party"" int, ""First_Elected"" real, ""Committee"" text, PRIMARY KEY (""Election_ID""), FOREIGN KEY (`Party`) REFERENCES `party`(`Party_ID`), FOREIGN KEY (`District`) REFERENCES `county`(`County_Id`) );  "
183,3376,medium,phone_1,"SELECT DISTINCT T2.Hardware_Model_name , T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.used_kb BETWEEN 10 AND 15;",List the phone hardware model and company name for the phones whose screen usage in kb is between 10 and 15.,"PRAGMA foreign_keys=ON; BEGIN TRANSACTION; CREATE TABLE IF NOT EXISTS ""chip_model"" ( ""Model_name"" text, ""Launch_year"" real, ""RAM_MiB"" real, ""ROM_MiB"" real, ""Slots"" text, ""WiFi"" text, ""Bluetooth"" text, PRIMARY KEY (""Model_name"") ); CREATE TABLE IF NOT EXISTS ""screen_mode"" ( ""Graphics_mode"" real, ""Char_cells"" text, ""Pixels"" text, ""Hardware_colours"" real, ""used_kb"" real, ""map"" text, ""Type"" text, PRIMARY KEY (""Graphics_mode"") ); CREATE TABLE IF NOT EXISTS ""phone"" ( ""Company_name"" text, ""Hardware_Model_name"" text, ""Accreditation_type"" text, ""Accreditation_level"" text, ""Date"" text, ""chip_model"" text, ""screen_mode"" text, PRIMARY KEY(""Hardware_Model_name""), FOREIGN KEY (`screen_mode`) REFERENCES `screen_mode`(`Graphics_mode`), FOREIGN KEY (`chip_model`) REFERENCES `chip_model`(`Model_name`) ); COMMIT;"
184,4211,medium,formula_1,"SELECT count(*) ,  nationality FROM constructors GROUP BY nationality",What are the numbers of constructors for different nationalities?,"BEGIN TRANSACTION; CREATE TABLE IF NOT EXISTS ""circuits"" ( ""circuitId"" INTEGER PRIMARY KEY,   ""circuitRef"" TEXT,   ""name"" TEXT,   ""location"" TEXT,   ""country"" TEXT,   ""lat"" REAL,   ""lng"" REAL,   ""alt"" INTEGER,   ""url"" TEXT ); CREATE TABLE IF NOT EXISTS ""races"" ( ""raceId"" INTEGER PRIMARY KEY,   ""year"" INTEGER,   ""round"" INTEGER,   ""circuitId"" INTEGER,   ""name"" TEXT,   ""date"" TEXT,   ""time"" TEXT,   ""url"" TEXT,   FOREIGN KEY (""circuitId"") REFERENCES ""circuits""(""circuitId"") );  CREATE TABLE IF NOT EXISTS ""drivers"" ( ""driverId"" INTEGER PRIMARY KEY,   ""driverRef"" TEXT,   ""number"" INTEGER,   ""code"" TEXT,   ""forename"" TEXT,   ""surname"" TEXT,   ""dob"" TEXT,   ""nationality"" TEXT,   ""url"" TEXT ); CREATE TABLE IF NOT EXISTS ""status"" ( ""statusId"" INTEGER PRIMARY KEY,   ""status"" TEXT ); CREATE TABLE IF NOT EXISTS ""seasons"" ( ""year"" INTEGER PRIMARY KEY,   ""url"" TEXT ); CREATE TABLE IF NOT EXISTS ""constructors"" ( 	""constructorId"" INTEGER PRIMARY KEY,   ""constructorRef"" TEXT,   ""name"" TEXT,   ""nationality"" TEXT,   ""url"" TEXT ); CREATE TABLE IF NOT EXISTS ""constructorStandings"" ( 	""constructorStandingsId"" INTEGER PRIMARY KEY,   ""raceId"" INTEGER,   ""constructorId"" INTEGER,   ""points"" REAL,   ""position"" INTEGER,   ""positionText"" TEXT,   ""wins"" INTEGER,   FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),   FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId"") ); CREATE TABLE IF NOT EXISTS ""results"" ( ""resultId"" INTEGER PRIMARY KEY,   ""raceId"" INTEGER,   ""driverId"" INTEGER,   ""constructorId"" INTEGER,   ""number"" INTEGER,   ""grid"" INTEGER,   ""position"" INTEGER,   ""positionText"" TEXT,   ""positionOrder"" INTEGER,   ""points"" REAL,   ""laps"" INTEGER,   ""time"" TEXT,   ""milliseconds"" INTEGER,   ""fastestLap"" INTEGER,   ""rank"" INTEGER,   ""fastestLapTime"" TEXT,   ""fastestLapSpeed"" TEXT,   ""statusId"" INTEGER,   FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),   FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),   FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId"") ); CREATE TABLE IF NOT EXISTS ""driverStandings"" ( ""driverStandingsId"" INTEGER PRIMARY KEY,   ""raceId"" INTEGER,   ""driverId"" INTEGER,   ""points"" REAL,   ""position"" INTEGER,   ""positionText"" TEXT,   ""wins"" INTEGER,   FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),   FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId"") ); CREATE TABLE IF NOT EXISTS ""constructorResults"" ( ""constructorResultsId"" INTEGER PRIMARY KEY,   ""raceId"" INTEGER,   ""constructorId"" INTEGER,   ""points"" REAL,   ""status"" REAL,   FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),   FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId"") ); CREATE TABLE IF NOT EXISTS ""qualifying"" ( ""qualifyId"" INTEGER PRIMARY KEY,   ""raceId"" INTEGER,   ""driverId"" INTEGER,   ""constructorId"" INTEGER,   ""number"" INTEGER,   ""position"" INTEGER,   ""q1"" TEXT,   ""q2"" TEXT,   ""q3"" TEXT,   FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),   FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),   FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId"") ); CREATE TABLE IF NOT EXISTS ""pitStops"" ( ""raceId"" INTEGER,   ""driverId"" INTEGER,   ""stop"" INTEGER,   ""lap"" INTEGER,   ""time"" TEXT,   ""duration"" TEXT,   ""milliseconds"" INTEGER,   PRIMARY KEY (""raceId"", ""driverId"", ""stop""),   FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),   FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId"") ); CREATE TABLE IF NOT EXISTS ""lapTimes"" ( ""raceId"" INTEGER,   ""driverId"" INTEGER,   ""lap"" INTEGER,   ""position"" INTEGER,   ""time"" TEXT,   ""milliseconds"" INTEGER,   PRIMARY KEY(""raceId"", ""driverId"", ""lap""),   FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),   FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId"") );COMMIT;"
185,3879,medium,wrestler,SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1,What is the name of the wrestler with the fewest days held?,"PRAGMA foreign_keys = ON;  CREATE TABLE ""wrestler"" ( ""Wrestler_ID"" int, ""Name"" text, ""Reign"" text, ""Days_held"" text, ""Location"" text, ""Event"" text, PRIMARY KEY (""Wrestler_ID"") );  CREATE TABLE ""Elimination"" ( ""Elimination_ID"" text, ""Wrestler_ID"" text, ""Team"" text, ""Eliminated_By"" text, ""Elimination_Move"" text, ""Time"" text, PRIMARY KEY (""Elimination_ID""), FOREIGN KEY (""Wrestler_ID"") REFERENCES ""wrestler""(""Wrestler_ID"") );  "
186,569,medium,student_transcripts_tracking,SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1,What is the last transcript release date?,"PRAGMA foreign_keys = ON; CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `line_1` VARCHAR(255), `line_2` VARCHAR(255), `line_3` VARCHAR(255), `city` VARCHAR(255), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(255), `country` VARCHAR(255), `other_address_details` VARCHAR(255) ); CREATE TABLE `Courses` ( `course_id` INTEGER PRIMARY KEY, `course_name` VARCHAR(255), `course_description` VARCHAR(255), `other_details` VARCHAR(255) );  CREATE TABLE `Departments` ( `department_id` INTEGER PRIMARY KEY, `department_name` VARCHAR(255), `department_description` VARCHAR(255), `other_details` VARCHAR(255) ); CREATE TABLE `Degree_Programs` ( `degree_program_id` INTEGER PRIMARY KEY, `department_id` INTEGER NOT NULL, `degree_summary_name` VARCHAR(255), `degree_summary_description` VARCHAR(255), `other_details` VARCHAR(255), FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` ) );  CREATE TABLE `Sections` ( `section_id` INTEGER PRIMARY KEY, `course_id` INTEGER NOT NULL, `section_name` VARCHAR(255), `section_description` VARCHAR(255), `other_details` VARCHAR(255), FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ) ); CREATE TABLE `Semesters` ( `semester_id` INTEGER PRIMARY KEY, `semester_name` VARCHAR(255), `semester_description` VARCHAR(255), `other_details` VARCHAR(255) ); CREATE TABLE `Students` ( `student_id` INTEGER PRIMARY KEY, `current_address_id` INTEGER NOT NULL, `permanent_address_id` INTEGER NOT NULL, `first_name` VARCHAR(80), `middle_name` VARCHAR(40), `last_name` VARCHAR(40), `cell_mobile_number` VARCHAR(40), `email_address` VARCHAR(40), `ssn` VARCHAR(40), `date_first_registered` DATETIME, `date_left` DATETIME, `other_student_details` VARCHAR(255), FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` ) );  CREATE TABLE `Student_Enrolment` ( `student_enrolment_id` INTEGER PRIMARY KEY, `degree_program_id` INTEGER NOT NULL, `semester_id` INTEGER NOT NULL, `student_id` INTEGER NOT NULL, `other_details` VARCHAR(255), FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ), FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ), FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ) ); CREATE TABLE `Student_Enrolment_Courses` ( `student_course_id` INTEGER PRIMARY KEY, `course_id` INTEGER NOT NULL, `student_enrolment_id` INTEGER NOT NULL, FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ), FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` ) );  CREATE TABLE `Transcripts` ( `transcript_id` INTEGER PRIMARY KEY, `transcript_date` DATETIME, `other_details` VARCHAR(255) );  CREATE TABLE `Transcript_Contents` ( `student_course_id` INTEGER NOT NULL, `transcript_id` INTEGER NOT NULL, FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ), FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` ) );  "
187,6185,medium,tracking_grants_for_research,"SELECT count(*) ,  T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id","For each project id, how many tasks are there?","PRAGMA foreign_keys = ON; CREATE TABLE `Document_Types` ( `document_type_code` VARCHAR(10) PRIMARY KEY, `document_description` VARCHAR(255) NOT NULL ); CREATE TABLE `Documents` ( `document_id` INTEGER PRIMARY KEY, `document_type_code` VARCHAR(10), `grant_id` INTEGER NOT NULL, `sent_date` DATETIME NOT NULL, `response_received_date` DATETIME NOT NULL, `other_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`document_type_code` ) REFERENCES `Document_Types`(`document_type_code` ), FOREIGN KEY (`grant_id` ) REFERENCES `Grants`(`grant_id` ) ); CREATE TABLE `Grants` ( `grant_id` INTEGER PRIMARY KEY, `organisation_id` INTEGER NOT NULL, `grant_amount` DECIMAL(19,4) NOT NULL DEFAULT 0, `grant_start_date` DATETIME NOT NULL, `grant_end_date` DATETIME NOT NULL, `other_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`organisation_id` ) REFERENCES `Organisations`(`organisation_id` ) ); CREATE TABLE `Organisation_Types` ( `organisation_type` VARCHAR(10) PRIMARY KEY, `organisation_type_description` VARCHAR(255) NOT NULL ); CREATE TABLE `Organisations` ( `organisation_id` INTEGER PRIMARY KEY, `organisation_type` VARCHAR(10) NOT NULL, `organisation_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`organisation_type` ) REFERENCES `Organisation_Types`(`organisation_type` ) ); CREATE TABLE `Project_Outcomes` ( `project_id` INTEGER NOT NULL, `outcome_code` VARCHAR(10) NOT NULL, `outcome_details` VARCHAR(255), FOREIGN KEY (`project_id` ) REFERENCES `Projects`(`project_id` ),FOREIGN KEY (`outcome_code` ) REFERENCES `Research_Outcomes`(`outcome_code` ) ); CREATE TABLE `Project_Staff` ( `staff_id` DOUBLE PRIMARY KEY, `project_id` INTEGER NOT NULL, `role_code` VARCHAR(10) NOT NULL, `date_from` DATETIME, `date_to` DATETIME, `other_details` VARCHAR(255), FOREIGN KEY (`project_id` ) REFERENCES `Projects`(`project_id` ),FOREIGN KEY (`role_code` ) REFERENCES `Staff_Roles`(`role_code` ) ); CREATE TABLE `Projects` ( `project_id` INTEGER PRIMARY KEY, `organisation_id` INTEGER NOT NULL, `project_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`organisation_id` ) REFERENCES `Organisations`(`organisation_id` ) ); CREATE TABLE `Research_Outcomes` ( `outcome_code` VARCHAR(10) PRIMARY KEY, `outcome_description` VARCHAR(255) NOT NULL ); CREATE TABLE `Research_Staff` ( `staff_id` INTEGER PRIMARY KEY, `employer_organisation_id` INTEGER NOT NULL, `staff_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`employer_organisation_id` ) REFERENCES `Organisations`(`organisation_id` ) ); CREATE TABLE `Staff_Roles` ( `role_code` VARCHAR(10) PRIMARY KEY, `role_description` VARCHAR(255) NOT NULL ); CREATE TABLE `Tasks` ( `task_id` INTEGER PRIMARY KEY, `project_id` INTEGER NOT NULL, `task_details` VARCHAR(255) NOT NULL, `eg Agree Objectives` VARCHAR(1), FOREIGN KEY (`project_id` ) REFERENCES `Projects`(`project_id` ) ); "
188,8330,medium,train_station,SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id HAVING count(*)  >=  2,Show the station name with at least two trains.,"PRAGMA foreign_keys = ON;  CREATE TABLE ""station"" ( ""Station_ID"" int, ""Name"" text, ""Annual_entry_exit"" real, ""Annual_interchanges"" real, ""Total_Passengers"" real, ""Location"" text, ""Main_Services"" text, ""Number_of_Platforms"" int, PRIMARY KEY (""Station_ID"") );  CREATE TABLE ""train"" ( ""Train_ID"" int, ""Name"" text, ""Time"" text, ""Service"" text, PRIMARY KEY (""Train_ID"") );  CREATE TABLE ""train_station"" ( ""Train_ID"" int, ""Station_ID"" int,	 PRIMARY KEY (""Train_ID"",""Station_ID""), FOREIGN KEY (""Train_ID"") REFERENCES ""train""(""Train_ID""), FOREIGN KEY (""Station_ID"") REFERENCES ""station""(""Station_ID"") );  "
189,2731,medium,bike_1,"SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1","What are the name, latitude, and city of the station with the lowest latitude?","PRAGMA foreign_keys=OFF; BEGIN TRANSACTION; CREATE TABLE station (     id INTEGER PRIMARY KEY,     name TEXT,     lat NUMERIC,     long NUMERIC,     dock_count INTEGER,     city TEXT,     installation_date TEXT); CREATE TABLE status (     station_id INTEGER,     bikes_available INTEGER,     docks_available INTEGER,     time TEXT,     FOREIGN KEY (station_id) REFERENCES station(id) ); CREATE TABLE trip (     id INTEGER PRIMARY KEY,     duration INTEGER,     start_date TEXT,     start_station_name TEXT, -- this should be removed     start_station_id INTEGER,     end_date TEXT,     end_station_name TEXT, -- this should be removed     end_station_id INTEGER,     bike_id INTEGER,     subscription_type TEXT,     zip_code INTEGER); CREATE TABLE weather (     date TEXT,     max_temperature_f INTEGER,     mean_temperature_f INTEGER,     min_temperature_f INTEGER,     max_dew_point_f INTEGER,     mean_dew_point_f INTEGER,     min_dew_point_f INTEGER,     max_humidity INTEGER,     mean_humidity INTEGER,     min_humidity INTEGER,     max_sea_level_pressure_inches NUMERIC,     mean_sea_level_pressure_inches NUMERIC,     min_sea_level_pressure_inches NUMERIC,     max_visibility_miles INTEGER,     mean_visibility_miles INTEGER,     min_visibility_miles INTEGER,     max_wind_Speed_mph INTEGER,     mean_wind_speed_mph INTEGER,     max_gust_speed_mph INTEGER,     precipitation_inches INTEGER,     cloud_cover INTEGER,     events TEXT,     wind_dir_degrees INTEGER,     zip_code INTEGER); COMMIT;"
190,2743,medium,bike_1,"SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5",What are the dates that had the top 5 cloud cover rates? Also tell me the cloud cover rate.,"PRAGMA foreign_keys=OFF; BEGIN TRANSACTION; CREATE TABLE station (     id INTEGER PRIMARY KEY,     name TEXT,     lat NUMERIC,     long NUMERIC,     dock_count INTEGER,     city TEXT,     installation_date TEXT); CREATE TABLE status (     station_id INTEGER,     bikes_available INTEGER,     docks_available INTEGER,     time TEXT,     FOREIGN KEY (station_id) REFERENCES station(id) ); CREATE TABLE trip (     id INTEGER PRIMARY KEY,     duration INTEGER,     start_date TEXT,     start_station_name TEXT, -- this should be removed     start_station_id INTEGER,     end_date TEXT,     end_station_name TEXT, -- this should be removed     end_station_id INTEGER,     bike_id INTEGER,     subscription_type TEXT,     zip_code INTEGER); CREATE TABLE weather (     date TEXT,     max_temperature_f INTEGER,     mean_temperature_f INTEGER,     min_temperature_f INTEGER,     max_dew_point_f INTEGER,     mean_dew_point_f INTEGER,     min_dew_point_f INTEGER,     max_humidity INTEGER,     mean_humidity INTEGER,     min_humidity INTEGER,     max_sea_level_pressure_inches NUMERIC,     mean_sea_level_pressure_inches NUMERIC,     min_sea_level_pressure_inches NUMERIC,     max_visibility_miles INTEGER,     mean_visibility_miles INTEGER,     min_visibility_miles INTEGER,     max_wind_Speed_mph INTEGER,     mean_wind_speed_mph INTEGER,     max_gust_speed_mph INTEGER,     precipitation_inches INTEGER,     cloud_cover INTEGER,     events TEXT,     wind_dir_degrees INTEGER,     zip_code INTEGER); COMMIT;"
191,7441,medium,dorm_1,"SELECT avg(age) ,  city_code FROM student GROUP BY city_code",What is the average age for each city and what are those cities?," create table Student (         StuID        INTEGER PRIMARY KEY,         LName        VARCHAR(12),         Fname        VARCHAR(12),         Age      INTEGER,         Sex      VARCHAR(1),         Major        INTEGER,         Advisor      INTEGER,         city_code    VARCHAR(3)  );    create table Dorm (        dormid		INTEGER,        dorm_name	VARCHAR(20),        student_capacity	INTEGER,        gender			VARCHAR(1) ) ;  create table Dorm_amenity (        amenid			INTEGER,        amenity_name		VARCHAR(25) ) ;  create table Has_amenity (        dormid			INTEGER,        amenid				INTEGER, 	FOREIGN KEY (dormid) REFERENCES `Dorm`(dormid), 	FOREIGN KEY (amenid) REFERENCES `Dorm_amenity`(amenid) );  create table Lives_in (        stuid 	      INTEGER,        dormid		INTEGER,        room_number	INTEGER, 	FOREIGN KEY (stuid) REFERENCES `Student`(StuID),         FOREIGN KEY (dormid) REFERENCES `Dorm`(dormid) );  "
192,1522,medium,scholar,"SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""sharon goldwater"";",which papers has sharon goldwater written ?,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); "
193,6856,medium,cre_Drama_Workshop_Groups,"SELECT min(Order_Quantity) ,  avg(Order_Quantity) ,  max(Order_Quantity) FROM INVOICES","Show the minimum, average, maximum order quantity of all invoices.","PRAGMA foreign_keys = ON;  CREATE TABLE Ref_Payment_Methods ( payment_method_code CHAR(10) NOT NULL, payment_method_description VARCHAR(80), PRIMARY KEY (payment_method_code), UNIQUE (payment_method_code) ); CREATE TABLE Ref_Service_Types ( Service_Type_Code CHAR(15) NOT NULL, Parent_Service_Type_Code CHAR(15), Service_Type_Description VARCHAR(255), PRIMARY KEY (Service_Type_Code), UNIQUE (Service_Type_Code) );  CREATE TABLE Addresses ( Address_ID VARCHAR(100) NOT NULL, Line_1 VARCHAR(255), Line_2 VARCHAR(255), City_Town VARCHAR(255), State_County VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Address_ID), UNIQUE (Address_ID) ); CREATE TABLE Products ( Product_ID VARCHAR(100) NOT NULL, Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Product_Description VARCHAR(255), Other_Product_Service_Details VARCHAR(255), PRIMARY KEY (Product_ID), UNIQUE (Product_ID) ); CREATE TABLE Marketing_Regions ( Marketing_Region_Code CHAR(15) NOT NULL, Marketing_Region_Name VARCHAR(255) NOT NULL, Marketing_Region_Descriptrion VARCHAR(255) NOT NULL, Other_Details VARCHAR(255), PRIMARY KEY (Marketing_Region_Code), UNIQUE (Marketing_Region_Code) );  CREATE TABLE Clients ( Client_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Customer_Email_Address VARCHAR(255), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Client_ID), UNIQUE (Client_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) ); CREATE TABLE Drama_Workshop_Groups ( Workshop_Group_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Currency_Code CHAR(15) NOT NULL, Marketing_Region_Code CHAR(15) NOT NULL, Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Workshop_Group_ID), UNIQUE (Workshop_Group_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) ); CREATE TABLE Performers ( Performer_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Performer_ID), UNIQUE (Performer_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) ); CREATE TABLE Customers ( Customer_ID VARCHAR(100) NOT NULL, Address_ID INTEGER NOT NULL, Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Customer_ID), UNIQUE (Customer_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) ); CREATE TABLE Stores ( Store_ID VARCHAR(100) NOT NULL, Address_ID INTEGER NOT NULL, Marketing_Region_Code CHAR(15) NOT NULL, Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Store_ID), UNIQUE (Store_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID), FOREIGN KEY (Marketing_Region_Code) REFERENCES Marketing_Regions (Marketing_Region_Code) ); CREATE TABLE Bookings ( Booking_ID INTEGER NOT NULL , Customer_ID INTEGER NOT NULL, Workshop_Group_ID VARCHAR(100) NOT NULL, Status_Code CHAR(15) NOT NULL, Store_ID INTEGER NOT NULL, Order_Date DATETIME NOT NULL, Planned_Delivery_Date DATETIME NOT NULL, Actual_Delivery_Date DATETIME NOT NULL, Other_Order_Details VARCHAR(255), PRIMARY KEY (Booking_ID), UNIQUE (Booking_ID), FOREIGN KEY (Customer_ID) REFERENCES Clients (Client_ID), FOREIGN KEY (Workshop_Group_ID) REFERENCES Drama_Workshop_Groups (Workshop_Group_ID) ); CREATE TABLE Performers_in_Bookings ( Order_ID INTEGER NOT NULL, Performer_ID INTEGER NOT NULL, PRIMARY KEY (Order_ID, Performer_ID), FOREIGN KEY (Performer_ID) REFERENCES Performers (Performer_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID) ); CREATE TABLE Customer_Orders ( Order_ID INTEGER NOT NULL , Customer_ID INTEGER NOT NULL, Store_ID INTEGER NOT NULL, Order_Date DATETIME NOT NULL, Planned_Delivery_Date DATETIME NOT NULL, Actual_Delivery_Date DATETIME NOT NULL, Other_Order_Details VARCHAR(255), PRIMARY KEY (Order_ID), UNIQUE (Order_ID), FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY (Store_ID) REFERENCES Stores (Store_ID) ); CREATE TABLE Order_Items ( Order_Item_ID INTEGER NOT NULL , Order_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), PRIMARY KEY (Order_Item_ID), FOREIGN KEY (Order_ID) REFERENCES Customer_Orders (Order_ID), FOREIGN KEY (Product_ID) REFERENCES Products (Product_ID) ); CREATE TABLE Invoices ( Invoice_ID INTEGER NOT NULL, Order_ID INTEGER NOT NULL, payment_method_code CHAR(15), Product_ID INTEGER NOT NULL, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), Order_Item_ID INTEGER NOT NULL, PRIMARY KEY (Invoice_ID), FOREIGN KEY (Order_ID) REFERENCES Customer_Orders (Order_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID), FOREIGN KEY (payment_method_code) REFERENCES Ref_Payment_Methods (payment_method_code) ); CREATE TABLE Services ( Service_ID INTEGER NOT NULL, Service_Type_Code CHAR(15), Workshop_Group_ID INTEGER NOT NULL, Product_Description VARCHAR(255), Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Other_Product_Service_Details VARCHAR(255), PRIMARY KEY (Service_ID), UNIQUE (Service_ID), FOREIGN KEY (Workshop_Group_ID) REFERENCES Drama_Workshop_Groups (Workshop_Group_ID), FOREIGN KEY (Service_Type_Code) REFERENCES Ref_Service_Types (Service_Type_Code) ); CREATE TABLE Bookings_Services ( Order_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, PRIMARY KEY (Order_ID, Product_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID), FOREIGN KEY (Product_ID) REFERENCES Services (Service_ID) );  CREATE TABLE Invoice_Items ( Invoice_Item_ID INTEGER NOT NULL , Invoice_ID INTEGER NOT NULL, Order_ID INTEGER NOT NULL, Order_Item_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, Order_Quantity INTEGER, Other_Item_Details VARCHAR(255), PRIMARY KEY (Invoice_Item_ID), FOREIGN KEY (Order_Item_ID) REFERENCES Order_Items (Order_Item_ID), FOREIGN KEY (Invoice_ID) REFERENCES Invoices (Invoice_ID), FOREIGN KEY (Order_ID, Product_ID) REFERENCES Bookings_Services (Order_ID,Product_ID) ); "
194,4642,medium,inn_1,"SELECT decor ,  count(*) FROM Rooms WHERE bedType = ""King"" GROUP BY decor;",Find the number of rooms with king bed for each decor type.,"CREATE TABLE ""Rooms"" (  	""RoomId"" TEXT PRIMARY KEY, 	""roomName"" TEXT,  	""beds"" INTEGER,  	""bedType"" TEXT,  	""maxOccupancy"" INTEGER,  	""basePrice"" INTEGER,  	""decor"" TEXT  );  CREATE TABLE ""Reservations"" (  	""Code"" INTEGER PRIMARY KEY,  	""Room"" TEXT,  	""CheckIn"" TEXT,  	""CheckOut"" TEXT,  	""Rate"" REAL,  	""LastName"" TEXT,  	""FirstName"" TEXT,  	""Adults"" INTEGER,  	""Kids"" INTEGER, 	FOREIGN KEY (Room) REFERENCES Rooms(RoomId) ); "
195,6601,medium,aircraft,"SELECT max(Transit_Passengers) ,  min(Transit_Passengers) FROM airport",What are the maximum and minimum number of transit passengers of all aiports.," PRAGMA foreign_keys = ON;   CREATE TABLE `pilot` (   `Pilot_Id` int(11) NOT NULL,   `Name` varchar(50) NOT NULL,   `Age` int(11) NOT NULL,   PRIMARY KEY (`Pilot_Id`) );  CREATE TABLE `aircraft` (   ""Aircraft_ID"" int(11) NOT NULL,   ""Aircraft"" varchar(50) NOT NULL,   ""Description"" varchar(50) NOT NULL,   ""Max_Gross_Weight"" varchar(50) NOT NULL,   ""Total_disk_area"" varchar(50) NOT NULL,   ""Max_disk_Loading"" varchar(50) NOT NULL,   PRIMARY KEY (`Aircraft_ID`) );   CREATE TABLE `match` ( ""Round"" real, ""Location"" text, ""Country"" text, ""Date"" text, ""Fastest_Qualifying"" text, ""Winning_Pilot"" text, ""Winning_Aircraft"" text, PRIMARY KEY (""Round""), FOREIGN KEY (`Winning_Aircraft`) REFERENCES `aircraft`(`Aircraft_ID`), FOREIGN KEY (`Winning_Pilot`) REFERENCES `pilot`(`Pilot_Id`) );  CREATE TABLE `airport` ( ""Airport_ID"" int, ""Airport_Name"" text, ""Total_Passengers"" real, ""%_Change_2007"" text, ""International_Passengers"" real, ""Domestic_Passengers"" real, ""Transit_Passengers"" real, ""Aircraft_Movements"" real, ""Freight_Metric_Tonnes"" real, PRIMARY KEY (""Airport_ID"") );  CREATE TABLE `airport_aircraft` ( ""ID"" int, ""Airport_ID"" int, ""Aircraft_ID"" int, PRIMARY KEY (""Airport_ID"",""Aircraft_ID""), FOREIGN KEY (""Airport_ID"") REFERENCES `airport`(`Airport_ID`), FOREIGN KEY (""Aircraft_ID"") REFERENCES `aircraft`(`Aircraft_ID`) );    "
196,82,medium,pets_1,"SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",What is the first name and gender of the all the students who have more than one pet?,"create table Student (        StuID    	INTEGER PRIMARY KEY,        LName		VARCHAR(12),        Fname		VARCHAR(12),        Age		INTEGER,        Sex		VARCHAR(1),        Major		INTEGER,        Advisor		INTEGER,        city_code	VARCHAR(3) );  create table Has_Pet (        StuID		INTEGER,        PetID		INTEGER,        FOREIGN KEY(PetID) REFERENCES Pets(PetID),        FOREIGN KEY(StuID) REFERENCES Student(StuID) );  create table Pets (        PetID		INTEGER PRIMARY KEY,        PetType		VARCHAR(20),        pet_age INTEGER,        weight REAL );  "
197,7415,medium,customers_and_products_contacts,"SELECT T1.product_name ,  sum(T2.order_quantity) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id",Show the product name and total order quantity for each product.,"PRAGMA foreign_keys = ON; CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `line_1_number_building` VARCHAR(80), `city` VARCHAR(50), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(50), `country` VARCHAR(50) );  CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_type_code` VARCHAR(15), `product_name` VARCHAR(80), `product_price` DOUBLE NULL ); CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `payment_method_code` VARCHAR(15), `customer_number` VARCHAR(20), `customer_name` VARCHAR(80), `customer_address` VARCHAR(255), `customer_phone` VARCHAR(80), `customer_email` VARCHAR(80) ); CREATE TABLE `Contacts` ( `contact_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `gender` VARCHAR(1), `first_name` VARCHAR(80), `last_name` VARCHAR(50), `contact_phone` VARCHAR(80) );  CREATE TABLE `Customer_Address_History` ( `customer_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_from` DATETIME NOT NULL, `date_to` DATETIME, FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ) ); CREATE TABLE `Customer_Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `order_date` DATETIME NOT NULL, `order_status_code` VARCHAR(15), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) );  CREATE TABLE `Order_Items` ( `order_item_id` INTEGER NOT NULL , `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, `order_quantity` VARCHAR(80), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ), FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ) ); "
198,4499,medium,movie_1,SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  3,What are the names of all reviewers that have rated 3 or more movies?,"-- dbext:type=SQLITE:dbname=movie_rating.db  /* Delete the tables if they already exist */ drop table if exists Movie; drop table if exists Reviewer; drop table if exists Rating;  /* Create the schema for our tables */ create table Movie( 	mID int primary key,  	title text,  	year int,  	director text ); create table Reviewer( 	rID int primary key,  	name text);  create table Rating( 	rID int,  	mID int,  	stars int,  	ratingDate date, 	FOREIGN KEY (mID) references Movie(mID), 	FOREIGN KEY (rID) references Reviewer(rID) );  /* Populate the tables with our data */ "
199,4300,medium,entrepreneur,"SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != ""Rachel Elnaugh""",Return the names of entrepreneurs do no not have the investor Rachel Elnaugh.,"PRAGMA foreign_keys = ON;  CREATE TABLE ""entrepreneur"" ( ""Entrepreneur_ID"" int, ""People_ID"" int, ""Company"" text, ""Money_Requested"" real, ""Investor"" text, PRIMARY KEY (""Entrepreneur_ID""), FOREIGN KEY (""People_ID"") REFERENCES ""people""(""People_ID"") );  CREATE TABLE ""people"" ( ""People_ID"" int, ""Name"" text, ""Height"" real, ""Weight"" real, ""Date_of_Birth"" text, PRIMARY KEY (""People_ID"") );   "
