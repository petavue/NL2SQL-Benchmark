{'geo': [{'question': 'where is the lowest point in the us', 'sql_query': 'SELECT lowest_point FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow );', 'db_id': 'geo'}, {'question': 'how many citizens does the biggest city have in the usa', 'sql_query': 'SELECT population FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );', 'db_id': 'geo'}, {'question': 'what are the names of the major cities in kansas', 'sql_query': 'SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  "kansas";', 'db_id': 'geo'}, {'question': 'how many major cities are there in texas', 'sql_query': 'SELECT COUNT ( city_name ) FROM city WHERE population  >  150000 AND state_name  =  "texas";', 'db_id': 'geo'}, {'question': 'what are the populations of all the major cities in wisconsin', 'sql_query': 'SELECT population FROM city WHERE population  >  150000 AND state_name  =  "wisconsin";', 'db_id': 'geo'}], 'cre_Doc_Control_Systems': [{'question': "List the employees who have not showed up in any circulation history of documents. List the employee's name.", 'sql_query': 'SELECT employee_name FROM Employees EXCEPT SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id', 'db_id': 'cre_Doc_Control_Systems'}, {'question': 'Which document has the most draft copies? List its document id and number of draft copies.', 'sql_query': 'SELECT document_id , count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT 1;', 'db_id': 'cre_Doc_Control_Systems'}, {'question': 'What is the document status description of the document with id 1?', 'sql_query': 'SELECT Ref_Document_Status.document_status_description FROM Ref_Document_Status JOIN Documents ON Documents.document_status_code = Ref_Document_Status.document_status_code WHERE Documents.document_id = 1;', 'db_id': 'cre_Doc_Control_Systems'}, {'question': 'For each document, list the number of employees who have showed up in the circulation history of that document. List the document ids and number of employees.', 'sql_query': 'SELECT document_id ,  count(DISTINCT employee_id) FROM Circulation_History GROUP BY document_id;', 'db_id': 'cre_Doc_Control_Systems'}, {'question': 'List the document ids for any documents with the status code done and the type code paper.', 'sql_query': 'SELECT document_id FROM Documents WHERE document_status_code = "done" AND document_type_code = "Paper";', 'db_id': 'cre_Doc_Control_Systems'}], 'student_transcripts_tracking': [{'question': 'What is the name of the semester with no students enrolled?', 'sql_query': 'SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )', 'db_id': 'student_transcripts_tracking'}, {'question': 'Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .', 'sql_query': "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'", 'db_id': 'student_transcripts_tracking'}, {'question': 'What is the date and id of the transcript with at least 2 courses listed?', 'sql_query': 'SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2', 'db_id': 'student_transcripts_tracking'}, {'question': 'What is the first, middle, and last name of the first student to register?', 'sql_query': 'SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1', 'db_id': 'student_transcripts_tracking'}, {'question': 'What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?', 'sql_query': 'SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2', 'db_id': 'student_transcripts_tracking'}], 'product_catalog': [{'question': 'Which catalog publisher has published the most catalogs?', 'sql_query': 'SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1', 'db_id': 'product_catalog'}, {'question': 'Find the catalog publisher that has the most catalogs.', 'sql_query': 'SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1', 'db_id': 'product_catalog'}, {'question': 'Which catalog publishers have substring "Murray" in their names?', 'sql_query': 'SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE "%Murray%"', 'db_id': 'product_catalog'}, {'question': 'Which catalog content has the smallest capacity? Return the catalog entry name.', 'sql_query': 'SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1', 'db_id': 'product_catalog'}, {'question': 'Find the name and capacity of products with price greater than 700 (in USD).', 'sql_query': 'SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700', 'db_id': 'product_catalog'}], 'wta_1': [{'question': 'find the code of the country where has the greatest number of players.', 'sql_query': 'SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1', 'db_id': 'wta_1'}, {'question': 'Find the first name and country code of the player who did the most number of tours.', 'sql_query': 'SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1', 'db_id': 'wta_1'}, {'question': 'How many players are there for each hand type?', 'sql_query': 'SELECT count(*) ,  hand FROM players GROUP BY hand', 'db_id': 'wta_1'}, {'question': 'Find the number of left handed winners who participated in the WTA Championships.', 'sql_query': "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", 'db_id': 'wta_1'}, {'question': 'Find the total number of tours for each ranking date.', 'sql_query': 'SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date', 'db_id': 'wta_1'}], 'insurance_and_eClaims': [{'question': 'Find the type code of the most frequently used policy.', 'sql_query': 'SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1', 'db_id': 'insurance_and_eClaims'}, {'question': 'Which type of policy is most frequently used? Give me the policy type code.', 'sql_query': 'SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1', 'db_id': 'insurance_and_eClaims'}, {'question': 'For each policy type, return its type code and its count in the record.', 'sql_query': 'SELECT policy_type_code ,  count(*) FROM policies GROUP BY policy_type_code', 'db_id': 'insurance_and_eClaims'}, {'question': 'Which customers have an insurance policy with the type code "Deputy"? Give me the customer details.', 'sql_query': 'SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  "Deputy"', 'db_id': 'insurance_and_eClaims'}, {'question': 'What are the type codes of the policies used by the customer "Dayana Robel"?', 'sql_query': 'SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  "Dayana Robel"', 'db_id': 'insurance_and_eClaims'}], 'document_management': [{'question': 'What is the average access count of documents that have the least common structure?', 'sql_query': 'SELECT avg(access_count) FROM documents GROUP BY document_structure_code ORDER BY count(*) ASC LIMIT 1', 'db_id': 'document_management'}, {'question': 'What is the total access count of documents that are of the most common document type?', 'sql_query': 'SELECT sum(access_count) FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1', 'db_id': 'document_management'}, {'question': 'Find the name of the document that has been accessed the greatest number of times, as well as the count of how many times it has been accessed?', 'sql_query': 'SELECT document_name ,  access_count FROM documents ORDER BY access_count DESC LIMIT 1', 'db_id': 'document_management'}, {'question': 'Give the section titles of the document with the name "David CV".', 'sql_query': 'SELECT t2.section_title FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code WHERE t1.document_name  =  "David CV"', 'db_id': 'document_management'}, {'question': 'List all the document names which contains "CV".', 'sql_query': 'SELECT document_name FROM documents WHERE document_name LIKE "%CV%"', 'db_id': 'document_management'}], 'club_1': [{'question': 'Find all members of "Bootup Baltimore" whose major is "600". Show the first name and last name.', 'sql_query': 'SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  "Bootup Baltimore" AND t3.major  =  "600"', 'db_id': 'club_1'}, {'question': 'Return the last name for the members of the club named "Hopkins Student Enterprises".', 'sql_query': 'SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  "Hopkins Student Enterprises"', 'db_id': 'club_1'}, {'question': 'Who are the members of the club named "Hopkins Student Enterprises"? Show the last name.', 'sql_query': 'SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  "Hopkins Student Enterprises"', 'db_id': 'club_1'}, {'question': 'Who is the "CTO" of club "Hopkins Student Enterprises"? Show the first name and last name.', 'sql_query': 'SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  "Hopkins Student Enterprises" AND t2.position  =  "CTO"', 'db_id': 'club_1'}, {'question': 'How many different roles are there in the club "Bootup Baltimore"?', 'sql_query': 'SELECT count(DISTINCT t2.position) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid WHERE t1.clubname  =  "Bootup Baltimore"', 'db_id': 'club_1'}, {'question': 'Count the number of different positions in the club "Bootup Baltimore".', 'sql_query': 'SELECT count(DISTINCT t2.position) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid WHERE t1.clubname  =  "Bootup Baltimore"', 'db_id': 'club_1'}], 'phone_1': [{'question': 'Find the names of the chip models that are not used by any phone with full accreditation type.', 'sql_query': "SELECT model_name FROM chip_model EXCEPT SELECT chip_model FROM phone WHERE Accreditation_type  =  'Full'", 'db_id': 'phone_1'}, {'question': 'List the hardware model name and company name for all the phones that were launched in year 2002 or have RAM size greater than 32.', 'sql_query': 'SELECT T2.Hardware_Model_name ,  T2.Company_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 OR T1.RAM_MiB  >  32;', 'db_id': 'phone_1'}, {'question': 'What are the chip model and screen mode of the phone with hardware model name "LG-P760"?', 'sql_query': 'SELECT chip_model ,  screen_mode FROM phone WHERE Hardware_Model_name = "LG-P760";', 'db_id': 'phone_1'}, {'question': 'How many phones belongs to each accreditation type?', 'sql_query': 'SELECT Accreditation_type ,  count(*) FROM phone GROUP BY Accreditation_type', 'db_id': 'phone_1'}, {'question': 'List the hardware model name and company name for the phone whose screen mode type is "Graphics."', 'sql_query': 'SELECT T2.Hardware_Model_name ,  T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  "Graphics";', 'db_id': 'phone_1'}], 'soccer_2': [{'question': 'Find names of all colleges whose enrollment is greater than that of all colleges in the FL state.', 'sql_query': "SELECT cName FROM college WHERE enr  >  (SELECT max(enr) FROM college WHERE state  =  'FL')", 'db_id': 'soccer_2'}, {'question': 'What is the number of states that has some college whose enrollment is larger than the average enrollment?', 'sql_query': 'SELECT count(DISTINCT state) FROM college WHERE enr  >  (SELECT avg(enr) FROM college)', 'db_id': 'soccer_2'}, {'question': 'What college has a student who successfully made the team in the role of a goalie?', 'sql_query': "SELECT cName FROM  tryout WHERE decision  =  'yes' AND pPos  =  'goalie'", 'db_id': 'soccer_2'}, {'question': 'What are the states of the colleges where students who tried out for the striker position attend?', 'sql_query': "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'striker'", 'db_id': 'soccer_2'}, {'question': 'Who are the players that have names containing the letter a?', 'sql_query': "SELECT DISTINCT pName FROM Player WHERE pName LIKE '%a%'", 'db_id': 'soccer_2'}], 'wrestler': [{'question': 'List the names of wrestlers that have not been eliminated.', 'sql_query': 'SELECT Name FROM wrestler WHERE Wrestler_ID NOT IN (SELECT Wrestler_ID FROM elimination)', 'db_id': 'wrestler'}, {'question': 'Show the teams that have both wrestlers eliminated by "Orton" and wrestlers eliminated by "Benjamin".', 'sql_query': 'SELECT Team FROM Elimination WHERE Eliminated_By  =  "Orton" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  "Benjamin"', 'db_id': 'wrestler'}, {'question': 'Show the times of elimination by "Punk" or "Orton".', 'sql_query': 'SELECT TIME FROM elimination WHERE Eliminated_By  =  "Punk" OR Eliminated_By  =  "Orton"', 'db_id': 'wrestler'}, {'question': 'Show times of elimination of wrestlers with days held more than 50.', 'sql_query': 'SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  50', 'db_id': 'wrestler'}, {'question': 'What are the names of wrestlers and their teams in elimination, ordered descending by days held?', 'sql_query': 'SELECT T2.Name ,  T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC', 'db_id': 'wrestler'}], 'race_track': [{'question': 'Give the class of races that is most common.', 'sql_query': 'SELECT CLASS FROM race GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1', 'db_id': 'race_track'}, {'question': "Give the names of tracks that do not have a race in the class 'GT'.", 'sql_query': "SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'", 'db_id': 'race_track'}, {'question': 'What are the names and locations of all tracks?', 'sql_query': 'SELECT name ,  LOCATION FROM track', 'db_id': 'race_track'}, {'question': 'What are the names of different tracks, and how many races has each had?', 'sql_query': 'SELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id', 'db_id': 'race_track'}, {'question': 'What are the names and locations of tracks that have had exactly 1 race?', 'sql_query': 'SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1', 'db_id': 'race_track'}], 'match_season': [{'question': 'What are the names of teams that do no have match season record?', 'sql_query': 'SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)', 'db_id': 'match_season'}, {'question': 'Return the colleges that have players who play the Midfielder position, as well as players who play the Defender position.', 'sql_query': 'SELECT College FROM match_season WHERE POSITION  =  "Midfielder" INTERSECT SELECT College FROM match_season WHERE POSITION  =  "Defender"', 'db_id': 'match_season'}, {'question': 'Show the positions of the players from the team with name "Ryley Goldner".', 'sql_query': 'SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  "Ryley Goldner"', 'db_id': 'match_season'}, {'question': 'What are the official native languages that contain the string "English".', 'sql_query': 'SELECT Official_native_language FROM country WHERE Official_native_language LIKE "%English%"', 'db_id': 'match_season'}, {'question': 'Give the different positions of players who play for the country with the capital Dublin.', 'sql_query': 'SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  "Dublin"', 'db_id': 'match_season'}], 'dorm_1': [{'question': 'How many female students live in Smith Hall?', 'sql_query': "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'", 'db_id': 'dorm_1'}, {'question': 'What are the names of the dorm that does not have a TV Lounge?', 'sql_query': "SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge'", 'db_id': 'dorm_1'}, {'question': 'Find the number of dorms and total capacity for each gender.', 'sql_query': 'SELECT count(*) ,  sum(student_capacity) ,  gender FROM dorm GROUP BY gender', 'db_id': 'dorm_1'}, {'question': 'What is the first name of the students who are in age 20 to 25 and living in PHL city?', 'sql_query': "SELECT fname FROM student WHERE city_code  =  'PHL' AND age BETWEEN 20 AND 25", 'db_id': 'dorm_1'}, {'question': 'How many students are from each city, and which cities have more than one cities?', 'sql_query': 'SELECT count(*) ,  city_code FROM student GROUP BY city_code HAVING count(*)  >  1', 'db_id': 'dorm_1'}], 'department_management': [{'question': 'In which year were most departments established?', 'sql_query': 'SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1', 'db_id': 'department_management'}, {'question': "What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?", 'sql_query': "SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T3.born_state  =  'Alabama'", 'db_id': 'department_management'}, {'question': 'What are the distinct ages of the heads who are acting?', 'sql_query': "SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id  =  T2.head_id WHERE T2.temporary_acting  =  'Yes'", 'db_id': 'department_management'}, {'question': 'List the name, born state and age of the heads of departments ordered by age.', 'sql_query': 'SELECT name ,  born_state ,  age FROM head ORDER BY age', 'db_id': 'department_management'}, {'question': "Which head's name has the substring 'Ha'? List the id and name.", 'sql_query': "SELECT head_id ,  name FROM head WHERE name LIKE '%Ha%'", 'db_id': 'department_management'}], 'cre_Doc_Tracking_DB': [{'question': 'Find the code of the location with the largest number of documents.', 'sql_query': 'SELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC LIMIT 1', 'db_id': 'cre_Doc_Tracking_DB'}, {'question': 'What are the employee ids of the employees whose role name is "Human Resource" or "Manager"?', 'sql_query': 'SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  "Human Resource" OR T2.role_name  =  "Manager"', 'db_id': 'cre_Doc_Tracking_DB'}, {'question': 'What are the id of each employee and the number of document destruction authorised by that employee?', 'sql_query': 'SELECT Destruction_Authorised_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID', 'db_id': 'cre_Doc_Tracking_DB'}, {'question': 'List all location codes and location names.', 'sql_query': 'SELECT location_code ,  location_name FROM Ref_locations', 'db_id': 'cre_Doc_Tracking_DB'}, {'question': 'Show all role codes and the number of employees in each role.', 'sql_query': 'SELECT role_code ,  count(*) FROM Employees GROUP BY role_code', 'db_id': 'cre_Doc_Tracking_DB'}], 'inn_1': [{'question': 'What are the name of rooms booked by customers whose first name has "ROY" in part?', 'sql_query': "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE firstname LIKE '%ROY%'", 'db_id': 'inn_1'}, {'question': 'What are the name of rooms that cost more than the average.', 'sql_query': 'SELECT roomName FROM Rooms WHERE basePrice  >  ( SELECT avg(basePrice) FROM Rooms );', 'db_id': 'inn_1'}, {'question': 'List how many times the number of people in the room reached the maximum occupancy of the room. The number of people include adults and kids.', 'sql_query': 'SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids;', 'db_id': 'inn_1'}, {'question': 'What are the names of rooms whose reservation frequency exceeds 60 times?', 'sql_query': 'SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room HAVING count(*)  >  60', 'db_id': 'inn_1'}, {'question': 'Which room has the highest base price?', 'sql_query': 'SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1;', 'db_id': 'inn_1'}], 'customers_and_addresses': [{'question': 'Who made the latest order?', 'sql_query': 'SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.order_date DESC LIMIT 1', 'db_id': 'customers_and_addresses'}, {'question': 'What is the address content of the customer named "Maudie Kertzmann"?', 'sql_query': 'SELECT t3.address_content FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t1.customer_name  =  "Maudie Kertzmann"', 'db_id': 'customers_and_addresses'}, {'question': 'What is the "active to date" of the latest contact channel used by "Tillman Ernser"?', 'sql_query': 'SELECT max(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  "Tillman Ernser"', 'db_id': 'customers_and_addresses'}, {'question': 'Find the contact channel code that was used by the customer named "Tillman Ernser".', 'sql_query': 'SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  "Tillman Ernser"', 'db_id': 'customers_and_addresses'}, {'question': 'Which customer\'s name contains "Alex"? Find the full name.', 'sql_query': 'SELECT customer_name FROM customers WHERE customer_name LIKE "%Alex%"', 'db_id': 'customers_and_addresses'}], 'customers_card_transactions': [{'question': 'Show the customer id and number of accounts with most accounts.', 'sql_query': 'SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1', 'db_id': 'customers_card_transactions'}, {'question': 'What is the customer id with most number of cards, and how many does he have?', 'sql_query': 'SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1', 'db_id': 'customers_card_transactions'}, {'question': 'Show all customer ids and the number of cards owned by each customer.', 'sql_query': 'SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id', 'db_id': 'customers_card_transactions'}, {'question': 'Show distinct first and last names for all customers with an account.', 'sql_query': 'SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id', 'db_id': 'customers_card_transactions'}, {'question': 'How many cards does customer Art Turcotte have?', 'sql_query': 'SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  "Art" AND T2.customer_last_name  =  "Turcotte"', 'db_id': 'customers_card_transactions'}], 'cre_Drama_Workshop_Groups': [{'question': 'What is the payment method code used by the most orders?', 'sql_query': 'SELECT payment_method_code FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1', 'db_id': 'cre_Drama_Workshop_Groups'}, {'question': 'What are the order dates of orders with price higher than 1000?', 'sql_query': 'SELECT T1.Order_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID JOIN Products AS T3 ON T2.Product_ID  =  T3.Product_ID WHERE T3.Product_price  >  1000', 'db_id': 'cre_Drama_Workshop_Groups'}, {'question': 'What are the different product names? What is the average product price for each of them?', 'sql_query': 'SELECT Product_Name ,  avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name', 'db_id': 'cre_Drama_Workshop_Groups'}, {'question': 'What is the name of the marketing region that the store Rob Dinning belongs to?', 'sql_query': 'SELECT T1.Marketing_Region_Name FROM Marketing_Regions AS T1 JOIN Stores AS T2 ON T1.Marketing_Region_Code  =  T2.Marketing_Region_Code WHERE T2.Store_Name  =  "Rob Dinning"', 'db_id': 'cre_Drama_Workshop_Groups'}, {'question': 'List the distinct payment method codes with the number of orders made', 'sql_query': 'SELECT payment_method_code ,  count(*) FROM INVOICES GROUP BY payment_method_code', 'db_id': 'cre_Drama_Workshop_Groups'}], 'baseball_1': [{'question': 'What are the three countries that the least players are from?', 'sql_query': 'SELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT 3;', 'db_id': 'baseball_1'}, {'question': 'How much salary did the top 3 well-paid players get in 2001?', 'sql_query': 'SELECT salary FROM salary WHERE YEAR  =  2001 ORDER BY salary DESC LIMIT 3;', 'db_id': 'baseball_1'}, {'question': 'What is the total salary paid by team Boston Red Stockings in 2010?', 'sql_query': "SELECT sum(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2010", 'db_id': 'baseball_1'}, {'question': 'List the maximum scores of the team Boston Red Stockings when the team won in postseason?', 'sql_query': "SELECT max(T1.wins) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings';", 'db_id': 'baseball_1'}, {'question': 'How many players enter hall of fame each year?', 'sql_query': 'SELECT yearid ,  count(*) FROM hall_of_fame GROUP BY yearid;', 'db_id': 'baseball_1'}], 'cre_Theme_park': [{'question': "Show the tourist attractions visited by the tourist whose detail is 'Vincent'.", 'sql_query': 'SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID JOIN VISITORS AS T3 ON T2.Tourist_ID  =  T3.Tourist_ID WHERE T3.Tourist_Details  =  "Vincent"', 'db_id': 'cre_Theme_park'}, {'question': 'Which transportation method is used the most often to get to tourist attractions?', 'sql_query': 'SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'cre_Theme_park'}, {'question': 'What are the names and descriptions of the photos taken at the tourist attraction "film festival"?', 'sql_query': 'SELECT T1.Name ,  T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  "film festival"', 'db_id': 'cre_Theme_park'}, {'question': 'Show the id and star rating of each hotel, ordered by its price from low to high.', 'sql_query': 'SELECT hotel_id ,  star_rating_code FROM HOTELS ORDER BY price_range ASC', 'db_id': 'cre_Theme_park'}, {'question': "Find the visit date and details of the tourist whose detail is 'Vincent'", 'sql_query': 'SELECT T2.Visit_Date ,  T2.Visit_Details FROM VISITORS AS T1 JOIN VISITS AS T2 ON T1.Tourist_ID  =  T2.Tourist_ID WHERE T1.Tourist_Details  =  "Vincent"', 'db_id': 'cre_Theme_park'}], 'cinema': [{'question': 'Show all the locations where no cinema has capacity over 800.', 'sql_query': 'SELECT LOCATION FROM cinema EXCEPT SELECT LOCATION FROM cinema WHERE capacity  >  800', 'db_id': 'cinema'}, {'question': 'Show all the locations where some cinemas were opened in both year 2010 and year 2011.', 'sql_query': 'SELECT LOCATION FROM cinema WHERE openning_year  =  2010 INTERSECT SELECT LOCATION FROM cinema WHERE openning_year  =  2011', 'db_id': 'cinema'}, {'question': 'Show each location and the number of cinemas there.', 'sql_query': 'SELECT LOCATION ,  count(*) FROM cinema GROUP BY LOCATION', 'db_id': 'cinema'}, {'question': 'Show cinema name, film title, date, and price for each record in schedule.', 'sql_query': 'SELECT T3.name ,  T2.title ,  T1.date ,  T1.price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id JOIN cinema AS T3 ON T1.cinema_id  =  T3.cinema_id', 'db_id': 'cinema'}, {'question': "Count the number of films whose title contains the word 'Dummy'.", 'sql_query': 'SELECT count(*) FROM film WHERE title LIKE "%Dummy%"', 'db_id': 'cinema'}], 'apartment_rentals': [{'question': 'Which apartment type code appears the most often?', 'sql_query': 'SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1', 'db_id': 'apartment_rentals'}, {'question': 'What are the top three apartment types in terms of the average room count? Give me the', 'sql_query': 'SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 3', 'db_id': 'apartment_rentals'}, {'question': 'Show the distinct apartment numbers of the apartments that have bookings with status code "Confirmed".', 'sql_query': 'SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  "Confirmed"', 'db_id': 'apartment_rentals'}, {'question': 'Show the apartment type codes and apartment numbers in the buildings managed by "Kyle".', 'sql_query': 'SELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  "Kyle"', 'db_id': 'apartment_rentals'}, {'question': 'Return each apartment type code along with the maximum and minimum number of rooms among each type.', 'sql_query': 'SELECT apt_type_code ,  max(room_count) ,  min(room_count) FROM Apartments GROUP BY apt_type_code', 'db_id': 'apartment_rentals'}], 'station_weather': [{'question': 'Find names and times of trains that run through stations for the local authority Chiltern.', 'sql_query': 'SELECT t3.name ,  t3.time FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id JOIN train AS t3 ON t2.train_id  =  t3.id WHERE t1.local_authority  =  "Chiltern"', 'db_id': 'station_weather'}, {'question': 'list the local authorities and services provided by all stations.', 'sql_query': 'SELECT local_authority ,  services FROM station', 'db_id': 'station_weather'}, {'question': 'Give me the times and numbers of all trains that go to Chennai, ordered by time.', 'sql_query': "SELECT TIME ,  train_number FROM train WHERE destination  =  'Chennai' ORDER BY TIME", 'db_id': 'station_weather'}, {'question': 'What is the average high temperature for each day of week?', 'sql_query': 'SELECT avg(high_temperature) ,  day_of_week FROM weekly_weather GROUP BY day_of_week', 'db_id': 'station_weather'}, {'question': 'Find the id and local authority of the station whose maximum precipitation is higher than 50.', 'sql_query': 'SELECT t2.id ,  t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id GROUP BY t1.station_id HAVING max(t1.precipitation)  >  50', 'db_id': 'station_weather'}], 'local_govt_in_alabama': [{'question': 'What is the id of the event with the most participants?', 'sql_query': 'SELECT Event_ID FROM Participants_in_Events GROUP BY Event_ID ORDER BY count(*) DESC LIMIT 1', 'db_id': 'local_govt_in_alabama'}, {'question': "Which events id does not have any participant with detail 'Kenyatta Kuhn'?", 'sql_query': "SELECT event_id FROM EVENTS EXCEPT SELECT T1.event_id FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE Participant_Details  =  'Kenyatta Kuhn'", 'db_id': 'local_govt_in_alabama'}, {'question': 'What are all the the participant ids, type code and details?', 'sql_query': 'SELECT Participant_ID ,  Participant_Type_Code ,  Participant_Details FROM  Participants', 'db_id': 'local_govt_in_alabama'}, {'question': 'How many events have each participants attended? List the participant id, type and the number.', 'sql_query': 'SELECT T1.Participant_ID ,  T1.Participant_Type_Code ,  count(*) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID GROUP BY T1.Participant_ID', 'db_id': 'local_govt_in_alabama'}, {'question': "what are the event details of the services that have the type code 'Marriage'?", 'sql_query': "SELECT T1.event_details FROM EVENTS AS T1 JOIN Services AS T2 ON T1.Service_ID  =  T2.Service_ID WHERE T2.Service_Type_Code  =  'Marriage'", 'db_id': 'local_govt_in_alabama'}], 'game_1': [{'question': 'What are the ids of all female students who play football?', 'sql_query': 'SELECT StuID FROM Student WHERE sex  =  \'F\' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname  =  "Football"', 'db_id': 'game_1'}, {'question': 'Which game type has most number of games?', 'sql_query': 'SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) DESC LIMIT 1', 'db_id': 'game_1'}, {'question': 'What are the names of all the games that have been played for at least 1000 hours?', 'sql_query': 'SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid HAVING sum(hours_played)  >=  1000', 'db_id': 'game_1'}, {'question': 'How many students play each sport?', 'sql_query': 'SELECT sportname ,  count(*) FROM Sportsinfo GROUP BY sportname', 'db_id': 'game_1'}, {'question': 'What are the names of all the video games and their types in alphabetical order?', 'sql_query': 'SELECT gname ,  gtype FROM Video_games ORDER BY gname', 'db_id': 'game_1'}], 'employee_hire_evaluation': [{'question': 'Find the name of the shops that do not hire any employee.', 'sql_query': 'SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)', 'db_id': 'employee_hire_evaluation'}, {'question': 'Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.', 'sql_query': 'SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000', 'db_id': 'employee_hire_evaluation'}, {'question': 'Find the number of shops in each location.', 'sql_query': 'SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION', 'db_id': 'employee_hire_evaluation'}, {'question': 'For each shop, return the number of employees working there and the name of the shop.', 'sql_query': 'SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name', 'db_id': 'employee_hire_evaluation'}, {'question': 'Find the cities that have more than one employee under age 30.', 'sql_query': 'SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1', 'db_id': 'employee_hire_evaluation'}], 'train_station': [{'question': 'Show station names without any trains.', 'sql_query': 'SELECT name FROM station WHERE station_id NOT IN (SELECT station_id FROM train_station)', 'db_id': 'train_station'}, {'question': 'What is the average and maximum number of total passengers for train stations in London or Glasgow?', 'sql_query': "SELECT avg(total_passengers) ,  max(total_passengers) FROM station WHERE LOCATION  =  'London' OR LOCATION  =  'Glasgow'", 'db_id': 'train_station'}, {'question': 'Show all locations that have train stations with at least 15 platforms and train stations with more than 25 total passengers.', 'sql_query': 'SELECT DISTINCT LOCATION FROM station WHERE number_of_platforms  >=  15 AND total_passengers  >  25', 'db_id': 'train_station'}, {'question': 'Show the station name and number of trains in each station.', 'sql_query': 'SELECT T2.name ,  count(*) FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id', 'db_id': 'train_station'}, {'question': 'show the train name and station name for each train.', 'sql_query': 'SELECT T2.name ,  T3.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id', 'db_id': 'train_station'}], 'musical': [{'question': 'List the most common result of the musicals.', 'sql_query': 'SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'musical'}, {'question': 'Who is the nominee who has been nominated for the most musicals?', 'sql_query': 'SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'musical'}, {'question': 'Show names of actors that have appeared in musical with name "The Phantom of the Opera".', 'sql_query': 'SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  "The Phantom of the Opera"', 'db_id': 'musical'}, {'question': 'Show names of actors in descending order of the year their musical is awarded.', 'sql_query': 'SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID ORDER BY T2.Year DESC', 'db_id': 'musical'}, {'question': 'Show the musical nominee with award "Bob Fosse" or "Cleavant Derricks".', 'sql_query': 'SELECT Nominee FROM musical WHERE Award  =  "Tony Award" OR Award  =  "Cleavant Derricks"', 'db_id': 'musical'}], 'flight_2': [{'question': 'Find the number of flights landing in the city of Aberdeen or Abilene.', 'sql_query': 'SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  "Aberdeen" OR T2.city  =  "Abilene"', 'db_id': 'flight_2'}, {'question': "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?", 'sql_query': 'SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  "Ashley" AND T3.City  =  "Aberdeen"', 'db_id': 'flight_2'}, {'question': 'Which airlines have a flight with source airport AHD?', 'sql_query': 'SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "AHD"', 'db_id': 'flight_2'}, {'question': "How many 'United Airlines' flights go to Airport 'ASY'?", 'sql_query': 'SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.DestAirport  =  "ASY"', 'db_id': 'flight_2'}, {'question': "How many 'United Airlines' flights depart from Airport 'AHD'?", 'sql_query': 'SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.SourceAirport  =  "AHD"', 'db_id': 'flight_2'}], 'e_learning': [{'question': 'Find the common personal name of course authors and students.', 'sql_query': 'SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students', 'db_id': 'e_learning'}, {'question': 'Find the subject ID, name of subject and the corresponding number of courses for each subject, and sort by the course count in ascending order.', 'sql_query': 'SELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id ORDER BY COUNT(*) ASC', 'db_id': 'e_learning'}, {'question': 'What are the names of the courses taught by the tutor whose personal name is "Julio"?', 'sql_query': 'SELECT T2.course_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T1.personal_name  =  "Julio"', 'db_id': 'e_learning'}, {'question': 'Find the addresses and author IDs of the course authors that teach at least two courses.', 'sql_query': 'SELECT T1.address_line_1 ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id HAVING Count(*)  >=  2', 'db_id': 'e_learning'}, {'question': 'What is the name of each course and the corresponding number of student enrollment?', 'sql_query': 'SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name', 'db_id': 'e_learning'}], 'behavior_monitoring': [{'question': 'What is the cell phone number of the student whose address has the lowest monthly rental?', 'sql_query': 'SELECT T2.cell_mobile_number FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id ORDER BY T1.monthly_rental ASC LIMIT 1', 'db_id': 'behavior_monitoring'}, {'question': 'What are the line 1 of addresses shared by some students and some teachers?', 'sql_query': 'SELECT T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.address_id INTERSECT SELECT T1.line_1 FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id', 'db_id': 'behavior_monitoring'}, {'question': 'Find the texts of assessment notes for teachers with last name "Schuster".', 'sql_query': 'SELECT T1.text_of_notes FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.last_name  =  "Schuster"', 'db_id': 'behavior_monitoring'}, {'question': 'What are the email addresses of teachers whose address has zip code "918"?', 'sql_query': 'SELECT T2.email_address FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id WHERE T1.zip_postcode  =  "918"', 'db_id': 'behavior_monitoring'}, {'question': 'What is the email of the student with first name "Emma" and last name "Rohan"?', 'sql_query': 'SELECT email_address FROM Students WHERE first_name  =  "Emma" AND last_name  =  "Rohan"', 'db_id': 'behavior_monitoring'}], 'flight_1': [{'question': 'What destination has the fewest number of flights?', 'sql_query': 'SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1', 'db_id': 'flight_1'}, {'question': 'What are the names of all employees who are not certified to fly Boeing 737-800s?', 'sql_query': 'SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  "Boeing 737-800"', 'db_id': 'flight_1'}, {'question': 'Return the minimum, average and maximum distances traveled across all aircrafts.', 'sql_query': 'SELECT min(distance) ,  avg(distance) ,  max(distance) FROM Aircraft', 'db_id': 'flight_1'}, {'question': 'Show names for all aircraft with at least two flights.', 'sql_query': 'SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2', 'db_id': 'flight_1'}, {'question': 'What is the average distance and average price for flights from Los Angeles.', 'sql_query': 'SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  "Los Angeles"', 'db_id': 'flight_1'}], 'orchestra': [{'question': 'List the record company shared by the most number of orchestras.', 'sql_query': 'SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'orchestra'}, {'question': 'List the names of orchestras that have no performance.', 'sql_query': 'SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)', 'db_id': 'orchestra'}, {'question': 'What are the maximum and minimum share of performances whose type is not "Live final".', 'sql_query': 'SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != "Live final"', 'db_id': 'orchestra'}, {'question': 'Count the number of orchestras that have CD or DVD as their record format.', 'sql_query': 'SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  "CD" OR Major_Record_Format  =  "DVD"', 'db_id': 'orchestra'}, {'question': 'List the name of the conductor with the most years of work.', 'sql_query': 'SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1', 'db_id': 'orchestra'}], 'hospital_1': [{'question': 'List the names of all the physicians who prescribe Thesisin as medication.', 'sql_query': 'SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name  =  "Thesisin"', 'db_id': 'hospital_1'}, {'question': 'What is the names of the physicians who prescribe medication Thesisin?', 'sql_query': 'SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name  =  "Thesisin"', 'db_id': 'hospital_1'}, {'question': 'Find the number of rooms for different block code?', 'sql_query': 'SELECT count(*) ,  T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockcode', 'db_id': 'hospital_1'}, {'question': 'Sort the list of names and costs of all procedures in the descending order of cost.', 'sql_query': 'SELECT name ,  cost FROM procedures ORDER BY cost DESC', 'db_id': 'hospital_1'}, {'question': 'Find the name of physicians who are in charge of more than one patient.', 'sql_query': 'SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid HAVING count(*)  >  1', 'db_id': 'hospital_1'}], 'gas_company': [{'question': 'What are the names of the managers for gas stations that are operated by the ExxonMobil company?', 'sql_query': "SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.company  =  'ExxonMobil'", 'db_id': 'gas_company'}, {'question': 'What are the headquarters without companies that are in the banking industry?', 'sql_query': "SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking'", 'db_id': 'gas_company'}, {'question': 'What are the companies and main industries of all companies that are not headquartered in the United States?', 'sql_query': "SELECT company ,  main_industry FROM company WHERE headquarters != 'USA'", 'db_id': 'gas_company'}, {'question': 'List all headquarters and the number of companies in each headquarter.', 'sql_query': 'SELECT headquarters ,  count(*) FROM company GROUP BY headquarters', 'db_id': 'gas_company'}, {'question': 'Show gas station id, location, and manager_name for all gas stations ordered by open year.', 'sql_query': 'SELECT station_id ,  LOCATION ,  manager_name FROM gas_station ORDER BY open_year', 'db_id': 'gas_company'}], 'game_injury': [{'question': "What are the headquarters that have both a company in the banking and 'oil and gas' industries?", 'sql_query': "SELECT headquarters FROM company WHERE main_industry  =  'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry  =  'Oil and gas'", 'db_id': 'gas_company'}, {'question': 'Show all headquarters with both a company in banking industry and a company in Oil and gas.', 'sql_query': "SELECT headquarters FROM company WHERE main_industry  =  'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry  =  'Oil and gas'", 'db_id': 'gas_company'}, {'question': 'For each injury accident, find the date of the game and the name of the injured player in the game, and sort the results in descending order of game season.', 'sql_query': 'SELECT T1.date ,  T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id ORDER BY T1.season DESC', 'db_id': 'game_injury'}, {'question': 'What are the ids, scores, and dates of the games which caused at least two injury accidents?', 'sql_query': 'SELECT T1.id ,  T1.score ,  T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T2.game_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2', 'db_id': 'game_injury'}, {'question': 'List the season, home team, away team of all the games.', 'sql_query': 'SELECT season ,  home_team ,  away_team FROM game', 'db_id': 'game_injury'}], 'department_store': [{'question': 'What is the name of the hardware product with the greatest price?', 'sql_query': "SELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price DESC LIMIT 1", 'db_id': 'department_store'}, {'question': 'Return the phone numbers for all customers and suppliers.', 'sql_query': 'SELECT customer_phone FROM customers UNION SELECT supplier_phone FROM suppliers', 'db_id': 'department_store'}, {'question': 'For each payment method, return how many customers use it.', 'sql_query': 'SELECT payment_method_code ,  count(*) FROM customers GROUP BY payment_method_code', 'db_id': 'department_store'}, {'question': 'What are the staff ids and genders of all staffs whose job title is Department Manager?', 'sql_query': 'SELECT T1.staff_id ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  "Department Manager"', 'db_id': 'department_store'}, {'question': 'Return the names and ids of customers who have TN in their address.', 'sql_query': 'SELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE "%TN%"', 'db_id': 'department_store'}], 'scholar': [{'question': 'Papers written by Liwen Xiong in 2015', 'sql_query': 'SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "Liwen Xiong" AND t3.year  =  2015;', 'db_id': 'scholar'}, {'question': "Liwen Xiong 's papers in 2015 ?", 'sql_query': 'SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "Liwen Xiong" AND t3.year  =  2015;', 'db_id': 'scholar'}, {'question': 'what papers did chi publish ?', 'sql_query': 'SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  "chi";', 'db_id': 'scholar'}, {'question': 'number of papers written by Christopher D. Manning', 'sql_query': 'SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "Christopher D. Manning";', 'db_id': 'scholar'}, {'question': 'How many papers were published in nature communications in 2015 ?', 'sql_query': 'SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  "nature communications";', 'db_id': 'scholar'}], 'insurance_policies': [{'question': 'Find the policy type the most customers choose.', 'sql_query': 'SELECT Policy_Type_Code FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY count(*) DESC LIMIT 1', 'db_id': 'insurance_policies'}, {'question': 'What is the most popular payment method?', 'sql_query': 'SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) DESC LIMIT 1', 'db_id': 'insurance_policies'}, {'question': 'List the date the claim was made, the date it was settled and the amount settled for all the claims which had exactly one settlement.', 'sql_query': 'SELECT T1.claim_id ,  T1.date_claim_made ,  T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.claim_id HAVING count(*)  =  1', 'db_id': 'insurance_policies'}, {'question': 'Find the claimed amount in the claim with the least amount settled. Show both the settlement amount and claim amount.', 'sql_query': 'SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1', 'db_id': 'insurance_policies'}, {'question': 'Give me the payment Id, the date and the amount for all the payments processed with Visa.', 'sql_query': "SELECT Payment_ID ,  Date_Payment_Made ,  Amount_Payment FROM Payments WHERE Payment_Method_Code  =  'Visa'", 'db_id': 'insurance_policies'}], 'assets_maintenance': [{'question': 'Which assets did not incur any fault log? List the asset model.', 'sql_query': 'SELECT asset_model FROM Assets WHERE asset_id NOT IN (SELECT asset_id FROM Fault_Log)', 'db_id': 'assets_maintenance'}, {'question': 'Which company started the earliest the maintenance contract? Show the company name.', 'sql_query': 'SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id ORDER BY T2.contract_start_date ASC LIMIT 1', 'db_id': 'assets_maintenance'}, {'question': 'How many assets does each maintenance contract contain? List the number and the contract id.', 'sql_query': 'SELECT count(*) ,  T1.maintenance_contract_id FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id  =  T2.maintenance_contract_id GROUP BY T1.maintenance_contract_id', 'db_id': 'assets_maintenance'}, {'question': 'How many assets can each parts be used in? List the part name and the number.', 'sql_query': 'SELECT T1.part_name ,  count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name', 'db_id': 'assets_maintenance'}, {'question': 'List the asset id, details, make and model for every asset.', 'sql_query': 'SELECT asset_id ,  asset_details ,  asset_make ,  asset_model FROM Assets', 'db_id': 'assets_maintenance'}], 'network_2': [{'question': 'Find the number of people whose age is greater than all engineers.', 'sql_query': "SELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  'engineer')", 'db_id': 'network_2'}, {'question': 'Find the name and age of the person who is a friend of Dan or Alice.', 'sql_query': "SELECT DISTINCT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' OR T2.friend  =  'Alice'", 'db_id': 'network_2'}, {'question': 'How many friends does Dan have?', 'sql_query': "SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan'", 'db_id': 'network_2'}, {'question': 'What are all the friends of Alice who are female?', 'sql_query': "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'female'", 'db_id': 'network_2'}, {'question': 'Find the male friend of Alice whose job is a doctor?', 'sql_query': "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'male' AND T1.job  =  'doctor'", 'db_id': 'network_2'}], 'tracking_software_problems': [{'question': 'For each product that has problems, find the number of problems reported after 1986-11-13 and the product id?', 'sql_query': 'SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > "1986-11-13" GROUP BY T2.product_id', 'db_id': 'tracking_software_problems'}, {'question': 'What are the products that have problems reported after 1986-11-13? Give me the product id and the count of problems reported after 1986-11-13.', 'sql_query': 'SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > "1986-11-13" GROUP BY T2.product_id', 'db_id': 'tracking_software_problems'}, {'question': 'List all the log ids and their descriptions from the problem logs.', 'sql_query': 'SELECT problem_log_id ,  log_entry_description FROM problem_log', 'db_id': 'tracking_software_problems'}, {'question': 'For the problem with id 10, return the ids and dates of its problem logs.', 'sql_query': 'SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10', 'db_id': 'tracking_software_problems'}, {'question': 'Give me a list of descriptions of the problems that are reported by the staff whose first name is Christop.', 'sql_query': 'SELECT T1.problem_description FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = "Christop"', 'db_id': 'tracking_software_problems'}], 'movie_1': [{'question': 'In what years did a movie receive a 4 or 5 star rating, and list the years from oldest to most recently?', 'sql_query': 'SELECT DISTINCT YEAR FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  >=  4 ORDER BY T1.year', 'db_id': 'movie_1'}, {'question': 'What are the names of all the reviewers and movie names?', 'sql_query': 'SELECT name FROM Reviewer UNION SELECT title FROM Movie', 'db_id': 'movie_1'}, {'question': 'Find the names of reviewers who had given higher than 3 star ratings.', 'sql_query': 'SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  3', 'db_id': 'movie_1'}, {'question': 'What is the average number of stars that each reviewer awards for a movie?', 'sql_query': 'SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name', 'db_id': 'movie_1'}, {'question': 'What are the different names of all reviewers whose ratings do not have a date field?', 'sql_query': 'SELECT DISTINCT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID  =  T2.rID WHERE ratingDate  =  "null"', 'db_id': 'movie_1'}], 'hr_1': [{'question': 'What is all the information regarding employees with salaries above the minimum and under 2500?', 'sql_query': 'SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500', 'db_id': 'hr_1'}, {'question': 'Find the ids of the employees who does not work in those departments where some employees works whose manager id within the range 100 and 200.', 'sql_query': 'SELECT * FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)', 'db_id': 'hr_1'}, {'question': 'What are the full name, hire date, salary, and department id for employees without the letter M in their first name?', 'sql_query': "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'", 'db_id': 'hr_1'}, {'question': 'when is the hire date for those employees whose first name does not containing the letter M?', 'sql_query': "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'", 'db_id': 'hr_1'}, {'question': 'What are the first name and department name of all employees?', 'sql_query': 'SELECT T1.first_name ,  T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id', 'db_id': 'hr_1'}], 'imdb': [{'question': 'What are the series featuring " Scott Foley " ?', 'sql_query': 'SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN tv_series AS t2 ON t2.sid  =  t3.msid WHERE t1.name  =  "Scott Foley";', 'db_id': 'imdb'}, {'question': 'Find all movies about nuclear weapons', 'sql_query': 'SELECT t3.title FROM tags AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.id JOIN movie AS t3 ON t2.msid  =  t3.mid WHERE t1.keyword  =  "nuclear weapons";', 'db_id': 'imdb'}, {'question': 'Which movie had the character " Daffy Duck "', 'sql_query': 'SELECT t1.title FROM movie AS t1 JOIN CAST AS t2 ON t1.mid  =  t2.msid WHERE t2.role  =  "Daffy Duck";', 'db_id': 'imdb'}, {'question': 'Find all actors born in " Austin " after 1980', 'sql_query': 'SELECT name FROM actor WHERE birth_city  =  "Austin" AND birth_year  >  1980;', 'db_id': 'imdb'}, {'question': 'Find all actors from Italy born after 1980', 'sql_query': 'SELECT name FROM actor WHERE birth_year  >  1980 AND nationality  =  "Italy";', 'db_id': 'imdb'}], 'products_gen_characteristics': [{'question': 'Find the id and color description of the products with at least 2 characteristics.', 'sql_query': 'SELECT t1.product_id ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code JOIN product_characteristics AS t3 ON t1.product_id  =  t3.product_id GROUP BY t1.product_id HAVING count(*)  >=  2', 'db_id': 'products_gen_characteristics'}, {'question': "Count the number of products with the 'hot' charactersitic.", 'sql_query': 'SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  "hot"', 'db_id': 'products_gen_characteristics'}, {'question': 'What is the product category description and unit of measurement of category "Herbs"?', 'sql_query': 'SELECT product_category_description ,  unit_of_measure FROM ref_product_categories WHERE product_category_code  =  "Herbs"', 'db_id': 'products_gen_characteristics'}, {'question': "Count the number of characteristics the product 'sesame' has.", 'sql_query': 'SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id WHERE t1.product_name  =  "sesame"', 'db_id': 'products_gen_characteristics'}, {'question': 'What is the color code and description of the product named "chervil"?', 'sql_query': 'SELECT t1.color_code ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  "chervil"', 'db_id': 'products_gen_characteristics'}], 'loan_1': [{'question': 'Find the names of bank branches that have provided a loan to any customer whose credit score is below 100.', 'sql_query': 'SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100', 'db_id': 'loan_1'}, {'question': 'Find the state which has the most number of customers.', 'sql_query': 'SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1', 'db_id': 'loan_1'}, {'question': 'What city and state is the bank with the name morningside in?', 'sql_query': "SELECT city ,  state FROM bank WHERE bname  =  'morningside'", 'db_id': 'loan_1'}, {'question': 'Find the name and account balance of the customers who have loans with a total amount of more than 5000.', 'sql_query': 'SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000', 'db_id': 'loan_1'}, {'question': 'What is the name of the bank branch with the greatest number of customers?', 'sql_query': 'SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1', 'db_id': 'loan_1'}], 'dog_kennels': [{'question': 'What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?', 'sql_query': 'select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )', 'db_id': 'dog_kennels'}, {'question': 'How many dogs have an age below the average?', 'sql_query': 'SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )', 'db_id': 'dog_kennels'}, {'question': 'How much does the most recent treatment cost?', 'sql_query': 'SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1', 'db_id': 'dog_kennels'}, {'question': 'What are the id, role, and first name of the professionals who have performed two or more treatments?', 'sql_query': 'SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2', 'db_id': 'dog_kennels'}, {'question': 'What are all the possible breed type and size type combinations?', 'sql_query': 'SELECT DISTINCT breed_code ,  size_code FROM dogs', 'db_id': 'dog_kennels'}], 'e_government': [{'question': 'Find the name of all the cities and states.', 'sql_query': 'SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses', 'db_id': 'e_government'}, {'question': 'What are the names of all cities and states?', 'sql_query': 'SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses', 'db_id': 'e_government'}, {'question': 'Find the payment method and phone of the party with email "enrico09@example.com".', 'sql_query': 'SELECT payment_method_code ,  party_phone FROM parties WHERE party_email  =  "enrico09@example.com"', 'db_id': 'e_government'}, {'question': 'Find the name of organizations whose names contain "Party".', 'sql_query': 'SELECT organization_name FROM organizations WHERE organization_name LIKE "%Party%"', 'db_id': 'e_government'}, {'question': 'Give the state corresponding to the line number building "6862 Kaitlyn Knolls".', 'sql_query': 'SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE "%6862 Kaitlyn Knolls%"', 'db_id': 'e_government'}], 'tracking_grants_for_research': [{'question': 'List the project details of the projects which did not hire any staff for a researcher role.', 'sql_query': "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code  =  'researcher' )", 'db_id': 'tracking_grants_for_research'}, {'question': 'What are the details for all projects that did not hire any staff in a research role?', 'sql_query': "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code  =  'researcher' )", 'db_id': 'tracking_grants_for_research'}, {'question': 'What is the total amount of grants given by each organisations? Also list the organisation id.', 'sql_query': 'SELECT sum(grant_amount) ,  organisation_id FROM Grants GROUP BY organisation_id', 'db_id': 'tracking_grants_for_research'}, {'question': 'How many tasks does each project have? List the task count and the project detail.', 'sql_query': 'SELECT count(*) ,  T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id', 'db_id': 'tracking_grants_for_research'}, {'question': 'When do all the researcher role staff start to work, and when do they stop working?', 'sql_query': "SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  'researcher'", 'db_id': 'tracking_grants_for_research'}], 'film_rank': [{'question': 'What is the title of the film that has the highest high market estimation.', 'sql_query': 'SELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2  ON T1.Film_ID  =  T2.Film_ID ORDER BY high_estimate DESC LIMIT 1', 'db_id': 'film_rank'}, {'question': 'List the name of film studio that have the most number of films.', 'sql_query': 'SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'film_rank'}, {'question': 'What are the low and high estimates of film markets?', 'sql_query': 'SELECT Low_Estimate ,  High_Estimate FROM film_market_estimation', 'db_id': 'film_rank'}, {'question': 'What are the countries of markets and their corresponding years of market estimation?', 'sql_query': 'SELECT T2.Country ,  T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID', 'db_id': 'film_rank'}, {'question': 'Please list the countries and years of film market estimations.', 'sql_query': 'SELECT T2.Country ,  T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID', 'db_id': 'film_rank'}], 'academic': [{'question': 'return me the total citations of papers in PVLDB in each year .', 'sql_query': 'SELECT t2.year  ,  SUM ( t2.citation_num ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  "PVLDB" GROUP BY t2.year;', 'db_id': 'academic'}, {'question': 'return me the paper in Databases area with more than 200 citations .', 'sql_query': 'SELECT t3.title FROM DOMAIN AS t2 JOIN domain_publication AS t1 ON t2.did  =  t1.did JOIN publication AS t3 ON t3.pid  =  t1.pid WHERE t2.name  =  "Databases" AND t3.citation_num  >  200;', 'db_id': 'academic'}, {'question': 'return me the number of papers on VLDB conference .', 'sql_query': 'SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  "VLDB";', 'db_id': 'academic'}, {'question': 'return me all the researchers in " University of Michigan " .', 'sql_query': 'SELECT t1.name FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid WHERE t2.name  =  "University of Michigan";', 'db_id': 'academic'}, {'question': 'return me the total citations of all the papers in PVLDB .', 'sql_query': 'SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  "PVLDB";', 'db_id': 'academic'}], 'customer_complaints': [{'question': 'What are the phone numbers of all customers and all staff members?', 'sql_query': 'SELECT phone_number FROM customers UNION SELECT phone_number FROM staff', 'db_id': 'customer_complaints'}, {'question': 'What is the phone number of the customer who has filed the most recent complaint?', 'sql_query': 'SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1', 'db_id': 'customer_complaints'}, {'question': 'What are the last names of staff with email addressed containing the substring "wrau"?', 'sql_query': 'SELECT last_name FROM staff WHERE email_address LIKE "%wrau%"', 'db_id': 'customer_complaints'}, {'question': 'What are lines 1 and 2 of the addressed of the customer with the email "vbogisich@example.org"?', 'sql_query': 'SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  "vbogisich@example.org"', 'db_id': 'customer_complaints'}, {'question': 'Find the name and category of the most expensive product.', 'sql_query': 'SELECT product_name ,  product_category_code FROM products ORDER BY product_price DESC LIMIT 1', 'db_id': 'customer_complaints'}], 'storm_record': [{'question': 'Return the names of the regions affected by storms that had a death count of at least 10.', 'sql_query': 'SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T3.number_deaths  >=  10', 'db_id': 'storm_record'}, {'question': 'Show all storm names except for those with at least two affected regions.', 'sql_query': 'SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2', 'db_id': 'storm_record'}, {'question': 'What are the names and damage in millions for storms, ordered by their max speeds descending?', 'sql_query': 'SELECT name ,  damage_millions_USD FROM storm ORDER BY max_speed DESC', 'db_id': 'storm_record'}, {'question': 'List name and damage for all storms in a descending order of max speed.', 'sql_query': 'SELECT name ,  damage_millions_USD FROM storm ORDER BY max_speed DESC', 'db_id': 'storm_record'}, {'question': 'What are the names, dates active, and number of deaths for storms that had 1 or more death?', 'sql_query': 'SELECT name ,  dates_active ,  number_deaths FROM storm WHERE number_deaths  >=  1', 'db_id': 'storm_record'}], 'music_1': [{'question': 'What is the shortest and most poorly rated song for each genre, ordered alphabetically by genre?', 'sql_query': 'SELECT min(T1.duration) ,  min(T2.rating) ,  T2.genre_is FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.genre_is ORDER BY T2.genre_is', 'db_id': 'music_1'}, {'question': 'Find the names of the artists who have produced English songs but have never received rating higher than 8.', 'sql_query': 'SELECT DISTINCT artist_name FROM song WHERE languages  =  "english" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  8', 'db_id': 'music_1'}, {'question': 'What are the file sizes and formats for all songs with a resolution lower than 800?', 'sql_query': 'SELECT DISTINCT T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.resolution  <  800', 'db_id': 'music_1'}, {'question': 'What is the average rating of songs produced by female artists?', 'sql_query': 'SELECT avg(T2.rating) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  "Female"', 'db_id': 'music_1'}, {'question': 'What are the names of all genres in alphabetical order, combined with its ratings?', 'sql_query': 'SELECT g_name ,  rating FROM genre ORDER BY g_name', 'db_id': 'music_1'}], 'tvshow': [{'question': 'What are the languages used by the least number of TV Channels and how many channels use it?', 'sql_query': 'SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;', 'db_id': 'tvshow'}, {'question': 'List the language used least number of TV Channel. List language and number of TV Channel.', 'sql_query': 'SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;', 'db_id': 'tvshow'}, {'question': 'For each language, list the number of TV Channels that use it.', 'sql_query': 'SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE', 'db_id': 'tvshow'}, {'question': "which countries' tv channels are playing some cartoon written by Todd Casey?", 'sql_query': "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", 'db_id': 'tvshow'}, {'question': 'Find the production code and channel of the most recently aired cartoon .', 'sql_query': 'select production_code ,  channel from cartoon order by original_air_date desc limit 1', 'db_id': 'tvshow'}], 'device': [{'question': 'List the software platform shared by the greatest number of devices.', 'sql_query': 'SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'device'}, {'question': 'List the carriers of devices that have no devices in stock.', 'sql_query': 'SELECT Carrier FROM device WHERE Device_ID NOT IN (SELECT Device_ID FROM stock)', 'db_id': 'device'}, {'question': 'Please show different software platforms and the corresponding number of devices using each.', 'sql_query': 'SELECT Software_Platform ,  COUNT(*) FROM device GROUP BY Software_Platform', 'db_id': 'device'}, {'question': 'Show the carriers of devices in stock at more than one shop.', 'sql_query': 'SELECT T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID GROUP BY T1.Device_ID HAVING COUNT(*)  >  1', 'db_id': 'device'}, {'question': 'What are the different software platforms for devices, ordered by frequency descending?', 'sql_query': 'SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC', 'db_id': 'device'}], 'sports_competition': [{'question': 'What are the names of all clubs that do not have any players?', 'sql_query': 'SELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player)', 'db_id': 'sports_competition'}, {'question': 'Find the countries that have never participated in any competition with Friendly type.', 'sql_query': "SELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type  =  'Friendly'", 'db_id': 'sports_competition'}, {'question': 'List the position of players and the average number of points of players of each position.', 'sql_query': 'SELECT POSITION ,  avg(Points) FROM player GROUP BY POSITION', 'db_id': 'sports_competition'}, {'question': 'Show the names of clubs that have players with position "Right Wing".', 'sql_query': 'SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Position  =  "Right Wing"', 'db_id': 'sports_competition'}, {'question': 'List the types of competition and the number of competitions of each type.', 'sql_query': 'SELECT Competition_type ,  COUNT(*) FROM competition GROUP BY Competition_type', 'db_id': 'sports_competition'}], 'university_basketball': [{'question': 'What is the primary conference of the school that has the lowest acc percent score in the competition?', 'sql_query': 'SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1', 'db_id': 'university_basketball'}, {'question': 'What is the team name and acc regular season score of the school that was founded for the longest time?', 'sql_query': 'SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1', 'db_id': 'university_basketball'}, {'question': 'How many universities have a location that contains NY?', 'sql_query': 'SELECT count(*) FROM university WHERE LOCATION LIKE "%NY%"', 'db_id': 'university_basketball'}, {'question': 'List all schools and their nicknames in the order of founded year.', 'sql_query': 'SELECT school ,  nickname FROM university ORDER BY founded', 'db_id': 'university_basketball'}, {'question': 'Return the founded year for the school with the largest enrollment.', 'sql_query': 'SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1', 'db_id': 'university_basketball'}], 'music_2': [{'question': 'What is the label that has the most albums?', 'sql_query': 'SELECT label FROM albums GROUP BY label ORDER BY count(*) DESC LIMIT 1', 'db_id': 'music_2'}, {'question': 'What are the names of all songs produced by the artist with the first name "Marianne"?', 'sql_query': 'SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T2.firstname  =  "Marianne"', 'db_id': 'music_2'}, {'question': 'How many instruments does the song "Le Pop" use?', 'sql_query': 'SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  "Le Pop"', 'db_id': 'music_2'}, {'question': 'Find all the songs whose name contains the word "the".', 'sql_query': "SELECT title FROM songs WHERE title LIKE '% the %'", 'db_id': 'music_2'}, {'question': 'Find all the stage positions of the musicians with first name "Solveig"', 'sql_query': 'SELECT DISTINCT T1.stageposition FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE Firstname  =  "Solveig"', 'db_id': 'music_2'}], 'body_builder': [{'question': 'What are the birth date and birth place of the body builder with the highest total points?', 'sql_query': 'SELECT T2.Birth_Date ,  T2.Birth_Place FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC LIMIT 1', 'db_id': 'body_builder'}, {'question': 'What are the total scores of the body builders whose birthday contains the string "January" ?', 'sql_query': 'SELECT T1.total FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T2.Birth_Date LIKE "%January%";', 'db_id': 'body_builder'}, {'question': 'What are the names of body builders whose total score is higher than 300?', 'sql_query': 'SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  >  300', 'db_id': 'body_builder'}, {'question': 'List the snatch score and clean jerk score of body builders in ascending order of snatch score.', 'sql_query': 'SELECT Snatch ,  Clean_Jerk FROM body_builder ORDER BY Snatch ASC', 'db_id': 'body_builder'}, {'question': 'List each birth place along with the number of people from there.', 'sql_query': 'SELECT Birth_Place ,  COUNT(*) FROM people GROUP BY Birth_Place', 'db_id': 'body_builder'}], 'bike_1': [{'question': 'What is the latitude, longitude, and city of the station from which the trip with smallest duration started?', 'sql_query': 'SELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1', 'db_id': 'bike_1'}, {'question': 'What is the latitude, longitude, city of the station from which the shortest trip started?', 'sql_query': 'SELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1', 'db_id': 'bike_1'}, {'question': "List all the cities in a decreasing order of each city's stations' highest latitude.", 'sql_query': 'SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC', 'db_id': 'bike_1'}, {'question': 'What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?', 'sql_query': 'SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80', 'db_id': 'bike_1'}, {'question': 'For each city, what is the highest latitude for its stations?', 'sql_query': 'SELECT city ,  max(lat) FROM station GROUP BY city', 'db_id': 'bike_1'}], 'shop_membership': [{'question': 'What are the names of the members that have never registered at any branch?', 'sql_query': 'SELECT name FROM member WHERE member_id NOT IN (SELECT member_id FROM membership_register_branch)', 'db_id': 'shop_membership'}, {'question': 'What is the number of branches that have more than the average number of memberships?', 'sql_query': 'SELECT count(*) FROM branch WHERE membership_amount  >  (SELECT avg(membership_amount) FROM branch)', 'db_id': 'shop_membership'}, {'question': 'Show name, address road, and city for all branches sorted by open year.', 'sql_query': 'SELECT name ,  address_road ,  city FROM branch ORDER BY open_year', 'db_id': 'shop_membership'}, {'question': 'What are the card numbers of members from Kentucky?', 'sql_query': 'SELECT card_number FROM member WHERE Hometown LIKE "%Kentucky%"', 'db_id': 'shop_membership'}, {'question': 'What are the names for the 3 branches that have the most memberships?', 'sql_query': 'SELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3', 'db_id': 'shop_membership'}], 'party_people': [{'question': 'Count the number of Annual Meeting events that took place in the region of the United Kingdom.', 'sql_query': 'SELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  "United Kingdom" AND t3.Event_Name  =  "Annaual Meeting"', 'db_id': 'party_people'}, {'question': 'Which member names are shared among members in the party with the id 3 and the party with the id 1?', 'sql_query': 'SELECT member_name FROM member WHERE party_id  =  3 INTERSECT SELECT member_name FROM member WHERE party_id  =  1', 'db_id': 'party_people'}, {'question': 'Show party names and the number of events for each party.', 'sql_query': 'SELECT T2.party_name ,  count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id', 'db_id': 'party_people'}, {'question': 'Show the ministers and the time they took and left office, listed by the time they left office.', 'sql_query': 'SELECT minister ,  took_office ,  left_office FROM party ORDER BY left_office', 'db_id': 'party_people'}, {'question': 'Who are the ministers, when did they take office, and when did they leave office, ordered by when they left office?', 'sql_query': 'SELECT minister ,  took_office ,  left_office FROM party ORDER BY left_office', 'db_id': 'party_people'}], 'student_assessment': [{'question': 'What are the cell phone numbers of the candidates that received an assessment code of "Fail"?', 'sql_query': 'SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = "Fail"', 'db_id': 'student_assessment'}, {'question': 'List the id of students who never attends courses?', 'sql_query': 'SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)', 'db_id': 'student_assessment'}, {'question': 'What are the ids of all students for courses and what are the names of those courses?', 'sql_query': 'SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id', 'db_id': 'student_assessment'}, {'question': 'How many students attend course English?', 'sql_query': 'SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = "English"', 'db_id': 'student_assessment'}, {'question': 'What are the different cities where students live?', 'sql_query': 'SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id', 'db_id': 'student_assessment'}], 'performance_attendance': [{'question': 'Show the most common location of performances.', 'sql_query': 'SELECT LOCATION FROM performance GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'performance_attendance'}, {'question': 'Show the names of members and the dates of performances they attended in descending order of attendance of the performances.', 'sql_query': 'SELECT T2.Name ,  T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T3.Attendance DESC', 'db_id': 'performance_attendance'}, {'question': 'What is the date of the performance with the highest number of attendees?', 'sql_query': 'SELECT Date FROM performance ORDER BY Attendance DESC LIMIT 1', 'db_id': 'performance_attendance'}, {'question': 'What are the dates and locations of performances?', 'sql_query': 'SELECT Date ,  LOCATION FROM performance', 'db_id': 'performance_attendance'}, {'question': 'Show the attendances of the performances at location "TD Garden" or "Bell Centre"', 'sql_query': 'SELECT Attendance FROM performance WHERE LOCATION  =  "TD Garden" OR LOCATION  =  "Bell Centre"', 'db_id': 'performance_attendance'}], 'concert_singer': [{'question': 'Show names for all stadiums except for stadiums having a concert in year 2014.', 'sql_query': 'SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014', 'db_id': 'concert_singer'}, {'question': 'What are all the song names by singers who are older than average?', 'sql_query': 'SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)', 'db_id': 'concert_singer'}, {'question': 'Show the name and theme for all concerts and the number of singers in each concert.', 'sql_query': 'SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id', 'db_id': 'concert_singer'}, {'question': "what is the name and nation of the singer who have a song having 'Hey' in its name?", 'sql_query': "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", 'db_id': 'concert_singer'}, {'question': 'Show the stadium name and the number of concerts in each stadium.', 'sql_query': 'SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id', 'db_id': 'concert_singer'}], 'csu_1': [{'question': 'How many universities have a campus fee higher than average?', 'sql_query': 'SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)', 'db_id': 'csu_1'}, {'question': 'What campus has the most degrees  conferrred over its entire existence?', 'sql_query': 'SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1', 'db_id': 'csu_1'}, {'question': 'How many faculty lines are there at San Francisco State University in 2004?', 'sql_query': 'SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2004 AND T2.campus  =  "San Francisco State University"', 'db_id': 'csu_1'}, {'question': 'What is the campus fee of "San Jose State University" in year 1996?', 'sql_query': 'SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  "San Jose State University" AND T2.year  =  1996', 'db_id': 'csu_1'}, {'question': 'Find the campus fee of "San Jose State University" in year 2000.', 'sql_query': 'SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  "San Jose State University" AND t1.year  =  2000', 'db_id': 'csu_1'}], 'formula_1': [{'question': 'Find the driver id and number of races of all drivers who have at most participated in 30 races?', 'sql_query': 'SELECT T1.driverid ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  30', 'db_id': 'formula_1'}, {'question': 'What are the names and years of all races that had a driver with the last name Lewis?', 'sql_query': 'SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = "Lewis"', 'db_id': 'formula_1'}, {'question': 'What are the forenames and surnames of all unique drivers who had a lap time of less than 93000 milliseconds?', 'sql_query': 'SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000', 'db_id': 'formula_1'}, {'question': 'What is the name and date of the most recent race?', 'sql_query': 'SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1', 'db_id': 'formula_1'}, {'question': 'What is the first and last name of all the German drivers?', 'sql_query': 'SELECT forename ,  surname FROM drivers WHERE nationality = "German"', 'db_id': 'formula_1'}], 'activity_1': [{'question': 'Show the ids of all the faculty members who participate in an activity and advise a student.', 'sql_query': 'SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student', 'db_id': 'activity_1'}, {'question': 'What are ids of the faculty members who not only participate in an activity but also advise a student.', 'sql_query': 'SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student', 'db_id': 'activity_1'}, {'question': 'What are the first name, last name, and phone number of all the female faculty members?', 'sql_query': "SELECT Fname ,  Lname ,  phone FROM Faculty WHERE Sex  =  'F'", 'db_id': 'activity_1'}, {'question': 'How many faculty members do we have for each rank and gender?', 'sql_query': 'SELECT rank ,  sex ,  count(*) FROM Faculty GROUP BY rank ,  sex', 'db_id': 'activity_1'}, {'question': 'Which faculty members advise two ore more students? Give me their faculty ids.', 'sql_query': 'SELECT T1.FacID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID HAVING count(*)  >=  2', 'db_id': 'activity_1'}], 'local_govt_and_lot': [{'question': 'Which organizations are not a parent organization of others? List the organization id.', 'sql_query': 'SELECT organization_id FROM organizations EXCEPT SELECT parent_organization_id FROM organizations', 'db_id': 'local_govt_and_lot'}, {'question': 'How many services has each resident requested? List the resident id, details, and the count in descending order of the count.', 'sql_query': 'SELECT T1.resident_id ,  T1.other_details ,  count(*) FROM Residents AS T1 JOIN Residents_Services AS T2 ON T1.resident_id  =  T2.resident_id GROUP BY T1.resident_id ORDER BY count(*) DESC', 'db_id': 'local_govt_and_lot'}, {'question': "What are the resident details containing the substring 'Miss'?", 'sql_query': "SELECT other_details FROM Residents WHERE other_details LIKE '%Miss%'", 'db_id': 'local_govt_and_lot'}, {'question': 'What are the id and details of the customers who have at least 3 events?', 'sql_query': 'SELECT T1.customer_id ,  T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  3', 'db_id': 'local_govt_and_lot'}, {'question': 'List the customer event id and the corresponding move in date and property id.', 'sql_query': 'SELECT customer_event_id ,  date_moved_in ,  property_id FROM customer_events', 'db_id': 'local_govt_and_lot'}], 'decoration_competition': [{'question': 'List the names of members who did not participate in any round.', 'sql_query': 'SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM round)', 'db_id': 'decoration_competition'}, {'question': 'Show the most common country across members.', 'sql_query': 'SELECT Country FROM member GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'decoration_competition'}, {'question': 'Show the different countries and the number of members from each.', 'sql_query': 'SELECT Country ,  COUNT(*) FROM member GROUP BY Country', 'db_id': 'decoration_competition'}, {'question': 'Show the names of members in ascending order of their rank in rounds.', 'sql_query': 'SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID ORDER BY Rank_in_Round ASC', 'db_id': 'decoration_competition'}, {'question': 'Show the names of members and names of colleges they go to.', 'sql_query': 'SELECT T2.Name ,  T1.Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID', 'db_id': 'decoration_competition'}], 'manufactory_1': [{'question': 'Find the name of companies whose revenue is greater than the average revenue of all companies.', 'sql_query': 'SELECT name FROM manufacturers WHERE revenue  >  (SELECT avg(revenue) FROM manufacturers)', 'db_id': 'manufactory_1'}, {'question': 'Find the total revenue of companies whose revenue is larger than the revenue of some companies based in Austin.', 'sql_query': "SELECT sum(revenue) FROM manufacturers WHERE revenue  >  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')", 'db_id': 'manufactory_1'}, {'question': 'Find the name, headquarter and founder of the manufacturer that has the highest revenue.', 'sql_query': 'SELECT name ,  headquarter ,  founder FROM manufacturers ORDER BY revenue DESC LIMIT 1', 'db_id': 'manufactory_1'}, {'question': 'What are the average prices of products for each manufacturer?', 'sql_query': 'SELECT avg(T1.price) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name', 'db_id': 'manufactory_1'}, {'question': 'Select the name and price of all products with a price larger than or equal to $180, and sort first by price (in descending order), and then by name  (in ascending order).', 'sql_query': 'SELECT name ,  price FROM products WHERE price  >=  180 ORDER BY price DESC ,  name ASC', 'db_id': 'manufactory_1'}], 'book_2': [{'question': 'Please show the most common publication date.', 'sql_query': 'SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'book_2'}, {'question': 'List the titles of books that are not published.', 'sql_query': 'SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)', 'db_id': 'book_2'}, {'question': 'Show writers who have published a book with price more than 4000000.', 'sql_query': 'SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Price  >  4000000', 'db_id': 'book_2'}, {'question': 'List the publisher of the publication with the highest price.', 'sql_query': 'SELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1', 'db_id': 'book_2'}, {'question': 'Show the prices of publications whose publisher is either "Person" or "Wiley"', 'sql_query': 'SELECT Price FROM publication WHERE Publisher  =  "Person" OR Publisher  =  "Wiley"', 'db_id': 'book_2'}], 'flight_company': [{'question': 'What is the most common company type, and how many are there?', 'sql_query': 'SELECT TYPE ,  count(*) FROM operate_company GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1', 'db_id': 'flight_company'}, {'question': 'How many companies operates airlines in each airport?', 'sql_query': 'SELECT T3.id ,  count(*) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id JOIN airport AS T3 ON T2.airport_id  =  T3.id GROUP BY T3.id', 'db_id': 'flight_company'}, {'question': 'List the id, country, city and name of the airports ordered alphabetically by the name.', 'sql_query': 'SELECT id ,  country ,  city ,  name FROM airport ORDER BY name', 'db_id': 'flight_company'}, {'question': 'What are the distinct types of the companies that have operated any flights with velocity less than 200?', 'sql_query': 'SELECT DISTINCT T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T2.velocity  <  200', 'db_id': 'flight_company'}, {'question': 'List the vehicle flight number, date and pilot of all the flights, ordered by altitude.', 'sql_query': 'SELECT vehicle_flight_number ,  date ,  pilot FROM flight ORDER BY altitude ASC', 'db_id': 'flight_company'}], 'party_host': [{'question': 'Which parties have more than 20 hosts? Give me the host names for these parties.', 'sql_query': 'SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20', 'db_id': 'party_host'}, {'question': 'Show the most common nationality of hosts.', 'sql_query': 'SELECT Nationality FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'party_host'}, {'question': 'How many hosts does each nationality have? List the nationality and the count.', 'sql_query': 'SELECT Nationality ,  COUNT(*) FROM HOST GROUP BY Nationality', 'db_id': 'party_host'}, {'question': 'Show the themes of parties and the names of the party hosts.', 'sql_query': 'SELECT T3.Party_Theme ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID', 'db_id': 'party_host'}, {'question': 'What are the name and the nationality of the host of the highest age?', 'sql_query': 'SELECT Name ,  Nationality FROM HOST ORDER BY Age DESC LIMIT 1', 'db_id': 'party_host'}], 'cre_Docs_and_Epenses': [{'question': 'Return the ids of documents that do not have expenses.', 'sql_query': 'SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_with_expenses', 'db_id': 'cre_Docs_and_Epenses'}, {'question': 'What is the budget type code with most number of documents.', 'sql_query': 'SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC LIMIT 1', 'db_id': 'cre_Docs_and_Epenses'}, {'question': 'Show the budget type code and description and the corresponding document id.', 'sql_query': 'SELECT T2.budget_type_code ,  T2.budget_type_description ,  T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code  =  T2.budget_type_code', 'db_id': 'cre_Docs_and_Epenses'}, {'question': 'What are the different statement ids on accounts, and the number of accounts for each?', 'sql_query': 'SELECT STATEMENT_ID ,  count(*) FROM Accounts GROUP BY STATEMENT_ID', 'db_id': 'cre_Docs_and_Epenses'}, {'question': 'Count the number of documents with the type code BK that correspond to each product id.', 'sql_query': 'SELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  "BK" GROUP BY project_id', 'db_id': 'cre_Docs_and_Epenses'}], 'student_1': [{'question': 'Which classroom has the most students?', 'sql_query': 'SELECT classroom FROM list GROUP BY classroom ORDER BY count(*) DESC LIMIT 1', 'db_id': 'student_1'}, {'question': 'Find the classroom that the most students use.', 'sql_query': 'SELECT classroom FROM list GROUP BY classroom ORDER BY count(*) DESC LIMIT 1', 'db_id': 'student_1'}, {'question': 'Find the last names of the teachers that teach fifth grade.', 'sql_query': 'SELECT DISTINCT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  5', 'db_id': 'student_1'}, {'question': 'For each grade 0 classroom, return the classroom number and the count of students.', 'sql_query': 'SELECT classroom ,  count(*) FROM list WHERE grade  =  "0" GROUP BY classroom', 'db_id': 'student_1'}, {'question': 'Report the first name and last name of all the teachers.', 'sql_query': 'SELECT DISTINCT firstname ,  lastname FROM teachers', 'db_id': 'student_1'}], 'customers_and_invoices': [{'question': 'What is the id of the account with the most transactions?', 'sql_query': 'SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT 1', 'db_id': 'customers_and_invoices'}, {'question': 'Show all product names and the number of customers having an order on each product.', 'sql_query': 'SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name', 'db_id': 'customers_and_invoices'}, {'question': 'How many accounts does each customer have? List the number and customer id.', 'sql_query': 'SELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id', 'db_id': 'customers_and_invoices'}, {'question': 'Count the number of financial transactions that correspond to each account id.', 'sql_query': 'SELECT count(*) ,  account_id FROM Financial_transactions', 'db_id': 'customers_and_invoices'}, {'question': 'Show the invoice number and the number of transactions for each invoice.', 'sql_query': 'SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number', 'db_id': 'customers_and_invoices'}], 'restaurants': [{'question': 'give me a good french restaurant in the yosemite and mono lake area ?', 'sql_query': 'SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  "yosemite and mono lake area" AND t1.food_type  =  "french" AND t1.rating  >  2.5;', 'db_id': 'restaurants'}, {'question': 'give me a good place in the yosemite and mono lake area for french food ?', 'sql_query': 'SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  "yosemite and mono lake area" AND t1.food_type  =  "french" AND t1.rating  >  2.5;', 'db_id': 'restaurants'}, {'question': 'how many places for french food are there in palo alto ?', 'sql_query': 'SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "palo alto" AND t1.food_type  =  "french";', 'db_id': 'restaurants'}, {'question': 'where is a restaurant in alameda ?', 'sql_query': 'SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "alameda";', 'db_id': 'restaurants'}, {'question': 'how many french restaurant are there in palo alto ?', 'sql_query': 'SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "palo alto" AND t1.food_type  =  "french";', 'db_id': 'restaurants'}], 'climbing': [{'question': 'What are the countries that have both mountains that are higher than 5600 and lower than 5200?', 'sql_query': 'SELECT Country FROM mountain WHERE Height  >  5600 INTERSECT SELECT Country FROM mountain WHERE Height  <  5200', 'db_id': 'climbing'}, {'question': 'Show the height of the mountain climbed by the climber with the maximum points.', 'sql_query': 'SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1', 'db_id': 'climbing'}, {'question': 'What are the names of mountains that have a height of over 5000 or a prominence of over 1000?', 'sql_query': 'SELECT Name FROM mountain WHERE Height  >  5000 OR Prominence  >  1000', 'db_id': 'climbing'}, {'question': 'Return the name of the mountain with the greatest height.', 'sql_query': 'SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1', 'db_id': 'climbing'}, {'question': 'What are the different names of mountains ascended by climbers from the country of West Germany?', 'sql_query': 'SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  "West Germany"', 'db_id': 'climbing'}], 'election': [{'question': 'Show the people that have been governor the most times.', 'sql_query': 'SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'election'}, {'question': 'Which people severed as comptroller most frequently? Give me the name of the person and the frequency count.', 'sql_query': 'SELECT Comptroller ,  COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'election'}, {'question': 'Show the names of counties that have at least two delegates.', 'sql_query': 'SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2', 'db_id': 'election'}, {'question': 'Show the delegates and the names of county they belong to.', 'sql_query': 'SELECT T2.Delegate ,  T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District', 'db_id': 'election'}, {'question': 'What are the 3 counties that have the smallest population? Give me the county names.', 'sql_query': 'SELECT County_name FROM county ORDER BY Population ASC LIMIT 3', 'db_id': 'election'}], 'aircraft': [{'question': 'List the names of aircrafts and that did not win any match.', 'sql_query': 'SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)', 'db_id': 'aircraft'}, {'question': 'What are the names of all aicrafts that have never won any match?', 'sql_query': 'SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)', 'db_id': 'aircraft'}, {'question': 'List names of all pilot aged 30 or younger in descending alphabetical order.', 'sql_query': 'SELECT Name FROM pilot WHERE Age  <=  30 ORDER BY Name DESC', 'db_id': 'aircraft'}, {'question': 'Please list the location and the winning aircraft name.', 'sql_query': 'SELECT T2.Location ,  T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft', 'db_id': 'aircraft'}, {'question': 'What are the total number of Domestic Passengers of airports that contain the word "London".', 'sql_query': 'SELECT sum(Domestic_Passengers) FROM airport WHERE Airport_Name LIKE "%London%"', 'db_id': 'aircraft'}], 'pets_1': [{'question': 'Find the last name of the student who has a cat that is age 3.', 'sql_query': "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", 'db_id': 'pets_1'}, {'question': 'How many dog pets are raised by female students?', 'sql_query': "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", 'db_id': 'pets_1'}, {'question': 'List the maximum weight and type for each type of pet.', 'sql_query': 'SELECT max(weight) ,  petType FROM pets GROUP BY petType', 'db_id': 'pets_1'}, {'question': 'How many pets are owned by students that have an age greater than 20?', 'sql_query': 'SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20', 'db_id': 'pets_1'}, {'question': 'Find the maximum weight for each type of pet. List the maximum weight and pet type.', 'sql_query': 'SELECT max(weight) ,  petType FROM pets GROUP BY petType', 'db_id': 'pets_1'}], 'customers_and_products_contacts': [{'question': 'Show the names of customers who use Credit Card payment method and have more than 2 orders.', 'sql_query': "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.payment_method_code  =  'Credit Card' GROUP BY T1.customer_id HAVING count(*)  >  2", 'db_id': 'customers_and_products_contacts'}, {'question': 'How many products have a price higher than the average?', 'sql_query': 'SELECT count(*) FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products)', 'db_id': 'customers_and_products_contacts'}, {'question': 'Show the customer name, customer address city, date from, and date to for each customer address history.', 'sql_query': 'SELECT T2.customer_name ,  T3.city ,  T1.date_from ,  T1.date_to FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id JOIN addresses AS T3 ON T1.address_id  =  T3.address_id', 'db_id': 'customers_and_products_contacts'}, {'question': 'Show the minimum, maximum, average price for all products.', 'sql_query': 'SELECT min(product_price) ,  max(product_price) ,  avg(product_price) FROM products', 'db_id': 'customers_and_products_contacts'}, {'question': 'Show the name, phone, and payment method code for all customers in descending order of customer number.', 'sql_query': 'SELECT customer_name ,  customer_phone ,  payment_method_code FROM customers ORDER BY customer_number DESC', 'db_id': 'customers_and_products_contacts'}], 'entrepreneur': [{'question': 'What are the names of people who are not entrepreneurs?', 'sql_query': 'SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)', 'db_id': 'entrepreneur'}, {'question': 'What is the name of the entrepreneur with the greatest weight?', 'sql_query': 'SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1', 'db_id': 'entrepreneur'}, {'question': 'Return the weights of entrepreneurs, ordered descending by amount of money requested.', 'sql_query': 'SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested DESC', 'db_id': 'entrepreneur'}, {'question': 'Give the total money requested by entrepreneurs who are taller than 1.85.', 'sql_query': 'SELECT sum(T1.Money_Requested) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  1.85', 'db_id': 'entrepreneur'}, {'question': 'What are the companies and investors that correspond to each entrepreneur?', 'sql_query': 'SELECT Company ,  Investor FROM entrepreneur', 'db_id': 'entrepreneur'}]}