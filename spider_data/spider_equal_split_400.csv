,Unnamed: 0,db_id,query,question,context,hardness
309,1022,geo,"SELECT state_name FROM city WHERE city_name  =  ""springfield"";",what states have a city named springfield,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );",easy
285,998,geo,"SELECT border FROM border_info WHERE state_name  =  ""kentucky"";",which state border kentucky,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );",easy
919,4143,cre_Doc_Control_Systems,"SELECT count(*) FROM Documents WHERE document_status_code = ""done"";",How many documents have the status code done?,"PRAGMA foreign_keys = ON; CREATE TABLE Ref_Document_Types ( document_type_code CHAR(15) NOT NULL, document_type_description VARCHAR(255) NOT NULL, PRIMARY KEY (document_type_code) ); CREATE TABLE Roles ( role_code CHAR(15) NOT NULL, role_description VARCHAR(255), PRIMARY KEY (role_code) ); CREATE TABLE Addresses ( address_id INTEGER NOT NULL, address_details VARCHAR(255), PRIMARY KEY (address_id) ); CREATE TABLE Ref_Document_Status ( document_status_code CHAR(15) NOT NULL, document_status_description VARCHAR(255) NOT NULL, PRIMARY KEY (document_status_code) ); CREATE TABLE Ref_Shipping_Agents ( shipping_agent_code CHAR(15) NOT NULL, shipping_agent_name VARCHAR(255) NOT NULL, shipping_agent_description VARCHAR(255) NOT NULL, PRIMARY KEY (shipping_agent_code) ); CREATE TABLE Documents ( document_id INTEGER NOT NULL, document_status_code CHAR(15) NOT NULL, document_type_code CHAR(15) NOT NULL, shipping_agent_code CHAR(15), receipt_date DATETIME, receipt_number VARCHAR(255), other_details VARCHAR(255), PRIMARY KEY (document_id), FOREIGN KEY (document_type_code) REFERENCES Ref_Document_Types (document_type_code), FOREIGN KEY (document_status_code) REFERENCES Ref_Document_Status (document_status_code), FOREIGN KEY (shipping_agent_code) REFERENCES Ref_Shipping_Agents (shipping_agent_code) ); CREATE TABLE Employees ( employee_id INTEGER NOT NULL, role_code CHAR(15) NOT NULL, employee_name VARCHAR(255), other_details VARCHAR(255), PRIMARY KEY (employee_id), FOREIGN KEY (role_code) REFERENCES Roles (role_code) ); CREATE TABLE Document_Drafts ( document_id INTEGER NOT NULL, draft_number INTEGER NOT NULL, draft_details VARCHAR(255), PRIMARY KEY (document_id, draft_number), FOREIGN KEY (document_id) REFERENCES Documents (document_id) ); CREATE TABLE Draft_Copies ( document_id INTEGER NOT NULL, draft_number INTEGER NOT NULL, copy_number INTEGER NOT NULL, PRIMARY KEY (document_id, draft_number, copy_number), FOREIGN KEY (document_id, draft_number) REFERENCES Document_Drafts (document_id,draft_number) ); CREATE TABLE Circulation_History ( document_id INTEGER NOT NULL, draft_number INTEGER NOT NULL, copy_number INTEGER NOT NULL, employee_id INTEGER NOT NULL, PRIMARY KEY (document_id, draft_number, copy_number, employee_id), FOREIGN KEY (document_id, draft_number, copy_number) REFERENCES Draft_Copies (document_id,draft_number,copy_number), FOREIGN KEY (employee_id) REFERENCES Employees (employee_id) ); CREATE TABLE Documents_Mailed ( document_id INTEGER NOT NULL, mailed_to_address_id INTEGER NOT NULL, mailing_date DATETIME, PRIMARY KEY (document_id, mailed_to_address_id), FOREIGN KEY (document_id) REFERENCES Documents (document_id), FOREIGN KEY (mailed_to_address_id) REFERENCES Addresses (address_id) );  ",easy
120,513,student_transcripts_tracking,SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea',What is the zip code of the address in the city Port Chelsea?,"PRAGMA foreign_keys = ON; CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `line_1` VARCHAR(255), `line_2` VARCHAR(255), `line_3` VARCHAR(255), `city` VARCHAR(255), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(255), `country` VARCHAR(255), `other_address_details` VARCHAR(255) ); CREATE TABLE `Courses` ( `course_id` INTEGER PRIMARY KEY, `course_name` VARCHAR(255), `course_description` VARCHAR(255), `other_details` VARCHAR(255) );  CREATE TABLE `Departments` ( `department_id` INTEGER PRIMARY KEY, `department_name` VARCHAR(255), `department_description` VARCHAR(255), `other_details` VARCHAR(255) ); CREATE TABLE `Degree_Programs` ( `degree_program_id` INTEGER PRIMARY KEY, `department_id` INTEGER NOT NULL, `degree_summary_name` VARCHAR(255), `degree_summary_description` VARCHAR(255), `other_details` VARCHAR(255), FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` ) );  CREATE TABLE `Sections` ( `section_id` INTEGER PRIMARY KEY, `course_id` INTEGER NOT NULL, `section_name` VARCHAR(255), `section_description` VARCHAR(255), `other_details` VARCHAR(255), FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ) ); CREATE TABLE `Semesters` ( `semester_id` INTEGER PRIMARY KEY, `semester_name` VARCHAR(255), `semester_description` VARCHAR(255), `other_details` VARCHAR(255) ); CREATE TABLE `Students` ( `student_id` INTEGER PRIMARY KEY, `current_address_id` INTEGER NOT NULL, `permanent_address_id` INTEGER NOT NULL, `first_name` VARCHAR(80), `middle_name` VARCHAR(40), `last_name` VARCHAR(40), `cell_mobile_number` VARCHAR(40), `email_address` VARCHAR(40), `ssn` VARCHAR(40), `date_first_registered` DATETIME, `date_left` DATETIME, `other_student_details` VARCHAR(255), FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` ) );  CREATE TABLE `Student_Enrolment` ( `student_enrolment_id` INTEGER PRIMARY KEY, `degree_program_id` INTEGER NOT NULL, `semester_id` INTEGER NOT NULL, `student_id` INTEGER NOT NULL, `other_details` VARCHAR(255), FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ), FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ), FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ) ); CREATE TABLE `Student_Enrolment_Courses` ( `student_course_id` INTEGER PRIMARY KEY, `course_id` INTEGER NOT NULL, `student_enrolment_id` INTEGER NOT NULL, FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ), FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` ) );  CREATE TABLE `Transcripts` ( `transcript_id` INTEGER PRIMARY KEY, `transcript_date` DATETIME, `other_details` VARCHAR(255) );  CREATE TABLE `Transcript_Contents` ( `student_course_id` INTEGER NOT NULL, `transcript_id` INTEGER NOT NULL, FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ), FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` ) );  ",easy
585,2834,product_catalog,SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3,Find the list of attribute data types possessed by more than 3 attribute definitions.,"PRAGMA foreign_keys = ON;  CREATE TABLE `Attribute_Definitions` ( `attribute_id` INTEGER PRIMARY KEY, `attribute_name` VARCHAR(30), `attribute_data_type` VARCHAR(10) ); CREATE TABLE `Catalogs` ( `catalog_id` INTEGER PRIMARY KEY, `catalog_name` VARCHAR(50), `catalog_publisher` VARCHAR(80), `date_of_publication` DATETIME, `date_of_latest_revision` DATETIME ); CREATE TABLE `Catalog_Structure` ( `catalog_level_number` INTEGER PRIMARY KEY, `catalog_id` INTEGER NOT NULL, `catalog_level_name` VARCHAR(50), FOREIGN KEY (`catalog_id` ) REFERENCES `Catalogs`(`catalog_id` ) );  CREATE TABLE `Catalog_Contents` ( `catalog_entry_id` INTEGER PRIMARY KEY, `catalog_level_number` INTEGER NOT NULL, `parent_entry_id` INTEGER, `previous_entry_id` INTEGER, `next_entry_id` INTEGER, `catalog_entry_name` VARCHAR(80), `product_stock_number` VARCHAR(50), `price_in_dollars` DOUBLE NULL, `price_in_euros` DOUBLE NULL, `price_in_pounds` DOUBLE NULL, `capacity` VARCHAR(20), `length` VARCHAR(20), `height` VARCHAR(20), `width` VARCHAR(20), FOREIGN KEY (`catalog_level_number` ) REFERENCES `Catalog_Structure`(`catalog_level_number` ) ); CREATE TABLE `Catalog_Contents_Additional_Attributes` ( `catalog_entry_id` INTEGER NOT NULL, `catalog_level_number` INTEGER NOT NULL, `attribute_id` INTEGER NOT NULL, `attribute_value` VARCHAR(255) NOT NULL, FOREIGN KEY (`catalog_entry_id` ) REFERENCES `Catalog_Contents`(`catalog_entry_id` ), FOREIGN KEY (`catalog_level_number` ) REFERENCES `Catalog_Structure`(`catalog_level_number` ) ); ",easy
111,477,wta_1,SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50,Find the codes of countries that have more than 50 players.,"CRloser_rank_pointsEATE TABLE players(     ""player_id"" INT PRIMARY KEY,     ""first_name"" TEXT,     ""last_name"" TEXT,     ""hand"" TEXT,     ""birth_date"" DATE,     ""country_code"" TEXT ); CREATE TABLE matches(   ""best_of"" INT,   ""draw_size"" INT,   ""loser_age"" FLOAT,   ""loser_entry"" TEXT,   ""loser_hand"" TEXT,   ""loser_ht"" INT,   ""loser_id"" INT,   ""loser_ioc"" TEXT,   ""loser_name"" TEXT,   ""loser_rank"" INT,   ""loser_rank_points"" INT,   ""loser_seed"" INT,   ""match_num"" INT,   ""minutes"" INT,   ""round"" TEXT,   ""score"" TEXT,   ""surface"" TEXT,   ""tourney_date"" DATE,   ""tourney_id"" TEXT,   ""tourney_level"" TEXT,   ""tourney_name"" TEXT,   ""winner_age"" FLOAT,   ""winner_entry"" TEXT,   ""winner_hand"" TEXT,   ""winner_ht"" INT,   ""winner_id"" INT,   ""winner_ioc"" TEXT,   ""winner_name"" TEXT,   ""winner_rank"" INT,   ""winner_rank_points"" INT,   ""winner_seed"" INT,   ""year"" INT,   FOREIGN KEY(loser_id) REFERENCES players(player_id),   FOREIGN KEY(winner_id) REFERENCES players(player_id) );    CREATE TABLE qualifying_matches(   ""best_of"" INT,   ""draw_size"" INT,   ""l_1stIn"" TEXT,   ""l_1stWon"" TEXT,   ""l_2ndWon"" TEXT,   ""l_SvGms"" TEXT,   ""l_ace"" TEXT,   ""l_bpFaced"" TEXT,   ""l_bpSaved"" TEXT,   ""l_df"" TEXT,   ""l_svpt"" TEXT,   ""loser_age"" FLOAT,   ""loser_entry"" TEXT,   ""loser_hand"" TEXT,   ""loser_ht"" INT,   ""loser_id"" INT,   ""loser_ioc"" TEXT,   ""loser_name"" TEXT,   ""loser_rank"" INT,   ""loser_rank_points"" INT,   ""loser_seed"" INT,   ""match_num"" INT,   ""minutes"" INT,   ""round"" TEXT,   ""score"" TEXT,   ""surface"" TEXT,   ""tourney_date"" DATE,   ""tourney_id"" TEXT,   ""tourney_level"" TEXT,   ""tourney_name"" TEXT,   ""w_1stIn"" TEXT,   ""w_1stWon"" TEXT,   ""w_2ndWon"" TEXT,   ""w_SvGms"" TEXT,   ""w_ace"" TEXT,   ""w_bpFaced"" TEXT,   ""w_bpSaved"" TEXT,   ""w_df"" TEXT,   ""w_svpt"" TEXT,   ""winner_age"" FLOAT,   ""winner_entry"" TEXT,   ""winner_hand"" TEXT,   ""winner_ht"" INT,   ""winner_id"" INT,   ""winner_ioc"" TEXT,   ""winner_name"" TEXT,   ""winner_rank"" INT,   ""winner_rank_points"" INT,   ""winner_seed"" INT,   ""year"" INT,   FOREIGN KEY(loser_id) REFERENCES players(player_id),   FOREIGN KEY(winner_id) REFERENCES players(player_id) );  CREATE TABLE rankings(   ""ranking_date"" DATE,   ""ranking"" INT,   ""player_id"" INT,   ""ranking_points"" INT,   ""tours"" INT,   FOREIGN KEY(player_id) REFERENCES players(player_id) );",easy
813,3676,insurance_and_eClaims,SELECT count(*) FROM claims_processing_stages,How many claim processing stages are there in total?,"PRAGMA foreign_keys = ON; CREATE TABLE Customers ( Customer_ID INTEGER NOT NULL, Customer_Details VARCHAR(255) NOT NULL, PRIMARY KEY (Customer_ID) ); CREATE TABLE Staff ( Staff_ID INTEGER NOT NULL, Staff_Details VARCHAR(255) NOT NULL, PRIMARY KEY (Staff_ID) );  CREATE TABLE Policies ( Policy_ID INTEGER NOT NULL, Customer_ID INTEGER NOT NULL, Policy_Type_Code CHAR(15) NOT NULL, Start_Date DATETIME, End_Date DATETIME, PRIMARY KEY (Policy_ID), FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID) );   CREATE TABLE Claim_Headers ( Claim_Header_ID INTEGER NOT NULL, Claim_Status_Code CHAR(15) NOT NULL, Claim_Type_Code CHAR(15) NOT NULL, Policy_ID INTEGER NOT NULL, Date_of_Claim DATETIME, Date_of_Settlement DATETIME, Amount_Claimed DECIMAL(20,4), Amount_Piad DECIMAL(20,4), PRIMARY KEY (Claim_Header_ID), FOREIGN KEY (Policy_ID) REFERENCES Policies (Policy_ID) ); CREATE TABLE Claims_Documents ( Claim_ID INTEGER NOT NULL, Document_Type_Code CHAR(15) NOT NULL, Created_by_Staff_ID INTEGER, Created_Date INTEGER, PRIMARY KEY (Claim_ID, Document_Type_Code), FOREIGN KEY (Claim_ID) REFERENCES Claim_Headers (Claim_Header_ID), FOREIGN KEY (Created_by_Staff_ID) REFERENCES Staff (Staff_ID) ); CREATE TABLE Claims_Processing_Stages ( Claim_Stage_ID INTEGER NOT NULL, Next_Claim_Stage_ID INTEGER, Claim_Status_Name VARCHAR(255) NOT NULL, Claim_Status_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Claim_Stage_ID) ); CREATE TABLE Claims_Processing ( Claim_Processing_ID INTEGER NOT NULL, Claim_ID INTEGER NOT NULL, Claim_Outcome_Code CHAR(15) NOT NULL, Claim_Stage_ID INTEGER NOT NULL, Staff_ID INTEGER, PRIMARY KEY (Claim_Processing_ID), FOREIGN KEY (Claim_ID) REFERENCES Claim_Headers (Claim_Header_ID), FOREIGN KEY (Staff_ID) REFERENCES Staff (Staff_ID) ); ",easy
389,1223,geo,"SELECT density FROM state WHERE state_name  =  ""wyoming"";",what is the density of the wyoming,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );",easy
1435,6325,document_management,SELECT count(*) FROM users WHERE user_login  =  1,How many users are logged in?,"PRAGMA foreign_keys = ON;  CREATE TABLE `Roles` ( `role_code` VARCHAR(15) PRIMARY KEY, `role_description` VARCHAR(80) );  CREATE TABLE `Users` ( `user_id` INTEGER PRIMARY KEY, `role_code` VARCHAR(15) NOT NULL, `user_name` VARCHAR(40), `user_login` VARCHAR(40), `password` VARCHAR(40), FOREIGN KEY (`role_code` ) REFERENCES `Roles`(`role_code` ) ); CREATE TABLE `Document_Structures` ( `document_structure_code` VARCHAR(15) PRIMARY KEY, `parent_document_structure_code` VARCHAR(15), `document_structure_description` VARCHAR(80) ); CREATE TABLE `Functional_Areas` ( `functional_area_code` VARCHAR(15) PRIMARY KEY, `parent_functional_area_code` VARCHAR(15), `functional_area_description` VARCHAR(80) NOT NULL );  CREATE TABLE `Images` ( `image_id` INTEGER PRIMARY KEY, `image_alt_text` VARCHAR(80), `image_name` VARCHAR(40), `image_url` VARCHAR(255) ); CREATE TABLE `Documents` ( `document_code` VARCHAR(15) PRIMARY KEY, `document_structure_code` VARCHAR(15) NOT NULL, `document_type_code` VARCHAR(15) NOT NULL, `access_count` INTEGER, `document_name` VARCHAR(80), FOREIGN KEY (`document_structure_code` ) REFERENCES `Document_Structures`(`document_structure_code` ) );  CREATE TABLE `Document_Functional_Areas` ( `document_code` VARCHAR(15) NOT NULL, `functional_area_code` VARCHAR(15) NOT NULL, FOREIGN KEY (`document_code` ) REFERENCES `Documents`(`document_code` ), FOREIGN KEY (`functional_area_code` ) REFERENCES `Functional_Areas`(`functional_area_code` ) ); CREATE TABLE `Document_Sections` ( `section_id` INTEGER PRIMARY KEY, `document_code` VARCHAR(15) NOT NULL, `section_sequence` INTEGER, `section_code` VARCHAR(20), `section_title` VARCHAR(80), FOREIGN KEY (`document_code` ) REFERENCES `Documents`(`document_code` ) ); CREATE TABLE `Document_Sections_Images` ( `section_id` INTEGER NOT NULL, `image_id` INTEGER NOT NULL, PRIMARY KEY (`section_id`,`image_id`), FOREIGN KEY (`section_id` ) REFERENCES `Document_Sections`(`section_id` ), FOREIGN KEY (`image_id` ) REFERENCES `Images`(`image_id` ) );  ",easy
1379,6047,club_1,SELECT clubname FROM club,Give me the name of each club.,"create table Student (          StuID        INTEGER PRIMARY KEY,          LName        VARCHAR(12),          Fname        VARCHAR(12),          Age      INTEGER,          Sex      VARCHAR(1),          Major        INTEGER,          Advisor      INTEGER,          city_code    VARCHAR(3)   );   create table Club (        ClubID           INTEGER PRIMARY KEY,        ClubName         VARCHAR(40),        ClubDesc         VARCHAR(1024),        ClubLocation VARCHAR(40) );  create table Member_of_club (        StuID            INTEGER,        ClubID           INTEGER,        Position     VARCHAR(40),        FOREIGN KEY(StuID) REFERENCES Student(StuID),        FOREIGN KEY(ClubID) REFERENCES Club(ClubID) );   teach kids and adults about computer basics.', 'AKW'); ",easy
729,3361,phone_1,"SELECT count(*) FROM phone WHERE Company_name = ""Nokia Corporation"";","How many phone hardware models are produced by the company named ""Nokia Corporation""?","PRAGMA foreign_keys=ON; BEGIN TRANSACTION; CREATE TABLE IF NOT EXISTS ""chip_model"" ( ""Model_name"" text, ""Launch_year"" real, ""RAM_MiB"" real, ""ROM_MiB"" real, ""Slots"" text, ""WiFi"" text, ""Bluetooth"" text, PRIMARY KEY (""Model_name"") ); CREATE TABLE IF NOT EXISTS ""screen_mode"" ( ""Graphics_mode"" real, ""Char_cells"" text, ""Pixels"" text, ""Hardware_colours"" real, ""used_kb"" real, ""map"" text, ""Type"" text, PRIMARY KEY (""Graphics_mode"") ); CREATE TABLE IF NOT EXISTS ""phone"" ( ""Company_name"" text, ""Hardware_Model_name"" text, ""Accreditation_type"" text, ""Accreditation_level"" text, ""Date"" text, ""chip_model"" text, ""screen_mode"" text, PRIMARY KEY(""Hardware_Model_name""), FOREIGN KEY (`screen_mode`) REFERENCES `screen_mode`(`Graphics_mode`), FOREIGN KEY (`chip_model`) REFERENCES `chip_model`(`Model_name`) ); COMMIT;",easy
1548,6791,soccer_2,SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie'),What is the count of states with college students playing in the mid position but not as goalies?,"/*   * SQL scripts for CS61 Intro to SQL lectures  * FILENAME SOCCER2.SQL  */  DROP TABLE  IF EXISTS Player; DROP TABLE  IF EXISTS Tryout; DROP TABLE  IF EXISTS College;  CREATE TABLE 	College    ( cName   	varchar(20) NOT NULL,     state   	varchar(2),     enr     	numeric(5,0),     PRIMARY KEY (cName)   );  CREATE TABLE 	Player   ( pID			numeric(5,0) NOT NULL,   	pName   	varchar(20),     yCard   	varchar(3),     HS      	numeric(5,0),     PRIMARY KEY (pID)   );  CREATE TABLE 	Tryout   ( pID			numeric(5,0),   	cName   	varchar(20),     pPos    	varchar(8),     decision    varchar(3),     PRIMARY KEY (pID, cName),     FOREIGN KEY (pID) REFERENCES Player(pID),     FOREIGN KEY (cName) REFERENCES College(cName)   );  /* note that ""left"" and ""right"" are reserved words in SQL */  ",easy
325,1040,geo,"SELECT population FROM city WHERE city_name  =  ""boulder"";",how many people in boulder,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );",easy
859,3898,wrestler,SELECT Team FROM elimination GROUP BY Team HAVING COUNT(*)  >  3,Which teams had more than 3 eliminations?,"PRAGMA foreign_keys = ON;  CREATE TABLE ""wrestler"" ( ""Wrestler_ID"" int, ""Name"" text, ""Reign"" text, ""Days_held"" text, ""Location"" text, ""Event"" text, PRIMARY KEY (""Wrestler_ID"") );  CREATE TABLE ""Elimination"" ( ""Elimination_ID"" text, ""Wrestler_ID"" text, ""Team"" text, ""Eliminated_By"" text, ""Elimination_Move"" text, ""Time"" text, PRIMARY KEY (""Elimination_ID""), FOREIGN KEY (""Wrestler_ID"") REFERENCES ""wrestler""(""Wrestler_ID"") );  ",easy
102,438,wta_1,SELECT avg(winner_rank) FROM matches,What is the average rank for winners in all matches?,"CRloser_rank_pointsEATE TABLE players(     ""player_id"" INT PRIMARY KEY,     ""first_name"" TEXT,     ""last_name"" TEXT,     ""hand"" TEXT,     ""birth_date"" DATE,     ""country_code"" TEXT ); CREATE TABLE matches(   ""best_of"" INT,   ""draw_size"" INT,   ""loser_age"" FLOAT,   ""loser_entry"" TEXT,   ""loser_hand"" TEXT,   ""loser_ht"" INT,   ""loser_id"" INT,   ""loser_ioc"" TEXT,   ""loser_name"" TEXT,   ""loser_rank"" INT,   ""loser_rank_points"" INT,   ""loser_seed"" INT,   ""match_num"" INT,   ""minutes"" INT,   ""round"" TEXT,   ""score"" TEXT,   ""surface"" TEXT,   ""tourney_date"" DATE,   ""tourney_id"" TEXT,   ""tourney_level"" TEXT,   ""tourney_name"" TEXT,   ""winner_age"" FLOAT,   ""winner_entry"" TEXT,   ""winner_hand"" TEXT,   ""winner_ht"" INT,   ""winner_id"" INT,   ""winner_ioc"" TEXT,   ""winner_name"" TEXT,   ""winner_rank"" INT,   ""winner_rank_points"" INT,   ""winner_seed"" INT,   ""year"" INT,   FOREIGN KEY(loser_id) REFERENCES players(player_id),   FOREIGN KEY(winner_id) REFERENCES players(player_id) );    CREATE TABLE qualifying_matches(   ""best_of"" INT,   ""draw_size"" INT,   ""l_1stIn"" TEXT,   ""l_1stWon"" TEXT,   ""l_2ndWon"" TEXT,   ""l_SvGms"" TEXT,   ""l_ace"" TEXT,   ""l_bpFaced"" TEXT,   ""l_bpSaved"" TEXT,   ""l_df"" TEXT,   ""l_svpt"" TEXT,   ""loser_age"" FLOAT,   ""loser_entry"" TEXT,   ""loser_hand"" TEXT,   ""loser_ht"" INT,   ""loser_id"" INT,   ""loser_ioc"" TEXT,   ""loser_name"" TEXT,   ""loser_rank"" INT,   ""loser_rank_points"" INT,   ""loser_seed"" INT,   ""match_num"" INT,   ""minutes"" INT,   ""round"" TEXT,   ""score"" TEXT,   ""surface"" TEXT,   ""tourney_date"" DATE,   ""tourney_id"" TEXT,   ""tourney_level"" TEXT,   ""tourney_name"" TEXT,   ""w_1stIn"" TEXT,   ""w_1stWon"" TEXT,   ""w_2ndWon"" TEXT,   ""w_SvGms"" TEXT,   ""w_ace"" TEXT,   ""w_bpFaced"" TEXT,   ""w_bpSaved"" TEXT,   ""w_df"" TEXT,   ""w_svpt"" TEXT,   ""winner_age"" FLOAT,   ""winner_entry"" TEXT,   ""winner_hand"" TEXT,   ""winner_ht"" INT,   ""winner_id"" INT,   ""winner_ioc"" TEXT,   ""winner_name"" TEXT,   ""winner_rank"" INT,   ""winner_rank_points"" INT,   ""winner_seed"" INT,   ""year"" INT,   FOREIGN KEY(loser_id) REFERENCES players(player_id),   FOREIGN KEY(winner_id) REFERENCES players(player_id) );  CREATE TABLE rankings(   ""ranking_date"" DATE,   ""ranking"" INT,   ""player_id"" INT,   ""ranking_points"" INT,   ""tours"" INT,   FOREIGN KEY(player_id) REFERENCES players(player_id) );",easy
683,3182,race_track,SELECT DISTINCT CLASS FROM race,What are the distinct classes that races can have?,"PRAGMA foreign_keys = ON;  CREATE TABLE ""race"" ( ""Race_ID"" int, ""Name"" text, ""Class"" text, ""Date"" text, ""Track_ID"" text, PRIMARY KEY (""Race_ID""), FOREIGN KEY (""Track_ID"") REFERENCES ""track""(""Track_ID"") );  CREATE TABLE ""track"" ( ""Track_ID"" int, ""Name"" text, ""Location"" text, ""Seating"" real, ""Year_Opened"" real, PRIMARY KEY (""Track_ID"") );  ",easy
745,3406,match_season,SELECT Name FROM Team,What are the names of all teams?,"PRAGMA foreign_keys = ON;   CREATE TABLE ""country"" (     ""Country_id"" int,     ""Country_name"" text,     ""Capital"" text,     ""Official_native_language"" text,     PRIMARY KEY (""Country_id"") );   CREATE TABLE `team` (       `Team_id` int,       `Name` text,       PRIMARY KEY (`Team_id`) ) ;  CREATE TABLE ""match_season"" (     ""Season"" real,     ""Player"" text,     ""Position"" text,     ""Country"" int,     ""Team"" int,     ""Draft_Pick_Number"" int,     ""Draft_Class"" text,     ""College"" text,     PRIMARY KEY (""Season""),     FOREIGN KEY (`Country`) REFERENCES `country`(`Country_id`),     FOREIGN KEY (`Team`) REFERENCES `team`(`Team_id`) );   CREATE TABLE ""player"" (     ""Player_ID"" int,     ""Player"" text,     ""Years_Played"" text,     ""Total_WL"" text,     ""Singles_WL"" text,     ""Doubles_WL"" text,     ""Team"" int,     PRIMARY KEY (""Player_ID""),     FOREIGN KEY (`Team`) REFERENCES `team`(`Team_id`) );    ",easy
386,1220,geo,SELECT SUM ( area ) FROM state;,what is the area of all the states combined,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );",easy
1716,7422,dorm_1,SELECT dorm_name FROM dorm WHERE gender  =  'F',Find the name of dorms only for female (F gender).," create table Student (         StuID        INTEGER PRIMARY KEY,         LName        VARCHAR(12),         Fname        VARCHAR(12),         Age      INTEGER,         Sex      VARCHAR(1),         Major        INTEGER,         Advisor      INTEGER,         city_code    VARCHAR(3)  );    create table Dorm (        dormid		INTEGER,        dorm_name	VARCHAR(20),        student_capacity	INTEGER,        gender			VARCHAR(1) ) ;  create table Dorm_amenity (        amenid			INTEGER,        amenity_name		VARCHAR(25) ) ;  create table Has_amenity (        dormid			INTEGER,        amenid				INTEGER, 	FOREIGN KEY (dormid) REFERENCES `Dorm`(dormid), 	FOREIGN KEY (amenid) REFERENCES `Dorm_amenity`(amenid) );  create table Lives_in (        stuid 	      INTEGER,        dormid		INTEGER,        room_number	INTEGER, 	FOREIGN KEY (stuid) REFERENCES `Student`(StuID),         FOREIGN KEY (dormid) REFERENCES `Dorm`(dormid) );  ",easy
512,2563,department_management,SELECT name FROM head WHERE born_state != 'California',What are the names of the heads who are born outside the California state?,"PRAGMA foreign_keys=ON; BEGIN TRANSACTION; CREATE TABLE IF NOT EXISTS ""department"" ( ""Department_ID"" int, ""Name"" text, ""Creation"" text, ""Ranking"" int, ""Budget_in_Billions"" real, ""Num_Employees"" real, PRIMARY KEY (""Department_ID"") ); CREATE TABLE IF NOT EXISTS ""head"" ( ""head_ID"" int, ""name"" text, ""born_state"" text, ""age"" real, PRIMARY KEY (""head_ID"") ); CREATE TABLE IF NOT EXISTS ""management"" ( ""department_ID"" int, ""head_ID"" int, ""temporary_acting"" text, PRIMARY KEY (""Department_ID"",""head_ID""), FOREIGN KEY (""Department_ID"") REFERENCES `department`(""Department_ID""), FOREIGN KEY (""head_ID"") REFERENCES `head`(""head_ID"") ); COMMIT; ",easy
1361,5991,cre_Doc_Tracking_DB,SELECT count(*) FROM Employees,Find the number of employees we have.,"PRAGMA foreign_keys = ON; CREATE TABLE Ref_Document_Types ( Document_Type_Code CHAR(15) NOT NULL, Document_Type_Name VARCHAR(255) NOT NULL, Document_Type_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Document_Type_Code) );  CREATE TABLE Ref_Calendar ( Calendar_Date DATETIME NOT NULL, Day_Number INTEGER, PRIMARY KEY (Calendar_Date) ); CREATE TABLE Ref_Locations ( Location_Code CHAR(15) NOT NULL, Location_Name VARCHAR(255) NOT NULL, Location_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Location_Code) );  CREATE TABLE Roles ( Role_Code CHAR(15) NOT NULL, Role_Name VARCHAR(255), Role_Description VARCHAR(255), PRIMARY KEY (Role_Code) );  CREATE TABLE All_Documents ( Document_ID INTEGER NOT NULL, Date_Stored DATETIME, Document_Type_Code CHAR(15) NOT NULL, Document_Name CHAR(255), Document_Description CHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Document_ID), FOREIGN KEY (Document_Type_Code) REFERENCES Ref_Document_Types (Document_Type_Code), FOREIGN KEY (Date_Stored) REFERENCES Ref_Calendar (Calendar_Date) );  CREATE TABLE Employees ( Employee_ID INTEGER NOT NULL, Role_Code CHAR(15) NOT NULL, Employee_Name VARCHAR(255), Gender_MFU CHAR(1) NOT NULL, Date_of_Birth DATETIME NOT NULL, Other_Details VARCHAR(255), PRIMARY KEY (Employee_ID), FOREIGN KEY (Role_Code) REFERENCES Roles (Role_Code) );  CREATE TABLE Document_Locations ( Document_ID INTEGER NOT NULL, Location_Code CHAR(15) NOT NULL, Date_in_Location_From DATETIME NOT NULL, Date_in_Locaton_To DATETIME, PRIMARY KEY (Document_ID, Location_Code, Date_in_Location_From), FOREIGN KEY (Location_Code) REFERENCES Ref_Locations (Location_Code), FOREIGN KEY (Date_in_Location_From) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Date_in_Locaton_To) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Document_ID) REFERENCES All_Documents (Document_ID) );  CREATE TABLE Documents_to_be_Destroyed ( Document_ID INTEGER NOT NULL, Destruction_Authorised_by_Employee_ID INTEGER, Destroyed_by_Employee_ID INTEGER, Planned_Destruction_Date DATETIME, Actual_Destruction_Date DATETIME, Other_Details VARCHAR(255), PRIMARY KEY (Document_ID), FOREIGN KEY (Destroyed_by_Employee_ID) REFERENCES Employees (Employee_ID), FOREIGN KEY (Destruction_Authorised_by_Employee_ID) REFERENCES Employees (Employee_ID), FOREIGN KEY (Planned_Destruction_Date) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Actual_Destruction_Date) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Document_ID) REFERENCES All_Documents (Document_ID) ); ",easy
1037,4655,inn_1,SELECT count(DISTINCT bedType) FROM Rooms;,Find the number of distinct bed types available in this inn.,"CREATE TABLE ""Rooms"" (  	""RoomId"" TEXT PRIMARY KEY, 	""roomName"" TEXT,  	""beds"" INTEGER,  	""bedType"" TEXT,  	""maxOccupancy"" INTEGER,  	""basePrice"" INTEGER,  	""decor"" TEXT  );  CREATE TABLE ""Reservations"" (  	""Code"" INTEGER PRIMARY KEY,  	""Room"" TEXT,  	""CheckIn"" TEXT,  	""CheckOut"" TEXT,  	""Rate"" REAL,  	""LastName"" TEXT,  	""FirstName"" TEXT,  	""Adults"" INTEGER,  	""Kids"" INTEGER, 	FOREIGN KEY (Room) REFERENCES Rooms(RoomId) ); ",easy
1819,7815,customers_and_addresses,"SELECT customer_name FROM customers WHERE payment_method  =  ""Cash""","What are the names of customers who use payment method ""Cash""?","PRAGMA foreign_keys = ON;  CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `address_content` VARCHAR(80), `city` VARCHAR(50), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(50), `country` VARCHAR(50), `other_address_details` VARCHAR(255) );  CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_details` VARCHAR(255) ); CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `payment_method` VARCHAR(15) NOT NULL, `customer_name` VARCHAR(80), `date_became_customer` DATETIME, `other_customer_details` VARCHAR(255) ); CREATE TABLE `Customer_Addresses` ( `customer_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_address_from` DATETIME NOT NULL, `address_type` VARCHAR(15) NOT NULL, `date_address_to` DATETIME, FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) ); CREATE TABLE `Customer_Contact_Channels` ( `customer_id` INTEGER NOT NULL, `channel_code` VARCHAR(15) NOT NULL, `active_from_date` DATETIME NOT NULL, `active_to_date` DATETIME, `contact_number` VARCHAR(50) NOT NULL, FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) ); CREATE TABLE `Customer_Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `order_status` VARCHAR(15) NOT NULL, `order_date` DATETIME, `order_details` VARCHAR(255), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) );  CREATE TABLE `Order_Items` ( `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, `order_quantity` VARCHAR(15), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ), FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ) ); ",easy
655,3086,customers_card_transactions,SELECT count(*) FROM Accounts,How many accounts do we have?,"PRAGMA foreign_keys = ON;  CREATE TABLE `Accounts` ( `account_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `account_name` VARCHAR(50), `other_account_details` VARCHAR(255) ); CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_first_name` VARCHAR(20), `customer_last_name` VARCHAR(20), `customer_address` VARCHAR(255), `customer_phone` VARCHAR(255), `customer_email` VARCHAR(255), `other_customer_details` VARCHAR(255) ); CREATE TABLE `Customers_Cards` ( `card_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `card_type_code` VARCHAR(15) NOT NULL, `card_number` VARCHAR(80), `date_valid_from` DATETIME, `date_valid_to` DATETIME, `other_card_details` VARCHAR(255) ); CREATE TABLE `Financial_Transactions` ( `transaction_id` INTEGER NOT NULL , `previous_transaction_id` INTEGER, `account_id` INTEGER NOT NULL, `card_id` INTEGER NOT NULL, `transaction_type` VARCHAR(15) NOT NULL, `transaction_date` DATETIME, `transaction_amount` DOUBLE NULL, `transaction_comment` VARCHAR(255), `other_transaction_details` VARCHAR(255), FOREIGN KEY (`card_id` ) REFERENCES `Customers_Cards`(`card_id` ), FOREIGN KEY (`account_id` ) REFERENCES `Accounts`(`account_id` ) );  INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (1, 'Aniyah', 'Feest', '55975 Theodore Estates Lake Brody, VT 57078', '(673)872-5338', 'fahey.dorian@example.com', NULL); INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (2, 'Susie', 'Wiza', '6478 Moen Isle Suite 910 Schimmelmouth, VT 96364-4898', '679-845-8645x94312', 'idickinson@example.com', NULL); INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (3, 'Marcel', 'Brekke', '1965 Abernathy Plains Port Lilla, LA 44867', '1-511-656-6664', 'nichole.rodriguez@example.com', NULL); INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (4, 'Art', 'Turcotte', '6862 Domenic Port New Elbert, DE 86980-8517', '941-213-6716x675', 'enrique59@example.com', NULL); INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (5, 'Armani', 'Farrell', '3031 Ludwig Square Unaview, SC 86336-3287', '224-123-1012', 'dauer@example.net', NULL); INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (6, 'Kiel', 'Schinner', '19935 Allie Bypass Apt. 409 Coleberg, FL 69194-5357', '1-564-044-3909', 'ebert.omer@example.net', NULL); INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (7, 'Izabella', 'Erdman', '23793 Athena Inlet Apt. 455 Schmidtmouth, NH 15794', '751.049.9948', 'kling.catalina@example.com', NULL); INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (8, 'Elyssa', 'Lind', '094 Julianne Mill Webstertown, KY 91980-4004', '+12(6)9024410984', 'dell13@example.com', NULL); INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (9, 'Faustino', 'Langworth', '0748 Lola Union Apt. 874 Reynoldsfurt, NM 94584-3767', '284.749.0453', 'ahomenick@example.org', NULL); INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (10, 'Axel', 'Effertz', '936 Lula Overpass East Alisonville, NH 14890', '+90(8)1290735932', 'kyra.murazik@example.org', NULL); INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (11, 'Frederic', 'Swift', '7127 Hilpert Parks South Johnfort, SD 67577-9504', '1-207-977-5182', 'keegan16@example.com', NULL); INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (12, 'Bryce', 'Rath', '74962 Hugh Mills North Laurenland, KY 46376', '(415)237-0701x3115', 'grady.general@example.org', NULL); INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (13, 'Serenity', 'Effertz', '71560 Eulah Squares Torphyberg, OK 34312-0380', '1-894-567-2283', 'schaden.katrina@example.net', NULL); INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (14, 'Blanche', 'Huels', '47286 Mraz Park Apt. 424 Jocelynfurt, OH 59023-2787', '(703)950-4708x8972', 'huels.antonina@example.com', NULL); INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (15, 'Nat', 'Davis', '163 Collier Square New Ceciltown, AL 64723-5646', '246-469-4472x359', 'earlene.carroll@example.net', NULL); ",easy
366,1143,geo,SELECT COUNT ( state_name ) FROM state;,how many states does usa have,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );",easy
1561,6844,cre_Drama_Workshop_Groups,SELECT count(*) FROM BOOKINGS,How many bookings do we have?,"PRAGMA foreign_keys = ON;  CREATE TABLE Ref_Payment_Methods ( payment_method_code CHAR(10) NOT NULL, payment_method_description VARCHAR(80), PRIMARY KEY (payment_method_code), UNIQUE (payment_method_code) ); CREATE TABLE Ref_Service_Types ( Service_Type_Code CHAR(15) NOT NULL, Parent_Service_Type_Code CHAR(15), Service_Type_Description VARCHAR(255), PRIMARY KEY (Service_Type_Code), UNIQUE (Service_Type_Code) );  CREATE TABLE Addresses ( Address_ID VARCHAR(100) NOT NULL, Line_1 VARCHAR(255), Line_2 VARCHAR(255), City_Town VARCHAR(255), State_County VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Address_ID), UNIQUE (Address_ID) ); CREATE TABLE Products ( Product_ID VARCHAR(100) NOT NULL, Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Product_Description VARCHAR(255), Other_Product_Service_Details VARCHAR(255), PRIMARY KEY (Product_ID), UNIQUE (Product_ID) ); CREATE TABLE Marketing_Regions ( Marketing_Region_Code CHAR(15) NOT NULL, Marketing_Region_Name VARCHAR(255) NOT NULL, Marketing_Region_Descriptrion VARCHAR(255) NOT NULL, Other_Details VARCHAR(255), PRIMARY KEY (Marketing_Region_Code), UNIQUE (Marketing_Region_Code) );  CREATE TABLE Clients ( Client_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Customer_Email_Address VARCHAR(255), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Client_ID), UNIQUE (Client_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) ); CREATE TABLE Drama_Workshop_Groups ( Workshop_Group_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Currency_Code CHAR(15) NOT NULL, Marketing_Region_Code CHAR(15) NOT NULL, Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Workshop_Group_ID), UNIQUE (Workshop_Group_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) ); CREATE TABLE Performers ( Performer_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Performer_ID), UNIQUE (Performer_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) ); CREATE TABLE Customers ( Customer_ID VARCHAR(100) NOT NULL, Address_ID INTEGER NOT NULL, Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Customer_ID), UNIQUE (Customer_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) ); CREATE TABLE Stores ( Store_ID VARCHAR(100) NOT NULL, Address_ID INTEGER NOT NULL, Marketing_Region_Code CHAR(15) NOT NULL, Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Store_ID), UNIQUE (Store_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID), FOREIGN KEY (Marketing_Region_Code) REFERENCES Marketing_Regions (Marketing_Region_Code) ); CREATE TABLE Bookings ( Booking_ID INTEGER NOT NULL , Customer_ID INTEGER NOT NULL, Workshop_Group_ID VARCHAR(100) NOT NULL, Status_Code CHAR(15) NOT NULL, Store_ID INTEGER NOT NULL, Order_Date DATETIME NOT NULL, Planned_Delivery_Date DATETIME NOT NULL, Actual_Delivery_Date DATETIME NOT NULL, Other_Order_Details VARCHAR(255), PRIMARY KEY (Booking_ID), UNIQUE (Booking_ID), FOREIGN KEY (Customer_ID) REFERENCES Clients (Client_ID), FOREIGN KEY (Workshop_Group_ID) REFERENCES Drama_Workshop_Groups (Workshop_Group_ID) ); CREATE TABLE Performers_in_Bookings ( Order_ID INTEGER NOT NULL, Performer_ID INTEGER NOT NULL, PRIMARY KEY (Order_ID, Performer_ID), FOREIGN KEY (Performer_ID) REFERENCES Performers (Performer_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID) ); CREATE TABLE Customer_Orders ( Order_ID INTEGER NOT NULL , Customer_ID INTEGER NOT NULL, Store_ID INTEGER NOT NULL, Order_Date DATETIME NOT NULL, Planned_Delivery_Date DATETIME NOT NULL, Actual_Delivery_Date DATETIME NOT NULL, Other_Order_Details VARCHAR(255), PRIMARY KEY (Order_ID), UNIQUE (Order_ID), FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY (Store_ID) REFERENCES Stores (Store_ID) ); CREATE TABLE Order_Items ( Order_Item_ID INTEGER NOT NULL , Order_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), PRIMARY KEY (Order_Item_ID), FOREIGN KEY (Order_ID) REFERENCES Customer_Orders (Order_ID), FOREIGN KEY (Product_ID) REFERENCES Products (Product_ID) ); CREATE TABLE Invoices ( Invoice_ID INTEGER NOT NULL, Order_ID INTEGER NOT NULL, payment_method_code CHAR(15), Product_ID INTEGER NOT NULL, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), Order_Item_ID INTEGER NOT NULL, PRIMARY KEY (Invoice_ID), FOREIGN KEY (Order_ID) REFERENCES Customer_Orders (Order_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID), FOREIGN KEY (payment_method_code) REFERENCES Ref_Payment_Methods (payment_method_code) ); CREATE TABLE Services ( Service_ID INTEGER NOT NULL, Service_Type_Code CHAR(15), Workshop_Group_ID INTEGER NOT NULL, Product_Description VARCHAR(255), Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Other_Product_Service_Details VARCHAR(255), PRIMARY KEY (Service_ID), UNIQUE (Service_ID), FOREIGN KEY (Workshop_Group_ID) REFERENCES Drama_Workshop_Groups (Workshop_Group_ID), FOREIGN KEY (Service_Type_Code) REFERENCES Ref_Service_Types (Service_Type_Code) ); CREATE TABLE Bookings_Services ( Order_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, PRIMARY KEY (Order_ID, Product_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID), FOREIGN KEY (Product_ID) REFERENCES Services (Service_ID) );  CREATE TABLE Invoice_Items ( Invoice_Item_ID INTEGER NOT NULL , Invoice_ID INTEGER NOT NULL, Order_ID INTEGER NOT NULL, Order_Item_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, Order_Quantity INTEGER, Other_Item_Details VARCHAR(255), PRIMARY KEY (Invoice_Item_ID), FOREIGN KEY (Order_Item_ID) REFERENCES Order_Items (Order_Item_ID), FOREIGN KEY (Invoice_ID) REFERENCES Invoices (Invoice_ID), FOREIGN KEY (Order_ID, Product_ID) REFERENCES Bookings_Services (Order_ID,Product_ID) ); ",easy
1220,5501,baseball_1,SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4;,Which cities have 2 to 4 parks?,"PRAGMA foreign_keys=OFF; BEGIN TRANSACTION; CREATE TABLE all_star (     player_id TEXT,     year INTEGER,     game_num INTEGER,     game_id TEXT,     team_id TEXT,     league_id TEXT,     gp NUMERIC,     starting_pos NUMERIC,     foreign key (player_id) references player(player_id) ); CREATE TABLE appearances (     year INTEGER,     team_id TEXT,     league_id TEXT,     player_id TEXT,     g_all NUMERIC,     gs NUMERIC,     g_batting INTEGER,     g_defense NUMERIC,     g_p INTEGER,     g_c INTEGER,     g_1b INTEGER,     g_2b INTEGER,     g_3b INTEGER,     g_ss INTEGER,     g_lf INTEGER,     g_cf INTEGER,     g_rf INTEGER,     g_of INTEGER,     g_dh NUMERIC,     g_ph NUMERIC,     g_pr NUMERIC,     foreign key (team_id) references team(team_id),     foreign key (player_id) references player(player_id) ); CREATE TABLE manager_award (     player_id TEXT,     award_id TEXT,     year INTEGER,     league_id TEXT,     tie TEXT,     notes NUMERIC,     foreign key (player_id) references player(player_id) ); CREATE TABLE player_award (  	player_id TEXT,  	award_id TEXT,  	year INTEGER,  	league_id TEXT,     	tie TEXT,     	notes TEXT, 	foreign key (player_id) references player(player_id) ); CREATE TABLE manager_award_vote (     award_id TEXT,     year INTEGER,     league_id TEXT,     player_id TEXT,     points_won INTEGER,     points_max INTEGER,     votes_first INTEGER); CREATE TABLE player_award_vote (     award_id TEXT,     year INTEGER,     league_id TEXT,     player_id TEXT,     points_won NUMERIC,     points_max INTEGER,     votes_first NUMERIC,    foreign key (player_id) references player(player_id) ); CREATE TABLE batting ( player_id TEXT, year INTEGER, stint INTEGER, team_id TEXT, league_id TEXT, g INTEGER, ab NUMERIC,     r NUMERIC,     h NUMERIC,     double NUMERIC,     triple NUMERIC,     hr NUMERIC,     rbi NUMERIC,     sb NUMERIC,     cs NUMERIC,     bb NUMERIC,     so NUMERIC,     ibb NUMERIC,     hbp NUMERIC,     sh NUMERIC,     sf NUMERIC,     g_idp NUMERIC, foreign key (player_id) references player(player_id) ); CREATE TABLE batting_postseason (     year INTEGER,     round TEXT,     player_id TEXT,     team_id TEXT,     league_id TEXT,     g INTEGER,     ab INTEGER,     r INTEGER,     h INTEGER,     double INTEGER,     triple INTEGER,     hr INTEGER,     rbi INTEGER,     sb INTEGER,     cs NUMERIC,     bb INTEGER,     so INTEGER,     ibb NUMERIC,     hbp NUMERIC,     sh NUMERIC,     sf NUMERIC,     g_idp NUMERIC, 	foreign key (player_id) references player(player_id), 	foreign key (team_id) references team(team_id) ); CREATE TABLE player_college ( player_id TEXT,     college_id TEXT,     year INTEGER, 	foreign key (player_id) references player(player_id), 	foreign key (college_id) references college(college_id) ); CREATE TABLE fielding (     player_id TEXT,     year INTEGER,     stint INTEGER,     team_id TEXT,     league_id TEXT,     pos TEXT,     g INTEGER,     gs NUMERIC,     inn_outs NUMERIC,     po NUMERIC,     a NUMERIC,     e NUMERIC,     dp NUMERIC,     pb NUMERIC,     wp NUMERIC,     sb NUMERIC,     cs NUMERIC,     zr NUMERIC, 	foreign key (player_id) references player(player_id) ); CREATE TABLE fielding_outfield (     player_id TEXT,     year INTEGER,     stint INTEGER,     glf NUMERIC,     gcf NUMERIC,     grf NUMERIC, 	foreign key (player_id) references player(player_id) ); CREATE TABLE fielding_postseason (     player_id TEXT,     year INTEGER,     team_id TEXT,     league_id TEXT,     round TEXT,     pos TEXT,     g INTEGER,     gs NUMERIC,     inn_outs NUMERIC,     po INTEGER,     a INTEGER,     e INTEGER,     dp INTEGER,     tp INTEGER,     pb NUMERIC,     sb NUMERIC,     cs NUMERIC, 	foreign key (player_id) references player(player_id), 	foreign key (team_id) references player(team_id) ); CREATE TABLE hall_of_fame (     player_id TEXT,     yearid INTEGER,     votedby TEXT,     ballots NUMERIC,     needed NUMERIC,     votes NUMERIC,     inducted TEXT,     category TEXT,     needed_note TEXT, 	foreign key (player_id) references player(player_id) ); CREATE TABLE home_game (     year INTEGER,     league_id TEXT,     team_id TEXT,     park_id TEXT,     span_first TEXT,     span_last TEXT,     games INTEGER,     openings INTEGER,     attendance INTEGER, 	foreign key (team_id) references team(team_id), 	foreign key (park_id) references park(park_id) ); CREATE TABLE manager (     player_id TEXT,     year INTEGER,     team_id TEXT,     league_id TEXT,     inseason INTEGER,     g INTEGER,     w INTEGER,     l INTEGER,     rank NUMERIC,     plyr_mgr TEXT, 	foreign key (team_id) references team(team_id) ); CREATE TABLE manager_half (     player_id TEXT,     year INTEGER,     team_id TEXT,     league_id TEXT,     inseason INTEGER,     half INTEGER,     g INTEGER,     w INTEGER,     l INTEGER,     rank INTEGER, 	foreign key (team_id) references team(team_id) ); CREATE TABLE player (     player_id TEXT,     birth_year NUMERIC,     birth_month NUMERIC,     birth_day NUMERIC,     birth_country TEXT,     birth_state TEXT,     birth_city TEXT,     death_year NUMERIC,     death_month NUMERIC,     death_day NUMERIC,     death_country TEXT,     death_state TEXT,     death_city TEXT,     name_first TEXT,     name_last TEXT,     name_given TEXT,     weight NUMERIC,     height NUMERIC,     bats TEXT,     throws TEXT,     debut TEXT,     final_game TEXT,     retro_id TEXT,     bbref_id TEXT); Macomb County','Steve','Gromek','Stephen Joseph',180,74,'B','R','1941-08-18','1957-07-25','groms101','gromest01'); Calhoun Cty','Charlie','Grover','Charles Byrd',185,73,'L','R','1913-09-09','1913-09-12','grovc101','grovech01'); CREATE TABLE park (     park_id TEXT,     park_name TEXT,     park_alias TEXT,     city TEXT,     state TEXT,     country TEXT); Anaheim Stadium','Anaheim','CA','US'); Ameriquest Field','Arlington','TX','US'); Union Grounds','Chicago','IL','US'); Cubs Park','Chicago','IL','US'); Comiskey Park II','Chicago','IL','US'); Briggs Stadium','Detroit','MI','US'); Astros Field','Houston','TX','US'); Pro Player Stadium; Dolphin Stadium; LandShark Stadium','Miami','FL','US'); SBC Park','San Francisco','CA','US'); CREATE TABLE pitching (     player_id TEXT,     year INTEGER,     stint INTEGER,     team_id TEXT,     league_id TEXT,     w INTEGER,     l INTEGER,     g INTEGER,     gs INTEGER,     cg INTEGER,     sho INTEGER,     sv INTEGER,     ipouts NUMERIC,     h INTEGER,     er INTEGER,     hr INTEGER,     bb INTEGER,     so INTEGER,     baopp NUMERIC,     era NUMERIC,     ibb NUMERIC,     wp NUMERIC,     hbp NUMERIC,     bk INTEGER,     bfp NUMERIC,     gf NUMERIC,     r INTEGER,     sh NUMERIC,     sf NUMERIC,     g_idp NUMERIC); CREATE TABLE pitching_postseason (     player_id TEXT,     year INTEGER,     round TEXT,     team_id TEXT,     league_id TEXT,     w INTEGER,     l INTEGER,     g INTEGER,     gs INTEGER,     cg INTEGER,     sho INTEGER,     sv INTEGER,     ipouts INTEGER,     h INTEGER,     er INTEGER,     hr INTEGER,     bb INTEGER,     so INTEGER,     baopp TEXT,     era NUMERIC,     ibb NUMERIC,     wp NUMERIC,     hbp NUMERIC,     bk NUMERIC,     bfp NUMERIC,     gf INTEGER,     r INTEGER,     sh NUMERIC,     sf NUMERIC,     g_idp NUMERIC); CREATE TABLE salary (     year INTEGER,     team_id TEXT,     league_id TEXT,     player_id TEXT,     salary INTEGER); CREATE TABLE college (     college_id TEXT,     name_full TEXT,     city TEXT,     state TEXT,     country TEXT); CREATE TABLE postseason (     year INTEGER,     round TEXT,     team_id_winner TEXT,     league_id_winner TEXT,     team_id_loser TEXT,     league_id_loser TEXT,     wins INTEGER,     losses INTEGER,     ties INTEGER); CREATE TABLE team (     year INTEGER,     league_id TEXT,     team_id TEXT,     franchise_id TEXT,     div_id TEXT,     rank INTEGER,     g INTEGER,     ghome NUMERIC,     w INTEGER,     l INTEGER,     div_win TEXT,     wc_win TEXT,     lg_win TEXT,     ws_win TEXT,     r INTEGER,     ab INTEGER,     h INTEGER,     double INTEGER,     triple INTEGER,     hr INTEGER,     bb INTEGER,     so NUMERIC,     sb NUMERIC,     cs NUMERIC,     hbp NUMERIC,     sf NUMERIC,     ra INTEGER,     er INTEGER,     era NUMERIC,     cg INTEGER,     sho INTEGER,     sv INTEGER,     ipouts INTEGER,     ha INTEGER,     hra INTEGER,     bba INTEGER,     soa INTEGER,     e INTEGER,     dp NUMERIC,     fp NUMERIC,     name TEXT,     park TEXT,     attendance NUMERIC,     bpf INTEGER,     ppf INTEGER,     team_id_br TEXT,     team_id_lahman45 TEXT,     team_id_retro TEXT); CREATE TABLE team_franchise (     franchise_id TEXT,     franchise_name TEXT,     active TEXT,     na_assoc TEXT); CREATE TABLE team_half (     year INTEGER,     league_id TEXT,     team_id TEXT,     half INTEGER,     div_id TEXT,     div_win TEXT,     rank INTEGER,     g INTEGER,     w INTEGER,     l INTEGER); COMMIT;",easy
1768,7648,cre_Theme_park,SELECT Tourist_Details FROM VISITORS,What is the detail of each visitor?,"PRAGMA foreign_keys = ON; CREATE TABLE Ref_Hotel_Star_Ratings ( star_rating_code CHAR(15) NOT NULL, star_rating_description VARCHAR(80), PRIMARY KEY (star_rating_code), UNIQUE (star_rating_code) );   CREATE TABLE Locations ( Location_ID INTEGER NOT NULL, Location_Name VARCHAR(255), Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Location_ID) ); CREATE TABLE Ref_Attraction_Types ( Attraction_Type_Code CHAR(15) NOT NULL, Attraction_Type_Description VARCHAR(255), PRIMARY KEY (Attraction_Type_Code), UNIQUE (Attraction_Type_Code) );  CREATE TABLE Visitors ( Tourist_ID INTEGER NOT NULL, Tourist_Details VARCHAR(255), PRIMARY KEY (Tourist_ID), UNIQUE (Tourist_ID) ); CREATE TABLE Features ( Feature_ID INTEGER NOT NULL, Feature_Details VARCHAR(255), PRIMARY KEY (Feature_ID) );  CREATE TABLE Hotels ( hotel_id INTEGER NOT NULL, star_rating_code CHAR(15) NOT NULL, pets_allowed_yn CHAR(1), price_range real, other_hotel_details VARCHAR(255), PRIMARY KEY (hotel_id), FOREIGN KEY (star_rating_code) REFERENCES Ref_Hotel_Star_Ratings (star_rating_code) );  CREATE TABLE Tourist_Attractions ( Tourist_Attraction_ID INTEGER NOT NULL, Attraction_Type_Code CHAR(15) NOT NULL, Location_ID INTEGER NOT NULL, How_to_Get_There VARCHAR(255), Name VARCHAR(255), Description VARCHAR(255), Opening_Hours VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Tourist_Attraction_ID), FOREIGN KEY (Location_ID) REFERENCES Locations (Location_ID), FOREIGN KEY (Attraction_Type_Code) REFERENCES Ref_Attraction_Types (Attraction_Type_Code) );  CREATE TABLE Street_Markets ( Market_ID INTEGER NOT NULL, Market_Details VARCHAR(255), PRIMARY KEY (Market_ID), FOREIGN KEY (Market_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Shops ( Shop_ID INTEGER NOT NULL, Shop_Details VARCHAR(255), PRIMARY KEY (Shop_ID), FOREIGN KEY (Shop_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Museums ( Museum_ID INTEGER NOT NULL, Museum_Details VARCHAR(255), PRIMARY KEY (Museum_ID), FOREIGN KEY (Museum_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Royal_Family ( Royal_Family_ID INTEGER NOT NULL, Royal_Family_Details VARCHAR(255), PRIMARY KEY (Royal_Family_ID), FOREIGN KEY (Royal_Family_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Theme_Parks ( Theme_Park_ID INTEGER NOT NULL, Theme_Park_Details VARCHAR(255), PRIMARY KEY (Theme_Park_ID), FOREIGN KEY (Theme_Park_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) );   CREATE TABLE Visits ( Visit_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Tourist_ID INTEGER NOT NULL, Visit_Date DATETIME NOT NULL, Visit_Details VARCHAR(40) NOT NULL, PRIMARY KEY (Visit_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID), FOREIGN KEY (Tourist_ID) REFERENCES Visitors (Tourist_ID) );   CREATE TABLE Photos ( Photo_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Name VARCHAR(255), Description VARCHAR(255), Filename VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Photo_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Staff ( Staff_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Name VARCHAR(40), Other_Details VARCHAR(255), PRIMARY KEY (Staff_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) );   CREATE TABLE Tourist_Attraction_Features ( Tourist_Attraction_ID INTEGER NOT NULL, Feature_ID INTEGER NOT NULL, PRIMARY KEY (Tourist_Attraction_ID, Feature_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID), FOREIGN KEY (Feature_ID) REFERENCES Features (Feature_ID) ); ",easy
874,3963,cinema,SELECT count(*) FROM cinema,How many cinema do we have?," PRAGMA foreign_keys = ON;   CREATE TABLE ""film"" ( ""Film_ID"" int, ""Rank_in_series"" int, ""Number_in_season"" int, ""Title"" text, ""Directed_by"" text, ""Original_air_date"" text, ""Production_code"" text, PRIMARY KEY (""Film_ID"") );  CREATE TABLE ""cinema"" ( ""Cinema_ID"" int, ""Name"" text, ""Openning_year"" int, ""Capacity"" int, ""Location"" text, PRIMARY KEY (""Cinema_ID""));  CREATE TABLE ""schedule"" ( ""Cinema_ID"" int, ""Film_ID"" int, ""Date"" text, ""Show_times_per_day"" int, ""Price"" float, PRIMARY KEY (""Cinema_ID"",""Film_ID""), FOREIGN KEY (`Film_ID`) REFERENCES `film`(`Film_ID`), FOREIGN KEY (`Cinema_ID`) REFERENCES `cinema`(`Cinema_ID`) );   ",easy
793,3553,apartment_rentals,"SELECT date_of_birth FROM Guests WHERE gender_code  =  ""Male""","Return the date of birth for all the guests with gender code ""Male"".","PRAGMA foreign_keys = ON;  CREATE TABLE Apartment_Buildings ( building_id INTEGER NOT NULL, building_short_name CHAR(15), building_full_name VARCHAR(80), building_description VARCHAR(255), building_address VARCHAR(255), building_manager VARCHAR(50), building_phone VARCHAR(80), PRIMARY KEY (building_id), UNIQUE (building_id) );  INSERT INTO `Apartment_Buildings` (`building_id`, `building_short_name`, `building_full_name`, `building_description`, `building_address`, `building_manager`, `building_phone`) VALUES (133, 'Normandie Court', 'Normandie Court', 'Studio', '7950 Casper Vista Apt. 176 Marquiseberg, CA 70496', 'Emma', '(948)040-1064x387'); INSERT INTO `Apartment_Buildings` (`building_id`, `building_short_name`, `building_full_name`, `building_description`, `building_address`, `building_manager`, `building_phone`) VALUES (153, 'Mercedes House', 'Mercedes House', 'Studio', '354 Otto Villages Charliefort, VT 71664', 'Brenden', '915-617-2408x832'); INSERT INTO `Apartment_Buildings` (`building_id`, `building_short_name`, `building_full_name`, `building_description`, `building_address`, `building_manager`, `building_phone`) VALUES (191, 'The Eugene', 'The Eugene', 'Flat', '71537 Gorczany Inlet Wisozkburgh, AL 08256', 'Melyssa', '(609)946-0491'); INSERT INTO `Apartment_Buildings` (`building_id`, `building_short_name`, `building_full_name`, `building_description`, `building_address`, `building_manager`, `building_phone`) VALUES (196, 'VIA 57 WEST', 'VIA 57 WEST', 'Studio', '959 Ethel Viaduct West Efrainburgh, DE 40074', 'Kathlyn', '681.772.2454'); INSERT INTO `Apartment_Buildings` (`building_id`, `building_short_name`, `building_full_name`, `building_description`, `building_address`, `building_manager`, `building_phone`) VALUES (225, 'Columbus Square', 'Columbus Square', 'Studio', '0703 Danika Mountains Apt. 362 Mohrland, AL 56839-5028', 'Kyle', '1-724-982-9507x640'); INSERT INTO `Apartment_Buildings` (`building_id`, `building_short_name`, `building_full_name`, `building_description`, `building_address`, `building_manager`, `building_phone`) VALUES (532, 'Avalon Park', 'Avalon Park', 'Duplex', '6827 Kessler Parkway Suite 908 Ahmedberg, WI 48788', 'Albert', '376-017-3538'); INSERT INTO `Apartment_Buildings` (`building_id`, `building_short_name`, `building_full_name`, `building_description`, `building_address`, `building_manager`, `building_phone`) VALUES (556, 'Peter Cooper Village', 'Peter Cooper Village', 'Flat', '861 Narciso Glens Suite 392 East Ottis, ND 73970', 'Darlene', '1-224-619-0295x13195'); INSERT INTO `Apartment_Buildings` (`building_id`, `building_short_name`, `building_full_name`, `building_description`, `building_address`, `building_manager`, `building_phone`) VALUES (624, 'Stuyvesant Town', 'Stuyvesant Town', 'Studio', '101 Queenie Mountains Suite 619 New Korbinmouth, KS 88726-1376', 'Marie', '(145)411-6406'); INSERT INTO `Apartment_Buildings` (`building_id`, `building_short_name`, `building_full_name`, `building_description`, `building_address`, `building_manager`, `building_phone`) VALUES (644, 'The Anthem', 'The Anthem', 'Flat', '50804 Mason Isle Suite 844 West Whitney, ID 66511', 'Ewald', '(909)086-5221x3455'); INSERT INTO `Apartment_Buildings` (`building_id`, `building_short_name`, `building_full_name`, `building_description`, `building_address`, `building_manager`, `building_phone`) VALUES (673, 'Barclay Tower', 'Barclay Tower', 'Flat', '1579 Runte Forges Apt. 548 Leuschkeland, OK 12009-8683', 'Rogers', '1-326-267-3386x613'); INSERT INTO `Apartment_Buildings` (`building_id`, `building_short_name`, `building_full_name`, `building_description`, `building_address`, `building_manager`, `building_phone`) VALUES (734, 'Windsor Court', 'Windsor Court', 'Studio', '601 Graham Roads Port Luz, VA 29660-6703', 'Olaf', '(480)480-7401'); INSERT INTO `Apartment_Buildings` (`building_id`, `building_short_name`, `building_full_name`, `building_description`, `building_address`, `building_manager`, `building_phone`) VALUES (744, 'Silver Towers', 'Silver Towers', 'Flat', '1844 Armstrong Stravenue Suite 853 Myrnatown, CT 13528', 'Claude', '1-667-728-2287x3158'); INSERT INTO `Apartment_Buildings` (`building_id`, `building_short_name`, `building_full_name`, `building_description`, `building_address`, `building_manager`, `building_phone`) VALUES (790, 'Biltmore Plaza', 'Biltmore Plaza', 'Duplex', '489 Josh Orchard Apt. 998 Sipesview, DE 69053', 'Sydni', '544-148-5565x2847'); INSERT INTO `Apartment_Buildings` (`building_id`, `building_short_name`, `building_full_name`, `building_description`, `building_address`, `building_manager`, `building_phone`) VALUES (808, 'Petersfield', 'Petersfield', 'Studio', '54686 Christopher Circles Apt. 321 Daytonland, ID 88081-3991', 'Juvenal', '318-398-8140'); INSERT INTO `Apartment_Buildings` (`building_id`, `building_short_name`, `building_full_name`, `building_description`, `building_address`, `building_manager`, `building_phone`) VALUES (968, 'The Clinton', 'The Clinton', 'Flat', '012 Arnoldo Mountain Gerholdland, ID 23342', 'Holly', '1-605-511-1973x25011');  CREATE TABLE Apartments ( apt_id INTEGER NOT NULL , building_id INTEGER NOT NULL, apt_type_code CHAR(15), apt_number CHAR(10), bathroom_count INTEGER, bedroom_count INTEGER, room_count CHAR(5), PRIMARY KEY (apt_id), UNIQUE (apt_id), FOREIGN KEY (building_id) REFERENCES Apartment_Buildings (building_id) ); CREATE TABLE Apartment_Facilities ( apt_id INTEGER NOT NULL, facility_code CHAR(15) NOT NULL, PRIMARY KEY (apt_id, facility_code), FOREIGN KEY (apt_id) REFERENCES Apartments (apt_id) ); CREATE TABLE Guests ( guest_id INTEGER NOT NULL , gender_code CHAR(1), guest_first_name VARCHAR(80), guest_last_name VARCHAR(80), date_of_birth DATETIME, PRIMARY KEY (guest_id), UNIQUE (guest_id) );  CREATE TABLE Apartment_Bookings ( apt_booking_id INTEGER NOT NULL, apt_id INTEGER, guest_id INTEGER NOT NULL, booking_status_code CHAR(15) NOT NULL, booking_start_date DATETIME, booking_end_date DATETIME, PRIMARY KEY (apt_booking_id), UNIQUE (apt_booking_id), FOREIGN KEY (apt_id) REFERENCES Apartments (apt_id), FOREIGN KEY (guest_id) REFERENCES Guests (guest_id) ); CREATE TABLE View_Unit_Status ( apt_id INTEGER, apt_booking_id INTEGER, status_date DATETIME NOT NULL, available_yn BIT, PRIMARY KEY (status_date), FOREIGN KEY (apt_id) REFERENCES Apartments (apt_id), FOREIGN KEY (apt_booking_id) REFERENCES Apartment_Bookings (apt_booking_id) ); ",easy
1152,5126,station_weather,SELECT count(DISTINCT services) FROM station,How many different services are provided by all stations?,"PRAGMA foreign_keys = ON;  CREATE TABLE ""train"" (     ""id"" int,     ""train_number"" int,     ""name"" text,     ""origin"" text,     ""destination"" text,     ""time"" text,     ""interval"" text,     primary key (""id"") );  CREATE TABLE ""station"" (     ""id"" int,     ""network_name"" text,     ""services"" text,     ""local_authority"" text,     primary key (""id"") );  CREATE TABLE ""route"" (     ""train_id"" int,     ""station_id"" int,     primary key (""train_id"", ""station_id""),     foreign key (""train_id"") references `train`(""id""),     foreign key (""station_id"") references `station`(""id"") );  CREATE TABLE ""weekly_weather"" (     ""station_id"" int,     ""day_of_week"" text,     ""high_temperature"" int,     ""low_temperature"" int,     ""precipitation"" real,     ""wind_speed_mph"" int,     primary key (""station_id"", ""day_of_week""),     foreign key (""station_id"") references ""station""(""id"") );  ",easy
926,4167,local_govt_in_alabama,SELECT service_type_code FROM services ORDER BY service_type_code,List the type of the services in alphabetical order.,"PRAGMA foreign_keys = ON;   CREATE TABLE Services ( Service_ID INTEGER NOT NULL, Service_Type_Code CHAR(15) NOT NULL, PRIMARY KEY (Service_ID) ); CREATE TABLE Participants ( Participant_ID INTEGER NOT NULL, Participant_Type_Code CHAR(15) NOT NULL, Participant_Details VARCHAR(255), PRIMARY KEY (Participant_ID) ); CREATE TABLE Events ( Event_ID INTEGER NOT NULL, Service_ID INTEGER NOT NULL, Event_Details VARCHAR(255), PRIMARY KEY (Event_ID), FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID) ); CREATE TABLE Participants_in_Events ( Event_ID INTEGER NOT NULL, Participant_ID INTEGER NOT NULL, PRIMARY KEY (Event_ID, Participant_ID), FOREIGN KEY (Participant_ID) REFERENCES Participants (Participant_ID), FOREIGN KEY (Event_ID) REFERENCES Events (Event_ID) ); ",easy
1789,7733,game_1,"SELECT gtype FROM Video_games WHERE gname  =  ""Call of Destiny""",What is the type of video game Call of Destiny.,"create table Student (         StuID        INTEGER PRIMARY KEY,         LName        VARCHAR(12),         Fname        VARCHAR(12),         Age      INTEGER,         Sex      VARCHAR(1),         Major        INTEGER,         Advisor      INTEGER,         city_code    VARCHAR(3)  );  create table Video_Games (        GameID           INTEGER PRIMARY KEY,        GName            VARCHAR(40),        GType            VARCHAR(40) );  create table Plays_Games (        StuID                INTEGER,        GameID            INTEGER,        Hours_Played      INTEGER,        FOREIGN KEY(GameID) REFERENCES Video_Games(GameID),        FOREIGN KEY(StuID) REFERENCES Student(StuID) );  create table SportsInfo (   StuID INTEGER,   SportName VARCHAR(32),   HoursPerWeek INTEGER,   GamesPlayed INTEGER,   OnScholarship VARCHAR(1),   FOREIGN KEY(StuID) REFERENCES Student(StuID) );   ",easy
56,289,employee_hire_evaluation,SELECT sum(bonus) FROM evaluation,What is total bonus given in all evaluations?," PRAGMA foreign_keys = ON;  CREATE TABLE ""employee"" ( ""Employee_ID"" int, ""Name"" text, ""Age"" int, ""City"" text, PRIMARY KEY (""Employee_ID"") );   CREATE TABLE ""shop"" ( ""Shop_ID"" int, ""Name"" text, ""Location"" text, ""District"" text, ""Number_products"" int, ""Manager_name"" text, PRIMARY KEY (""Shop_ID"") );   CREATE TABLE ""hiring"" ( ""Shop_ID"" int, ""Employee_ID"" int, ""Start_from"" text, ""Is_full_time"" bool, PRIMARY KEY (""Employee_ID""), FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`), FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`) );  CREATE TABLE ""evaluation"" ( ""Employee_ID"" text, ""Year_awarded"" text, ""Bonus"" real, PRIMARY KEY (""Employee_ID"",""Year_awarded""), FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`) );   ",easy
375,1160,geo,"SELECT capital FROM state WHERE state_name  =  ""texas"";",what is the capital of texas,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );",easy
1959,8313,train_station,SELECT count(*) FROM station,How many train stations are there?,"PRAGMA foreign_keys = ON;  CREATE TABLE ""station"" ( ""Station_ID"" int, ""Name"" text, ""Annual_entry_exit"" real, ""Annual_interchanges"" real, ""Total_Passengers"" real, ""Location"" text, ""Main_Services"" text, ""Number_of_Platforms"" int, PRIMARY KEY (""Station_ID"") );  CREATE TABLE ""train"" ( ""Train_ID"" int, ""Name"" text, ""Time"" text, ""Service"" text, PRIMARY KEY (""Train_ID"") );  CREATE TABLE ""train_station"" ( ""Train_ID"" int, ""Station_ID"" int,	 PRIMARY KEY (""Train_ID"",""Station_ID""), FOREIGN KEY (""Train_ID"") REFERENCES ""train""(""Train_ID""), FOREIGN KEY (""Station_ID"") REFERENCES ""station""(""Station_ID"") );  ",easy
573,2798,musical,SELECT Name FROM actor WHERE Age != 20,List the name of actors whose age is not 20.,"PRAGMA foreign_keys = ON;  CREATE TABLE ""musical"" ( ""Musical_ID"" int, ""Name"" text, ""Year"" int, ""Award"" text, ""Category"" text, ""Nominee"" text, ""Result"" text, PRIMARY KEY (""Musical_ID"") );  CREATE TABLE ""actor"" ( ""Actor_ID"" int, ""Name"" text, ""Musical_ID"" int, ""Character"" text, ""Duration"" text, ""age"" int, PRIMARY KEY (""Actor_ID""), FOREIGN KEY (""Musical_ID"") REFERENCES ""actor""(""Actor_ID"") );  ",easy
47,206,flight_2,"SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  ""ATO""",Count the number of flights into ATO.,"CREATE TABLE 'airlines' ( 	uid INTEGER PRIMARY KEY,  	Airline TEXT,  	Abbreviation TEXT,  	Country TEXT ); CREATE TABLE 'airports' ( 	City TEXT,  	AirportCode TEXT PRIMARY KEY,  	AirportName TEXT,  	Country TEXT,  	CountryAbbrev TEXT ); CREATE TABLE 'flights' ( 	Airline INTEGER,  	FlightNo INTEGER,  	SourceAirport TEXT,  	DestAirport TEXT,  	PRIMARY KEY(Airline, FlightNo), 	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode), 	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode) );",easy
126,527,student_transcripts_tracking,SELECT section_name FROM Sections ORDER BY section_name DESC,List the section_name in reversed lexicographical order.,"PRAGMA foreign_keys = ON; CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `line_1` VARCHAR(255), `line_2` VARCHAR(255), `line_3` VARCHAR(255), `city` VARCHAR(255), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(255), `country` VARCHAR(255), `other_address_details` VARCHAR(255) ); CREATE TABLE `Courses` ( `course_id` INTEGER PRIMARY KEY, `course_name` VARCHAR(255), `course_description` VARCHAR(255), `other_details` VARCHAR(255) );  CREATE TABLE `Departments` ( `department_id` INTEGER PRIMARY KEY, `department_name` VARCHAR(255), `department_description` VARCHAR(255), `other_details` VARCHAR(255) ); CREATE TABLE `Degree_Programs` ( `degree_program_id` INTEGER PRIMARY KEY, `department_id` INTEGER NOT NULL, `degree_summary_name` VARCHAR(255), `degree_summary_description` VARCHAR(255), `other_details` VARCHAR(255), FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` ) );  CREATE TABLE `Sections` ( `section_id` INTEGER PRIMARY KEY, `course_id` INTEGER NOT NULL, `section_name` VARCHAR(255), `section_description` VARCHAR(255), `other_details` VARCHAR(255), FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ) ); CREATE TABLE `Semesters` ( `semester_id` INTEGER PRIMARY KEY, `semester_name` VARCHAR(255), `semester_description` VARCHAR(255), `other_details` VARCHAR(255) ); CREATE TABLE `Students` ( `student_id` INTEGER PRIMARY KEY, `current_address_id` INTEGER NOT NULL, `permanent_address_id` INTEGER NOT NULL, `first_name` VARCHAR(80), `middle_name` VARCHAR(40), `last_name` VARCHAR(40), `cell_mobile_number` VARCHAR(40), `email_address` VARCHAR(40), `ssn` VARCHAR(40), `date_first_registered` DATETIME, `date_left` DATETIME, `other_student_details` VARCHAR(255), FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` ) );  CREATE TABLE `Student_Enrolment` ( `student_enrolment_id` INTEGER PRIMARY KEY, `degree_program_id` INTEGER NOT NULL, `semester_id` INTEGER NOT NULL, `student_id` INTEGER NOT NULL, `other_details` VARCHAR(255), FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ), FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ), FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ) ); CREATE TABLE `Student_Enrolment_Courses` ( `student_course_id` INTEGER PRIMARY KEY, `course_id` INTEGER NOT NULL, `student_enrolment_id` INTEGER NOT NULL, FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ), FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` ) );  CREATE TABLE `Transcripts` ( `transcript_id` INTEGER PRIMARY KEY, `transcript_date` DATETIME, `other_details` VARCHAR(255) );  CREATE TABLE `Transcript_Contents` ( `student_course_id` INTEGER NOT NULL, `transcript_id` INTEGER NOT NULL, FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ), FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` ) );  ",easy
1249,5568,e_learning,SELECT address_line_1 FROM Course_Authors_and_Tutors,List the addresses of all the course authors or tutors.,"PRAGMA foreign_keys = ON; CREATE TABLE `Course_Authors_and_Tutors` ( `author_id` INTEGER PRIMARY KEY, `author_tutor_ATB` VARCHAR(3), `login_name` VARCHAR(40), `password` VARCHAR(40), `personal_name` VARCHAR(80), `middle_name` VARCHAR(80), `family_name` VARCHAR(80), `gender_mf` VARCHAR(1), `address_line_1` VARCHAR(80) ); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (1, '331', 'jmckenzie', 'c40fa148bdd0d2d45cd6e9ec1e685750fe07f81b', 'Cathrine', 'Ruthie', 'Grant', '0', '756 Monahan Mews Spinkashire, NJ 64230-5098'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (2, '975', 'heidenreich.ara', '24b0ee84063c3b017ab1839e01b7280f47f7c7c2', 'Retha', 'Corene', 'Armstrong', '0', '98623 Huels Manor Jasttown, DE 31611'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (3, '349', 'clementina29', 'cdaf6c3483f19e2253659a40a3aab786a3390f78', 'Darius', 'Ethyl', 'Reichel', '0', '99296 Keeling Courts North Audreanne, IL 28272'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (4, '782', 'wlehner', 'd34378200c9b5f72d3039fa640e7920aaec0fdf2', 'Julio', 'Aniyah', 'Nader', '1', '644 Montana Hill Suite 489 Daijamouth, CA 19587-4254'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (5, '388', 'nyundt', '2c196efe8aee23a1b9a7e752fe63029c5879af6f', 'Yessenia', 'Zena', 'Barrows', '1', '5284 Champlin Roads Cassinport, WY 54636'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (6, '817', 'al75', 'e96c0bcbbbb14747747a56ff4c17354f343a5b4f', 'Adolf', 'Keira', 'Rohan', '1', '92220 Hellen Skyway Apt. 635 Rennerview, MS 81036'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (7, '869', 'marty.bergnaum', '3e2f7bf1e6acf0d616a8703ee0050fba13bc007f', 'Logan', 'Ethelyn', 'Treutel', '1', '67541 Osborne Creek Suite 532 Bernhardview, WV 30288-1050'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (8, '557', 'medhurst.alvah', '02d64f11de97436343a0beba41bfcf69af61be1e', 'Kelsie', 'Kennith', 'Rowe', '0', '0256 Walter Meadows Suite 523 Norbertoborough, AZ 49193'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (9, '505', 'antonetta19', '4d8e909ae9b8888c93a2c5f1eccbd0c4ac6a01c3', 'Georgiana', 'Mathew', 'Zboncak', '0', '445 Quigley Fall Port Antonette, IN 81992-1255'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (10, '159', 'adam.rippin', 'b517a107b5f08fafe9628e88e7263a6f3a4a55c0', 'Deja', 'Joyce', 'Champlin', '1', '22575 Effertz Neck Apt. 046 Port Scotty, NY 67108-9197'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (11, '229', 'dschaefer', '4f149f75ecd84afcdf27343509cdd03d81edb119', 'Ciara', 'Alejandra', 'Greenholt', '0', '425 White Brooks Emmaleefort, IN 97850-2510'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (12, '847', 'nellie.mosciski', 'a48e25a58b3088e9cfdaca61130555ed2c772452', 'Sheldon', 'Jayce', 'Kreiger', '1', '513 Collins Plain Apt. 829 Clementinaville, VT 59908-2793'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (13, '613', 'qking', '6b9979a83b4a9e03ead034c8de47f1b013a3d3af', 'Madonna', 'Jaclyn', 'Effertz', '1', '139 O''Conner Circles Virginieland, KS 23365'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (14, '833', 'fiona77', '120ac8a5744f5b710ecaebbd8dd1633e3e33886e', 'Dusty', 'Amani', 'Crist', '1', '3602 Boehm Forest Zulaufton, DC 35229-0366'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (15, '974', 'ekshlerin', '6d587cec8006e3a40565e1dad2c5b5b12b475b8f', 'Shakira', 'Fritz', 'Haley', '0', '8928 Kunze Valley Apt. 747 South Jedidiahmouth, DE 28167');   CREATE TABLE `Students` ( `student_id` INTEGER PRIMARY KEY, `date_of_registration` DATETIME, `date_of_latest_logon` DATETIME, `login_name` VARCHAR(40), `password` VARCHAR(10), `personal_name` VARCHAR(40), `middle_name` VARCHAR(40), `family_name` VARCHAR(40) ); CREATE TABLE `Subjects` ( `subject_id` INTEGER PRIMARY KEY, `subject_name` VARCHAR(120) ); CREATE TABLE `Courses` ( `course_id` INTEGER PRIMARY KEY, `author_id` INTEGER NOT NULL, `subject_id` INTEGER NOT NULL, `course_name` VARCHAR(120), `course_description` VARCHAR(255), FOREIGN KEY (`author_id` ) REFERENCES `Course_Authors_and_Tutors`(`author_id` ), FOREIGN KEY (`subject_id` ) REFERENCES `Subjects`(`subject_id` ) ); CREATE TABLE `Student_Course_Enrolment` ( `registration_id` INTEGER PRIMARY KEY, `student_id` INTEGER NOT NULL, `course_id` INTEGER NOT NULL, `date_of_enrolment` DATETIME NOT NULL, `date_of_completion` DATETIME NOT NULL, FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ), FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ) );  CREATE TABLE `Student_Tests_Taken` ( `registration_id` INTEGER NOT NULL, `date_test_taken` DATETIME NOT NULL, `test_result` VARCHAR(255), FOREIGN KEY (`registration_id` ) REFERENCES `Student_Course_Enrolment`(`registration_id` ) );  ",easy
1765,7643,cre_Theme_park,SELECT DISTINCT Location_Name FROM LOCATIONS,Show all distinct location names.,"PRAGMA foreign_keys = ON; CREATE TABLE Ref_Hotel_Star_Ratings ( star_rating_code CHAR(15) NOT NULL, star_rating_description VARCHAR(80), PRIMARY KEY (star_rating_code), UNIQUE (star_rating_code) );   CREATE TABLE Locations ( Location_ID INTEGER NOT NULL, Location_Name VARCHAR(255), Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Location_ID) ); CREATE TABLE Ref_Attraction_Types ( Attraction_Type_Code CHAR(15) NOT NULL, Attraction_Type_Description VARCHAR(255), PRIMARY KEY (Attraction_Type_Code), UNIQUE (Attraction_Type_Code) );  CREATE TABLE Visitors ( Tourist_ID INTEGER NOT NULL, Tourist_Details VARCHAR(255), PRIMARY KEY (Tourist_ID), UNIQUE (Tourist_ID) ); CREATE TABLE Features ( Feature_ID INTEGER NOT NULL, Feature_Details VARCHAR(255), PRIMARY KEY (Feature_ID) );  CREATE TABLE Hotels ( hotel_id INTEGER NOT NULL, star_rating_code CHAR(15) NOT NULL, pets_allowed_yn CHAR(1), price_range real, other_hotel_details VARCHAR(255), PRIMARY KEY (hotel_id), FOREIGN KEY (star_rating_code) REFERENCES Ref_Hotel_Star_Ratings (star_rating_code) );  CREATE TABLE Tourist_Attractions ( Tourist_Attraction_ID INTEGER NOT NULL, Attraction_Type_Code CHAR(15) NOT NULL, Location_ID INTEGER NOT NULL, How_to_Get_There VARCHAR(255), Name VARCHAR(255), Description VARCHAR(255), Opening_Hours VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Tourist_Attraction_ID), FOREIGN KEY (Location_ID) REFERENCES Locations (Location_ID), FOREIGN KEY (Attraction_Type_Code) REFERENCES Ref_Attraction_Types (Attraction_Type_Code) );  CREATE TABLE Street_Markets ( Market_ID INTEGER NOT NULL, Market_Details VARCHAR(255), PRIMARY KEY (Market_ID), FOREIGN KEY (Market_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Shops ( Shop_ID INTEGER NOT NULL, Shop_Details VARCHAR(255), PRIMARY KEY (Shop_ID), FOREIGN KEY (Shop_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Museums ( Museum_ID INTEGER NOT NULL, Museum_Details VARCHAR(255), PRIMARY KEY (Museum_ID), FOREIGN KEY (Museum_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Royal_Family ( Royal_Family_ID INTEGER NOT NULL, Royal_Family_Details VARCHAR(255), PRIMARY KEY (Royal_Family_ID), FOREIGN KEY (Royal_Family_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Theme_Parks ( Theme_Park_ID INTEGER NOT NULL, Theme_Park_Details VARCHAR(255), PRIMARY KEY (Theme_Park_ID), FOREIGN KEY (Theme_Park_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) );   CREATE TABLE Visits ( Visit_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Tourist_ID INTEGER NOT NULL, Visit_Date DATETIME NOT NULL, Visit_Details VARCHAR(40) NOT NULL, PRIMARY KEY (Visit_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID), FOREIGN KEY (Tourist_ID) REFERENCES Visitors (Tourist_ID) );   CREATE TABLE Photos ( Photo_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Name VARCHAR(255), Description VARCHAR(255), Filename VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Photo_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Staff ( Staff_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Name VARCHAR(40), Other_Details VARCHAR(255), PRIMARY KEY (Staff_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) );   CREATE TABLE Tourist_Attraction_Features ( Tourist_Attraction_ID INTEGER NOT NULL, Feature_ID INTEGER NOT NULL, PRIMARY KEY (Tourist_Attraction_ID, Feature_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID), FOREIGN KEY (Feature_ID) REFERENCES Features (Feature_ID) ); ",easy
1141,5048,behavior_monitoring,SELECT DISTINCT detention_type_code FROM Detention,Return all distinct detention type codes.,"PRAGMA foreign_keys = ON; CREATE TABLE `Ref_Address_Types` ( `address_type_code` VARCHAR(15) PRIMARY KEY, `address_type_description` VARCHAR(80) ); CREATE TABLE `Ref_Detention_Type` ( `detention_type_code` VARCHAR(10) PRIMARY KEY, `detention_type_description` VARCHAR(80) ); CREATE TABLE `Ref_Incident_Type` ( `incident_type_code` VARCHAR(10) PRIMARY KEY, `incident_type_description` VARCHAR(80) );  CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `line_1` VARCHAR(120), `line_2` VARCHAR(120), `line_3` VARCHAR(120), `city` VARCHAR(80), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(50), `country` VARCHAR(50), `other_address_details` VARCHAR(255) );  CREATE TABLE `Students` ( `student_id` INTEGER PRIMARY KEY, `address_id` INTEGER NOT NULL, `first_name` VARCHAR(80), `middle_name` VARCHAR(40), `last_name` VARCHAR(40), `cell_mobile_number` VARCHAR(40), `email_address` VARCHAR(40), `date_first_rental` DATETIME, `date_left_university` DATETIME, `other_student_details` VARCHAR(255), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ) );  CREATE TABLE `Teachers` ( `teacher_id` INTEGER PRIMARY KEY, `address_id` INTEGER NOT NULL, `first_name` VARCHAR(80), `middle_name` VARCHAR(80), `last_name` VARCHAR(80), `gender` VARCHAR(1), `cell_mobile_number` VARCHAR(40), `email_address` VARCHAR(40), `other_details` VARCHAR(255), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ) ); CREATE TABLE `Assessment_Notes` ( `notes_id` INTEGER NOT NULL , `student_id` INTEGER, `teacher_id` INTEGER NOT NULL, `date_of_notes` DATETIME, `text_of_notes` VARCHAR(255), `other_details` VARCHAR(255), FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ), FOREIGN KEY (`teacher_id` ) REFERENCES `Teachers`(`teacher_id` ) ); CREATE TABLE `Behavior_Incident` ( `incident_id` INTEGER PRIMARY KEY, `incident_type_code` VARCHAR(10) NOT NULL, `student_id` INTEGER NOT NULL, `date_incident_start` DATETIME, `date_incident_end` DATETIME, `incident_summary` VARCHAR(255), `recommendations` VARCHAR(255), `other_details` VARCHAR(255), FOREIGN KEY (`incident_type_code` ) REFERENCES `Ref_Incident_Type`(`incident_type_code` ), FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ) ); CREATE TABLE `Detention` ( `detention_id` INTEGER PRIMARY KEY, `detention_type_code` VARCHAR(10) NOT NULL, `teacher_id` INTEGER, `datetime_detention_start` DATETIME, `datetime_detention_end` DATETIME, `detention_summary` VARCHAR(255), `other_details` VARCHAR(255), FOREIGN KEY (`detention_type_code` ) REFERENCES `Ref_Detention_Type`(`detention_type_code` ), FOREIGN KEY (`teacher_id` ) REFERENCES `Teachers`(`teacher_id` ) );  CREATE TABLE `Student_Addresses` ( `student_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_address_from` DATETIME NOT NULL, `date_address_to` DATETIME, `monthly_rental` DECIMAL(19,4), `other_details` VARCHAR(255), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ) );  CREATE TABLE `Students_in_Detention` ( `student_id` INTEGER NOT NULL, `detention_id` INTEGER NOT NULL, `incident_id` INTEGER NOT NULL, FOREIGN KEY (`incident_id` ) REFERENCES `Behavior_Incident`(`incident_id` ), FOREIGN KEY (`detention_id` ) REFERENCES `Detention`(`detention_id` ), FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ) );  ",easy
1720,7428,dorm_1,SELECT fname FROM student WHERE age  >  20,Find the first name of students who is older than 20.," create table Student (         StuID        INTEGER PRIMARY KEY,         LName        VARCHAR(12),         Fname        VARCHAR(12),         Age      INTEGER,         Sex      VARCHAR(1),         Major        INTEGER,         Advisor      INTEGER,         city_code    VARCHAR(3)  );    create table Dorm (        dormid		INTEGER,        dorm_name	VARCHAR(20),        student_capacity	INTEGER,        gender			VARCHAR(1) ) ;  create table Dorm_amenity (        amenid			INTEGER,        amenity_name		VARCHAR(25) ) ;  create table Has_amenity (        dormid			INTEGER,        amenid				INTEGER, 	FOREIGN KEY (dormid) REFERENCES `Dorm`(dormid), 	FOREIGN KEY (amenid) REFERENCES `Dorm_amenity`(amenid) );  create table Lives_in (        stuid 	      INTEGER,        dormid		INTEGER,        room_number	INTEGER, 	FOREIGN KEY (stuid) REFERENCES `Student`(StuID),         FOREIGN KEY (dormid) REFERENCES `Dorm`(dormid) );  ",easy
614,2923,flight_1,SELECT flno FROM Flight WHERE distance  >  2000,What are the numbers of all flights that can cover a distance of more than 2000?,"-- drop table flight cascade constraints; -- drop table aircraft cascade constraints; -- drop table employee cascade constraints; -- drop table certificate cascade constraints;  create table flight( 	flno number(4,0) primary key, 	origin varchar2(20), 	destination varchar2(20), 	distance number(6,0), 	departure_date date, 	arrival_date date, 	price number(7,2),     aid number(9,0),     foreign key(""aid"") references `aircraft`(""aid""));  create table aircraft( 	aid number(9,0) primary key, 	name varchar2(30), 	distance number(6,0));  create table employee( 	eid number(9,0) primary key, 	name varchar2(30), 	salary number(10,2));  create table certificate( 	eid number(9,0), 	aid number(9,0), 	primary key(eid,aid), 	foreign key(""eid"") references `employee`(""eid""), 	foreign key(""aid"") references `aircraft`(""aid""));   ",easy
661,3110,customers_card_transactions,SELECT count(*) FROM Customers,How many customers do we have?,"PRAGMA foreign_keys = ON;  CREATE TABLE `Accounts` ( `account_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `account_name` VARCHAR(50), `other_account_details` VARCHAR(255) ); CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_first_name` VARCHAR(20), `customer_last_name` VARCHAR(20), `customer_address` VARCHAR(255), `customer_phone` VARCHAR(255), `customer_email` VARCHAR(255), `other_customer_details` VARCHAR(255) ); CREATE TABLE `Customers_Cards` ( `card_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `card_type_code` VARCHAR(15) NOT NULL, `card_number` VARCHAR(80), `date_valid_from` DATETIME, `date_valid_to` DATETIME, `other_card_details` VARCHAR(255) ); CREATE TABLE `Financial_Transactions` ( `transaction_id` INTEGER NOT NULL , `previous_transaction_id` INTEGER, `account_id` INTEGER NOT NULL, `card_id` INTEGER NOT NULL, `transaction_type` VARCHAR(15) NOT NULL, `transaction_date` DATETIME, `transaction_amount` DOUBLE NULL, `transaction_comment` VARCHAR(255), `other_transaction_details` VARCHAR(255), FOREIGN KEY (`card_id` ) REFERENCES `Customers_Cards`(`card_id` ), FOREIGN KEY (`account_id` ) REFERENCES `Accounts`(`account_id` ) );  INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (1, 'Aniyah', 'Feest', '55975 Theodore Estates Lake Brody, VT 57078', '(673)872-5338', 'fahey.dorian@example.com', NULL); INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (2, 'Susie', 'Wiza', '6478 Moen Isle Suite 910 Schimmelmouth, VT 96364-4898', '679-845-8645x94312', 'idickinson@example.com', NULL); INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (3, 'Marcel', 'Brekke', '1965 Abernathy Plains Port Lilla, LA 44867', '1-511-656-6664', 'nichole.rodriguez@example.com', NULL); INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (4, 'Art', 'Turcotte', '6862 Domenic Port New Elbert, DE 86980-8517', '941-213-6716x675', 'enrique59@example.com', NULL); INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (5, 'Armani', 'Farrell', '3031 Ludwig Square Unaview, SC 86336-3287', '224-123-1012', 'dauer@example.net', NULL); INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (6, 'Kiel', 'Schinner', '19935 Allie Bypass Apt. 409 Coleberg, FL 69194-5357', '1-564-044-3909', 'ebert.omer@example.net', NULL); INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (7, 'Izabella', 'Erdman', '23793 Athena Inlet Apt. 455 Schmidtmouth, NH 15794', '751.049.9948', 'kling.catalina@example.com', NULL); INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (8, 'Elyssa', 'Lind', '094 Julianne Mill Webstertown, KY 91980-4004', '+12(6)9024410984', 'dell13@example.com', NULL); INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (9, 'Faustino', 'Langworth', '0748 Lola Union Apt. 874 Reynoldsfurt, NM 94584-3767', '284.749.0453', 'ahomenick@example.org', NULL); INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (10, 'Axel', 'Effertz', '936 Lula Overpass East Alisonville, NH 14890', '+90(8)1290735932', 'kyra.murazik@example.org', NULL); INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (11, 'Frederic', 'Swift', '7127 Hilpert Parks South Johnfort, SD 67577-9504', '1-207-977-5182', 'keegan16@example.com', NULL); INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (12, 'Bryce', 'Rath', '74962 Hugh Mills North Laurenland, KY 46376', '(415)237-0701x3115', 'grady.general@example.org', NULL); INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (13, 'Serenity', 'Effertz', '71560 Eulah Squares Torphyberg, OK 34312-0380', '1-894-567-2283', 'schaden.katrina@example.net', NULL); INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (14, 'Blanche', 'Huels', '47286 Mraz Park Apt. 424 Jocelynfurt, OH 59023-2787', '(703)950-4708x8972', 'huels.antonina@example.com', NULL); INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (15, 'Nat', 'Davis', '163 Collier Square New Ceciltown, AL 64723-5646', '246-469-4472x359', 'earlene.carroll@example.net', NULL); ",easy
186,695,orchestra,SELECT avg(Attendance) FROM SHOW,What is the average attendance of shows?," PRAGMA foreign_keys = ON;    CREATE TABLE ""conductor"" ( ""Conductor_ID"" int, ""Name"" text, ""Age"" int, ""Nationality"" text, ""Year_of_Work"" int, PRIMARY KEY (""Conductor_ID"") );  CREATE TABLE ""orchestra"" ( ""Orchestra_ID"" int, ""Orchestra"" text, ""Conductor_ID"" int, ""Record_Company"" text, ""Year_of_Founded"" real, ""Major_Record_Format"" text, PRIMARY KEY (""Orchestra_ID""), FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`) );  CREATE TABLE ""performance"" ( ""Performance_ID"" int, ""Orchestra_ID"" int, ""Type"" text, ""Date"" text, ""Official_ratings_(millions)"" real, ""Weekly_rank"" text, ""Share"" text, PRIMARY KEY (""Performance_ID""), FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`) );  CREATE TABLE ""show"" ( ""Show_ID"" int, ""Performance_ID"" int, ""If_first_show"" bool, ""Result"" text, ""Attendance"" real, FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`) );    ",easy
1276,5699,hospital_1,SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn,List the names of patients who have made appointments.,"-- https://en.wikibooks.org/wiki/SQL_Exercises/The_Hospital  DROP TABLE IF EXISTS Physician; CREATE TABLE Physician (   EmployeeID INTEGER NOT NULL,   Name VARCHAR(30) NOT NULL,   Position VARCHAR(30) NOT NULL,   SSN INTEGER NOT NULL,   CONSTRAINT pk_physician PRIMARY KEY(EmployeeID) );   DROP TABLE IF EXISTS Department; CREATE TABLE Department (   DepartmentID INTEGER NOT NULL,   Name VARCHAR(30) NOT NULL,   Head INTEGER NOT NULL,   CONSTRAINT pk_Department PRIMARY KEY(DepartmentID),   CONSTRAINT fk_Department_Physician_EmployeeID FOREIGN KEY(Head) REFERENCES Physician(EmployeeID) );   DROP TABLE IF EXISTS Affiliated_With; CREATE TABLE Affiliated_With (   Physician INTEGER NOT NULL,   Department INTEGER NOT NULL,   PrimaryAffiliation BOOLEAN NOT NULL,   CONSTRAINT fk_Affiliated_With_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),   CONSTRAINT fk_Affiliated_With_Department_DepartmentID FOREIGN KEY(Department) REFERENCES Department(DepartmentID),   PRIMARY KEY(Physician, Department) );  DROP TABLE IF EXISTS Procedures; CREATE TABLE Procedures (   Code INTEGER PRIMARY KEY NOT NULL,   Name VARCHAR(30) NOT NULL,   Cost REAL NOT NULL );  DROP TABLE IF EXISTS Trained_In; CREATE TABLE Trained_In (   Physician INTEGER NOT NULL,   Treatment INTEGER NOT NULL,   CertificationDate DATETIME NOT NULL,   CertificationExpires DATETIME NOT NULL,   CONSTRAINT fk_Trained_In_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),   CONSTRAINT fk_Trained_In_Procedures_Code FOREIGN KEY(Treatment) REFERENCES Procedures(Code),   PRIMARY KEY(Physician, Treatment) );  DROP TABLE IF EXISTS Patient; CREATE TABLE Patient (   SSN INTEGER PRIMARY KEY NOT NULL,   Name VARCHAR(30) NOT NULL,   Address VARCHAR(30) NOT NULL,   Phone VARCHAR(30) NOT NULL,   InsuranceID INTEGER NOT NULL,   PCP INTEGER NOT NULL,   CONSTRAINT fk_Patient_Physician_EmployeeID FOREIGN KEY(PCP) REFERENCES Physician(EmployeeID) );  DROP TABLE IF EXISTS Nurse; CREATE TABLE Nurse (   EmployeeID INTEGER PRIMARY KEY NOT NULL,   Name VARCHAR(30) NOT NULL,   Position VARCHAR(30) NOT NULL,   Registered BOOLEAN NOT NULL,   SSN INTEGER NOT NULL );  DROP TABLE IF EXISTS Appointment; CREATE TABLE Appointment (   AppointmentID INTEGER PRIMARY KEY NOT NULL,   Patient INTEGER NOT NULL,       PrepNurse INTEGER,   Physician INTEGER NOT NULL,   Start DATETIME NOT NULL,   End DATETIME NOT NULL,   ExaminationRoom TEXT NOT NULL,   CONSTRAINT fk_Appointment_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),   CONSTRAINT fk_Appointment_Nurse_EmployeeID FOREIGN KEY(PrepNurse) REFERENCES Nurse(EmployeeID),   CONSTRAINT fk_Appointment_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID) );  DROP TABLE IF EXISTS Medication; CREATE TABLE Medication (   Code INTEGER PRIMARY KEY NOT NULL,   Name VARCHAR(30) NOT NULL,   Brand VARCHAR(30) NOT NULL,   Description VARCHAR(30) NOT NULL );   DROP TABLE IF EXISTS Prescribes; CREATE TABLE Prescribes (   Physician INTEGER NOT NULL,   Patient INTEGER NOT NULL,    Medication INTEGER NOT NULL,    Date DATETIME NOT NULL,   Appointment INTEGER,     Dose VARCHAR(30) NOT NULL,   PRIMARY KEY(Physician, Patient, Medication, Date),   CONSTRAINT fk_Prescribes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),   CONSTRAINT fk_Prescribes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),   CONSTRAINT fk_Prescribes_Medication_Code FOREIGN KEY(Medication) REFERENCES Medication(Code),   CONSTRAINT fk_Prescribes_Appointment_AppointmentID FOREIGN KEY(Appointment) REFERENCES Appointment(AppointmentID) );  DROP TABLE IF EXISTS Block; CREATE TABLE Block (   BlockFloor INTEGER NOT NULL,   BlockCode INTEGER NOT NULL,   PRIMARY KEY(BlockFloor, BlockCode) );   DROP TABLE IF EXISTS Room; CREATE TABLE Room (   RoomNumber INTEGER PRIMARY KEY NOT NULL,   RoomType VARCHAR(30) NOT NULL,   BlockFloor INTEGER NOT NULL,     BlockCode INTEGER NOT NULL,     Unavailable BOOLEAN NOT NULL,   CONSTRAINT fk_Room_Block_PK FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode) );  DROP TABLE IF EXISTS On_Call; CREATE TABLE On_Call (   Nurse INTEGER NOT NULL,   BlockFloor INTEGER NOT NULL,    BlockCode INTEGER NOT NULL,   OnCallStart DATETIME NOT NULL,   OnCallEnd DATETIME NOT NULL,   PRIMARY KEY(Nurse, BlockFloor, BlockCode, OnCallStart, OnCallEnd),   CONSTRAINT fk_OnCall_Nurse_EmployeeID FOREIGN KEY(Nurse) REFERENCES Nurse(EmployeeID),   CONSTRAINT fk_OnCall_Block_Floor FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode)  );  DROP TABLE IF EXISTS Stay; CREATE TABLE Stay (   StayID INTEGER PRIMARY KEY NOT NULL,   Patient INTEGER NOT NULL,   Room INTEGER NOT NULL,   StayStart DATETIME NOT NULL,   StayEnd DATETIME NOT NULL,   CONSTRAINT fk_Stay_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),   CONSTRAINT fk_Stay_Room_Number FOREIGN KEY(Room) REFERENCES Room(RoomNumber) );  DROP TABLE IF EXISTS Undergoes; CREATE TABLE Undergoes (   Patient INTEGER NOT NULL,   Procedures INTEGER NOT NULL,   Stay INTEGER NOT NULL,   DateUndergoes DATETIME NOT NULL,   Physician INTEGER NOT NULL,   AssistingNurse INTEGER,   PRIMARY KEY(Patient, Procedures, Stay, DateUndergoes),   CONSTRAINT fk_Undergoes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),   CONSTRAINT fk_Undergoes_Procedures_Code FOREIGN KEY(Procedures) REFERENCES Procedures(Code),   CONSTRAINT fk_Undergoes_Stay_StayID FOREIGN KEY(Stay) REFERENCES Stay(StayID),   CONSTRAINT fk_Undergoes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),   CONSTRAINT fk_Undergoes_Nurse_EmployeeID FOREIGN KEY(AssistingNurse) REFERENCES Nurse(EmployeeID) );   ",easy
891,4046,gas_company,SELECT count(*) FROM gas_station WHERE open_year BETWEEN 2000 AND 2005,How many gas station are opened between 2000 and 2005?," PRAGMA foreign_keys = ON;   CREATE TABLE ""company"" ( ""Company_ID"" int, ""Rank"" int, ""Company"" text, ""Headquarters"" text, ""Main_Industry"" text, ""Sales_billion"" real, ""Profits_billion"" real, ""Assets_billion"" real, ""Market_Value"" real, PRIMARY KEY (""Company_ID"") );  CREATE TABLE ""gas_station"" ( ""Station_ID"" int, ""Open_Year"" int, ""Location"" text, ""Manager_Name"" text, ""Vice_Manager_Name"" text, ""Representative_Name"" text, PRIMARY KEY (""Station_ID"") );  CREATE TABLE ""station_company"" ( ""Station_ID"" int, ""Company_ID"" int, ""Rank_of_the_Year"" int, PRIMARY KEY (""Station_ID"",""Company_ID""), FOREIGN KEY (`Station_ID`) REFERENCES `gas_station`(`Station_ID`), FOREIGN KEY (`Company_ID`) REFERENCES `company`(`Company_ID`) );  ",easy
292,1005,geo,"SELECT river_name FROM river WHERE traverse  =  ""illinois"";",what rivers are there in illinois,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );",easy
799,3613,game_injury,SELECT average_attendance FROM stadium WHERE capacity_percentage  >  100,What is the average attendance of stadiums with capacity percentage higher than 100%?,"PRAGMA foreign_keys = ON;   CREATE TABLE ""stadium"" ( ""id"" int, ""name"" text, ""Home_Games"" int, ""Average_Attendance"" real, ""Total_Attendance"" real, ""Capacity_Percentage"" real, primary key (""id"") );  CREATE TABLE ""game"" ( ""stadium_id"" int, ""id"" int, ""Season"" int, ""Date"" text, ""Home_team"" text, ""Away_team"" text, ""Score"" text, ""Competition"" text, primary key (""id""), foreign key (""stadium_id"") references `stadium`(""id"") );  CREATE TABLE ""injury_accident"" ( ""game_id"" int, ""id"" int, ""Player"" text, ""Injury"" text, ""Number_of_matches"" text, ""Source"" text, primary key (""id""), foreign key (""game_id"") references `game`(""id"") );   ",easy
1194,5273,hr_1,SELECT DISTINCT T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id,find the name of all departments that do actually have one or more employees assigned to them.,"-- phpMyAdmin SQL Dump -- version 4.0.10.7 -- http://www.phpmyadmin.net -- -- Host: localhost -- Generation Time: Mar 20, 2015 at 01:43 AM -- Server version: 5.5.34-cll-lve -- PHP Version: 5.4.23    /*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */; /*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */; /*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */; /*!40101 SET NAMES utf8 */; CREATE TABLE IF NOT EXISTS `regions` (   `REGION_ID` decimal(5,0) NOT NULL,   `REGION_NAME` varchar(25) DEFAULT NULL,   PRIMARY KEY (`REGION_ID`) );  -- -- Dumping data for table `regions` --  INSERT INTO `regions` (`REGION_ID`, `REGION_NAME`) VALUES ('1', 'Europe\r'), ('2', 'Americas\r'), ('3', 'Asia\r'), ('4', 'Middle East and Africa\r'); -- -- Database: `wrpracti_bookinfo` --  -- --------------------------------------------------------  -- -- Table structure for table `countries` --  CREATE TABLE IF NOT EXISTS `countries` (   `COUNTRY_ID` varchar(2) NOT NULL,   `COUNTRY_NAME` varchar(40) DEFAULT NULL,   `REGION_ID` decimal(10,0) DEFAULT NULL,   PRIMARY KEY (`COUNTRY_ID`),   FOREIGN KEY (`REGION_ID`) REFERENCES regions (`REGION_ID`) );  -- -- Dumping data for table `countries` --  INSERT INTO `countries` (`COUNTRY_ID`, `COUNTRY_NAME`, `REGION_ID`) VALUES ('AR', 'Argentina', '2'), ('AU', 'Australia', '3'), ('BE', 'Belgium', '1'), ('BR', 'Brazil', '2'), ('CA', 'Canada', '2'), ('CH', 'Switzerland', '1'), ('CN', 'China', '3'), ('DE', 'Germany', '1'), ('DK', 'Denmark', '1'), ('EG', 'Egypt', '4'), ('FR', 'France', '1'), ('HK', 'HongKong', '3'), ('IL', 'Israel', '4'), ('IN', 'India', '3'), ('IT', 'Italy', '1'), ('JP', 'Japan', '3'), ('KW', 'Kuwait', '4'), ('MX', 'Mexico', '2'), ('NG', 'Nigeria', '4'), ('NL', 'Netherlands', '1'), ('SG', 'Singapore', '3'), ('UK', 'United Kingdom', '1'), ('US', 'United States of America', '2'), ('ZM', 'Zambia', '4'), ('ZW', 'Zimbabwe', '4');  -- --------------------------------------------------------  -- -- Table structure for table `departments` --  CREATE TABLE IF NOT EXISTS `departments` (   `DEPARTMENT_ID` decimal(4,0) NOT NULL DEFAULT '0',   `DEPARTMENT_NAME` varchar(30) NOT NULL,   `MANAGER_ID` decimal(6,0) DEFAULT NULL,   `LOCATION_ID` decimal(4,0) DEFAULT NULL,   PRIMARY KEY (`DEPARTMENT_ID`) );  -- -- Dumping data for table `departments` --  INSERT INTO `departments` (`DEPARTMENT_ID`, `DEPARTMENT_NAME`, `MANAGER_ID`, `LOCATION_ID`) VALUES ('10', 'Administration', '200', '1700'), ('20', 'Marketing', '201', '1800'), ('30', 'Purchasing', '114', '1700'), ('40', 'Human Resources', '203', '2400'), ('50', 'Shipping', '121', '1500'), ('60', 'IT', '103', '1400'), ('70', 'Public Relations', '204', '2700'), ('80', 'Sales', '145', '2500'), ('90', 'Executive', '100', '1700'), ('100', 'Finance', '108', '1700'), ('110', 'Accounting', '205', '1700'), ('120', 'Treasury', '0', '1700'), ('130', 'Corporate Tax', '0', '1700'), ('140', 'Control And Credit', '0', '1700'), ('150', 'Shareholder Services', '0', '1700'), ('160', 'Benefits', '0', '1700'), ('170', 'Manufacturing', '0', '1700'), ('180', 'Construction', '0', '1700'), ('190', 'Contracting', '0', '1700'), ('200', 'Operations', '0', '1700'), ('210', 'IT Support', '0', '1700'), ('220', 'NOC', '0', '1700'), ('230', 'IT Helpdesk', '0', '1700'), ('240', 'Government Sales', '0', '1700'), ('250', 'Retail Sales', '0', '1700'), ('260', 'Recruiting', '0', '1700'), ('270', 'Payroll', '0', '1700');   CREATE TABLE IF NOT EXISTS `jobs` (   `JOB_ID` varchar(10) NOT NULL DEFAULT '',   `JOB_TITLE` varchar(35) NOT NULL,   `MIN_SALARY` decimal(6,0) DEFAULT NULL,   `MAX_SALARY` decimal(6,0) DEFAULT NULL,   PRIMARY KEY (`JOB_ID`) );  -- -- Dumping data for table `jobs` --  INSERT INTO `jobs` (`JOB_ID`, `JOB_TITLE`, `MIN_SALARY`, `MAX_SALARY`) VALUES ('AD_PRES', 'President', '20000', '40000'), ('AD_VP', 'Administration Vice President', '15000', '30000'), ('AD_ASST', 'Administration Assistant', '3000', '6000'), ('FI_MGR', 'Finance Manager', '8200', '16000'), ('FI_ACCOUNT', 'Accountant', '4200', '9000'), ('AC_MGR', 'Accounting Manager', '8200', '16000'), ('AC_ACCOUNT', 'Public Accountant', '4200', '9000'), ('SA_MAN', 'Sales Manager', '10000', '20000'), ('SA_REP', 'Sales Representative', '6000', '12000'), ('PU_MAN', 'Purchasing Manager', '8000', '15000'), ('PU_CLERK', 'Purchasing Clerk', '2500', '5500'), ('ST_MAN', 'Stock Manager', '5500', '8500'), ('ST_CLERK', 'Stock Clerk', '2000', '5000'), ('SH_CLERK', 'Shipping Clerk', '2500', '5500'), ('IT_PROG', 'Programmer', '4000', '10000'), ('MK_MAN', 'Marketing Manager', '9000', '15000'), ('MK_REP', 'Marketing Representative', '4000', '9000'), ('HR_REP', 'Human Resources Representative', '4000', '9000'), ('PR_REP', 'Public Relations Representative', '4500', '10500');  -- --------------------------------------------------------  -- -- Table structure for table `employees` --  CREATE TABLE IF NOT EXISTS `employees` (   `EMPLOYEE_ID` decimal(6,0) NOT NULL DEFAULT '0',   `FIRST_NAME` varchar(20) DEFAULT NULL,   `LAST_NAME` varchar(25) NOT NULL,   `EMAIL` varchar(25) NOT NULL,   `PHONE_NUMBER` varchar(20) DEFAULT NULL,   `HIRE_DATE` date NOT NULL,   `JOB_ID` varchar(10) NOT NULL,   `SALARY` decimal(8,2) DEFAULT NULL,   `COMMISSION_PCT` decimal(2,2) DEFAULT NULL,   `MANAGER_ID` decimal(6,0) DEFAULT NULL,   `DEPARTMENT_ID` decimal(4,0) DEFAULT NULL,   PRIMARY KEY (`EMPLOYEE_ID`),   FOREIGN KEY (`DEPARTMENT_ID`) REFERENCES departments(`DEPARTMENT_ID`),   FOREIGN KEY (`JOB_ID`) REFERENCES jobs(`JOB_ID`) );  -- -- Dumping data for table `employees` --  INSERT INTO `employees` (`EMPLOYEE_ID`, `FIRST_NAME`, `LAST_NAME`, `EMAIL`, `PHONE_NUMBER`, `HIRE_DATE`, `JOB_ID`, `SALARY`, `COMMISSION_PCT`, `MANAGER_ID`, `DEPARTMENT_ID`) VALUES ('100', 'Steven', 'King', 'SKING', '515.123.4567', '1987-06-17', 'AD_PRES', '24000.00', '0.00', '0', '90'), ('101', 'Neena', 'Kochhar', 'NKOCHHAR', '515.123.4568', '1987-06-18', 'AD_VP', '17000.00', '0.00', '100', '90'), ('102', 'Lex', 'De Haan', 'LDEHAAN', '515.123.4569', '1987-06-19', 'AD_VP', '17000.00', '0.00', '100', '90'), ('103', 'Alexander', 'Hunold', 'AHUNOLD', '590.423.4567', '1987-06-20', 'IT_PROG', '9000.00', '0.00', '102', '60'), ('104', 'Bruce', 'Ernst', 'BERNST', '590.423.4568', '1987-06-21', 'IT_PROG', '6000.00', '0.00', '103', '60'), ('105', 'David', 'Austin', 'DAUSTIN', '590.423.4569', '1987-06-22', 'IT_PROG', '4800.00', '0.00', '103', '60'), ('106', 'Valli', 'Pataballa', 'VPATABAL', '590.423.4560', '1987-06-23', 'IT_PROG', '4800.00', '0.00', '103', '60'), ('107', 'Diana', 'Lorentz', 'DLORENTZ', '590.423.5567', '1987-06-24', 'IT_PROG', '4200.00', '0.00', '103', '60'), ('108', 'Nancy', 'Greenberg', 'NGREENBE', '515.124.4569', '1987-06-25', 'FI_MGR', '12000.00', '0.00', '101', '100'), ('109', 'Daniel', 'Faviet', 'DFAVIET', '515.124.4169', '1987-06-26', 'FI_ACCOUNT', '9000.00', '0.00', '108', '100'), ('110', 'John', 'Chen', 'JCHEN', '515.124.4269', '1987-06-27', 'FI_ACCOUNT', '8200.00', '0.00', '108', '100'), ('111', 'Ismael', 'Sciarra', 'ISCIARRA', '515.124.4369', '1987-06-28', 'FI_ACCOUNT', '7700.00', '0.00', '108', '100'), ('112', 'Jose Manuel', 'Urman', 'JMURMAN', '515.124.4469', '1987-06-29', 'FI_ACCOUNT', '7800.00', '0.00', '108', '100'), ('113', 'Luis', 'Popp', 'LPOPP', '515.124.4567', '1987-06-30', 'FI_ACCOUNT', '6900.00', '0.00', '108', '100'), ('114', 'Den', 'Raphaely', 'DRAPHEAL', '515.127.4561', '1987-07-01', 'PU_MAN', '11000.00', '0.00', '100', '30'), ('115', 'Alexander', 'Khoo', 'AKHOO', '515.127.4562', '1987-07-02', 'PU_CLERK', '3100.00', '0.00', '114', '30'), ('116', 'Shelli', 'Baida', 'SBAIDA', '515.127.4563', '1987-07-03', 'PU_CLERK', '2900.00', '0.00', '114', '30'), ('117', 'Sigal', 'Tobias', 'STOBIAS', '515.127.4564', '1987-07-04', 'PU_CLERK', '2800.00', '0.00', '114', '30'), ('118', 'Guy', 'Himuro', 'GHIMURO', '515.127.4565', '1987-07-05', 'PU_CLERK', '2600.00', '0.00', '114', '30'), ('119', 'Karen', 'Colmenares', 'KCOLMENA', '515.127.4566', '1987-07-06', 'PU_CLERK', '2500.00', '0.00', '114', '30'), ('120', 'Matthew', 'Weiss', 'MWEISS', '650.123.1234', '1987-07-07', 'ST_MAN', '8000.00', '0.00', '100', '50'), ('121', 'Adam', 'Fripp', 'AFRIPP', '650.123.2234', '1987-07-08', 'ST_MAN', '8200.00', '0.00', '100', '50'), ('122', 'Payam', 'Kaufling', 'PKAUFLIN', '650.123.3234', '1987-07-09', 'ST_MAN', '7900.00', '0.00', '100', '50'), ('123', 'Shanta', 'Vollman', 'SVOLLMAN', '650.123.4234', '1987-07-10', 'ST_MAN', '6500.00', '0.00', '100', '50'), ('124', 'Kevin', 'Mourgos', 'KMOURGOS', '650.123.5234', '1987-07-11', 'ST_MAN', '5800.00', '0.00', '100', '50'), ('125', 'Julia', 'Nayer', 'JNAYER', '650.124.1214', '1987-07-12', 'ST_CLERK', '3200.00', '0.00', '120', '50'), ('126', 'Irene', 'Mikkilineni', 'IMIKKILI', '650.124.1224', '1987-07-13', 'ST_CLERK', '2700.00', '0.00', '120', '50'), ('127', 'James', 'Landry', 'JLANDRY', '650.124.1334', '1987-07-14', 'ST_CLERK', '2400.00', '0.00', '120', '50'), ('128', 'Steven', 'Markle', 'SMARKLE', '650.124.1434', '1987-07-15', 'ST_CLERK', '2200.00', '0.00', '120', '50'), ('129', 'Laura', 'Bissot', 'LBISSOT', '650.124.5234', '1987-07-16', 'ST_CLERK', '3300.00', '0.00', '121', '50'), ('130', 'Mozhe', 'Atkinson', 'MATKINSO', '650.124.6234', '1987-07-17', 'ST_CLERK', '2800.00', '0.00', '121', '50'), ('131', 'James', 'Marlow', 'JAMRLOW', '650.124.7234', '1987-07-18', 'ST_CLERK', '2500.00', '0.00', '121', '50'), ('132', 'TJ', 'Olson', 'TJOLSON', '650.124.8234', '1987-07-19', 'ST_CLERK', '2100.00', '0.00', '121', '50'), ('133', 'Jason', 'Mallin', 'JMALLIN', '650.127.1934', '1987-07-20', 'ST_CLERK', '3300.00', '0.00', '122', '50'), ('134', 'Michael', 'Rogers', 'MROGERS', '650.127.1834', '1987-07-21', 'ST_CLERK', '2900.00', '0.00', '122', '50'), ('135', 'Ki', 'Gee', 'KGEE', '650.127.1734', '1987-07-22', 'ST_CLERK', '2400.00', '0.00', '122', '50'), ('136', 'Hazel', 'Philtanker', 'HPHILTAN', '650.127.1634', '1987-07-23', 'ST_CLERK', '2200.00', '0.00', '122', '50'), ('137', 'Renske', 'Ladwig', 'RLADWIG', '650.121.1234', '1987-07-24', 'ST_CLERK', '3600.00', '0.00', '123', '50'), ('138', 'Stephen', 'Stiles', 'SSTILES', '650.121.2034', '1987-07-25', 'ST_CLERK', '3200.00', '0.00', '123', '50'), ('139', 'John', 'Seo', 'JSEO', '650.121.2019', '1987-07-26', 'ST_CLERK', '2700.00', '0.00', '123', '50'), ('140', 'Joshua', 'Patel', 'JPATEL', '650.121.1834', '1987-07-27', 'ST_CLERK', '2500.00', '0.00', '123', '50'), ('141', 'Trenna', 'Rajs', 'TRAJS', '650.121.8009', '1987-07-28', 'ST_CLERK', '3500.00', '0.00', '124', '50'), ('142', 'Curtis', 'Davies', 'CDAVIES', '650.121.2994', '1987-07-29', 'ST_CLERK', '3100.00', '0.00', '124', '50'), ('143', 'Randall', 'Matos', 'RMATOS', '650.121.2874', '1987-07-30', 'ST_CLERK', '2600.00', '0.00', '124', '50'), ('144', 'Peter', 'Vargas', 'PVARGAS', '650.121.2004', '1987-07-31', 'ST_CLERK', '2500.00', '0.00', '124', '50'), ('145', 'John', 'Russell', 'JRUSSEL', '011.44.1344.429268', '1987-08-01', 'SA_MAN', '14000.00', '0.40', '100', '80'), ('146', 'Karen', 'Partners', 'KPARTNER', '011.44.1344.467268', '1987-08-02', 'SA_MAN', '13500.00', '0.30', '100', '80'), ('147', 'Alberto', 'Errazuriz', 'AERRAZUR', '011.44.1344.429278', '1987-08-03', 'SA_MAN', '12000.00', '0.30', '100', '80'), ('148', 'Gerald', 'Cambrault', 'GCAMBRAU', '011.44.1344.619268', '1987-08-04', 'SA_MAN', '11000.00', '0.30', '100', '80'), ('149', 'Eleni', 'Zlotkey', 'EZLOTKEY', '011.44.1344.429018', '1987-08-05', 'SA_MAN', '10500.00', '0.20', '100', '80'), ('150', 'Peter', 'Tucker', 'PTUCKER', '011.44.1344.129268', '1987-08-06', 'SA_REP', '10000.00', '0.30', '145', '80'), ('151', 'David', 'Bernstein', 'DBERNSTE', '011.44.1344.345268', '1987-08-07', 'SA_REP', '9500.00', '0.25', '145', '80'), ('152', 'Peter', 'Hall', 'PHALL', '011.44.1344.478968', '1987-08-08', 'SA_REP', '9000.00', '0.25', '145', '80'), ('153', 'Christopher', 'Olsen', 'COLSEN', '011.44.1344.498718', '1987-08-09', 'SA_REP', '8000.00', '0.20', '145', '80'), ('154', 'Nanette', 'Cambrault', 'NCAMBRAU', '011.44.1344.987668', '1987-08-10', 'SA_REP', '7500.00', '0.20', '145', '80'), ('155', 'Oliver', 'Tuvault', 'OTUVAULT', '011.44.1344.486508', '1987-08-11', 'SA_REP', '7000.00', '0.15', '145', '80'), ('156', 'Janette', 'King', 'JKING', '011.44.1345.429268', '1987-08-12', 'SA_REP', '10000.00', '0.35', '146', '80'), ('157', 'Patrick', 'Sully', 'PSULLY', '011.44.1345.929268', '1987-08-13', 'SA_REP', '9500.00', '0.35', '146', '80'), ('158', 'Allan', 'McEwen', 'AMCEWEN', '011.44.1345.829268', '1987-08-14', 'SA_REP', '9000.00', '0.35', '146', '80'), ('159', 'Lindsey', 'Smith', 'LSMITH', '011.44.1345.729268', '1987-08-15', 'SA_REP', '8000.00', '0.30', '146', '80'), ('160', 'Louise', 'Doran', 'LDORAN', '011.44.1345.629268', '1987-08-16', 'SA_REP', '7500.00', '0.30', '146', '80'), ('161', 'Sarath', 'Sewall', 'SSEWALL', '011.44.1345.529268', '1987-08-17', 'SA_REP', '7000.00', '0.25', '146', '80'), ('162', 'Clara', 'Vishney', 'CVISHNEY', '011.44.1346.129268', '1987-08-18', 'SA_REP', '10500.00', '0.25', '147', '80'), ('163', 'Danielle', 'Greene', 'DGREENE', '011.44.1346.229268', '1987-08-19', 'SA_REP', '9500.00', '0.15', '147', '80'), ('164', 'Mattea', 'Marvins', 'MMARVINS', '011.44.1346.329268', '1987-08-20', 'SA_REP', '7200.00', '0.10', '147', '80'), ('165', 'David', 'Lee', 'DLEE', '011.44.1346.529268', '1987-08-21', 'SA_REP', '6800.00', '0.10', '147', '80'), ('166', 'Sundar', 'Ande', 'SANDE', '011.44.1346.629268', '1987-08-22', 'SA_REP', '6400.00', '0.10', '147', '80'), ('167', 'Amit', 'Banda', 'ABANDA', '011.44.1346.729268', '1987-08-23', 'SA_REP', '6200.00', '0.10', '147', '80'), ('168', 'Lisa', 'Ozer', 'LOZER', '011.44.1343.929268', '1987-08-24', 'SA_REP', '11500.00', '0.25', '148', '80'), ('169', 'Harrison', 'Bloom', 'HBLOOM', '011.44.1343.829268', '1987-08-25', 'SA_REP', '10000.00', '0.20', '148', '80'), ('170', 'Tayler', 'Fox', 'TFOX', '011.44.1343.729268', '1987-08-26', 'SA_REP', '9600.00', '0.20', '148', '80'), ('171', 'William', 'Smith', 'WSMITH', '011.44.1343.629268', '1987-08-27', 'SA_REP', '7400.00', '0.15', '148', '80'), ('172', 'Elizabeth', 'Bates', 'EBATES', '011.44.1343.529268', '1987-08-28', 'SA_REP', '7300.00', '0.15', '148', '80'), ('173', 'Sundita', 'Kumar', 'SKUMAR', '011.44.1343.329268', '1987-08-29', 'SA_REP', '6100.00', '0.10', '148', '80'), ('174', 'Ellen', 'Abel', 'EABEL', '011.44.1644.429267', '1987-08-30', 'SA_REP', '11000.00', '0.30', '149', '80'), ('175', 'Alyssa', 'Hutton', 'AHUTTON', '011.44.1644.429266', '1987-08-31', 'SA_REP', '8800.00', '0.25', '149', '80'), ('176', 'Jonathon', 'Taylor', 'JTAYLOR', '011.44.1644.429265', '1987-09-01', 'SA_REP', '8600.00', '0.20', '149', '80'), ('177', 'Jack', 'Livingston', 'JLIVINGS', '011.44.1644.429264', '1987-09-02', 'SA_REP', '8400.00', '0.20', '149', '80'), ('178', 'Kimberely', 'Grant', 'KGRANT', '011.44.1644.429263', '1987-09-03', 'SA_REP', '7000.00', '0.15', '149', '0'), ('179', 'Charles', 'Johnson', 'CJOHNSON', '011.44.1644.429262', '1987-09-04', 'SA_REP', '6200.00', '0.10', '149', '80'), ('180', 'Winston', 'Taylor', 'WTAYLOR', '650.507.9876', '1987-09-05', 'SH_CLERK', '3200.00', '0.00', '120', '50'), ('181', 'Jean', 'Fleaur', 'JFLEAUR', '650.507.9877', '1987-09-06', 'SH_CLERK', '3100.00', '0.00', '120', '50'), ('182', 'Martha', 'Sullivan', 'MSULLIVA', '650.507.9878', '1987-09-07', 'SH_CLERK', '2500.00', '0.00', '120', '50'), ('183', 'Girard', 'Geoni', 'GGEONI', '650.507.9879', '1987-09-08', 'SH_CLERK', '2800.00', '0.00', '120', '50'), ('184', 'Nandita', 'Sarchand', 'NSARCHAN', '650.509.1876', '1987-09-09', 'SH_CLERK', '4200.00', '0.00', '121', '50'), ('185', 'Alexis', 'Bull', 'ABULL', '650.509.2876', '1987-09-10', 'SH_CLERK', '4100.00', '0.00', '121', '50'), ('186', 'Julia', 'Dellinger', 'JDELLING', '650.509.3876', '1987-09-11', 'SH_CLERK', '3400.00', '0.00', '121', '50'), ('187', 'Anthony', 'Cabrio', 'ACABRIO', '650.509.4876', '1987-09-12', 'SH_CLERK', '3000.00', '0.00', '121', '50'), ('188', 'Kelly', 'Chung', 'KCHUNG', '650.505.1876', '1987-09-13', 'SH_CLERK', '3800.00', '0.00', '122', '50'), ('189', 'Jennifer', 'Dilly', 'JDILLY', '650.505.2876', '1987-09-14', 'SH_CLERK', '3600.00', '0.00', '122', '50'), ('190', 'Timothy', 'Gates', 'TGATES', '650.505.3876', '1987-09-15', 'SH_CLERK', '2900.00', '0.00', '122', '50'), ('191', 'Randall', 'Perkins', 'RPERKINS', '650.505.4876', '1987-09-16', 'SH_CLERK', '2500.00', '0.00', '122', '50'), ('192', 'Sarah', 'Bell', 'SBELL', '650.501.1876', '1987-09-17', 'SH_CLERK', '4000.00', '0.00', '123', '50'), ('193', 'Britney', 'Everett', 'BEVERETT', '650.501.2876', '1987-09-18', 'SH_CLERK', '3900.00', '0.00', '123', '50'), ('194', 'Samuel', 'McCain', 'SMCCAIN', '650.501.3876', '1987-09-19', 'SH_CLERK', '3200.00', '0.00', '123', '50'), ('195', 'Vance', 'Jones', 'VJONES', '650.501.4876', '1987-09-20', 'SH_CLERK', '2800.00', '0.00', '123', '50'), ('196', 'Alana', 'Walsh', 'AWALSH', '650.507.9811', '1987-09-21', 'SH_CLERK', '3100.00', '0.00', '124', '50'), ('197', 'Kevin', 'Feeney', 'KFEENEY', '650.507.9822', '1987-09-22', 'SH_CLERK', '3000.00', '0.00', '124', '50'), ('198', 'Donald', 'OConnell', 'DOCONNEL', '650.507.9833', '1987-09-23', 'SH_CLERK', '2600.00', '0.00', '124', '50'), ('199', 'Douglas', 'Grant', 'DGRANT', '650.507.9844', '1987-09-24', 'SH_CLERK', '2600.00', '0.00', '124', '50'), ('200', 'Jennifer', 'Whalen', 'JWHALEN', '515.123.4444', '1987-09-25', 'AD_ASST', '4400.00', '0.00', '101', '10'), ('201', 'Michael', 'Hartstein', 'MHARTSTE', '515.123.5555', '1987-09-26', 'MK_MAN', '13000.00', '0.00', '100', '20'), ('202', 'Pat', 'Fay', 'PFAY', '603.123.6666', '1987-09-27', 'MK_REP', '6000.00', '0.00', '201', '20'), ('203', 'Susan', 'Mavris', 'SMAVRIS', '515.123.7777', '1987-09-28', 'HR_REP', '6500.00', '0.00', '101', '40'), ('204', 'Hermann', 'Baer', 'HBAER', '515.123.8888', '1987-09-29', 'PR_REP', '10000.00', '0.00', '101', '70'), ('205', 'Shelley', 'Higgins', 'SHIGGINS', '515.123.8080', '1987-09-30', 'AC_MGR', '12000.00', '0.00', '101', '110'), ('206', 'William', 'Gietz', 'WGIETZ', '515.123.8181', '1987-10-01', 'AC_ACCOUNT', '8300.00', '0.00', '205', '110');  -- --------------------------------------------------------  -- -- Table structure for table `job_history` --  CREATE TABLE IF NOT EXISTS `job_history` (   `EMPLOYEE_ID` decimal(6,0) NOT NULL,   `START_DATE` date NOT NULL,   `END_DATE` date NOT NULL,   `JOB_ID` varchar(10) NOT NULL,   `DEPARTMENT_ID` decimal(4,0) DEFAULT NULL,   PRIMARY KEY (`EMPLOYEE_ID`,`START_DATE`),   FOREIGN KEY (`EMPLOYEE_ID`) REFERENCES employees(`EMPLOYEE_ID`),   FOREIGN KEY (`DEPARTMENT_ID`) REFERENCES departments(`DEPARTMENT_ID`),   FOREIGN KEY (`JOB_ID`) REFERENCES jobs(`JOB_ID`) );  -- -- Dumping data for table `job_history` --  INSERT INTO `job_history` (`EMPLOYEE_ID`, `START_DATE`, `END_DATE`, `JOB_ID`, `DEPARTMENT_ID`) VALUES ('102', '1993-01-13', '1998-07-24', 'IT_PROG', '60'), ('101', '1989-09-21', '1993-10-27', 'AC_ACCOUNT', '110'), ('101', '1993-10-28', '1997-03-15', 'AC_MGR', '110'), ('201', '1996-02-17', '1999-12-19', 'MK_REP', '20'), ('114', '1998-03-24', '1999-12-31', 'ST_CLERK', '50'), ('122', '1999-01-01', '1999-12-31', 'ST_CLERK', '50'), ('200', '1987-09-17', '1993-06-17', 'AD_ASST', '90'), ('176', '1998-03-24', '1998-12-31', 'SA_REP', '80'), ('176', '1999-01-01', '1999-12-31', 'SA_MAN', '80'), ('200', '1994-07-01', '1998-12-31', 'AC_ACCOUNT', '90'), ('0', '0000-00-00', '0000-00-00', '', '0');  -- --------------------------------------------------------  -- -- Table structure for table `jobs` --   -- -- Table structure for table `locations` --  CREATE TABLE IF NOT EXISTS `locations` (   `LOCATION_ID` decimal(4,0) NOT NULL DEFAULT '0',   `STREET_ADDRESS` varchar(40) DEFAULT NULL,   `POSTAL_CODE` varchar(12) DEFAULT NULL,   `CITY` varchar(30) NOT NULL,   `STATE_PROVINCE` varchar(25) DEFAULT NULL,   `COUNTRY_ID` varchar(2) DEFAULT NULL,   PRIMARY KEY (`LOCATION_ID`),   FOREIGN KEY (`COUNTRY_ID`) REFERENCES countries(`COUNTRY_ID`) );  -- -- Dumping data for table `locations` --  INSERT INTO `locations` (`LOCATION_ID`, `STREET_ADDRESS`, `POSTAL_CODE`, `CITY`, `STATE_PROVINCE`, `COUNTRY_ID`) VALUES ('1000', '1297 Via Cola di Rie', '989', 'Roma', '', 'IT'), ('1100', '93091 Calle della Testa', '10934', 'Venice', '', 'IT'), ('1200', '2017 Shinjuku-ku', '1689', 'Tokyo', 'Tokyo Prefecture', 'JP'), ('1300', '9450 Kamiya-cho', '6823', 'Hiroshima', '', 'JP'), ('1400', '2014 Jabberwocky Rd', '26192', 'Southlake', 'Texas', 'US'), ('1500', '2011 Interiors Blvd', '99236', 'South San Francisco', 'California', 'US'), ('1600', '2007 Zagora St', '50090', 'South Brunswick', 'New Jersey', 'US'), ('1700', '2004 Charade Rd', '98199', 'Seattle', 'Washington', 'US'), ('1800', '147 Spadina Ave', 'M5V 2L7', 'Toronto', 'Ontario', 'CA'), ('1900', '6092 Boxwood St', 'YSW 9T2', 'Whitehorse', 'Yukon', 'CA'), ('2000', '40-5-12 Laogianggen', '190518', 'Beijing', '', 'CN'), ('2100', '1298 Vileparle (E)', '490231', 'Bombay', 'Maharashtra', 'IN'), ('2200', '12-98 Victoria Street', '2901', 'Sydney', 'New South Wales', 'AU'), ('2300', '198 Clementi North', '540198', 'Singapore', '', 'SG'), ('2400', '8204 Arthur St', '', 'London', '', 'UK'), ('2500', '""Magdalen Centre', ' The Oxford ', 'OX9 9ZB', 'Oxford', 'Ox'), ('2600', '9702 Chester Road', '9629850293', 'Stretford', 'Manchester', 'UK'), ('2700', 'Schwanthalerstr. 7031', '80925', 'Munich', 'Bavaria', 'DE'), ('2800', 'Rua Frei Caneca 1360', '01307-002', 'Sao Paulo', 'Sao Paulo', 'BR'), ('2900', '20 Rue des Corps-Saints', '1730', 'Geneva', 'Geneve', 'CH'), ('3000', 'Murtenstrasse 921', '3095', 'Bern', 'BE', 'CH'), ('3100', 'Pieter Breughelstraat 837', '3029SK', 'Utrecht', 'Utrecht', 'NL'), ('3200', 'Mariano Escobedo 9991', '11932', 'Mexico City', '""Distrito Federal', '""');  -- --------------------------------------------------------  -- -- Table structure for table `regions` --   /*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */; /*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */; /*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;",easy
1829,7843,customers_and_addresses,SELECT city FROM addresses WHERE zip_postcode  =  255,Find the city with post code 255.,"PRAGMA foreign_keys = ON;  CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `address_content` VARCHAR(80), `city` VARCHAR(50), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(50), `country` VARCHAR(50), `other_address_details` VARCHAR(255) );  CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_details` VARCHAR(255) ); CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `payment_method` VARCHAR(15) NOT NULL, `customer_name` VARCHAR(80), `date_became_customer` DATETIME, `other_customer_details` VARCHAR(255) ); CREATE TABLE `Customer_Addresses` ( `customer_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_address_from` DATETIME NOT NULL, `address_type` VARCHAR(15) NOT NULL, `date_address_to` DATETIME, FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) ); CREATE TABLE `Customer_Contact_Channels` ( `customer_id` INTEGER NOT NULL, `channel_code` VARCHAR(15) NOT NULL, `active_from_date` DATETIME NOT NULL, `active_to_date` DATETIME, `contact_number` VARCHAR(50) NOT NULL, FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) ); CREATE TABLE `Customer_Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `order_status` VARCHAR(15) NOT NULL, `order_date` DATETIME, `order_details` VARCHAR(255), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) );  CREATE TABLE `Order_Items` ( `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, `order_quantity` VARCHAR(15), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ), FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ) ); ",easy
801,3628,performance_attendance,SELECT count(*) FROM performance,How many performances are there?,"PRAGMA foreign_keys = ON;   CREATE TABLE ""member"" (     ""Member_ID"" text,     ""Name"" text,     ""Nationality"" text,     ""Role"" text,     PRIMARY KEY (""Member_ID"") );    CREATE TABLE ""performance"" (     ""Performance_ID"" real,     ""Date"" text,     ""Host"" text,     ""Location"" text,     ""Attendance"" int,     PRIMARY KEY (""Performance_ID"") );  CREATE TABLE ""member_attendance"" (     ""Member_ID"" int,     ""Performance_ID"" int,     ""Num_of_Pieces"" int,     PRIMARY KEY (""Member_ID"",""Performance_ID""),     FOREIGN KEY (""Member_ID"") REFERENCES `member`(""Member_ID""),     FOREIGN KEY (""Performance_ID"") REFERENCES `performance`(""Performance_ID"") );  ",easy
772,3502,body_builder,SELECT * FROM body_builder,Show all information about each body builder.,"PRAGMA foreign_keys = ON;  CREATE TABLE ""body_builder"" ( ""Body_Builder_ID"" int, ""People_ID"" int, ""Snatch"" real, ""Clean_Jerk"" real, ""Total"" real, PRIMARY KEY (""Body_Builder_ID""), FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"") );  CREATE TABLE ""people"" ( ""People_ID"" int, ""Name"" text, ""Height"" real, ""Weight"" real, ""Birth_Date"" text, ""Birth_Place"" text, PRIMARY KEY (""People_ID"") );  ",easy
679,3178,race_track,SELECT DISTINCT LOCATION FROM track,What are distinct locations where tracks are located?,"PRAGMA foreign_keys = ON;  CREATE TABLE ""race"" ( ""Race_ID"" int, ""Name"" text, ""Class"" text, ""Date"" text, ""Track_ID"" text, PRIMARY KEY (""Race_ID""), FOREIGN KEY (""Track_ID"") REFERENCES ""track""(""Track_ID"") );  CREATE TABLE ""track"" ( ""Track_ID"" int, ""Name"" text, ""Location"" text, ""Seating"" real, ""Year_Opened"" real, PRIMARY KEY (""Track_ID"") );  ",easy
535,2645,student_assessment,SELECT student_id FROM student_course_attendance WHERE course_id  =  301,What are the id of students who registered course 301?,"PRAGMA foreign_keys = ON;  CREATE TABLE Addresses ( address_id INTEGER NOT NULL, line_1 VARCHAR(80), line_2 VARCHAR(80), city VARCHAR(50), zip_postcode CHAR(20), state_province_county VARCHAR(50), country VARCHAR(50), PRIMARY KEY (address_id) );  INSERT INTO Addresses (`address_id`, `line_1`, `line_2`, `city`, `zip_postcode`, `state_province_county`, `country`) VALUES (5, '0900 Roderick Oval New Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'); INSERT INTO Addresses (`address_id`, `line_1`, `line_2`, `city`, `zip_postcode`, `state_province_county`, `country`) VALUES (9, '966 Dach Ports Apt. 322 Lake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'); INSERT INTO Addresses (`address_id`, `line_1`, `line_2`, `city`, `zip_postcode`, `state_province_county`, `country`) VALUES (29, '28550 Broderick Underpass Suite 667 Zakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA'); INSERT INTO Addresses (`address_id`, `line_1`, `line_2`, `city`, `zip_postcode`, `state_province_county`, `country`) VALUES (30, '83706 Ana Trafficway Apt. 992 West Jarret, MI 01112', 'Apt. 884', 'Lake Kaley', '431', 'Washington', 'USA'); INSERT INTO Addresses (`address_id`, `line_1`, `line_2`, `city`, `zip_postcode`, `state_province_county`, `country`) VALUES (43, '69165 Beatty Station Haleighstad, MS 55164', 'Suite 333', 'Stephaniemouth', '559', 'Massachusetts', 'USA'); INSERT INTO Addresses (`address_id`, `line_1`, `line_2`, `city`, `zip_postcode`, `state_province_county`, `country`) VALUES (45, '242 Pacocha Streets East Isabellashire, ND 03506', 'Suite 370', 'O''Connellview', '514', 'NewMexico', 'USA'); INSERT INTO Addresses (`address_id`, `line_1`, `line_2`, `city`, `zip_postcode`, `state_province_county`, `country`) VALUES (55, '801 Modesto Island Suite 306 Lacyville, VT 34059', 'Suite 764', 'New Alta', '176', 'Mississippi', 'USA'); INSERT INTO Addresses (`address_id`, `line_1`, `line_2`, `city`, `zip_postcode`, `state_province_county`, `country`) VALUES (63, '0177 Fisher Dam Berniershire, KS 00038-7574', 'Apt. 903', 'South Keenan', '613', 'Michigan', 'USA'); INSERT INTO Addresses (`address_id`, `line_1`, `line_2`, `city`, `zip_postcode`, `state_province_county`, `country`) VALUES (68, '09471 Hickle Light Port Maxime, NJ 91550-5409', 'Suite 903', 'Hannahside', '354', 'Connecticut', 'USA'); INSERT INTO Addresses (`address_id`, `line_1`, `line_2`, `city`, `zip_postcode`, `state_province_county`, `country`) VALUES (73, '67831 Lavonne Lodge Olsontown, DC 20894', 'Apt. 756', 'Alizeshire', '687', 'NewMexico', 'USA'); INSERT INTO Addresses (`address_id`, `line_1`, `line_2`, `city`, `zip_postcode`, `state_province_county`, `country`) VALUES (82, '228 Fahey Land Baileymouth, FL 06297-5606', 'Suite 087', 'South Naomibury', '079', 'Ohio', 'USA'); INSERT INTO Addresses (`address_id`, `line_1`, `line_2`, `city`, `zip_postcode`, `state_province_county`, `country`) VALUES (88, '1770 Adriel Ramp Apt. 397 West Ashlynnchester, UT 91968', 'Apt. 617', 'East Tavaresburgh', '179', 'SouthDakota', 'USA'); INSERT INTO Addresses (`address_id`, `line_1`, `line_2`, `city`, `zip_postcode`, `state_province_county`, `country`) VALUES (92, '8760 Eldon Squares Suite 260 Marquisestad, GA 38537', 'Apt. 435', 'Lake Devon', '244', 'SouthDakota', 'USA'); INSERT INTO Addresses (`address_id`, `line_1`, `line_2`, `city`, `zip_postcode`, `state_province_county`, `country`) VALUES (94, '8263 Abbott Crossing Apt. 066 Oberbrunnerbury, LA 67451', 'Apt. 626', 'Boyleshire', '536', 'Kansas', 'USA'); INSERT INTO Addresses (`address_id`, `line_1`, `line_2`, `city`, `zip_postcode`, `state_province_county`, `country`) VALUES (99, '521 Paucek Field North Oscartown, WI 31527', 'Apt. 849', 'Terencetown', '979', 'Michigan', 'USA');  CREATE TABLE People ( person_id INTEGER NOT NULL, first_name VARCHAR(255), middle_name VARCHAR(255), last_name VARCHAR(255), cell_mobile_number VARCHAR(40), email_address VARCHAR(40), login_name VARCHAR(40), password VARCHAR(40), PRIMARY KEY (person_id) ); CREATE TABLE Students ( student_id INTEGER NOT NULL, student_details VARCHAR(255), PRIMARY KEY (student_id), FOREIGN KEY (student_id) REFERENCES People (person_id) ); CREATE TABLE Courses ( course_id VARCHAR(100) NOT NULL, course_name VARCHAR(120), course_description VARCHAR(255), other_details VARCHAR(255), PRIMARY KEY (course_id) ); CREATE TABLE People_Addresses ( person_address_id INTEGER NOT NULL, person_id INTEGER NOT NULL, address_id INTEGER NOT NULL, date_from DATETIME, date_to DATETIME, PRIMARY KEY (person_address_id), FOREIGN KEY (person_id) REFERENCES People (person_id), FOREIGN KEY (address_id) REFERENCES Addresses (address_id) ); CREATE TABLE Student_Course_Registrations ( student_id INTEGER NOT NULL, course_id INTEGER NOT NULL, registration_date DATETIME NOT NULL, PRIMARY KEY (student_id, course_id), FOREIGN KEY (student_id) REFERENCES Students (student_id), FOREIGN KEY (course_id) REFERENCES Courses (course_id) );  CREATE TABLE Student_Course_Attendance ( student_id INTEGER NOT NULL, course_id INTEGER NOT NULL, date_of_attendance DATETIME NOT NULL, PRIMARY KEY (student_id, course_id), FOREIGN KEY (student_id, course_id) REFERENCES Student_Course_Registrations (student_id,course_id) );  CREATE TABLE Candidates ( candidate_id INTEGER NOT NULL , candidate_details VARCHAR(255), PRIMARY KEY (candidate_id), FOREIGN KEY (candidate_id) REFERENCES People (person_id) ); CREATE TABLE Candidate_Assessments ( candidate_id INTEGER NOT NULL, qualification CHAR(15) NOT NULL, assessment_date DATETIME NOT NULL, asessment_outcome_code CHAR(15) NOT NULL, PRIMARY KEY (candidate_id, qualification), FOREIGN KEY (candidate_id) REFERENCES Candidates (candidate_id) ); ",easy
1723,7433,dorm_1,SELECT count(*) FROM dorm,How many dorms are in the database?," create table Student (         StuID        INTEGER PRIMARY KEY,         LName        VARCHAR(12),         Fname        VARCHAR(12),         Age      INTEGER,         Sex      VARCHAR(1),         Major        INTEGER,         Advisor      INTEGER,         city_code    VARCHAR(3)  );    create table Dorm (        dormid		INTEGER,        dorm_name	VARCHAR(20),        student_capacity	INTEGER,        gender			VARCHAR(1) ) ;  create table Dorm_amenity (        amenid			INTEGER,        amenity_name		VARCHAR(25) ) ;  create table Has_amenity (        dormid			INTEGER,        amenid				INTEGER, 	FOREIGN KEY (dormid) REFERENCES `Dorm`(dormid), 	FOREIGN KEY (amenid) REFERENCES `Dorm_amenity`(amenid) );  create table Lives_in (        stuid 	      INTEGER,        dormid		INTEGER,        room_number	INTEGER, 	FOREIGN KEY (stuid) REFERENCES `Student`(StuID),         FOREIGN KEY (dormid) REFERENCES `Dorm`(dormid) );  ",easy
1440,6338,company_office,SELECT count(*) FROM Companies,Count the number of companies.,"PRAGMA foreign_keys = ON;  CREATE TABLE ""buildings"" ( ""id"" int, ""name"" text, ""City"" text, ""Height"" int, ""Stories"" int, ""Status"" text, PRIMARY KEY(""id"") );  CREATE TABLE ""Companies"" ( ""id"" int, ""name"" text, ""Headquarters"" text, ""Industry"" text, ""Sales_billion"" real, ""Profits_billion"" real, ""Assets_billion"" real, ""Market_Value_billion"" text, PRIMARY KEY (""id"") );  CREATE TABLE ""Office_locations"" ( ""building_id"" int, ""company_id"" int, ""move_in_year"" int, PRIMARY KEY (""building_id"", ""company_id""), FOREIGN KEY (""building_id"") REFERENCES ""buildings""(""id""), FOREIGN KEY (""company_id"") REFERENCES ""Companies""(""id"") );  ",easy
1422,6244,network_2,SELECT name FROM PersonFriend GROUP BY name HAVING count(*)  =  1,Find the person who has exactly one friend.,"CREATE TABLE Person (   name varchar(20) PRIMARY KEY,   age INTEGER,   city TEXT,   gender TEXT,   job TEXT );  CREATE TABLE PersonFriend (   name varchar(20),   friend varchar(20),   year INTEGER,   FOREIGN KEY (name) REFERENCES Person(name),   FOREIGN KEY (friend) REFERENCES Person(name) );  ",easy
1298,5795,ship_mission,SELECT Name FROM ship ORDER BY Tonnage ASC,what are the names of the ships ordered by ascending tonnage?,"PRAGMA foreign_keys = ON;  CREATE TABLE ""mission"" ( ""Mission_ID"" int, ""Ship_ID"" int, ""Code"" text, ""Launched_Year"" int, ""Location"" text, ""Speed_knots"" int, ""Fate"" text, PRIMARY KEY (""Mission_ID""), FOREIGN KEY (""Ship_ID"") REFERENCES `ship`(""Ship_ID"") );  CREATE TABLE ""ship"" ( ""Ship_ID"" int, ""Name"" text, ""Type"" text, ""Nationality"" text, ""Tonnage"" int, PRIMARY KEY (""Ship_ID"") );  ",easy
625,2980,allergy_1,"SELECT allergytype FROM Allergy_type WHERE allergy  =  ""Cat""",What is the type of allergy Cat?,"create table Allergy_Type (        Allergy 		  VARCHAR(20) PRIMARY KEY,        AllergyType 	  VARCHAR(20) );  create table Has_Allergy (        StuID 		 INTEGER,        Allergy 		 VARCHAR(20),        FOREIGN KEY(StuID) REFERENCES Student(StuID),        FOREIGN KEY(Allergy) REFERENCES Allergy_Type(Allergy) );  create table Student (         StuID        INTEGER PRIMARY KEY,         LName        VARCHAR(12),         Fname        VARCHAR(12),         Age      INTEGER,         Sex      VARCHAR(1),         Major        INTEGER,         Advisor      INTEGER,         city_code    VARCHAR(3)  );  ",easy
898,4073,party_people,SELECT DISTINCT region_name FROM region ORDER BY Label,"What are the different region names, ordered by labels?"," PRAGMA foreign_keys = ON;   CREATE TABLE ""region"" ( ""Region_ID"" int, ""Region_name"" text, ""Date"" text, ""Label"" text, ""Format"" text, ""Catalogue"" text, PRIMARY KEY (""Region_ID"") );   CREATE TABLE ""party"" ( ""Party_ID"" int, ""Minister"" text, ""Took_office"" text, ""Left_office"" text, ""Region_ID"" int, ""Party_name"" text, PRIMARY KEY (""Party_ID""), FOREIGN KEY (`Region_ID`) REFERENCES `region`(`Region_ID`) );  CREATE TABLE ""member"" ( ""Member_ID"" int, ""Member_Name"" text, ""Party_ID"" text, ""In_office"" text, PRIMARY KEY (""Member_ID""), FOREIGN KEY (`Party_ID`) REFERENCES `party`(`Party_ID`) );   CREATE TABLE ""party_events"" ( ""Event_ID"" int, ""Event_Name"" text, ""Party_ID"" int, ""Member_in_charge_ID"" int, PRIMARY KEY (""Event_ID""), FOREIGN KEY (`Party_ID`) REFERENCES `party`(`Party_ID`), FOREIGN KEY (`Member_in_charge_ID`) REFERENCES `member`(`Member_ID`) );   ",easy
987,4417,csu_1,SELECT count(*) FROM campuses,What is the total number of campuses?,"CREATE TABLE ""Campuses"" ( 	""Id"" INTEGER PRIMARY KEY,  	""Campus"" TEXT,  	""Location"" TEXT,  	""County"" TEXT,  	""Year"" INTEGER  );  CREATE TABLE ""csu_fees"" (  	""Campus"" INTEGER PRIMARY KEY,  	""Year"" INTEGER,  	""CampusFee"" INTEGER, 	FOREIGN KEY (Campus) REFERENCES Campuses(Id) );  CREATE TABLE ""degrees"" (  	""Year"" INTEGER, 	""Campus"" INTEGER,  	""Degrees"" INTEGER, 	PRIMARY KEY (Year, Campus), 	FOREIGN KEY (Campus) REFERENCES Campuses(Id) );    CREATE TABLE ""discipline_enrollments"" (  	""Campus"" INTEGER,  	""Discipline"" INTEGER,  	""Year"" INTEGER,  	""Undergraduate"" INTEGER,  	""Graduate"" INTEGER, 	PRIMARY KEY (Campus, Discipline), 	FOREIGN KEY (Campus) REFERENCES Campuses(Id) );    CREATE TABLE ""enrollments"" (  	""Campus"" INTEGER,  	""Year"" INTEGER,  	""TotalEnrollment_AY"" INTEGER,  	""FTE_AY"" INTEGER, 	PRIMARY KEY(Campus, Year), 	FOREIGN KEY (Campus) REFERENCES Campuses(Id) );  CREATE TABLE ""faculty"" (  	""Campus"" INTEGER,  	""Year"" INTEGER,  	""Faculty"" REAL, 	FOREIGN KEY (Campus) REFERENCES Campuses(Id)  );  ",easy
1897,8072,school_bus,SELECT TYPE FROM school GROUP BY TYPE HAVING count(*)  =  2,Show the types of schools that have two schools.," PRAGMA foreign_keys = ON;  CREATE TABLE ""driver"" ( ""Driver_ID"" int, ""Name"" text, ""Party"" text, ""Home_city"" text, ""Age"" int, PRIMARY KEY (""Driver_ID"") );  CREATE TABLE ""school"" ( ""School_ID"" int, ""Grade"" text, ""School"" text, ""Location"" text, ""Type"" text, PRIMARY KEY (""School_ID"") );  CREATE TABLE ""school_bus"" ( ""School_ID"" int, ""Driver_ID"" int, ""Years_Working"" int, ""If_full_time"" bool, PRIMARY KEY (""School_ID"",""Driver_ID""), FOREIGN KEY (""School_ID"") REFERENCES `school`(""School_ID""), FOREIGN KEY (""Driver_ID"") REFERENCES `driver`(""Driver_ID"") );   ",easy
702,3252,insurance_fnol,SELECT count(*) FROM services,How many services are there?,"PRAGMA foreign_keys = ON;  CREATE TABLE Customers ( Customer_ID INTEGER NOT NULL, Customer_name VARCHAR(40), PRIMARY KEY (Customer_ID) ); CREATE TABLE Services ( Service_ID INTEGER NOT NULL, Service_name VARCHAR(40), PRIMARY KEY (Service_ID) );  CREATE TABLE Available_Policies ( Policy_ID INTEGER NOT NULL, policy_type_code CHAR(15), Customer_Phone VARCHAR(255), PRIMARY KEY (Policy_ID), UNIQUE (Policy_ID) );  CREATE TABLE Customers_Policies ( Customer_ID INTEGER NOT NULL, Policy_ID INTEGER NOT NULL, Date_Opened DATE, Date_Closed DATE, PRIMARY KEY (Customer_ID, Policy_ID), FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY (Policy_ID) REFERENCES Available_Policies (Policy_ID) ); CREATE TABLE First_Notification_of_Loss ( FNOL_ID INTEGER NOT NULL, Customer_ID INTEGER NOT NULL, Policy_ID INTEGER NOT NULL, Service_ID INTEGER NOT NULL, PRIMARY KEY (FNOL_ID), UNIQUE (FNOL_ID), FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID), FOREIGN KEY (Customer_ID, Policy_ID) REFERENCES Customers_Policies (Customer_ID,Policy_ID) ); CREATE TABLE Claims ( Claim_ID INTEGER NOT NULL, FNOL_ID INTEGER NOT NULL, Effective_Date DATE, PRIMARY KEY (Claim_ID), UNIQUE (Claim_ID), FOREIGN KEY (FNOL_ID) REFERENCES First_Notification_of_Loss (FNOL_ID) ); CREATE TABLE Settlements ( Settlement_ID INTEGER NOT NULL, Claim_ID INTEGER, Effective_Date DATE, Settlement_Amount REAL, PRIMARY KEY (Settlement_ID), UNIQUE (Settlement_ID), FOREIGN KEY (Claim_ID) REFERENCES Claims (Claim_ID) );  ",easy
507,2388,imdb,"SELECT name FROM director WHERE nationality  =  ""Afghanistan"";",Find all the directors who are from Afghanistan,"PRAGMA foreign_keys = ON; CREATE TABLE ""actor"" ( ""aid"" int, ""gender"" text, ""name"" text, ""nationality"" text, ""birth_city"" text, ""birth_year"" int, primary key(""aid"") );   CREATE TABLE ""copyright"" ( ""id"" int, ""msid"" int, ""cid"" int, primary key(""id"") ); CREATE TABLE ""cast"" ( ""id"" int, ""msid"" int, ""aid"" int, ""role"" int, primary key(""id""), foreign key(""aid"") references `actor`(""aid""), foreign key(""msid"") references `copyright`(""msid"") );  CREATE TABLE ""genre"" ( ""gid"" int, ""genre"" text, primary key(""gid"") );  CREATE TABLE ""classification"" ( ""id"" int, ""msid"" int, ""gid"" int, primary key(""id""), foreign key(""gid"") references `genre`(""gid""), foreign key(""msid"") references `copyright`(""msid"") );  CREATE TABLE ""company"" ( ""id"" int, ""name"" text, ""country_code"" text, primary key(""id"") );   CREATE TABLE ""director"" ( ""did"" int, ""gender"" text, ""name"" text, ""nationality"" text, ""birth_city"" text, ""birth_year"" int, primary key(""did"") );  CREATE TABLE ""producer"" ( ""pid"" int, ""gender"" text, ""name"" text, ""nationality"" text, ""birth_city"" text, ""birth_year"" int, primary key(""pid"") );  CREATE TABLE ""directed_by"" ( ""id"" int, ""msid"" int, ""did"" int, primary key(""id""), foreign key(""msid"") references `copyright`(""msid""), foreign key(""did"") references `director`(""did"") );  CREATE TABLE ""keyword"" ( ""id"" int, ""keyword"" text, primary key(""id"") );  CREATE TABLE ""made_by"" ( ""id"" int, ""msid"" int, ""pid"" int, primary key(""id""), foreign key(""msid"") references `copyright`(""msid""), foreign key(""pid"") references `producer`(""pid"") );  CREATE TABLE ""movie"" ( ""mid"" int, ""title"" text, ""release_year"" int, ""title_aka"" text, ""budget"" text, primary key(""mid"") ); CREATE TABLE ""tags"" ( ""id"" int, ""msid"" int, ""kid"" int, primary key(""id""), foreign key(""msid"") references `copyright`(""msid""), foreign key(""kid"") references `keyword`(""kid"") ); CREATE TABLE ""tv_series"" ( ""sid"" int, ""title"" text, ""release_year"" int, ""num_of_seasons"" int, ""num_of_episodes"" int, ""title_aka"" text, ""budget"" text, primary key(""sid"") ); CREATE TABLE ""writer"" ( ""wid"" int, ""gender"" text, ""name"" int, ""nationality"" int, ""num_of_episodes"" int, ""birth_city"" text, ""birth_year"" int, primary key(""wid"") ); CREATE TABLE ""written_by"" ( ""id"" int, ""msid"" int, ""wid"" int, foreign key(""msid"") references `copyright`(""msid""), foreign key(""wid"") references `writer`(""wid"") );",easy
824,3725,customers_and_invoices,SELECT count(*) FROM Customers,Count the number of customers.,"PRAGMA foreign_keys = ON; CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_first_name` VARCHAR(50), `customer_middle_initial` VARCHAR(1), `customer_last_name` VARCHAR(50), `gender` VARCHAR(1), `email_address` VARCHAR(255), `login_name` VARCHAR(80), `login_password` VARCHAR(20), `phone_number` VARCHAR(255), `town_city` VARCHAR(50), `state_county_province` VARCHAR(50), `country` VARCHAR(50) );  CREATE TABLE `Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `date_order_placed` DATETIME NOT NULL, `order_details` VARCHAR(255), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) ); CREATE TABLE `Invoices` ( `invoice_number` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `invoice_date` DATETIME, FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ) ); CREATE TABLE `Accounts` ( `account_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `date_account_opened` DATETIME, `account_name` VARCHAR(50), `other_account_details` VARCHAR(255), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) );    CREATE TABLE `Product_Categories` ( `production_type_code` VARCHAR(15) PRIMARY KEY, `product_type_description` VARCHAR(80), `vat_rating` DECIMAL(19,4) ); CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `parent_product_id` INTEGER, `production_type_code` VARCHAR(15) NOT NULL, `unit_price` DECIMAL(19,4), `product_name` VARCHAR(80), `product_color` VARCHAR(20), `product_size` VARCHAR(20), FOREIGN KEY (`production_type_code` ) REFERENCES `Product_Categories`(`production_type_code` ) );  CREATE TABLE `Financial_Transactions` ( `transaction_id` INTEGER NOT NULL , `account_id` INTEGER NOT NULL, `invoice_number` INTEGER, `transaction_type` VARCHAR(15) NOT NULL, `transaction_date` DATETIME, `transaction_amount` DECIMAL(19,4), `transaction_comment` VARCHAR(255), `other_transaction_details` VARCHAR(255), FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ), FOREIGN KEY (`account_id` ) REFERENCES `Accounts`(`account_id` ) ); CREATE TABLE `Order_Items` ( `order_item_id` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, `product_quantity` VARCHAR(50), `other_order_item_details` VARCHAR(255), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ), FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ) );   CREATE TABLE `Invoice_Line_Items` ( `order_item_id` INTEGER NOT NULL, `invoice_number` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, `product_title` VARCHAR(80), `product_quantity` VARCHAR(50), `product_price` DECIMAL(19,4), `derived_product_cost` DECIMAL(19,4), `derived_vat_payable` DECIMAL(19,4), `derived_total_cost` DECIMAL(19,4), FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ), FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) ); ",easy
1655,7212,voter_2,"SELECT avg(Age) FROM STUDENT WHERE Sex  =  ""F""",What is the average age of female (sex is F) students?,"create table Student (         StuID        INTEGER PRIMARY KEY,         LName        VARCHAR(12),         Fname        VARCHAR(12),         Age      INTEGER,         Sex      VARCHAR(1),         Major        INTEGER,         Advisor      INTEGER,         city_code    VARCHAR(3)  );  create table Voting_record (        StuID    	INTEGER,        Registration_Date		VARCHAR(12),        Election_Cycle		VARCHAR(12),        President_Vote		INTEGER,        Vice_President_Vote		INTEGER,        Secretary_Vote		INTEGER,        Treasurer_Vote		INTEGER,        Class_President_Vote		INTEGER,        Class_Senator_Vote		INTEGER,        FOREIGN KEY(StuID) REFERENCES Student(StuID),         FOREIGN KEY(President_Vote) REFERENCES Student(StuID),        FOREIGN KEY(Vice_President_Vote) REFERENCES Student(StuID),        FOREIGN KEY(Secretary_Vote) REFERENCES Student(StuID),        FOREIGN KEY(Treasurer_Vote) REFERENCES Student(StuID),        FOREIGN KEY(Class_President_Vote) REFERENCES Student(StuID),        FOREIGN KEY(Class_Senator_Vote) REFERENCES Student(StuID) );  ",easy
866,3915,school_finance,SELECT count(*) FROM school,How many schools are there?,"PRAGMA foreign_keys = ON;  CREATE TABLE ""School"" ( ""School_id"" text, ""School_name"" text, ""Location"" text, ""Mascot"" text, ""Enrollment"" int, ""IHSAA_Class"" text, ""IHSAA_Football_Class"" text, ""County"" text, PRIMARY KEY (""School_id"") );  CREATE TABLE ""budget"" ( ""School_id"" int, ""Year"" int, ""Budgeted"" int, ""total_budget_percent_budgeted"" real, ""Invested"" int, ""total_budget_percent_invested"" real, ""Budget_invested_percent"" text, PRIMARY KEY(""School_id"",""YEAR""), FOREIGN KEY(""School_id"") REFERENCES ""School""(""School_id"")  );  CREATE TABLE ""endowment"" ( ""endowment_id"" int, ""School_id"" int, ""donator_name"" text, ""amount"" real, PRIMARY KEY(""endowment_id""), FOREIGN KEY(""School_id"") REFERENCES ""School""(""School_id"") );  ",easy
231,921,geo,"SELECT population FROM state WHERE state_name  =  ""california"";",what are the population of california,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );",easy
1032,4632,inn_1,"SELECT count(*) FROM Rooms WHERE bedType  =  ""King"";",Find the number of rooms with a king bed.,"CREATE TABLE ""Rooms"" (  	""RoomId"" TEXT PRIMARY KEY, 	""roomName"" TEXT,  	""beds"" INTEGER,  	""bedType"" TEXT,  	""maxOccupancy"" INTEGER,  	""basePrice"" INTEGER,  	""decor"" TEXT  );  CREATE TABLE ""Reservations"" (  	""Code"" INTEGER PRIMARY KEY,  	""Room"" TEXT,  	""CheckIn"" TEXT,  	""CheckOut"" TEXT,  	""Rate"" REAL,  	""LastName"" TEXT,  	""FirstName"" TEXT,  	""Adults"" INTEGER,  	""Kids"" INTEGER, 	FOREIGN KEY (Room) REFERENCES Rooms(RoomId) ); ",easy
1984,8432,activity_1,SELECT DISTINCT rank FROM Faculty,Find the list of distinct ranks for faculty.,"create table Activity (   actid INTEGER PRIMARY KEY,   activity_name varchar(25) );  create table Participates_in (   stuid INTEGER,   actid INTEGER,   FOREIGN KEY(stuid) REFERENCES Student(StuID),   FOREIGN KEY(actid) REFERENCES Activity(actid) );  create table Faculty_Participates_in (   FacID INTEGER,   actid INTEGER,   FOREIGN KEY(FacID) REFERENCES Faculty(FacID),   FOREIGN KEY(actid) REFERENCES Activity(actid) );  create table Student (         StuID        INTEGER PRIMARY KEY,         LName        VARCHAR(12),         Fname        VARCHAR(12),         Age      INTEGER,         Sex      VARCHAR(1),         Major        INTEGER,         Advisor      INTEGER,         city_code    VARCHAR(3)  );  create table Faculty (        FacID 	       INTEGER PRIMARY KEY,        Lname		VARCHAR(15),        Fname		VARCHAR(15),        Rank		VARCHAR(15),        Sex		VARCHAR(1),        Phone		INTEGER,        Room		VARCHAR(5),        Building		VARCHAR(13) );   ",easy
1800,7752,game_1,SELECT advisor FROM Student GROUP BY advisor HAVING count(*)  >=  2,What are the advisors,"create table Student (         StuID        INTEGER PRIMARY KEY,         LName        VARCHAR(12),         Fname        VARCHAR(12),         Age      INTEGER,         Sex      VARCHAR(1),         Major        INTEGER,         Advisor      INTEGER,         city_code    VARCHAR(3)  );  create table Video_Games (        GameID           INTEGER PRIMARY KEY,        GName            VARCHAR(40),        GType            VARCHAR(40) );  create table Plays_Games (        StuID                INTEGER,        GameID            INTEGER,        Hours_Played      INTEGER,        FOREIGN KEY(GameID) REFERENCES Video_Games(GameID),        FOREIGN KEY(StuID) REFERENCES Student(StuID) );  create table SportsInfo (   StuID INTEGER,   SportName VARCHAR(32),   HoursPerWeek INTEGER,   GamesPlayed INTEGER,   OnScholarship VARCHAR(1),   FOREIGN KEY(StuID) REFERENCES Student(StuID) );   ",easy
860,3901,wrestler,SELECT Name FROM wrestler WHERE Days_held  <  100,What are the names of wrestlers days held less than 100?,"PRAGMA foreign_keys = ON;  CREATE TABLE ""wrestler"" ( ""Wrestler_ID"" int, ""Name"" text, ""Reign"" text, ""Days_held"" text, ""Location"" text, ""Event"" text, PRIMARY KEY (""Wrestler_ID"") );  CREATE TABLE ""Elimination"" ( ""Elimination_ID"" text, ""Wrestler_ID"" text, ""Team"" text, ""Eliminated_By"" text, ""Elimination_Move"" text, ""Time"" text, PRIMARY KEY (""Elimination_ID""), FOREIGN KEY (""Wrestler_ID"") REFERENCES ""wrestler""(""Wrestler_ID"") );  ",easy
1250,5569,e_learning,SELECT address_line_1 FROM Course_Authors_and_Tutors,What is the address of each course author or tutor?,"PRAGMA foreign_keys = ON; CREATE TABLE `Course_Authors_and_Tutors` ( `author_id` INTEGER PRIMARY KEY, `author_tutor_ATB` VARCHAR(3), `login_name` VARCHAR(40), `password` VARCHAR(40), `personal_name` VARCHAR(80), `middle_name` VARCHAR(80), `family_name` VARCHAR(80), `gender_mf` VARCHAR(1), `address_line_1` VARCHAR(80) ); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (1, '331', 'jmckenzie', 'c40fa148bdd0d2d45cd6e9ec1e685750fe07f81b', 'Cathrine', 'Ruthie', 'Grant', '0', '756 Monahan Mews Spinkashire, NJ 64230-5098'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (2, '975', 'heidenreich.ara', '24b0ee84063c3b017ab1839e01b7280f47f7c7c2', 'Retha', 'Corene', 'Armstrong', '0', '98623 Huels Manor Jasttown, DE 31611'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (3, '349', 'clementina29', 'cdaf6c3483f19e2253659a40a3aab786a3390f78', 'Darius', 'Ethyl', 'Reichel', '0', '99296 Keeling Courts North Audreanne, IL 28272'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (4, '782', 'wlehner', 'd34378200c9b5f72d3039fa640e7920aaec0fdf2', 'Julio', 'Aniyah', 'Nader', '1', '644 Montana Hill Suite 489 Daijamouth, CA 19587-4254'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (5, '388', 'nyundt', '2c196efe8aee23a1b9a7e752fe63029c5879af6f', 'Yessenia', 'Zena', 'Barrows', '1', '5284 Champlin Roads Cassinport, WY 54636'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (6, '817', 'al75', 'e96c0bcbbbb14747747a56ff4c17354f343a5b4f', 'Adolf', 'Keira', 'Rohan', '1', '92220 Hellen Skyway Apt. 635 Rennerview, MS 81036'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (7, '869', 'marty.bergnaum', '3e2f7bf1e6acf0d616a8703ee0050fba13bc007f', 'Logan', 'Ethelyn', 'Treutel', '1', '67541 Osborne Creek Suite 532 Bernhardview, WV 30288-1050'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (8, '557', 'medhurst.alvah', '02d64f11de97436343a0beba41bfcf69af61be1e', 'Kelsie', 'Kennith', 'Rowe', '0', '0256 Walter Meadows Suite 523 Norbertoborough, AZ 49193'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (9, '505', 'antonetta19', '4d8e909ae9b8888c93a2c5f1eccbd0c4ac6a01c3', 'Georgiana', 'Mathew', 'Zboncak', '0', '445 Quigley Fall Port Antonette, IN 81992-1255'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (10, '159', 'adam.rippin', 'b517a107b5f08fafe9628e88e7263a6f3a4a55c0', 'Deja', 'Joyce', 'Champlin', '1', '22575 Effertz Neck Apt. 046 Port Scotty, NY 67108-9197'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (11, '229', 'dschaefer', '4f149f75ecd84afcdf27343509cdd03d81edb119', 'Ciara', 'Alejandra', 'Greenholt', '0', '425 White Brooks Emmaleefort, IN 97850-2510'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (12, '847', 'nellie.mosciski', 'a48e25a58b3088e9cfdaca61130555ed2c772452', 'Sheldon', 'Jayce', 'Kreiger', '1', '513 Collins Plain Apt. 829 Clementinaville, VT 59908-2793'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (13, '613', 'qking', '6b9979a83b4a9e03ead034c8de47f1b013a3d3af', 'Madonna', 'Jaclyn', 'Effertz', '1', '139 O''Conner Circles Virginieland, KS 23365'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (14, '833', 'fiona77', '120ac8a5744f5b710ecaebbd8dd1633e3e33886e', 'Dusty', 'Amani', 'Crist', '1', '3602 Boehm Forest Zulaufton, DC 35229-0366'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (15, '974', 'ekshlerin', '6d587cec8006e3a40565e1dad2c5b5b12b475b8f', 'Shakira', 'Fritz', 'Haley', '0', '8928 Kunze Valley Apt. 747 South Jedidiahmouth, DE 28167');   CREATE TABLE `Students` ( `student_id` INTEGER PRIMARY KEY, `date_of_registration` DATETIME, `date_of_latest_logon` DATETIME, `login_name` VARCHAR(40), `password` VARCHAR(10), `personal_name` VARCHAR(40), `middle_name` VARCHAR(40), `family_name` VARCHAR(40) ); CREATE TABLE `Subjects` ( `subject_id` INTEGER PRIMARY KEY, `subject_name` VARCHAR(120) ); CREATE TABLE `Courses` ( `course_id` INTEGER PRIMARY KEY, `author_id` INTEGER NOT NULL, `subject_id` INTEGER NOT NULL, `course_name` VARCHAR(120), `course_description` VARCHAR(255), FOREIGN KEY (`author_id` ) REFERENCES `Course_Authors_and_Tutors`(`author_id` ), FOREIGN KEY (`subject_id` ) REFERENCES `Subjects`(`subject_id` ) ); CREATE TABLE `Student_Course_Enrolment` ( `registration_id` INTEGER PRIMARY KEY, `student_id` INTEGER NOT NULL, `course_id` INTEGER NOT NULL, `date_of_enrolment` DATETIME NOT NULL, `date_of_completion` DATETIME NOT NULL, FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ), FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ) );  CREATE TABLE `Student_Tests_Taken` ( `registration_id` INTEGER NOT NULL, `date_test_taken` DATETIME NOT NULL, `test_result` VARCHAR(255), FOREIGN KEY (`registration_id` ) REFERENCES `Student_Course_Enrolment`(`registration_id` ) );  ",easy
1108,4931,sakila_1,SELECT title FROM film WHERE rating  =  'R',Return the titles of any movies with an R rating.,"-- Sakila Sample Database Schema -- Version 0.8  -- Copyright (c) 2006, MySQL AB -- All rights reserved.  -- Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:  --  * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. --  * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. --  * Neither the name of MySQL AB nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.  -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  -- -- Table structure for table `actor` --  CREATE TABLE actor (   actor_id SMALLINT UNSIGNED NOT NULL,   first_name VARCHAR(45) NOT NULL,   last_name VARCHAR(45) NOT NULL,   last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,   PRIMARY KEY  (actor_id) );  -- -- Table structure for table `address` --  CREATE TABLE address (   address_id SMALLINT UNSIGNED NOT NULL,   address VARCHAR(50) NOT NULL,   address2 VARCHAR(50) DEFAULT NULL,   district VARCHAR(20) NOT NULL,   city_id SMALLINT UNSIGNED NOT NULL,   postal_code VARCHAR(10) DEFAULT NULL,   phone VARCHAR(20) NOT NULL,   last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,   PRIMARY KEY  (address_id),   FOREIGN KEY (city_id) REFERENCES city (city_id) );  -- -- Table structure for table `category` --  CREATE TABLE category (   category_id TINYINT UNSIGNED NOT NULL,   name VARCHAR(25) NOT NULL,   last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,   PRIMARY KEY  (category_id) );  -- -- Table structure for table `city` --  CREATE TABLE city (   city_id SMALLINT UNSIGNED NOT NULL,   city VARCHAR(50) NOT NULL,   country_id SMALLINT UNSIGNED NOT NULL,   last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,   PRIMARY KEY  (city_id),   FOREIGN KEY (country_id) REFERENCES country (country_id) );  -- -- Table structure for table `country` --  CREATE TABLE country (   country_id SMALLINT UNSIGNED NOT NULL,   country VARCHAR(50) NOT NULL,   last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,   PRIMARY KEY  (country_id) );  -- -- Table structure for table `customer` --  CREATE TABLE customer (   customer_id SMALLINT UNSIGNED NOT NULL,   store_id TINYINT UNSIGNED NOT NULL,   first_name VARCHAR(45) NOT NULL,   last_name VARCHAR(45) NOT NULL,   email VARCHAR(50) DEFAULT NULL,   address_id SMALLINT UNSIGNED NOT NULL,   active BOOLEAN NOT NULL DEFAULT TRUE,   create_date DATETIME NOT NULL,   last_update TIMESTAMP DEFAULT CURRENT_TIMESTAMP,   PRIMARY KEY  (customer_id),   FOREIGN KEY (address_id) REFERENCES address (address_id),   FOREIGN KEY (store_id) REFERENCES store (store_id) );  -- -- Table structure for table `film` --  CREATE TABLE film (   film_id SMALLINT UNSIGNED NOT NULL,   title VARCHAR(255) NOT NULL,   description TEXT DEFAULT NULL,   release_year YEAR DEFAULT NULL,   language_id TINYINT UNSIGNED NOT NULL,   original_language_id TINYINT UNSIGNED DEFAULT NULL,   rental_duration TINYINT UNSIGNED NOT NULL DEFAULT 3,   rental_rate DECIMAL(4,2) NOT NULL DEFAULT 4.99,   length SMALLINT UNSIGNED DEFAULT NULL,   replacement_cost DECIMAL(5,2) NOT NULL DEFAULT 19.99,   rating DEFAULT 'G',   special_features DEFAULT NULL,   last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,   PRIMARY KEY  (film_id),   FOREIGN KEY (language_id) REFERENCES language (language_id),   FOREIGN KEY (original_language_id) REFERENCES language (language_id) );  -- -- Table structure for table `film_actor` --  CREATE TABLE film_actor (   actor_id SMALLINT UNSIGNED NOT NULL,   film_id SMALLINT UNSIGNED NOT NULL,   last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,   PRIMARY KEY  (actor_id,film_id),  FOREIGN KEY (actor_id) REFERENCES actor (actor_id),   FOREIGN KEY (film_id) REFERENCES film (film_id) );  -- -- Table structure for table `film_category` --  CREATE TABLE film_category (   film_id SMALLINT UNSIGNED NOT NULL,   category_id TINYINT UNSIGNED NOT NULL,   last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,   PRIMARY KEY (film_id, category_id),   FOREIGN KEY (film_id) REFERENCES film (film_id),   FOREIGN KEY (category_id) REFERENCES category (category_id) );  -- -- Table structure for table `film_text` --  CREATE TABLE film_text (   film_id SMALLINT NOT NULL,   title VARCHAR(255) NOT NULL,   description TEXT,   PRIMARY KEY  (film_id) );  -- -- Table structure for table `inventory` --  CREATE TABLE inventory (   inventory_id MEDIUMINT UNSIGNED NOT NULL,   film_id SMALLINT UNSIGNED NOT NULL,   store_id TINYINT UNSIGNED NOT NULL,   last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,   PRIMARY KEY  (inventory_id),   FOREIGN KEY (store_id) REFERENCES store (store_id),   FOREIGN KEY (film_id) REFERENCES film (film_id) );  -- -- Table structure for table `language` --  CREATE TABLE language (   language_id TINYINT UNSIGNED NOT NULL,   name CHAR(20) NOT NULL,   last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,   PRIMARY KEY (language_id) );  -- -- Table structure for table `payment` --  CREATE TABLE payment (   payment_id SMALLINT UNSIGNED NOT NULL,   customer_id SMALLINT UNSIGNED NOT NULL,   staff_id TINYINT UNSIGNED NOT NULL,   rental_id INT DEFAULT NULL,   amount DECIMAL(5,2) NOT NULL,   payment_date DATETIME NOT NULL,   last_update TIMESTAMP DEFAULT CURRENT_TIMESTAMP,   PRIMARY KEY  (payment_id),   FOREIGN KEY (rental_id) REFERENCES rental (rental_id),   FOREIGN KEY (customer_id) REFERENCES customer (customer_id),   FOREIGN KEY (staff_id) REFERENCES staff (staff_id) );   -- -- Table structure for table `rental` --  CREATE TABLE rental (   rental_id INT NOT NULL,   rental_date DATETIME NOT NULL,   inventory_id MEDIUMINT UNSIGNED NOT NULL,   customer_id SMALLINT UNSIGNED NOT NULL,   return_date DATETIME DEFAULT NULL,   staff_id TINYINT UNSIGNED NOT NULL,   last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,   PRIMARY KEY (rental_id),   FOREIGN KEY (staff_id) REFERENCES staff (staff_id),   FOREIGN KEY (inventory_id) REFERENCES inventory (inventory_id),   FOREIGN KEY (customer_id) REFERENCES customer (customer_id) );  -- -- Table structure for table `staff` --  CREATE TABLE staff (   staff_id TINYINT UNSIGNED NOT NULL,   first_name VARCHAR(45) NOT NULL,   last_name VARCHAR(45) NOT NULL,   address_id SMALLINT UNSIGNED NOT NULL,   picture BLOB DEFAULT NULL,   email VARCHAR(50) DEFAULT NULL,   store_id TINYINT UNSIGNED NOT NULL,   active BOOLEAN NOT NULL DEFAULT TRUE,   username VARCHAR(16) NOT NULL,   password VARCHAR(40) DEFAULT NULL,   last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,   PRIMARY KEY  (staff_id),   --FOREIGN KEY (store_id) REFERENCES store (store_id),   FOREIGN KEY (address_id) REFERENCES address (address_id) );  -- -- Table structure for table `store` --  CREATE TABLE store (   store_id TINYINT UNSIGNED NOT NULL,   manager_staff_id TINYINT UNSIGNED NOT NULL,   address_id SMALLINT UNSIGNED NOT NULL,   last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,   PRIMARY KEY  (store_id),   FOREIGN KEY (manager_staff_id) REFERENCES staff (staff_id),   FOREIGN KEY (address_id) REFERENCES address (address_id) );   -- Sakila Sample Database Data -- Version 0.8  -- Copyright (c) 2006, MySQL AB -- All rights reserved.  -- Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:  --  * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. --  * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. --  * Neither the name of MySQL AB nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.  -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.   ",easy
900,4075,party_people,SELECT count(DISTINCT party_name) FROM party,Count the number of different parties.," PRAGMA foreign_keys = ON;   CREATE TABLE ""region"" ( ""Region_ID"" int, ""Region_name"" text, ""Date"" text, ""Label"" text, ""Format"" text, ""Catalogue"" text, PRIMARY KEY (""Region_ID"") );   CREATE TABLE ""party"" ( ""Party_ID"" int, ""Minister"" text, ""Took_office"" text, ""Left_office"" text, ""Region_ID"" int, ""Party_name"" text, PRIMARY KEY (""Party_ID""), FOREIGN KEY (`Region_ID`) REFERENCES `region`(`Region_ID`) );  CREATE TABLE ""member"" ( ""Member_ID"" int, ""Member_Name"" text, ""Party_ID"" text, ""In_office"" text, PRIMARY KEY (""Member_ID""), FOREIGN KEY (`Party_ID`) REFERENCES `party`(`Party_ID`) );   CREATE TABLE ""party_events"" ( ""Event_ID"" int, ""Event_Name"" text, ""Party_ID"" int, ""Member_in_charge_ID"" int, PRIMARY KEY (""Event_ID""), FOREIGN KEY (`Party_ID`) REFERENCES `party`(`Party_ID`), FOREIGN KEY (`Member_in_charge_ID`) REFERENCES `member`(`Member_ID`) );   ",easy
1772,7654,cre_Theme_park,"SELECT Address FROM LOCATIONS WHERE Location_Name  =  ""UK Gallery""","Find the address of the location named ""UK Gallery"".","PRAGMA foreign_keys = ON; CREATE TABLE Ref_Hotel_Star_Ratings ( star_rating_code CHAR(15) NOT NULL, star_rating_description VARCHAR(80), PRIMARY KEY (star_rating_code), UNIQUE (star_rating_code) );   CREATE TABLE Locations ( Location_ID INTEGER NOT NULL, Location_Name VARCHAR(255), Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Location_ID) ); CREATE TABLE Ref_Attraction_Types ( Attraction_Type_Code CHAR(15) NOT NULL, Attraction_Type_Description VARCHAR(255), PRIMARY KEY (Attraction_Type_Code), UNIQUE (Attraction_Type_Code) );  CREATE TABLE Visitors ( Tourist_ID INTEGER NOT NULL, Tourist_Details VARCHAR(255), PRIMARY KEY (Tourist_ID), UNIQUE (Tourist_ID) ); CREATE TABLE Features ( Feature_ID INTEGER NOT NULL, Feature_Details VARCHAR(255), PRIMARY KEY (Feature_ID) );  CREATE TABLE Hotels ( hotel_id INTEGER NOT NULL, star_rating_code CHAR(15) NOT NULL, pets_allowed_yn CHAR(1), price_range real, other_hotel_details VARCHAR(255), PRIMARY KEY (hotel_id), FOREIGN KEY (star_rating_code) REFERENCES Ref_Hotel_Star_Ratings (star_rating_code) );  CREATE TABLE Tourist_Attractions ( Tourist_Attraction_ID INTEGER NOT NULL, Attraction_Type_Code CHAR(15) NOT NULL, Location_ID INTEGER NOT NULL, How_to_Get_There VARCHAR(255), Name VARCHAR(255), Description VARCHAR(255), Opening_Hours VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Tourist_Attraction_ID), FOREIGN KEY (Location_ID) REFERENCES Locations (Location_ID), FOREIGN KEY (Attraction_Type_Code) REFERENCES Ref_Attraction_Types (Attraction_Type_Code) );  CREATE TABLE Street_Markets ( Market_ID INTEGER NOT NULL, Market_Details VARCHAR(255), PRIMARY KEY (Market_ID), FOREIGN KEY (Market_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Shops ( Shop_ID INTEGER NOT NULL, Shop_Details VARCHAR(255), PRIMARY KEY (Shop_ID), FOREIGN KEY (Shop_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Museums ( Museum_ID INTEGER NOT NULL, Museum_Details VARCHAR(255), PRIMARY KEY (Museum_ID), FOREIGN KEY (Museum_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Royal_Family ( Royal_Family_ID INTEGER NOT NULL, Royal_Family_Details VARCHAR(255), PRIMARY KEY (Royal_Family_ID), FOREIGN KEY (Royal_Family_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Theme_Parks ( Theme_Park_ID INTEGER NOT NULL, Theme_Park_Details VARCHAR(255), PRIMARY KEY (Theme_Park_ID), FOREIGN KEY (Theme_Park_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) );   CREATE TABLE Visits ( Visit_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Tourist_ID INTEGER NOT NULL, Visit_Date DATETIME NOT NULL, Visit_Details VARCHAR(40) NOT NULL, PRIMARY KEY (Visit_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID), FOREIGN KEY (Tourist_ID) REFERENCES Visitors (Tourist_ID) );   CREATE TABLE Photos ( Photo_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Name VARCHAR(255), Description VARCHAR(255), Filename VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Photo_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Staff ( Staff_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Name VARCHAR(40), Other_Details VARCHAR(255), PRIMARY KEY (Staff_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) );   CREATE TABLE Tourist_Attraction_Features ( Tourist_Attraction_ID INTEGER NOT NULL, Feature_ID INTEGER NOT NULL, PRIMARY KEY (Tourist_Attraction_ID, Feature_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID), FOREIGN KEY (Feature_ID) REFERENCES Features (Feature_ID) ); ",easy
703,3253,insurance_fnol,SELECT count(*) FROM services,Count the total number of available services.,"PRAGMA foreign_keys = ON;  CREATE TABLE Customers ( Customer_ID INTEGER NOT NULL, Customer_name VARCHAR(40), PRIMARY KEY (Customer_ID) ); CREATE TABLE Services ( Service_ID INTEGER NOT NULL, Service_name VARCHAR(40), PRIMARY KEY (Service_ID) );  CREATE TABLE Available_Policies ( Policy_ID INTEGER NOT NULL, policy_type_code CHAR(15), Customer_Phone VARCHAR(255), PRIMARY KEY (Policy_ID), UNIQUE (Policy_ID) );  CREATE TABLE Customers_Policies ( Customer_ID INTEGER NOT NULL, Policy_ID INTEGER NOT NULL, Date_Opened DATE, Date_Closed DATE, PRIMARY KEY (Customer_ID, Policy_ID), FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY (Policy_ID) REFERENCES Available_Policies (Policy_ID) ); CREATE TABLE First_Notification_of_Loss ( FNOL_ID INTEGER NOT NULL, Customer_ID INTEGER NOT NULL, Policy_ID INTEGER NOT NULL, Service_ID INTEGER NOT NULL, PRIMARY KEY (FNOL_ID), UNIQUE (FNOL_ID), FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID), FOREIGN KEY (Customer_ID, Policy_ID) REFERENCES Customers_Policies (Customer_ID,Policy_ID) ); CREATE TABLE Claims ( Claim_ID INTEGER NOT NULL, FNOL_ID INTEGER NOT NULL, Effective_Date DATE, PRIMARY KEY (Claim_ID), UNIQUE (Claim_ID), FOREIGN KEY (FNOL_ID) REFERENCES First_Notification_of_Loss (FNOL_ID) ); CREATE TABLE Settlements ( Settlement_ID INTEGER NOT NULL, Claim_ID INTEGER, Effective_Date DATE, Settlement_Amount REAL, PRIMARY KEY (Settlement_ID), UNIQUE (Settlement_ID), FOREIGN KEY (Claim_ID) REFERENCES Claims (Claim_ID) );  ",easy
1304,5823,student_1,SELECT count(*) FROM list,How many students are there?,"CREATE TABLE ""list"" (  	""LastName"" TEXT,  	""FirstName"" TEXT,  	""Grade"" INTEGER,  	""Classroom"" INTEGER, 	PRIMARY KEY(LastName, FirstName) ); CREATE TABLE ""teachers"" (  	""LastName"" TEXT,  	""FirstName"" TEXT,  	""Classroom"" INTEGER, 	PRIMARY KEY(LastName, FirstName) );",easy
367,1144,geo,SELECT COUNT ( state_name ) FROM state;,how many states are in the united states,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );",easy
1104,4917,sakila_1,SELECT sum(amount) FROM payment,Return the sum of all payment amounts.,"-- Sakila Sample Database Schema -- Version 0.8  -- Copyright (c) 2006, MySQL AB -- All rights reserved.  -- Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:  --  * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. --  * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. --  * Neither the name of MySQL AB nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.  -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  -- -- Table structure for table `actor` --  CREATE TABLE actor (   actor_id SMALLINT UNSIGNED NOT NULL,   first_name VARCHAR(45) NOT NULL,   last_name VARCHAR(45) NOT NULL,   last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,   PRIMARY KEY  (actor_id) );  -- -- Table structure for table `address` --  CREATE TABLE address (   address_id SMALLINT UNSIGNED NOT NULL,   address VARCHAR(50) NOT NULL,   address2 VARCHAR(50) DEFAULT NULL,   district VARCHAR(20) NOT NULL,   city_id SMALLINT UNSIGNED NOT NULL,   postal_code VARCHAR(10) DEFAULT NULL,   phone VARCHAR(20) NOT NULL,   last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,   PRIMARY KEY  (address_id),   FOREIGN KEY (city_id) REFERENCES city (city_id) );  -- -- Table structure for table `category` --  CREATE TABLE category (   category_id TINYINT UNSIGNED NOT NULL,   name VARCHAR(25) NOT NULL,   last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,   PRIMARY KEY  (category_id) );  -- -- Table structure for table `city` --  CREATE TABLE city (   city_id SMALLINT UNSIGNED NOT NULL,   city VARCHAR(50) NOT NULL,   country_id SMALLINT UNSIGNED NOT NULL,   last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,   PRIMARY KEY  (city_id),   FOREIGN KEY (country_id) REFERENCES country (country_id) );  -- -- Table structure for table `country` --  CREATE TABLE country (   country_id SMALLINT UNSIGNED NOT NULL,   country VARCHAR(50) NOT NULL,   last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,   PRIMARY KEY  (country_id) );  -- -- Table structure for table `customer` --  CREATE TABLE customer (   customer_id SMALLINT UNSIGNED NOT NULL,   store_id TINYINT UNSIGNED NOT NULL,   first_name VARCHAR(45) NOT NULL,   last_name VARCHAR(45) NOT NULL,   email VARCHAR(50) DEFAULT NULL,   address_id SMALLINT UNSIGNED NOT NULL,   active BOOLEAN NOT NULL DEFAULT TRUE,   create_date DATETIME NOT NULL,   last_update TIMESTAMP DEFAULT CURRENT_TIMESTAMP,   PRIMARY KEY  (customer_id),   FOREIGN KEY (address_id) REFERENCES address (address_id),   FOREIGN KEY (store_id) REFERENCES store (store_id) );  -- -- Table structure for table `film` --  CREATE TABLE film (   film_id SMALLINT UNSIGNED NOT NULL,   title VARCHAR(255) NOT NULL,   description TEXT DEFAULT NULL,   release_year YEAR DEFAULT NULL,   language_id TINYINT UNSIGNED NOT NULL,   original_language_id TINYINT UNSIGNED DEFAULT NULL,   rental_duration TINYINT UNSIGNED NOT NULL DEFAULT 3,   rental_rate DECIMAL(4,2) NOT NULL DEFAULT 4.99,   length SMALLINT UNSIGNED DEFAULT NULL,   replacement_cost DECIMAL(5,2) NOT NULL DEFAULT 19.99,   rating DEFAULT 'G',   special_features DEFAULT NULL,   last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,   PRIMARY KEY  (film_id),   FOREIGN KEY (language_id) REFERENCES language (language_id),   FOREIGN KEY (original_language_id) REFERENCES language (language_id) );  -- -- Table structure for table `film_actor` --  CREATE TABLE film_actor (   actor_id SMALLINT UNSIGNED NOT NULL,   film_id SMALLINT UNSIGNED NOT NULL,   last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,   PRIMARY KEY  (actor_id,film_id),  FOREIGN KEY (actor_id) REFERENCES actor (actor_id),   FOREIGN KEY (film_id) REFERENCES film (film_id) );  -- -- Table structure for table `film_category` --  CREATE TABLE film_category (   film_id SMALLINT UNSIGNED NOT NULL,   category_id TINYINT UNSIGNED NOT NULL,   last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,   PRIMARY KEY (film_id, category_id),   FOREIGN KEY (film_id) REFERENCES film (film_id),   FOREIGN KEY (category_id) REFERENCES category (category_id) );  -- -- Table structure for table `film_text` --  CREATE TABLE film_text (   film_id SMALLINT NOT NULL,   title VARCHAR(255) NOT NULL,   description TEXT,   PRIMARY KEY  (film_id) );  -- -- Table structure for table `inventory` --  CREATE TABLE inventory (   inventory_id MEDIUMINT UNSIGNED NOT NULL,   film_id SMALLINT UNSIGNED NOT NULL,   store_id TINYINT UNSIGNED NOT NULL,   last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,   PRIMARY KEY  (inventory_id),   FOREIGN KEY (store_id) REFERENCES store (store_id),   FOREIGN KEY (film_id) REFERENCES film (film_id) );  -- -- Table structure for table `language` --  CREATE TABLE language (   language_id TINYINT UNSIGNED NOT NULL,   name CHAR(20) NOT NULL,   last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,   PRIMARY KEY (language_id) );  -- -- Table structure for table `payment` --  CREATE TABLE payment (   payment_id SMALLINT UNSIGNED NOT NULL,   customer_id SMALLINT UNSIGNED NOT NULL,   staff_id TINYINT UNSIGNED NOT NULL,   rental_id INT DEFAULT NULL,   amount DECIMAL(5,2) NOT NULL,   payment_date DATETIME NOT NULL,   last_update TIMESTAMP DEFAULT CURRENT_TIMESTAMP,   PRIMARY KEY  (payment_id),   FOREIGN KEY (rental_id) REFERENCES rental (rental_id),   FOREIGN KEY (customer_id) REFERENCES customer (customer_id),   FOREIGN KEY (staff_id) REFERENCES staff (staff_id) );   -- -- Table structure for table `rental` --  CREATE TABLE rental (   rental_id INT NOT NULL,   rental_date DATETIME NOT NULL,   inventory_id MEDIUMINT UNSIGNED NOT NULL,   customer_id SMALLINT UNSIGNED NOT NULL,   return_date DATETIME DEFAULT NULL,   staff_id TINYINT UNSIGNED NOT NULL,   last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,   PRIMARY KEY (rental_id),   FOREIGN KEY (staff_id) REFERENCES staff (staff_id),   FOREIGN KEY (inventory_id) REFERENCES inventory (inventory_id),   FOREIGN KEY (customer_id) REFERENCES customer (customer_id) );  -- -- Table structure for table `staff` --  CREATE TABLE staff (   staff_id TINYINT UNSIGNED NOT NULL,   first_name VARCHAR(45) NOT NULL,   last_name VARCHAR(45) NOT NULL,   address_id SMALLINT UNSIGNED NOT NULL,   picture BLOB DEFAULT NULL,   email VARCHAR(50) DEFAULT NULL,   store_id TINYINT UNSIGNED NOT NULL,   active BOOLEAN NOT NULL DEFAULT TRUE,   username VARCHAR(16) NOT NULL,   password VARCHAR(40) DEFAULT NULL,   last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,   PRIMARY KEY  (staff_id),   --FOREIGN KEY (store_id) REFERENCES store (store_id),   FOREIGN KEY (address_id) REFERENCES address (address_id) );  -- -- Table structure for table `store` --  CREATE TABLE store (   store_id TINYINT UNSIGNED NOT NULL,   manager_staff_id TINYINT UNSIGNED NOT NULL,   address_id SMALLINT UNSIGNED NOT NULL,   last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,   PRIMARY KEY  (store_id),   FOREIGN KEY (manager_staff_id) REFERENCES staff (staff_id),   FOREIGN KEY (address_id) REFERENCES address (address_id) );   -- Sakila Sample Database Data -- Version 0.8  -- Copyright (c) 2006, MySQL AB -- All rights reserved.  -- Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:  --  * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. --  * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. --  * Neither the name of MySQL AB nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.  -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.   ",easy
1179,5206,hr_1,"SELECT * FROM employees WHERE department_id  =  ""null""",What are all the employees without a department number?,"-- phpMyAdmin SQL Dump -- version 4.0.10.7 -- http://www.phpmyadmin.net -- -- Host: localhost -- Generation Time: Mar 20, 2015 at 01:43 AM -- Server version: 5.5.34-cll-lve -- PHP Version: 5.4.23    /*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */; /*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */; /*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */; /*!40101 SET NAMES utf8 */; CREATE TABLE IF NOT EXISTS `regions` (   `REGION_ID` decimal(5,0) NOT NULL,   `REGION_NAME` varchar(25) DEFAULT NULL,   PRIMARY KEY (`REGION_ID`) );  -- -- Dumping data for table `regions` --  INSERT INTO `regions` (`REGION_ID`, `REGION_NAME`) VALUES ('1', 'Europe\r'), ('2', 'Americas\r'), ('3', 'Asia\r'), ('4', 'Middle East and Africa\r'); -- -- Database: `wrpracti_bookinfo` --  -- --------------------------------------------------------  -- -- Table structure for table `countries` --  CREATE TABLE IF NOT EXISTS `countries` (   `COUNTRY_ID` varchar(2) NOT NULL,   `COUNTRY_NAME` varchar(40) DEFAULT NULL,   `REGION_ID` decimal(10,0) DEFAULT NULL,   PRIMARY KEY (`COUNTRY_ID`),   FOREIGN KEY (`REGION_ID`) REFERENCES regions (`REGION_ID`) );  -- -- Dumping data for table `countries` --  INSERT INTO `countries` (`COUNTRY_ID`, `COUNTRY_NAME`, `REGION_ID`) VALUES ('AR', 'Argentina', '2'), ('AU', 'Australia', '3'), ('BE', 'Belgium', '1'), ('BR', 'Brazil', '2'), ('CA', 'Canada', '2'), ('CH', 'Switzerland', '1'), ('CN', 'China', '3'), ('DE', 'Germany', '1'), ('DK', 'Denmark', '1'), ('EG', 'Egypt', '4'), ('FR', 'France', '1'), ('HK', 'HongKong', '3'), ('IL', 'Israel', '4'), ('IN', 'India', '3'), ('IT', 'Italy', '1'), ('JP', 'Japan', '3'), ('KW', 'Kuwait', '4'), ('MX', 'Mexico', '2'), ('NG', 'Nigeria', '4'), ('NL', 'Netherlands', '1'), ('SG', 'Singapore', '3'), ('UK', 'United Kingdom', '1'), ('US', 'United States of America', '2'), ('ZM', 'Zambia', '4'), ('ZW', 'Zimbabwe', '4');  -- --------------------------------------------------------  -- -- Table structure for table `departments` --  CREATE TABLE IF NOT EXISTS `departments` (   `DEPARTMENT_ID` decimal(4,0) NOT NULL DEFAULT '0',   `DEPARTMENT_NAME` varchar(30) NOT NULL,   `MANAGER_ID` decimal(6,0) DEFAULT NULL,   `LOCATION_ID` decimal(4,0) DEFAULT NULL,   PRIMARY KEY (`DEPARTMENT_ID`) );  -- -- Dumping data for table `departments` --  INSERT INTO `departments` (`DEPARTMENT_ID`, `DEPARTMENT_NAME`, `MANAGER_ID`, `LOCATION_ID`) VALUES ('10', 'Administration', '200', '1700'), ('20', 'Marketing', '201', '1800'), ('30', 'Purchasing', '114', '1700'), ('40', 'Human Resources', '203', '2400'), ('50', 'Shipping', '121', '1500'), ('60', 'IT', '103', '1400'), ('70', 'Public Relations', '204', '2700'), ('80', 'Sales', '145', '2500'), ('90', 'Executive', '100', '1700'), ('100', 'Finance', '108', '1700'), ('110', 'Accounting', '205', '1700'), ('120', 'Treasury', '0', '1700'), ('130', 'Corporate Tax', '0', '1700'), ('140', 'Control And Credit', '0', '1700'), ('150', 'Shareholder Services', '0', '1700'), ('160', 'Benefits', '0', '1700'), ('170', 'Manufacturing', '0', '1700'), ('180', 'Construction', '0', '1700'), ('190', 'Contracting', '0', '1700'), ('200', 'Operations', '0', '1700'), ('210', 'IT Support', '0', '1700'), ('220', 'NOC', '0', '1700'), ('230', 'IT Helpdesk', '0', '1700'), ('240', 'Government Sales', '0', '1700'), ('250', 'Retail Sales', '0', '1700'), ('260', 'Recruiting', '0', '1700'), ('270', 'Payroll', '0', '1700');   CREATE TABLE IF NOT EXISTS `jobs` (   `JOB_ID` varchar(10) NOT NULL DEFAULT '',   `JOB_TITLE` varchar(35) NOT NULL,   `MIN_SALARY` decimal(6,0) DEFAULT NULL,   `MAX_SALARY` decimal(6,0) DEFAULT NULL,   PRIMARY KEY (`JOB_ID`) );  -- -- Dumping data for table `jobs` --  INSERT INTO `jobs` (`JOB_ID`, `JOB_TITLE`, `MIN_SALARY`, `MAX_SALARY`) VALUES ('AD_PRES', 'President', '20000', '40000'), ('AD_VP', 'Administration Vice President', '15000', '30000'), ('AD_ASST', 'Administration Assistant', '3000', '6000'), ('FI_MGR', 'Finance Manager', '8200', '16000'), ('FI_ACCOUNT', 'Accountant', '4200', '9000'), ('AC_MGR', 'Accounting Manager', '8200', '16000'), ('AC_ACCOUNT', 'Public Accountant', '4200', '9000'), ('SA_MAN', 'Sales Manager', '10000', '20000'), ('SA_REP', 'Sales Representative', '6000', '12000'), ('PU_MAN', 'Purchasing Manager', '8000', '15000'), ('PU_CLERK', 'Purchasing Clerk', '2500', '5500'), ('ST_MAN', 'Stock Manager', '5500', '8500'), ('ST_CLERK', 'Stock Clerk', '2000', '5000'), ('SH_CLERK', 'Shipping Clerk', '2500', '5500'), ('IT_PROG', 'Programmer', '4000', '10000'), ('MK_MAN', 'Marketing Manager', '9000', '15000'), ('MK_REP', 'Marketing Representative', '4000', '9000'), ('HR_REP', 'Human Resources Representative', '4000', '9000'), ('PR_REP', 'Public Relations Representative', '4500', '10500');  -- --------------------------------------------------------  -- -- Table structure for table `employees` --  CREATE TABLE IF NOT EXISTS `employees` (   `EMPLOYEE_ID` decimal(6,0) NOT NULL DEFAULT '0',   `FIRST_NAME` varchar(20) DEFAULT NULL,   `LAST_NAME` varchar(25) NOT NULL,   `EMAIL` varchar(25) NOT NULL,   `PHONE_NUMBER` varchar(20) DEFAULT NULL,   `HIRE_DATE` date NOT NULL,   `JOB_ID` varchar(10) NOT NULL,   `SALARY` decimal(8,2) DEFAULT NULL,   `COMMISSION_PCT` decimal(2,2) DEFAULT NULL,   `MANAGER_ID` decimal(6,0) DEFAULT NULL,   `DEPARTMENT_ID` decimal(4,0) DEFAULT NULL,   PRIMARY KEY (`EMPLOYEE_ID`),   FOREIGN KEY (`DEPARTMENT_ID`) REFERENCES departments(`DEPARTMENT_ID`),   FOREIGN KEY (`JOB_ID`) REFERENCES jobs(`JOB_ID`) );  -- -- Dumping data for table `employees` --  INSERT INTO `employees` (`EMPLOYEE_ID`, `FIRST_NAME`, `LAST_NAME`, `EMAIL`, `PHONE_NUMBER`, `HIRE_DATE`, `JOB_ID`, `SALARY`, `COMMISSION_PCT`, `MANAGER_ID`, `DEPARTMENT_ID`) VALUES ('100', 'Steven', 'King', 'SKING', '515.123.4567', '1987-06-17', 'AD_PRES', '24000.00', '0.00', '0', '90'), ('101', 'Neena', 'Kochhar', 'NKOCHHAR', '515.123.4568', '1987-06-18', 'AD_VP', '17000.00', '0.00', '100', '90'), ('102', 'Lex', 'De Haan', 'LDEHAAN', '515.123.4569', '1987-06-19', 'AD_VP', '17000.00', '0.00', '100', '90'), ('103', 'Alexander', 'Hunold', 'AHUNOLD', '590.423.4567', '1987-06-20', 'IT_PROG', '9000.00', '0.00', '102', '60'), ('104', 'Bruce', 'Ernst', 'BERNST', '590.423.4568', '1987-06-21', 'IT_PROG', '6000.00', '0.00', '103', '60'), ('105', 'David', 'Austin', 'DAUSTIN', '590.423.4569', '1987-06-22', 'IT_PROG', '4800.00', '0.00', '103', '60'), ('106', 'Valli', 'Pataballa', 'VPATABAL', '590.423.4560', '1987-06-23', 'IT_PROG', '4800.00', '0.00', '103', '60'), ('107', 'Diana', 'Lorentz', 'DLORENTZ', '590.423.5567', '1987-06-24', 'IT_PROG', '4200.00', '0.00', '103', '60'), ('108', 'Nancy', 'Greenberg', 'NGREENBE', '515.124.4569', '1987-06-25', 'FI_MGR', '12000.00', '0.00', '101', '100'), ('109', 'Daniel', 'Faviet', 'DFAVIET', '515.124.4169', '1987-06-26', 'FI_ACCOUNT', '9000.00', '0.00', '108', '100'), ('110', 'John', 'Chen', 'JCHEN', '515.124.4269', '1987-06-27', 'FI_ACCOUNT', '8200.00', '0.00', '108', '100'), ('111', 'Ismael', 'Sciarra', 'ISCIARRA', '515.124.4369', '1987-06-28', 'FI_ACCOUNT', '7700.00', '0.00', '108', '100'), ('112', 'Jose Manuel', 'Urman', 'JMURMAN', '515.124.4469', '1987-06-29', 'FI_ACCOUNT', '7800.00', '0.00', '108', '100'), ('113', 'Luis', 'Popp', 'LPOPP', '515.124.4567', '1987-06-30', 'FI_ACCOUNT', '6900.00', '0.00', '108', '100'), ('114', 'Den', 'Raphaely', 'DRAPHEAL', '515.127.4561', '1987-07-01', 'PU_MAN', '11000.00', '0.00', '100', '30'), ('115', 'Alexander', 'Khoo', 'AKHOO', '515.127.4562', '1987-07-02', 'PU_CLERK', '3100.00', '0.00', '114', '30'), ('116', 'Shelli', 'Baida', 'SBAIDA', '515.127.4563', '1987-07-03', 'PU_CLERK', '2900.00', '0.00', '114', '30'), ('117', 'Sigal', 'Tobias', 'STOBIAS', '515.127.4564', '1987-07-04', 'PU_CLERK', '2800.00', '0.00', '114', '30'), ('118', 'Guy', 'Himuro', 'GHIMURO', '515.127.4565', '1987-07-05', 'PU_CLERK', '2600.00', '0.00', '114', '30'), ('119', 'Karen', 'Colmenares', 'KCOLMENA', '515.127.4566', '1987-07-06', 'PU_CLERK', '2500.00', '0.00', '114', '30'), ('120', 'Matthew', 'Weiss', 'MWEISS', '650.123.1234', '1987-07-07', 'ST_MAN', '8000.00', '0.00', '100', '50'), ('121', 'Adam', 'Fripp', 'AFRIPP', '650.123.2234', '1987-07-08', 'ST_MAN', '8200.00', '0.00', '100', '50'), ('122', 'Payam', 'Kaufling', 'PKAUFLIN', '650.123.3234', '1987-07-09', 'ST_MAN', '7900.00', '0.00', '100', '50'), ('123', 'Shanta', 'Vollman', 'SVOLLMAN', '650.123.4234', '1987-07-10', 'ST_MAN', '6500.00', '0.00', '100', '50'), ('124', 'Kevin', 'Mourgos', 'KMOURGOS', '650.123.5234', '1987-07-11', 'ST_MAN', '5800.00', '0.00', '100', '50'), ('125', 'Julia', 'Nayer', 'JNAYER', '650.124.1214', '1987-07-12', 'ST_CLERK', '3200.00', '0.00', '120', '50'), ('126', 'Irene', 'Mikkilineni', 'IMIKKILI', '650.124.1224', '1987-07-13', 'ST_CLERK', '2700.00', '0.00', '120', '50'), ('127', 'James', 'Landry', 'JLANDRY', '650.124.1334', '1987-07-14', 'ST_CLERK', '2400.00', '0.00', '120', '50'), ('128', 'Steven', 'Markle', 'SMARKLE', '650.124.1434', '1987-07-15', 'ST_CLERK', '2200.00', '0.00', '120', '50'), ('129', 'Laura', 'Bissot', 'LBISSOT', '650.124.5234', '1987-07-16', 'ST_CLERK', '3300.00', '0.00', '121', '50'), ('130', 'Mozhe', 'Atkinson', 'MATKINSO', '650.124.6234', '1987-07-17', 'ST_CLERK', '2800.00', '0.00', '121', '50'), ('131', 'James', 'Marlow', 'JAMRLOW', '650.124.7234', '1987-07-18', 'ST_CLERK', '2500.00', '0.00', '121', '50'), ('132', 'TJ', 'Olson', 'TJOLSON', '650.124.8234', '1987-07-19', 'ST_CLERK', '2100.00', '0.00', '121', '50'), ('133', 'Jason', 'Mallin', 'JMALLIN', '650.127.1934', '1987-07-20', 'ST_CLERK', '3300.00', '0.00', '122', '50'), ('134', 'Michael', 'Rogers', 'MROGERS', '650.127.1834', '1987-07-21', 'ST_CLERK', '2900.00', '0.00', '122', '50'), ('135', 'Ki', 'Gee', 'KGEE', '650.127.1734', '1987-07-22', 'ST_CLERK', '2400.00', '0.00', '122', '50'), ('136', 'Hazel', 'Philtanker', 'HPHILTAN', '650.127.1634', '1987-07-23', 'ST_CLERK', '2200.00', '0.00', '122', '50'), ('137', 'Renske', 'Ladwig', 'RLADWIG', '650.121.1234', '1987-07-24', 'ST_CLERK', '3600.00', '0.00', '123', '50'), ('138', 'Stephen', 'Stiles', 'SSTILES', '650.121.2034', '1987-07-25', 'ST_CLERK', '3200.00', '0.00', '123', '50'), ('139', 'John', 'Seo', 'JSEO', '650.121.2019', '1987-07-26', 'ST_CLERK', '2700.00', '0.00', '123', '50'), ('140', 'Joshua', 'Patel', 'JPATEL', '650.121.1834', '1987-07-27', 'ST_CLERK', '2500.00', '0.00', '123', '50'), ('141', 'Trenna', 'Rajs', 'TRAJS', '650.121.8009', '1987-07-28', 'ST_CLERK', '3500.00', '0.00', '124', '50'), ('142', 'Curtis', 'Davies', 'CDAVIES', '650.121.2994', '1987-07-29', 'ST_CLERK', '3100.00', '0.00', '124', '50'), ('143', 'Randall', 'Matos', 'RMATOS', '650.121.2874', '1987-07-30', 'ST_CLERK', '2600.00', '0.00', '124', '50'), ('144', 'Peter', 'Vargas', 'PVARGAS', '650.121.2004', '1987-07-31', 'ST_CLERK', '2500.00', '0.00', '124', '50'), ('145', 'John', 'Russell', 'JRUSSEL', '011.44.1344.429268', '1987-08-01', 'SA_MAN', '14000.00', '0.40', '100', '80'), ('146', 'Karen', 'Partners', 'KPARTNER', '011.44.1344.467268', '1987-08-02', 'SA_MAN', '13500.00', '0.30', '100', '80'), ('147', 'Alberto', 'Errazuriz', 'AERRAZUR', '011.44.1344.429278', '1987-08-03', 'SA_MAN', '12000.00', '0.30', '100', '80'), ('148', 'Gerald', 'Cambrault', 'GCAMBRAU', '011.44.1344.619268', '1987-08-04', 'SA_MAN', '11000.00', '0.30', '100', '80'), ('149', 'Eleni', 'Zlotkey', 'EZLOTKEY', '011.44.1344.429018', '1987-08-05', 'SA_MAN', '10500.00', '0.20', '100', '80'), ('150', 'Peter', 'Tucker', 'PTUCKER', '011.44.1344.129268', '1987-08-06', 'SA_REP', '10000.00', '0.30', '145', '80'), ('151', 'David', 'Bernstein', 'DBERNSTE', '011.44.1344.345268', '1987-08-07', 'SA_REP', '9500.00', '0.25', '145', '80'), ('152', 'Peter', 'Hall', 'PHALL', '011.44.1344.478968', '1987-08-08', 'SA_REP', '9000.00', '0.25', '145', '80'), ('153', 'Christopher', 'Olsen', 'COLSEN', '011.44.1344.498718', '1987-08-09', 'SA_REP', '8000.00', '0.20', '145', '80'), ('154', 'Nanette', 'Cambrault', 'NCAMBRAU', '011.44.1344.987668', '1987-08-10', 'SA_REP', '7500.00', '0.20', '145', '80'), ('155', 'Oliver', 'Tuvault', 'OTUVAULT', '011.44.1344.486508', '1987-08-11', 'SA_REP', '7000.00', '0.15', '145', '80'), ('156', 'Janette', 'King', 'JKING', '011.44.1345.429268', '1987-08-12', 'SA_REP', '10000.00', '0.35', '146', '80'), ('157', 'Patrick', 'Sully', 'PSULLY', '011.44.1345.929268', '1987-08-13', 'SA_REP', '9500.00', '0.35', '146', '80'), ('158', 'Allan', 'McEwen', 'AMCEWEN', '011.44.1345.829268', '1987-08-14', 'SA_REP', '9000.00', '0.35', '146', '80'), ('159', 'Lindsey', 'Smith', 'LSMITH', '011.44.1345.729268', '1987-08-15', 'SA_REP', '8000.00', '0.30', '146', '80'), ('160', 'Louise', 'Doran', 'LDORAN', '011.44.1345.629268', '1987-08-16', 'SA_REP', '7500.00', '0.30', '146', '80'), ('161', 'Sarath', 'Sewall', 'SSEWALL', '011.44.1345.529268', '1987-08-17', 'SA_REP', '7000.00', '0.25', '146', '80'), ('162', 'Clara', 'Vishney', 'CVISHNEY', '011.44.1346.129268', '1987-08-18', 'SA_REP', '10500.00', '0.25', '147', '80'), ('163', 'Danielle', 'Greene', 'DGREENE', '011.44.1346.229268', '1987-08-19', 'SA_REP', '9500.00', '0.15', '147', '80'), ('164', 'Mattea', 'Marvins', 'MMARVINS', '011.44.1346.329268', '1987-08-20', 'SA_REP', '7200.00', '0.10', '147', '80'), ('165', 'David', 'Lee', 'DLEE', '011.44.1346.529268', '1987-08-21', 'SA_REP', '6800.00', '0.10', '147', '80'), ('166', 'Sundar', 'Ande', 'SANDE', '011.44.1346.629268', '1987-08-22', 'SA_REP', '6400.00', '0.10', '147', '80'), ('167', 'Amit', 'Banda', 'ABANDA', '011.44.1346.729268', '1987-08-23', 'SA_REP', '6200.00', '0.10', '147', '80'), ('168', 'Lisa', 'Ozer', 'LOZER', '011.44.1343.929268', '1987-08-24', 'SA_REP', '11500.00', '0.25', '148', '80'), ('169', 'Harrison', 'Bloom', 'HBLOOM', '011.44.1343.829268', '1987-08-25', 'SA_REP', '10000.00', '0.20', '148', '80'), ('170', 'Tayler', 'Fox', 'TFOX', '011.44.1343.729268', '1987-08-26', 'SA_REP', '9600.00', '0.20', '148', '80'), ('171', 'William', 'Smith', 'WSMITH', '011.44.1343.629268', '1987-08-27', 'SA_REP', '7400.00', '0.15', '148', '80'), ('172', 'Elizabeth', 'Bates', 'EBATES', '011.44.1343.529268', '1987-08-28', 'SA_REP', '7300.00', '0.15', '148', '80'), ('173', 'Sundita', 'Kumar', 'SKUMAR', '011.44.1343.329268', '1987-08-29', 'SA_REP', '6100.00', '0.10', '148', '80'), ('174', 'Ellen', 'Abel', 'EABEL', '011.44.1644.429267', '1987-08-30', 'SA_REP', '11000.00', '0.30', '149', '80'), ('175', 'Alyssa', 'Hutton', 'AHUTTON', '011.44.1644.429266', '1987-08-31', 'SA_REP', '8800.00', '0.25', '149', '80'), ('176', 'Jonathon', 'Taylor', 'JTAYLOR', '011.44.1644.429265', '1987-09-01', 'SA_REP', '8600.00', '0.20', '149', '80'), ('177', 'Jack', 'Livingston', 'JLIVINGS', '011.44.1644.429264', '1987-09-02', 'SA_REP', '8400.00', '0.20', '149', '80'), ('178', 'Kimberely', 'Grant', 'KGRANT', '011.44.1644.429263', '1987-09-03', 'SA_REP', '7000.00', '0.15', '149', '0'), ('179', 'Charles', 'Johnson', 'CJOHNSON', '011.44.1644.429262', '1987-09-04', 'SA_REP', '6200.00', '0.10', '149', '80'), ('180', 'Winston', 'Taylor', 'WTAYLOR', '650.507.9876', '1987-09-05', 'SH_CLERK', '3200.00', '0.00', '120', '50'), ('181', 'Jean', 'Fleaur', 'JFLEAUR', '650.507.9877', '1987-09-06', 'SH_CLERK', '3100.00', '0.00', '120', '50'), ('182', 'Martha', 'Sullivan', 'MSULLIVA', '650.507.9878', '1987-09-07', 'SH_CLERK', '2500.00', '0.00', '120', '50'), ('183', 'Girard', 'Geoni', 'GGEONI', '650.507.9879', '1987-09-08', 'SH_CLERK', '2800.00', '0.00', '120', '50'), ('184', 'Nandita', 'Sarchand', 'NSARCHAN', '650.509.1876', '1987-09-09', 'SH_CLERK', '4200.00', '0.00', '121', '50'), ('185', 'Alexis', 'Bull', 'ABULL', '650.509.2876', '1987-09-10', 'SH_CLERK', '4100.00', '0.00', '121', '50'), ('186', 'Julia', 'Dellinger', 'JDELLING', '650.509.3876', '1987-09-11', 'SH_CLERK', '3400.00', '0.00', '121', '50'), ('187', 'Anthony', 'Cabrio', 'ACABRIO', '650.509.4876', '1987-09-12', 'SH_CLERK', '3000.00', '0.00', '121', '50'), ('188', 'Kelly', 'Chung', 'KCHUNG', '650.505.1876', '1987-09-13', 'SH_CLERK', '3800.00', '0.00', '122', '50'), ('189', 'Jennifer', 'Dilly', 'JDILLY', '650.505.2876', '1987-09-14', 'SH_CLERK', '3600.00', '0.00', '122', '50'), ('190', 'Timothy', 'Gates', 'TGATES', '650.505.3876', '1987-09-15', 'SH_CLERK', '2900.00', '0.00', '122', '50'), ('191', 'Randall', 'Perkins', 'RPERKINS', '650.505.4876', '1987-09-16', 'SH_CLERK', '2500.00', '0.00', '122', '50'), ('192', 'Sarah', 'Bell', 'SBELL', '650.501.1876', '1987-09-17', 'SH_CLERK', '4000.00', '0.00', '123', '50'), ('193', 'Britney', 'Everett', 'BEVERETT', '650.501.2876', '1987-09-18', 'SH_CLERK', '3900.00', '0.00', '123', '50'), ('194', 'Samuel', 'McCain', 'SMCCAIN', '650.501.3876', '1987-09-19', 'SH_CLERK', '3200.00', '0.00', '123', '50'), ('195', 'Vance', 'Jones', 'VJONES', '650.501.4876', '1987-09-20', 'SH_CLERK', '2800.00', '0.00', '123', '50'), ('196', 'Alana', 'Walsh', 'AWALSH', '650.507.9811', '1987-09-21', 'SH_CLERK', '3100.00', '0.00', '124', '50'), ('197', 'Kevin', 'Feeney', 'KFEENEY', '650.507.9822', '1987-09-22', 'SH_CLERK', '3000.00', '0.00', '124', '50'), ('198', 'Donald', 'OConnell', 'DOCONNEL', '650.507.9833', '1987-09-23', 'SH_CLERK', '2600.00', '0.00', '124', '50'), ('199', 'Douglas', 'Grant', 'DGRANT', '650.507.9844', '1987-09-24', 'SH_CLERK', '2600.00', '0.00', '124', '50'), ('200', 'Jennifer', 'Whalen', 'JWHALEN', '515.123.4444', '1987-09-25', 'AD_ASST', '4400.00', '0.00', '101', '10'), ('201', 'Michael', 'Hartstein', 'MHARTSTE', '515.123.5555', '1987-09-26', 'MK_MAN', '13000.00', '0.00', '100', '20'), ('202', 'Pat', 'Fay', 'PFAY', '603.123.6666', '1987-09-27', 'MK_REP', '6000.00', '0.00', '201', '20'), ('203', 'Susan', 'Mavris', 'SMAVRIS', '515.123.7777', '1987-09-28', 'HR_REP', '6500.00', '0.00', '101', '40'), ('204', 'Hermann', 'Baer', 'HBAER', '515.123.8888', '1987-09-29', 'PR_REP', '10000.00', '0.00', '101', '70'), ('205', 'Shelley', 'Higgins', 'SHIGGINS', '515.123.8080', '1987-09-30', 'AC_MGR', '12000.00', '0.00', '101', '110'), ('206', 'William', 'Gietz', 'WGIETZ', '515.123.8181', '1987-10-01', 'AC_ACCOUNT', '8300.00', '0.00', '205', '110');  -- --------------------------------------------------------  -- -- Table structure for table `job_history` --  CREATE TABLE IF NOT EXISTS `job_history` (   `EMPLOYEE_ID` decimal(6,0) NOT NULL,   `START_DATE` date NOT NULL,   `END_DATE` date NOT NULL,   `JOB_ID` varchar(10) NOT NULL,   `DEPARTMENT_ID` decimal(4,0) DEFAULT NULL,   PRIMARY KEY (`EMPLOYEE_ID`,`START_DATE`),   FOREIGN KEY (`EMPLOYEE_ID`) REFERENCES employees(`EMPLOYEE_ID`),   FOREIGN KEY (`DEPARTMENT_ID`) REFERENCES departments(`DEPARTMENT_ID`),   FOREIGN KEY (`JOB_ID`) REFERENCES jobs(`JOB_ID`) );  -- -- Dumping data for table `job_history` --  INSERT INTO `job_history` (`EMPLOYEE_ID`, `START_DATE`, `END_DATE`, `JOB_ID`, `DEPARTMENT_ID`) VALUES ('102', '1993-01-13', '1998-07-24', 'IT_PROG', '60'), ('101', '1989-09-21', '1993-10-27', 'AC_ACCOUNT', '110'), ('101', '1993-10-28', '1997-03-15', 'AC_MGR', '110'), ('201', '1996-02-17', '1999-12-19', 'MK_REP', '20'), ('114', '1998-03-24', '1999-12-31', 'ST_CLERK', '50'), ('122', '1999-01-01', '1999-12-31', 'ST_CLERK', '50'), ('200', '1987-09-17', '1993-06-17', 'AD_ASST', '90'), ('176', '1998-03-24', '1998-12-31', 'SA_REP', '80'), ('176', '1999-01-01', '1999-12-31', 'SA_MAN', '80'), ('200', '1994-07-01', '1998-12-31', 'AC_ACCOUNT', '90'), ('0', '0000-00-00', '0000-00-00', '', '0');  -- --------------------------------------------------------  -- -- Table structure for table `jobs` --   -- -- Table structure for table `locations` --  CREATE TABLE IF NOT EXISTS `locations` (   `LOCATION_ID` decimal(4,0) NOT NULL DEFAULT '0',   `STREET_ADDRESS` varchar(40) DEFAULT NULL,   `POSTAL_CODE` varchar(12) DEFAULT NULL,   `CITY` varchar(30) NOT NULL,   `STATE_PROVINCE` varchar(25) DEFAULT NULL,   `COUNTRY_ID` varchar(2) DEFAULT NULL,   PRIMARY KEY (`LOCATION_ID`),   FOREIGN KEY (`COUNTRY_ID`) REFERENCES countries(`COUNTRY_ID`) );  -- -- Dumping data for table `locations` --  INSERT INTO `locations` (`LOCATION_ID`, `STREET_ADDRESS`, `POSTAL_CODE`, `CITY`, `STATE_PROVINCE`, `COUNTRY_ID`) VALUES ('1000', '1297 Via Cola di Rie', '989', 'Roma', '', 'IT'), ('1100', '93091 Calle della Testa', '10934', 'Venice', '', 'IT'), ('1200', '2017 Shinjuku-ku', '1689', 'Tokyo', 'Tokyo Prefecture', 'JP'), ('1300', '9450 Kamiya-cho', '6823', 'Hiroshima', '', 'JP'), ('1400', '2014 Jabberwocky Rd', '26192', 'Southlake', 'Texas', 'US'), ('1500', '2011 Interiors Blvd', '99236', 'South San Francisco', 'California', 'US'), ('1600', '2007 Zagora St', '50090', 'South Brunswick', 'New Jersey', 'US'), ('1700', '2004 Charade Rd', '98199', 'Seattle', 'Washington', 'US'), ('1800', '147 Spadina Ave', 'M5V 2L7', 'Toronto', 'Ontario', 'CA'), ('1900', '6092 Boxwood St', 'YSW 9T2', 'Whitehorse', 'Yukon', 'CA'), ('2000', '40-5-12 Laogianggen', '190518', 'Beijing', '', 'CN'), ('2100', '1298 Vileparle (E)', '490231', 'Bombay', 'Maharashtra', 'IN'), ('2200', '12-98 Victoria Street', '2901', 'Sydney', 'New South Wales', 'AU'), ('2300', '198 Clementi North', '540198', 'Singapore', '', 'SG'), ('2400', '8204 Arthur St', '', 'London', '', 'UK'), ('2500', '""Magdalen Centre', ' The Oxford ', 'OX9 9ZB', 'Oxford', 'Ox'), ('2600', '9702 Chester Road', '9629850293', 'Stretford', 'Manchester', 'UK'), ('2700', 'Schwanthalerstr. 7031', '80925', 'Munich', 'Bavaria', 'DE'), ('2800', 'Rua Frei Caneca 1360', '01307-002', 'Sao Paulo', 'Sao Paulo', 'BR'), ('2900', '20 Rue des Corps-Saints', '1730', 'Geneva', 'Geneve', 'CH'), ('3000', 'Murtenstrasse 921', '3095', 'Bern', 'BE', 'CH'), ('3100', 'Pieter Breughelstraat 837', '3029SK', 'Utrecht', 'Utrecht', 'NL'), ('3200', 'Mariano Escobedo 9991', '11932', 'Mexico City', '""Distrito Federal', '""');  -- --------------------------------------------------------  -- -- Table structure for table `regions` --   /*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */; /*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */; /*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;",easy
1475,6436,college_3,"SELECT CName FROM COURSE WHERE Days  =  ""MTW""",What are the course names for courses taught on MTW?,"create table Student (         StuID        INTEGER PRIMARY KEY,         LName        VARCHAR(12),         Fname        VARCHAR(12),         Age      INTEGER,         Sex      VARCHAR(1),         Major        INTEGER,         Advisor      INTEGER,         city_code    VARCHAR(3)  );  create table Faculty (        FacID 	       INTEGER PRIMARY KEY,        Lname		VARCHAR(15),        Fname		VARCHAR(15),        Rank		VARCHAR(15),        Sex		VARCHAR(1),        Phone		INTEGER,        Room		VARCHAR(5),        Building		VARCHAR(13) );  create table Department (        DNO   		INTEGER PRIMARY KEY,        Division		VARCHAR(2),        DName		VARCHAR(25),        Room		VARCHAR(5),        Building		VARCHAR(13),        DPhone		INTEGER );  create table Member_of (        FacID 	       INTEGER,        DNO	       INTEGER,        Appt_Type       VARCHAR(15),        FOREIGN KEY(FacID) REFERENCES Faculty(FacID),        FOREIGN KEY(DNO) REFERENCES Department(DNO) );  create table Course (        CID   	    	VARCHAR(7) PRIMARY KEY,        CName		VARCHAR(40),        Credits		INTEGER,        Instructor	INTEGER,        Days		VARCHAR(5),        Hours		VARCHAR(11),        DNO		INTEGER,        FOREIGN KEY(Instructor) REFERENCES Faculty(FacID),        FOREIGN KEY(DNO) REFERENCES Department(DNO) );  create table Minor_in (        StuID 	      INTEGER,        DNO		INTEGER,        FOREIGN KEY(StuID) REFERENCES Student(StuID),        FOREIGN KEY(DNO) REFERENCES Department(DNO) );  create table Enrolled_in (        StuID 		 INTEGER,        CID		VARCHAR(7),        Grade		VARCHAR(2),        FOREIGN KEY(StuID) REFERENCES Student(StuID),        FOREIGN KEY(CID) REFERENCES Course(CID),        FOREIGN KEY(Grade) REFERENCES Gradeconversion(lettergrade) );  create table Gradeconversion (        lettergrade	     VARCHAR(2) PRIMARY KEY,        gradepoint	     FLOAT );  ",easy
1177,5190,manufacturer,SELECT avg(Num_of_Factories) FROM manufacturer WHERE num_of_shops  >  20,Find the average number of factories for the manufacturers that have more than 20 shops.," PRAGMA foreign_keys = ON;  CREATE TABLE ""manufacturer"" (     ""Manufacturer_ID"" int,     ""Open_Year"" real,     ""Name"" text,     ""Num_of_Factories"" int,     ""Num_of_Shops"" int,     PRIMARY KEY (""Manufacturer_ID"") );    CREATE TABLE ""furniture"" (     ""Furniture_ID"" int,     ""Name"" text,     ""Num_of_Component"" int,     ""Market_Rate"" real,     PRIMARY KEY (""Furniture_ID"") );  CREATE TABLE ""furniture_manufacte"" (     ""Manufacturer_ID"" int,     ""Furniture_ID"" int,     ""Price_in_Dollar"" real,     PRIMARY KEY (""Manufacturer_ID"",""Furniture_ID""),     FOREIGN KEY (""Manufacturer_ID"") REFERENCES `manufacturer`(""Manufacturer_ID""),     FOREIGN KEY (""Furniture_ID"") REFERENCES `furniture`(""Furniture_ID"") );  ",easy
1970,8351,driving_school,"SELECT count(*) FROM Staff WHERE first_name = ""Ludie"";",How many employees have a first name of Ludie?,"PRAGMA foreign_keys = ON;  CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `line_1_number_building` VARCHAR(80), `city` VARCHAR(50), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(50), `country` VARCHAR(50) );   CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `staff_address_id` INTEGER NOT NULL, `nickname` VARCHAR(80), `first_name` VARCHAR(80), `middle_name` VARCHAR(80), `last_name` VARCHAR(80), `date_of_birth` DATETIME, `date_joined_staff` DATETIME, `date_left_staff` DATETIME, FOREIGN KEY (`staff_address_id` ) REFERENCES `Addresses`(`address_id` ) );  CREATE TABLE `Vehicles` ( `vehicle_id` INTEGER PRIMARY KEY, `vehicle_details` VARCHAR(255) ); CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_address_id` INTEGER NOT NULL, `customer_status_code` VARCHAR(15) NOT NULL, `date_became_customer` DATETIME, `date_of_birth` DATETIME, `first_name` VARCHAR(80), `last_name` VARCHAR(80), `amount_outstanding` DOUBLE NULL, `email_address` VARCHAR(250), `phone_number` VARCHAR(255), `cell_mobile_phone_number` VARCHAR(255), FOREIGN KEY (`customer_address_id` ) REFERENCES `Addresses`(`address_id` ) ); CREATE TABLE `Customer_Payments` ( `customer_id` INTEGER NOT NULL, `datetime_payment` DATETIME NOT NULL, `payment_method_code` VARCHAR(10) NOT NULL, `amount_payment` DOUBLE NULL, PRIMARY KEY (`customer_id`,`datetime_payment`), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) ); CREATE TABLE `Lessons` ( `lesson_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `lesson_status_code` VARCHAR(15) NOT NULL, `staff_id` INTEGER, `vehicle_id` INTEGER NOT NULL, `lesson_date` DATETIME, `lesson_time` VARCHAR(10), `price` DOUBLE NULL, FOREIGN KEY (`vehicle_id` ) REFERENCES `Vehicles`(`vehicle_id` ), FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) ); ",easy
1928,8186,scientist_1,SELECT sum(hours) FROM projects,What is the total number of hours for all projects?,"create table Scientists (   SSN int,   Name Char(30) not null,   Primary Key (SSN) );  Create table Projects (   Code Char(4),   Name Char(50) not null,   Hours int,   Primary Key (Code) ); 	 create table AssignedTo (   Scientist int not null,   Project char(4) not null,   Primary Key (Scientist, Project),   Foreign Key (Scientist) references Scientists (SSN),   Foreign Key (Project) references Projects (Code) );  INSERT INTO Scientists(SSN,Name)    VALUES(123234877,'Michael Rogers'),     (152934485,'Anand Manikutty'),     (222364883, 'Carol Smith'),     (326587417,'Joe Stevens'),     (332154719,'Mary-Anne Foster'),	     (332569843,'George ODonnell'),     (546523478,'John Doe'),     (631231482,'David Smith'),     (654873219,'Zacary Efron'),     (745685214,'Eric Goldsmith'),     (845657245,'Elizabeth Doe'),     (845657246,'Kumar Swamy');   INSERT INTO Projects ( Code,Name,Hours)  VALUES ('AeH1','Winds: Studying Bernoullis Principle', 156),        ('AeH2','Aerodynamics and Bridge Design',189),        ('AeH3','Aerodynamics and Gas Mileage', 256),        ('AeH4','Aerodynamics and Ice Hockey', 789),        ('AeH5','Aerodynamics of a Football', 98),        ('AeH6','Aerodynamics of Air Hockey',89),        ('Ast1','A Matter of Time',112),        ('Ast2','A Puzzling Parallax', 299),        ('Ast3','Build Your Own Telescope', 6546),        ('Bte1','Juicy: Extracting Apple Juice with Pectinase', 321),        ('Bte2','A Magnetic Primer Designer', 9684),        ('Bte3','Bacterial Transformation Efficiency', 321),        ('Che1','A Silver-Cleaning Battery', 545),        ('Che2','A Soluble Separation Solution', 778);   INSERT INTO AssignedTo ( Scientist, Project)    VALUES (123234877,'AeH1'),     (152934485,'AeH3'),     (222364883,'Ast3'),	        (326587417,'Ast3'),     (332154719,'Bte1'),     (546523478,'Che1'),     (631231482,'Ast3'),     (654873219,'Che1'),     (745685214,'AeH3'),     (845657245,'Ast1'),     (845657246,'Ast2'),     (332569843,'AeH4');",easy
1463,6409,entertainment_awards,SELECT YEAR FROM festival_detail GROUP BY YEAR HAVING COUNT(*)  >  1,List the year in which there are more than one festivals.,"PRAGMA foreign_keys = ON;   CREATE TABLE ""festival_detail"" ( ""Festival_ID"" int, ""Festival_Name"" text, ""Chair_Name"" text, ""Location"" text, ""Year"" int, ""Num_of_Audience"" int, PRIMARY KEY (""Festival_ID"") );  CREATE TABLE artwork ( ""Artwork_ID"" int, ""Type"" text, ""Name"" text, PRIMARY KEY (""Artwork_ID"") );   CREATE TABLE nomination ( ""Artwork_ID"" int, ""Festival_ID"" int, ""Result"" text, PRIMARY KEY (""Artwork_ID"",""Festival_ID""), FOREIGN KEY (""Artwork_ID"") REFERENCES `artwork`(""Artwork_ID""), FOREIGN KEY (""Festival_ID"") REFERENCES `festival_detail`(""Festival_ID"") );  ",easy
1017,4565,county_public_safety,SELECT Crime_rate FROM county_public_safety ORDER BY Police_officers ASC,What are the crime rates of counties sorted by number of offices ascending?,"PRAGMA foreign_keys = ON;  CREATE TABLE ""county_public_safety"" ( ""County_ID"" int, ""Name"" text, ""Population"" int, ""Police_officers"" int, ""Residents_per_officer"" int, ""Case_burden"" int, ""Crime_rate"" real, ""Police_force"" text, ""Location"" text, PRIMARY KEY (""County_ID"") );  CREATE TABLE ""city"" ( ""City_ID"" int, ""County_ID"" int, ""Name"" text, ""White"" real, ""Black"" real, ""Amerindian"" real, ""Asian"" real, ""Multiracial"" real, ""Hispanic"" real, PRIMARY KEY (""City_ID""), FOREIGN KEY (""County_ID"") REFERENCES ""county_public_safety""(""County_ID"") );  ",easy
382,1181,geo,SELECT city_name FROM city WHERE population  >  150000;,what are the major cities of the united states,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );",easy
779,3525,election_representative,SELECT State FROM representative GROUP BY State HAVING COUNT(*)  >=  2,What states have at least two representatives?,"PRAGMA foreign_keys = ON;  CREATE TABLE ""election"" ( ""Election_ID"" int, ""Representative_ID"" int, ""Date"" text, ""Votes"" real, ""Vote_Percent"" real, ""Seats"" real, ""Place"" real, PRIMARY KEY (""Election_ID""), FOREIGN KEY (""Representative_ID"") REFERENCES `representative`(""Representative_ID"") );  CREATE TABLE ""representative"" ( ""Representative_ID"" int, ""Name"" text, ""State"" text, ""Party"" text, ""Lifespan"" text, PRIMARY KEY (""Representative_ID"") );  ",easy
845,3841,riding_club,SELECT Player_name FROM player ORDER BY Votes ASC,List the names of players in ascending order of votes.,"PRAGMA foreign_keys=OFF; BEGIN TRANSACTION; CREATE TABLE IF NOT EXISTS ""player"" ( ""Player_ID"" int, ""Sponsor_name"" text, ""Player_name"" text, ""Gender"" text, ""Residence"" text, ""Occupation"" text, ""Votes"" int, ""Rank"" text, PRIMARY KEY (""Player_ID"") ); CREATE TABLE IF NOT EXISTS ""club"" ( ""Club_ID"" int, ""Club_name"" text, ""Region"" text, ""Start_year"" int, PRIMARY KEY (""Club_ID"") ); CREATE TABLE IF NOT EXISTS ""coach"" ( ""Coach_ID"" int, ""Coach_name"" text, ""Gender"" text, ""Club_ID"" int, ""Rank"" int, PRIMARY KEY (""Coach_ID""), FOREIGN KEY (`Club_ID`) REFERENCES `club`(`Club_ID`) ); CREATE TABLE IF NOT EXISTS ""player_coach"" ( ""Player_ID"" int, ""Coach_ID"" int, ""Starting_year"" int, PRIMARY KEY (""Player_ID"",""Coach_ID""), FOREIGN KEY (`Player_ID`) REFERENCES `player`(`Player_ID`), FOREIGN KEY (`Coach_ID`) REFERENCES `coach`(`Coach_ID`) ); CREATE TABLE IF NOT EXISTS ""match_result"" ( ""Rank"" int, ""Club_ID"" int, ""Gold"" int, ""Big_Silver"" int, ""Small_Silver"" int, ""Bronze"" int, ""Points"" int, PRIMARY KEY (""Rank"",""Club_ID""), FOREIGN KEY (`Club_ID`) REFERENCES `club`(`Club_ID`) ); COMMIT; ",easy
1569,6858,cre_Drama_Workshop_Groups,SELECT DISTINCT payment_method_code FROM INVOICES,What are the distinct payment method codes in all the invoices?,"PRAGMA foreign_keys = ON;  CREATE TABLE Ref_Payment_Methods ( payment_method_code CHAR(10) NOT NULL, payment_method_description VARCHAR(80), PRIMARY KEY (payment_method_code), UNIQUE (payment_method_code) ); CREATE TABLE Ref_Service_Types ( Service_Type_Code CHAR(15) NOT NULL, Parent_Service_Type_Code CHAR(15), Service_Type_Description VARCHAR(255), PRIMARY KEY (Service_Type_Code), UNIQUE (Service_Type_Code) );  CREATE TABLE Addresses ( Address_ID VARCHAR(100) NOT NULL, Line_1 VARCHAR(255), Line_2 VARCHAR(255), City_Town VARCHAR(255), State_County VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Address_ID), UNIQUE (Address_ID) ); CREATE TABLE Products ( Product_ID VARCHAR(100) NOT NULL, Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Product_Description VARCHAR(255), Other_Product_Service_Details VARCHAR(255), PRIMARY KEY (Product_ID), UNIQUE (Product_ID) ); CREATE TABLE Marketing_Regions ( Marketing_Region_Code CHAR(15) NOT NULL, Marketing_Region_Name VARCHAR(255) NOT NULL, Marketing_Region_Descriptrion VARCHAR(255) NOT NULL, Other_Details VARCHAR(255), PRIMARY KEY (Marketing_Region_Code), UNIQUE (Marketing_Region_Code) );  CREATE TABLE Clients ( Client_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Customer_Email_Address VARCHAR(255), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Client_ID), UNIQUE (Client_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) ); CREATE TABLE Drama_Workshop_Groups ( Workshop_Group_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Currency_Code CHAR(15) NOT NULL, Marketing_Region_Code CHAR(15) NOT NULL, Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Workshop_Group_ID), UNIQUE (Workshop_Group_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) ); CREATE TABLE Performers ( Performer_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Performer_ID), UNIQUE (Performer_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) ); CREATE TABLE Customers ( Customer_ID VARCHAR(100) NOT NULL, Address_ID INTEGER NOT NULL, Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Customer_ID), UNIQUE (Customer_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) ); CREATE TABLE Stores ( Store_ID VARCHAR(100) NOT NULL, Address_ID INTEGER NOT NULL, Marketing_Region_Code CHAR(15) NOT NULL, Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Store_ID), UNIQUE (Store_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID), FOREIGN KEY (Marketing_Region_Code) REFERENCES Marketing_Regions (Marketing_Region_Code) ); CREATE TABLE Bookings ( Booking_ID INTEGER NOT NULL , Customer_ID INTEGER NOT NULL, Workshop_Group_ID VARCHAR(100) NOT NULL, Status_Code CHAR(15) NOT NULL, Store_ID INTEGER NOT NULL, Order_Date DATETIME NOT NULL, Planned_Delivery_Date DATETIME NOT NULL, Actual_Delivery_Date DATETIME NOT NULL, Other_Order_Details VARCHAR(255), PRIMARY KEY (Booking_ID), UNIQUE (Booking_ID), FOREIGN KEY (Customer_ID) REFERENCES Clients (Client_ID), FOREIGN KEY (Workshop_Group_ID) REFERENCES Drama_Workshop_Groups (Workshop_Group_ID) ); CREATE TABLE Performers_in_Bookings ( Order_ID INTEGER NOT NULL, Performer_ID INTEGER NOT NULL, PRIMARY KEY (Order_ID, Performer_ID), FOREIGN KEY (Performer_ID) REFERENCES Performers (Performer_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID) ); CREATE TABLE Customer_Orders ( Order_ID INTEGER NOT NULL , Customer_ID INTEGER NOT NULL, Store_ID INTEGER NOT NULL, Order_Date DATETIME NOT NULL, Planned_Delivery_Date DATETIME NOT NULL, Actual_Delivery_Date DATETIME NOT NULL, Other_Order_Details VARCHAR(255), PRIMARY KEY (Order_ID), UNIQUE (Order_ID), FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY (Store_ID) REFERENCES Stores (Store_ID) ); CREATE TABLE Order_Items ( Order_Item_ID INTEGER NOT NULL , Order_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), PRIMARY KEY (Order_Item_ID), FOREIGN KEY (Order_ID) REFERENCES Customer_Orders (Order_ID), FOREIGN KEY (Product_ID) REFERENCES Products (Product_ID) ); CREATE TABLE Invoices ( Invoice_ID INTEGER NOT NULL, Order_ID INTEGER NOT NULL, payment_method_code CHAR(15), Product_ID INTEGER NOT NULL, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), Order_Item_ID INTEGER NOT NULL, PRIMARY KEY (Invoice_ID), FOREIGN KEY (Order_ID) REFERENCES Customer_Orders (Order_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID), FOREIGN KEY (payment_method_code) REFERENCES Ref_Payment_Methods (payment_method_code) ); CREATE TABLE Services ( Service_ID INTEGER NOT NULL, Service_Type_Code CHAR(15), Workshop_Group_ID INTEGER NOT NULL, Product_Description VARCHAR(255), Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Other_Product_Service_Details VARCHAR(255), PRIMARY KEY (Service_ID), UNIQUE (Service_ID), FOREIGN KEY (Workshop_Group_ID) REFERENCES Drama_Workshop_Groups (Workshop_Group_ID), FOREIGN KEY (Service_Type_Code) REFERENCES Ref_Service_Types (Service_Type_Code) ); CREATE TABLE Bookings_Services ( Order_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, PRIMARY KEY (Order_ID, Product_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID), FOREIGN KEY (Product_ID) REFERENCES Services (Service_ID) );  CREATE TABLE Invoice_Items ( Invoice_Item_ID INTEGER NOT NULL , Invoice_ID INTEGER NOT NULL, Order_ID INTEGER NOT NULL, Order_Item_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, Order_Quantity INTEGER, Other_Item_Details VARCHAR(255), PRIMARY KEY (Invoice_Item_ID), FOREIGN KEY (Order_Item_ID) REFERENCES Order_Items (Order_Item_ID), FOREIGN KEY (Invoice_ID) REFERENCES Invoices (Invoice_ID), FOREIGN KEY (Order_ID, Product_ID) REFERENCES Bookings_Services (Order_ID,Product_ID) ); ",easy
321,1036,geo,"SELECT population FROM city WHERE city_name  =  ""boulder"";",how big is the city of boulder,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );",easy
1603,7028,manufactory_1,SELECT headquarter FROM manufacturers WHERE founder  =  'James',Where is the headquarter of the company founded by James?,"-- LINK: https://en.wikibooks.org/wiki/SQL_Exercises/The_computer_store  CREATE TABLE Manufacturers (   Code INTEGER,   Name VARCHAR(255) NOT NULL,   Headquarter VARCHAR(255) NOT NULL,   Founder VARCHAR(255) NOT NULL,   Revenue REAL,   PRIMARY KEY (Code)    );  CREATE TABLE Products (   Code INTEGER,   Name VARCHAR(255) NOT NULL ,   Price DECIMAL NOT NULL ,   Manufacturer INTEGER NOT NULL,   PRIMARY KEY (Code),    FOREIGN KEY (Manufacturer) REFERENCES Manufacturers(Code) );  ",easy
1260,5583,e_learning,"SELECT login_name FROM Students WHERE family_name  =  ""Ward""","Return the login names of the students whose family name is ""Ward"".","PRAGMA foreign_keys = ON; CREATE TABLE `Course_Authors_and_Tutors` ( `author_id` INTEGER PRIMARY KEY, `author_tutor_ATB` VARCHAR(3), `login_name` VARCHAR(40), `password` VARCHAR(40), `personal_name` VARCHAR(80), `middle_name` VARCHAR(80), `family_name` VARCHAR(80), `gender_mf` VARCHAR(1), `address_line_1` VARCHAR(80) ); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (1, '331', 'jmckenzie', 'c40fa148bdd0d2d45cd6e9ec1e685750fe07f81b', 'Cathrine', 'Ruthie', 'Grant', '0', '756 Monahan Mews Spinkashire, NJ 64230-5098'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (2, '975', 'heidenreich.ara', '24b0ee84063c3b017ab1839e01b7280f47f7c7c2', 'Retha', 'Corene', 'Armstrong', '0', '98623 Huels Manor Jasttown, DE 31611'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (3, '349', 'clementina29', 'cdaf6c3483f19e2253659a40a3aab786a3390f78', 'Darius', 'Ethyl', 'Reichel', '0', '99296 Keeling Courts North Audreanne, IL 28272'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (4, '782', 'wlehner', 'd34378200c9b5f72d3039fa640e7920aaec0fdf2', 'Julio', 'Aniyah', 'Nader', '1', '644 Montana Hill Suite 489 Daijamouth, CA 19587-4254'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (5, '388', 'nyundt', '2c196efe8aee23a1b9a7e752fe63029c5879af6f', 'Yessenia', 'Zena', 'Barrows', '1', '5284 Champlin Roads Cassinport, WY 54636'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (6, '817', 'al75', 'e96c0bcbbbb14747747a56ff4c17354f343a5b4f', 'Adolf', 'Keira', 'Rohan', '1', '92220 Hellen Skyway Apt. 635 Rennerview, MS 81036'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (7, '869', 'marty.bergnaum', '3e2f7bf1e6acf0d616a8703ee0050fba13bc007f', 'Logan', 'Ethelyn', 'Treutel', '1', '67541 Osborne Creek Suite 532 Bernhardview, WV 30288-1050'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (8, '557', 'medhurst.alvah', '02d64f11de97436343a0beba41bfcf69af61be1e', 'Kelsie', 'Kennith', 'Rowe', '0', '0256 Walter Meadows Suite 523 Norbertoborough, AZ 49193'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (9, '505', 'antonetta19', '4d8e909ae9b8888c93a2c5f1eccbd0c4ac6a01c3', 'Georgiana', 'Mathew', 'Zboncak', '0', '445 Quigley Fall Port Antonette, IN 81992-1255'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (10, '159', 'adam.rippin', 'b517a107b5f08fafe9628e88e7263a6f3a4a55c0', 'Deja', 'Joyce', 'Champlin', '1', '22575 Effertz Neck Apt. 046 Port Scotty, NY 67108-9197'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (11, '229', 'dschaefer', '4f149f75ecd84afcdf27343509cdd03d81edb119', 'Ciara', 'Alejandra', 'Greenholt', '0', '425 White Brooks Emmaleefort, IN 97850-2510'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (12, '847', 'nellie.mosciski', 'a48e25a58b3088e9cfdaca61130555ed2c772452', 'Sheldon', 'Jayce', 'Kreiger', '1', '513 Collins Plain Apt. 829 Clementinaville, VT 59908-2793'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (13, '613', 'qking', '6b9979a83b4a9e03ead034c8de47f1b013a3d3af', 'Madonna', 'Jaclyn', 'Effertz', '1', '139 O''Conner Circles Virginieland, KS 23365'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (14, '833', 'fiona77', '120ac8a5744f5b710ecaebbd8dd1633e3e33886e', 'Dusty', 'Amani', 'Crist', '1', '3602 Boehm Forest Zulaufton, DC 35229-0366'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (15, '974', 'ekshlerin', '6d587cec8006e3a40565e1dad2c5b5b12b475b8f', 'Shakira', 'Fritz', 'Haley', '0', '8928 Kunze Valley Apt. 747 South Jedidiahmouth, DE 28167');   CREATE TABLE `Students` ( `student_id` INTEGER PRIMARY KEY, `date_of_registration` DATETIME, `date_of_latest_logon` DATETIME, `login_name` VARCHAR(40), `password` VARCHAR(10), `personal_name` VARCHAR(40), `middle_name` VARCHAR(40), `family_name` VARCHAR(40) ); CREATE TABLE `Subjects` ( `subject_id` INTEGER PRIMARY KEY, `subject_name` VARCHAR(120) ); CREATE TABLE `Courses` ( `course_id` INTEGER PRIMARY KEY, `author_id` INTEGER NOT NULL, `subject_id` INTEGER NOT NULL, `course_name` VARCHAR(120), `course_description` VARCHAR(255), FOREIGN KEY (`author_id` ) REFERENCES `Course_Authors_and_Tutors`(`author_id` ), FOREIGN KEY (`subject_id` ) REFERENCES `Subjects`(`subject_id` ) ); CREATE TABLE `Student_Course_Enrolment` ( `registration_id` INTEGER PRIMARY KEY, `student_id` INTEGER NOT NULL, `course_id` INTEGER NOT NULL, `date_of_enrolment` DATETIME NOT NULL, `date_of_completion` DATETIME NOT NULL, FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ), FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ) );  CREATE TABLE `Student_Tests_Taken` ( `registration_id` INTEGER NOT NULL, `date_test_taken` DATETIME NOT NULL, `test_result` VARCHAR(255), FOREIGN KEY (`registration_id` ) REFERENCES `Student_Course_Enrolment`(`registration_id` ) );  ",easy
1876,7998,ship_1,SELECT count(*) FROM ship,how many ships are there?,"PRAGMA foreign_keys = ON;  CREATE TABLE ""captain"" ( ""Captain_ID"" int, ""Name"" text, ""Ship_ID"" int, ""age"" text, ""Class"" text, ""Rank"" text, PRIMARY KEY (""Captain_ID""), FOREIGN KEY (""Ship_ID"") REFERENCES ""Ship""(""Ship_ID"") );  CREATE TABLE ""Ship"" ( ""Ship_ID"" int, ""Name"" text, ""Type"" text, ""Built_Year"" real, ""Class"" text, ""Flag"" text, PRIMARY KEY (""Ship_ID"") );  ",easy
1456,6385,solvency_ii,SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code HAVING COUNT(*)  >=  2,Show the product type codes that have at least two products.,"PRAGMA foreign_keys = ON;    CREATE TABLE Addresses ( Address_ID INTEGER NOT NULL , address_details VARCHAR(255), PRIMARY KEY (Address_ID), UNIQUE (Address_ID) ); CREATE TABLE Locations ( Location_ID INTEGER NOT NULL , Other_Details VARCHAR(255), PRIMARY KEY (Location_ID) ); CREATE TABLE Products ( Product_ID INTEGER NOT NULL, Product_Type_Code CHAR(15), Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), PRIMARY KEY (Product_ID), UNIQUE (Product_ID) ); CREATE TABLE Parties ( Party_ID INTEGER NOT NULL, Party_Details VARCHAR(255), PRIMARY KEY (Party_ID) ); CREATE TABLE Assets ( Asset_ID INTEGER NOT NULL , Other_Details VARCHAR(255), PRIMARY KEY (Asset_ID) ); CREATE TABLE Channels ( Channel_ID INTEGER NOT NULL , Other_Details VARCHAR(255), PRIMARY KEY (Channel_ID) ); CREATE TABLE Finances ( Finance_ID INTEGER NOT NULL , Other_Details VARCHAR(255), PRIMARY KEY (Finance_ID) );   INSERT INTO `Addresses` (`Address_ID`, `address_details`) VALUES (1, '465 Emely Bypass West Mafalda, CO 23309'); INSERT INTO `Addresses` (`Address_ID`, `address_details`) VALUES (2, '669 Carter Trafficway Port Delbert, OK 66249'); INSERT INTO `Addresses` (`Address_ID`, `address_details`) VALUES (3, '38247 Ernser Gateway Suite 442 Bogisichland, VT 71460'); INSERT INTO `Addresses` (`Address_ID`, `address_details`) VALUES (4, '732 Greenholt Valleys East Marionfort, VT 89477-0433'); INSERT INTO `Addresses` (`Address_ID`, `address_details`) VALUES (5, '382 Demond Alley Luellamouth, MT 67912'); INSERT INTO `Addresses` (`Address_ID`, `address_details`) VALUES (6, '3851 Quigley Flats O''Reillychester, CA 92522-9526'); INSERT INTO `Addresses` (`Address_ID`, `address_details`) VALUES (7, '78950 Kamryn Centers Chelsealand, NE 22947-6129'); INSERT INTO `Addresses` (`Address_ID`, `address_details`) VALUES (8, '682 Kautzer Forest Apt. 509 Jaydenfurt, NE 85011-5059'); INSERT INTO `Addresses` (`Address_ID`, `address_details`) VALUES (9, '11093 Balistreri Forge Gaylordtown, VT 05705'); INSERT INTO `Addresses` (`Address_ID`, `address_details`) VALUES (10, '9113 Wisoky Glen Apt. 601 Lake Immanuel, UT 01388'); INSERT INTO `Addresses` (`Address_ID`, `address_details`) VALUES (11, '73409 Linnea Loop Apt. 778 Haagberg, AK 41204-1496'); INSERT INTO `Addresses` (`Address_ID`, `address_details`) VALUES (12, '8220 Concepcion Neck Suite 394 East Beauview, LA 19968-4755'); INSERT INTO `Addresses` (`Address_ID`, `address_details`) VALUES (13, '513 Lindgren River North Scottymouth, IN 85224-1392'); INSERT INTO `Addresses` (`Address_ID`, `address_details`) VALUES (14, '9694 Wava Roads Ricechester, DC 70816-9058'); INSERT INTO `Addresses` (`Address_ID`, `address_details`) VALUES (15, '068 O''Connell Tunnel West Colemanburgh, MO 87777');  CREATE TABLE Events ( Event_ID INTEGER NOT NULL , Address_ID INTEGER, Channel_ID INTEGER NOT NULL, Event_Type_Code CHAR(15), Finance_ID INTEGER NOT NULL, Location_ID INTEGER NOT NULL, PRIMARY KEY (Event_ID), UNIQUE (Event_ID), FOREIGN KEY (Location_ID) REFERENCES Locations (Location_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID), FOREIGN KEY (Finance_ID) REFERENCES Finances (Finance_ID) ); CREATE TABLE Products_in_Events ( Product_in_Event_ID INTEGER NOT NULL, Event_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, PRIMARY KEY (Product_in_Event_ID), FOREIGN KEY (Event_ID) REFERENCES Events (Event_ID), FOREIGN KEY (Product_ID) REFERENCES Products (Product_ID) ); CREATE TABLE Parties_in_Events ( Party_ID INTEGER NOT NULL, Event_ID INTEGER NOT NULL, Role_Code CHAR(15), PRIMARY KEY (Party_ID, Event_ID), FOREIGN KEY (Party_ID) REFERENCES Parties (Party_ID), FOREIGN KEY (Event_ID) REFERENCES Events (Event_ID) ); CREATE TABLE Agreements ( Document_ID INTEGER NOT NULL , Event_ID INTEGER NOT NULL, PRIMARY KEY (Document_ID), FOREIGN KEY (Event_ID) REFERENCES Events (Event_ID) ); CREATE TABLE Assets_in_Events ( Asset_ID INTEGER NOT NULL, Event_ID INTEGER NOT NULL, PRIMARY KEY (Asset_ID, Event_ID), FOREIGN KEY (Event_ID) REFERENCES Events (Event_ID), FOREIGN KEY (Event_ID) REFERENCES Events (Event_ID) );  ",easy
902,4081,party_people,SELECT minister FROM party WHERE party_name != 'Progress Party',Which ministers are not a part of the Progress Party?," PRAGMA foreign_keys = ON;   CREATE TABLE ""region"" ( ""Region_ID"" int, ""Region_name"" text, ""Date"" text, ""Label"" text, ""Format"" text, ""Catalogue"" text, PRIMARY KEY (""Region_ID"") );   CREATE TABLE ""party"" ( ""Party_ID"" int, ""Minister"" text, ""Took_office"" text, ""Left_office"" text, ""Region_ID"" int, ""Party_name"" text, PRIMARY KEY (""Party_ID""), FOREIGN KEY (`Region_ID`) REFERENCES `region`(`Region_ID`) );  CREATE TABLE ""member"" ( ""Member_ID"" int, ""Member_Name"" text, ""Party_ID"" text, ""In_office"" text, PRIMARY KEY (""Member_ID""), FOREIGN KEY (`Party_ID`) REFERENCES `party`(`Party_ID`) );   CREATE TABLE ""party_events"" ( ""Event_ID"" int, ""Event_Name"" text, ""Party_ID"" int, ""Member_in_charge_ID"" int, PRIMARY KEY (""Event_ID""), FOREIGN KEY (`Party_ID`) REFERENCES `party`(`Party_ID`), FOREIGN KEY (`Member_in_charge_ID`) REFERENCES `member`(`Member_ID`) );   ",easy
108,444,wta_1,SELECT count(DISTINCT loser_name) FROM matches,How many different loser names are there?,"CRloser_rank_pointsEATE TABLE players(     ""player_id"" INT PRIMARY KEY,     ""first_name"" TEXT,     ""last_name"" TEXT,     ""hand"" TEXT,     ""birth_date"" DATE,     ""country_code"" TEXT ); CREATE TABLE matches(   ""best_of"" INT,   ""draw_size"" INT,   ""loser_age"" FLOAT,   ""loser_entry"" TEXT,   ""loser_hand"" TEXT,   ""loser_ht"" INT,   ""loser_id"" INT,   ""loser_ioc"" TEXT,   ""loser_name"" TEXT,   ""loser_rank"" INT,   ""loser_rank_points"" INT,   ""loser_seed"" INT,   ""match_num"" INT,   ""minutes"" INT,   ""round"" TEXT,   ""score"" TEXT,   ""surface"" TEXT,   ""tourney_date"" DATE,   ""tourney_id"" TEXT,   ""tourney_level"" TEXT,   ""tourney_name"" TEXT,   ""winner_age"" FLOAT,   ""winner_entry"" TEXT,   ""winner_hand"" TEXT,   ""winner_ht"" INT,   ""winner_id"" INT,   ""winner_ioc"" TEXT,   ""winner_name"" TEXT,   ""winner_rank"" INT,   ""winner_rank_points"" INT,   ""winner_seed"" INT,   ""year"" INT,   FOREIGN KEY(loser_id) REFERENCES players(player_id),   FOREIGN KEY(winner_id) REFERENCES players(player_id) );    CREATE TABLE qualifying_matches(   ""best_of"" INT,   ""draw_size"" INT,   ""l_1stIn"" TEXT,   ""l_1stWon"" TEXT,   ""l_2ndWon"" TEXT,   ""l_SvGms"" TEXT,   ""l_ace"" TEXT,   ""l_bpFaced"" TEXT,   ""l_bpSaved"" TEXT,   ""l_df"" TEXT,   ""l_svpt"" TEXT,   ""loser_age"" FLOAT,   ""loser_entry"" TEXT,   ""loser_hand"" TEXT,   ""loser_ht"" INT,   ""loser_id"" INT,   ""loser_ioc"" TEXT,   ""loser_name"" TEXT,   ""loser_rank"" INT,   ""loser_rank_points"" INT,   ""loser_seed"" INT,   ""match_num"" INT,   ""minutes"" INT,   ""round"" TEXT,   ""score"" TEXT,   ""surface"" TEXT,   ""tourney_date"" DATE,   ""tourney_id"" TEXT,   ""tourney_level"" TEXT,   ""tourney_name"" TEXT,   ""w_1stIn"" TEXT,   ""w_1stWon"" TEXT,   ""w_2ndWon"" TEXT,   ""w_SvGms"" TEXT,   ""w_ace"" TEXT,   ""w_bpFaced"" TEXT,   ""w_bpSaved"" TEXT,   ""w_df"" TEXT,   ""w_svpt"" TEXT,   ""winner_age"" FLOAT,   ""winner_entry"" TEXT,   ""winner_hand"" TEXT,   ""winner_ht"" INT,   ""winner_id"" INT,   ""winner_ioc"" TEXT,   ""winner_name"" TEXT,   ""winner_rank"" INT,   ""winner_rank_points"" INT,   ""winner_seed"" INT,   ""year"" INT,   FOREIGN KEY(loser_id) REFERENCES players(player_id),   FOREIGN KEY(winner_id) REFERENCES players(player_id) );  CREATE TABLE rankings(   ""ranking_date"" DATE,   ""ranking"" INT,   ""player_id"" INT,   ""ranking_points"" INT,   ""tours"" INT,   FOREIGN KEY(player_id) REFERENCES players(player_id) );",easy
1544,7718,cre_Theme_park,"SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  ""Vincent"" INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  ""Marcelle""",Which tourist attractions do the tourists Vincent and Marcelle visit? Tell me the names of the attractions.,"PRAGMA foreign_keys = ON; CREATE TABLE Ref_Hotel_Star_Ratings ( star_rating_code CHAR(15) NOT NULL, star_rating_description VARCHAR(80), PRIMARY KEY (star_rating_code), UNIQUE (star_rating_code) );   CREATE TABLE Locations ( Location_ID INTEGER NOT NULL, Location_Name VARCHAR(255), Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Location_ID) ); CREATE TABLE Ref_Attraction_Types ( Attraction_Type_Code CHAR(15) NOT NULL, Attraction_Type_Description VARCHAR(255), PRIMARY KEY (Attraction_Type_Code), UNIQUE (Attraction_Type_Code) );  CREATE TABLE Visitors ( Tourist_ID INTEGER NOT NULL, Tourist_Details VARCHAR(255), PRIMARY KEY (Tourist_ID), UNIQUE (Tourist_ID) ); CREATE TABLE Features ( Feature_ID INTEGER NOT NULL, Feature_Details VARCHAR(255), PRIMARY KEY (Feature_ID) );  CREATE TABLE Hotels ( hotel_id INTEGER NOT NULL, star_rating_code CHAR(15) NOT NULL, pets_allowed_yn CHAR(1), price_range real, other_hotel_details VARCHAR(255), PRIMARY KEY (hotel_id), FOREIGN KEY (star_rating_code) REFERENCES Ref_Hotel_Star_Ratings (star_rating_code) );  CREATE TABLE Tourist_Attractions ( Tourist_Attraction_ID INTEGER NOT NULL, Attraction_Type_Code CHAR(15) NOT NULL, Location_ID INTEGER NOT NULL, How_to_Get_There VARCHAR(255), Name VARCHAR(255), Description VARCHAR(255), Opening_Hours VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Tourist_Attraction_ID), FOREIGN KEY (Location_ID) REFERENCES Locations (Location_ID), FOREIGN KEY (Attraction_Type_Code) REFERENCES Ref_Attraction_Types (Attraction_Type_Code) );  CREATE TABLE Street_Markets ( Market_ID INTEGER NOT NULL, Market_Details VARCHAR(255), PRIMARY KEY (Market_ID), FOREIGN KEY (Market_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Shops ( Shop_ID INTEGER NOT NULL, Shop_Details VARCHAR(255), PRIMARY KEY (Shop_ID), FOREIGN KEY (Shop_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Museums ( Museum_ID INTEGER NOT NULL, Museum_Details VARCHAR(255), PRIMARY KEY (Museum_ID), FOREIGN KEY (Museum_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Royal_Family ( Royal_Family_ID INTEGER NOT NULL, Royal_Family_Details VARCHAR(255), PRIMARY KEY (Royal_Family_ID), FOREIGN KEY (Royal_Family_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Theme_Parks ( Theme_Park_ID INTEGER NOT NULL, Theme_Park_Details VARCHAR(255), PRIMARY KEY (Theme_Park_ID), FOREIGN KEY (Theme_Park_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) );   CREATE TABLE Visits ( Visit_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Tourist_ID INTEGER NOT NULL, Visit_Date DATETIME NOT NULL, Visit_Details VARCHAR(40) NOT NULL, PRIMARY KEY (Visit_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID), FOREIGN KEY (Tourist_ID) REFERENCES Visitors (Tourist_ID) );   CREATE TABLE Photos ( Photo_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Name VARCHAR(255), Description VARCHAR(255), Filename VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Photo_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Staff ( Staff_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Name VARCHAR(40), Other_Details VARCHAR(255), PRIMARY KEY (Staff_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) );   CREATE TABLE Tourist_Attraction_Features ( Tourist_Attraction_ID INTEGER NOT NULL, Feature_ID INTEGER NOT NULL, PRIMARY KEY (Tourist_Attraction_ID, Feature_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID), FOREIGN KEY (Feature_ID) REFERENCES Features (Feature_ID) ); ",extra
991,4062,gas_company,SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1,Show the manager name with most number of gas stations opened after 2000.," PRAGMA foreign_keys = ON;   CREATE TABLE ""company"" ( ""Company_ID"" int, ""Rank"" int, ""Company"" text, ""Headquarters"" text, ""Main_Industry"" text, ""Sales_billion"" real, ""Profits_billion"" real, ""Assets_billion"" real, ""Market_Value"" real, PRIMARY KEY (""Company_ID"") );  CREATE TABLE ""gas_station"" ( ""Station_ID"" int, ""Open_Year"" int, ""Location"" text, ""Manager_Name"" text, ""Vice_Manager_Name"" text, ""Representative_Name"" text, PRIMARY KEY (""Station_ID"") );  CREATE TABLE ""station_company"" ( ""Station_ID"" int, ""Company_ID"" int, ""Rank_of_the_Year"" int, PRIMARY KEY (""Station_ID"",""Company_ID""), FOREIGN KEY (`Station_ID`) REFERENCES `gas_station`(`Station_ID`), FOREIGN KEY (`Company_ID`) REFERENCES `company`(`Company_ID`) );  ",extra
1402,6884,cre_Drama_Workshop_Groups,"SELECT T1.Service_Type_Description , T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T1.Service_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",What is the description and code of the type of service that is performed the most often?,"PRAGMA foreign_keys = ON;  CREATE TABLE Ref_Payment_Methods ( payment_method_code CHAR(10) NOT NULL, payment_method_description VARCHAR(80), PRIMARY KEY (payment_method_code), UNIQUE (payment_method_code) ); CREATE TABLE Ref_Service_Types ( Service_Type_Code CHAR(15) NOT NULL, Parent_Service_Type_Code CHAR(15), Service_Type_Description VARCHAR(255), PRIMARY KEY (Service_Type_Code), UNIQUE (Service_Type_Code) );  CREATE TABLE Addresses ( Address_ID VARCHAR(100) NOT NULL, Line_1 VARCHAR(255), Line_2 VARCHAR(255), City_Town VARCHAR(255), State_County VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Address_ID), UNIQUE (Address_ID) ); CREATE TABLE Products ( Product_ID VARCHAR(100) NOT NULL, Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Product_Description VARCHAR(255), Other_Product_Service_Details VARCHAR(255), PRIMARY KEY (Product_ID), UNIQUE (Product_ID) ); CREATE TABLE Marketing_Regions ( Marketing_Region_Code CHAR(15) NOT NULL, Marketing_Region_Name VARCHAR(255) NOT NULL, Marketing_Region_Descriptrion VARCHAR(255) NOT NULL, Other_Details VARCHAR(255), PRIMARY KEY (Marketing_Region_Code), UNIQUE (Marketing_Region_Code) );  CREATE TABLE Clients ( Client_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Customer_Email_Address VARCHAR(255), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Client_ID), UNIQUE (Client_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) ); CREATE TABLE Drama_Workshop_Groups ( Workshop_Group_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Currency_Code CHAR(15) NOT NULL, Marketing_Region_Code CHAR(15) NOT NULL, Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Workshop_Group_ID), UNIQUE (Workshop_Group_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) ); CREATE TABLE Performers ( Performer_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Performer_ID), UNIQUE (Performer_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) ); CREATE TABLE Customers ( Customer_ID VARCHAR(100) NOT NULL, Address_ID INTEGER NOT NULL, Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Customer_ID), UNIQUE (Customer_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) ); CREATE TABLE Stores ( Store_ID VARCHAR(100) NOT NULL, Address_ID INTEGER NOT NULL, Marketing_Region_Code CHAR(15) NOT NULL, Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Store_ID), UNIQUE (Store_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID), FOREIGN KEY (Marketing_Region_Code) REFERENCES Marketing_Regions (Marketing_Region_Code) ); CREATE TABLE Bookings ( Booking_ID INTEGER NOT NULL , Customer_ID INTEGER NOT NULL, Workshop_Group_ID VARCHAR(100) NOT NULL, Status_Code CHAR(15) NOT NULL, Store_ID INTEGER NOT NULL, Order_Date DATETIME NOT NULL, Planned_Delivery_Date DATETIME NOT NULL, Actual_Delivery_Date DATETIME NOT NULL, Other_Order_Details VARCHAR(255), PRIMARY KEY (Booking_ID), UNIQUE (Booking_ID), FOREIGN KEY (Customer_ID) REFERENCES Clients (Client_ID), FOREIGN KEY (Workshop_Group_ID) REFERENCES Drama_Workshop_Groups (Workshop_Group_ID) ); CREATE TABLE Performers_in_Bookings ( Order_ID INTEGER NOT NULL, Performer_ID INTEGER NOT NULL, PRIMARY KEY (Order_ID, Performer_ID), FOREIGN KEY (Performer_ID) REFERENCES Performers (Performer_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID) ); CREATE TABLE Customer_Orders ( Order_ID INTEGER NOT NULL , Customer_ID INTEGER NOT NULL, Store_ID INTEGER NOT NULL, Order_Date DATETIME NOT NULL, Planned_Delivery_Date DATETIME NOT NULL, Actual_Delivery_Date DATETIME NOT NULL, Other_Order_Details VARCHAR(255), PRIMARY KEY (Order_ID), UNIQUE (Order_ID), FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY (Store_ID) REFERENCES Stores (Store_ID) ); CREATE TABLE Order_Items ( Order_Item_ID INTEGER NOT NULL , Order_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), PRIMARY KEY (Order_Item_ID), FOREIGN KEY (Order_ID) REFERENCES Customer_Orders (Order_ID), FOREIGN KEY (Product_ID) REFERENCES Products (Product_ID) ); CREATE TABLE Invoices ( Invoice_ID INTEGER NOT NULL, Order_ID INTEGER NOT NULL, payment_method_code CHAR(15), Product_ID INTEGER NOT NULL, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), Order_Item_ID INTEGER NOT NULL, PRIMARY KEY (Invoice_ID), FOREIGN KEY (Order_ID) REFERENCES Customer_Orders (Order_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID), FOREIGN KEY (payment_method_code) REFERENCES Ref_Payment_Methods (payment_method_code) ); CREATE TABLE Services ( Service_ID INTEGER NOT NULL, Service_Type_Code CHAR(15), Workshop_Group_ID INTEGER NOT NULL, Product_Description VARCHAR(255), Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Other_Product_Service_Details VARCHAR(255), PRIMARY KEY (Service_ID), UNIQUE (Service_ID), FOREIGN KEY (Workshop_Group_ID) REFERENCES Drama_Workshop_Groups (Workshop_Group_ID), FOREIGN KEY (Service_Type_Code) REFERENCES Ref_Service_Types (Service_Type_Code) ); CREATE TABLE Bookings_Services ( Order_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, PRIMARY KEY (Order_ID, Product_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID), FOREIGN KEY (Product_ID) REFERENCES Services (Service_ID) );  CREATE TABLE Invoice_Items ( Invoice_Item_ID INTEGER NOT NULL , Invoice_ID INTEGER NOT NULL, Order_ID INTEGER NOT NULL, Order_Item_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, Order_Quantity INTEGER, Other_Item_Details VARCHAR(255), PRIMARY KEY (Invoice_Item_ID), FOREIGN KEY (Order_Item_ID) REFERENCES Order_Items (Order_Item_ID), FOREIGN KEY (Invoice_ID) REFERENCES Invoices (Invoice_ID), FOREIGN KEY (Order_ID, Product_ID) REFERENCES Bookings_Services (Order_ID,Product_ID) ); ",extra
1066,4624,inn_1,SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T2.decor ORDER BY count(T2.decor) ASC LIMIT 1;,What kind of decor has the least number of reservations?,"CREATE TABLE ""Rooms"" (  	""RoomId"" TEXT PRIMARY KEY, 	""roomName"" TEXT,  	""beds"" INTEGER,  	""bedType"" TEXT,  	""maxOccupancy"" INTEGER,  	""basePrice"" INTEGER,  	""decor"" TEXT  );  CREATE TABLE ""Reservations"" (  	""Code"" INTEGER PRIMARY KEY,  	""Room"" TEXT,  	""CheckIn"" TEXT,  	""CheckOut"" TEXT,  	""Rate"" REAL,  	""LastName"" TEXT,  	""FirstName"" TEXT,  	""Adults"" INTEGER,  	""Kids"" INTEGER, 	FOREIGN KEY (Room) REFERENCES Rooms(RoomId) ); ",extra
1352,6517,department_store,"SELECT T1.customer_name ,  T1.customer_phone ,  T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T2.customer_id ORDER BY count(*) DESC LIMIT 1","What are the name, phone number and email address of the customer who made the largest number of orders?","PRAGMA foreign_keys = ON; CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `address_details` VARCHAR(255) );   INSERT INTO Addresses (`address_id`, `address_details`) VALUES (1, '28481 Crist Circle East Burdettestad, IA 21232'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (2, '0292 Mitchel Pike Port Abefurt, IA 84402-4249'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (3, '4062 Mante Place West Lindsey, DE 76199-8015'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (4, '99666 Julie Junction Marvinburgh, OH 16085-1623'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (5, '195 Mara Rue Jenkinsmouth, OK 22345'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (6, '11784 Stehr Road Port Isaac, NV 61159'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (7, '69482 Renner Ville Suite 653 Langworthborough, OH 95195'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (8, '36594 O''Keefe Lock New Cali, RI 42319'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (9, '7181 Wuckert Port Apt. 571 Lake Zariaburgh, IL 98085'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (10, '92594 Marvin Trafficway Pourosfurt, IA 98649'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (11, '0258 Kessler Mountains Suite 688 Mooreside, ME 41586-5022'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (12, '69275 Mose Drive Wilkinsonstad, CO 79055-7622'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (13, '8207 Morissette Lakes East Rheaview, ID 47493'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (14, '145 Alice Corners Willmsport, NV 36680'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (15, '521 Molly Harbors Apt. 567 Reingerland, HI 97099-1005');  CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `staff_gender` VARCHAR(1), `staff_name` VARCHAR(80) );  CREATE TABLE `Suppliers` ( `supplier_id` INTEGER PRIMARY KEY, `supplier_name` VARCHAR(80), `supplier_phone` VARCHAR(80) );  CREATE TABLE `Department_Store_Chain` ( `dept_store_chain_id` INTEGER PRIMARY KEY, `dept_store_chain_name` VARCHAR(80) );  CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `payment_method_code` VARCHAR(10) NOT NULL, `customer_code` VARCHAR(20), `customer_name` VARCHAR(80), `customer_address` VARCHAR(255), `customer_phone` VARCHAR(80), `customer_email` VARCHAR(80) ); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (1, 'Credit Card', '401', 'Ahmed', '75099 Tremblay Port Apt. 163 South Norrisland, SC 80546', '254-072-4068x33935', 'margarett.vonrueden@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (2, 'Credit Card', '665', 'Chauncey', '8408 Lindsay Court East Dasiabury, IL 72656-3552', '+41(8)1897032009', 'stiedemann.sigrid@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (3, 'Direct Debit', '844', 'Lukas', '7162 Rodolfo Knoll Apt. 502 Lake Annalise, TN 35791-8871', '197-417-3557', 'joelle.monahan@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (4, 'Direct Debit', '662', 'Lexus', '9581 Will Flat Suite 272 East Cathryn, WY 30751-4404', '+08(3)8056580281', 'gbrekke@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (5, 'Credit Card', '848', 'Tara', '5065 Mraz Fields Apt. 041 East Chris, NH 41624', '1-064-498-6609x051', 'nicholas44@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (6, 'Credit Card', '916', 'Jon', '841 Goyette Unions South Dionbury, NC 62021', '(443)013-3112x528', 'cconroy@example.net'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (7, 'Credit Card', '172', 'Cristobal', '8327 Christiansen Lakes Suite 409 Schneiderland, IA 93624', '877-150-8674x63517', 'shawna.cummerata@example.net'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (8, 'Direct Debit', '927', 'Adah', '5049 Hand Land Coymouth, IL 97300-7731', '1-695-364-7586x59256', 'kathlyn24@example.org'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (9, 'Credit Card', '808', 'Yasmeen', '3558 Witting Meadow Apt. 483 Lake Moriahbury, OH 91556-2122', '587.398.2400x31176', 'ludwig54@example.net'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (10, 'Credit Card', '887', 'Karson', '7308 Joan Lake Suite 346 Lizethtown, DE 56522', '857-844-9339x40140', 'moriah91@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (11, 'Direct Debit', '611', 'Cordell', '362 Fisher Forge Apt. 900 New Mckenna, CA 98525-5674', '(730)934-8249', 'qstokes@example.org'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (12, 'Credit Card', '182', 'Darron', '84445 Elinor Glens Port Zita, SD 39410', '117.822.3577', 'gwisozk@example.net'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (13, 'Credit Card', '589', 'Kenya', '338 Floy Mountains Suite 589 Yesseniaville, TN 60847', '08023680831', 'maxime86@example.net'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (14, 'Direct Debit', '240', 'Abbie', '983 Elinore Passage Darrionborough, SC 53915-0479', '07594320656', 'celine.bogan@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (15, 'Credit Card', '980', 'Lyric', '649 Ocie Lights Wyatttown, UT 12697', '1-472-036-0434', 'schultz.arnoldo@example.net');   CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_type_code` VARCHAR(10) NOT NULL, `product_name` VARCHAR(80), `product_price` DECIMAL(19,4) ); CREATE TABLE `Supplier_Addresses` ( `supplier_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_from` DATETIME NOT NULL, `date_to` DATETIME, PRIMARY KEY (`supplier_id`, `address_id`), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`supplier_id` ) REFERENCES `Suppliers`(`supplier_id` ) );  CREATE TABLE `Customer_Addresses` ( `customer_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_from` DATETIME NOT NULL, `date_to` DATETIME, PRIMARY KEY (`customer_id`, `address_id`), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) );   CREATE TABLE `Customer_Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `order_status_code` VARCHAR(10) NOT NULL, `order_date` DATETIME NOT NULL, FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) );  CREATE TABLE `Department_Stores` ( `dept_store_id` INTEGER PRIMARY KEY, `dept_store_chain_id` INTEGER, `store_name` VARCHAR(80), `store_address` VARCHAR(255), `store_phone` VARCHAR(80), `store_email` VARCHAR(80), FOREIGN KEY (`dept_store_chain_id` ) REFERENCES `Department_Store_Chain`(`dept_store_chain_id` ) );   INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (1, 1, 'store_name', '01290 Jeremie Parkway Suite 753 North Arielle, MS 51249', '(948)944-5099x2027', 'bmaggio@example.com'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (2, 3, 'store_name', '082 Purdy Expressway O''Connellshire, IL 31732', '877-917-5029', 'larissa10@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (3, 4, 'store_name', '994 Travis Plains North Wadeton, WV 27575-3951', '1-216-312-0375', 'alexandro.mcclure@example.net'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (4, 2, 'store_name', '93472 Mayert Shore Apt. 360 Mitchellton, TN 84209', '670-466-6367', 'bryon24@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (5, 3, 'store_name', '88112 Parisian Lights Sporermouth, MN 25962', '01399327266', 'creola23@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (6, 4, 'store_name', '49708 Marcella Valleys Suite 181 Ninamouth, WA 86667', '1-859-843-1957', 'jerod.reynolds@example.net'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (7, 4, 'store_name', '41924 Alfredo Cliff New Eviestad, NY 17573', '1-109-872-9142x77078', 'ihamill@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (8, 4, 'store_name', '7081 Shanna Cape West Zacheryshire, NC 17408', '+67(5)4983519062', 'casper.adolfo@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (9, 4, 'store_name', '5288 Kaia Street Devonton, NJ 61782-9006', '(723)503-7086x356', 'selmer.stiedemann@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (10, 3, 'store_name', '00578 Lisa Gateway Suite 476 Strosinville, VA 03998-3292', '07126036440', 'luisa57@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (11, 2, 'store_name', '34894 Everett Road South Jeremiehaven, GA 08730', '611-037-9309', 'vonrueden.vern@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (12, 4, 'store_name', '2676 Cruickshank Gardens North Ginahaven, CT 85046', '(626)763-7031', 'freda.toy@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (13, 2, 'store_name', '29297 West Road Suite 210 West Dulceside, UT 58085-8998', '1-764-126-7567x0795', 'katlynn62@example.com'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (14, 1, 'store_name', '16650 Lysanne River Apt. 281 North Garettton, AL 84756-4375', '319.331.3397', 'mohr.elwin@example.net'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (15, 3, 'store_name', '82470 Hansen Squares Suite 190 Wehnermouth, NC 76791', '(587)993-3604x3077', 'kelly30@example.com');   CREATE TABLE `Departments` ( `department_id` INTEGER PRIMARY KEY, `dept_store_id` INTEGER NOT NULL, `department_name` VARCHAR(80), FOREIGN KEY (`dept_store_id` ) REFERENCES `Department_Stores`(`dept_store_id` ) ); CREATE TABLE `Order_Items` ( `order_item_id` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) ); CREATE TABLE `Product_Suppliers` ( `product_id` INTEGER NOT NULL, `supplier_id` INTEGER NOT NULL, `date_supplied_from` DATETIME NOT NULL, `date_supplied_to` DATETIME, `total_amount_purchased` VARCHAR(80), `total_value_purchased` DECIMAL(19,4), PRIMARY KEY (`product_id`, `supplier_id`), FOREIGN KEY (`supplier_id` ) REFERENCES `Suppliers`(`supplier_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) );   CREATE TABLE `Staff_Department_Assignments` ( `staff_id` INTEGER NOT NULL, `department_id` INTEGER NOT NULL, `date_assigned_from` DATETIME NOT NULL, `job_title_code` VARCHAR(10) NOT NULL, `date_assigned_to` DATETIME, PRIMARY KEY (`staff_id`, `department_id`), FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` ), FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ) );  ",extra
881,3177,race_track,"SELECT name ,  LOCATION ,  year_opened FROM track WHERE seating  >  (SELECT avg(seating) FROM track)","What are the names, locations, and years of opening for tracks with seating higher than average?","PRAGMA foreign_keys = ON;  CREATE TABLE ""race"" ( ""Race_ID"" int, ""Name"" text, ""Class"" text, ""Date"" text, ""Track_ID"" text, PRIMARY KEY (""Race_ID""), FOREIGN KEY (""Track_ID"") REFERENCES ""track""(""Track_ID"") );  CREATE TABLE ""track"" ( ""Track_ID"" int, ""Name"" text, ""Location"" text, ""Seating"" real, ""Year_Opened"" real, PRIMARY KEY (""Track_ID"") );  ",extra
302,1609,scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  ""Parsing"" AND t3.year  =  2012 AND t4.venuename  =  ""acl"";",acl papers in 2012 about Parsing,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); ",extra
447,1838,scholar,"SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""ohad shamir"" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",What paper by ohad shamir has the most citation ?,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); ",extra
1241,5663,insurance_policies,"SELECT count(*) ,  T1.claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY T1.Date_Claim_Settled DESC LIMIT 1",Find the claim id and the number of settlements made for the claim with the most recent settlement date.,"PRAGMA foreign_keys = ON; CREATE TABLE Customers ( Customer_ID INTEGER NOT NULL, Customer_Details VARCHAR(255) NOT NULL, PRIMARY KEY (Customer_ID) ); CREATE TABLE Customer_Policies ( Policy_ID INTEGER NOT NULL, Customer_ID INTEGER NOT NULL, Policy_Type_Code CHAR(15) NOT NULL, Start_Date DATE, End_Date DATE, PRIMARY KEY (Policy_ID), FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID) );  CREATE TABLE Claims ( Claim_ID INTEGER NOT NULL, Policy_ID INTEGER NOT NULL, Date_Claim_Made DATE, Date_Claim_Settled DATE, Amount_Claimed INTEGER, Amount_Settled INTEGER, PRIMARY KEY (Claim_ID), FOREIGN KEY (Policy_ID) REFERENCES Customer_Policies (Policy_ID) );  CREATE TABLE Settlements ( Settlement_ID INTEGER NOT NULL, Claim_ID INTEGER NOT NULL, Date_Claim_Made DATE, Date_Claim_Settled DATE, Amount_Claimed INTEGER, Amount_Settled INTEGER, Customer_Policy_ID INTEGER NOT NULL, PRIMARY KEY (Settlement_ID), FOREIGN KEY (Claim_ID) REFERENCES Claims (Claim_ID) ); CREATE TABLE Payments ( Payment_ID INTEGER NOT NULL, Settlement_ID INTEGER NOT NULL, Payment_Method_Code VARCHAR(255), Date_Payment_Made DATE, Amount_Payment INTEGER, PRIMARY KEY (Payment_ID), FOREIGN KEY (Settlement_ID) REFERENCES Settlements (Settlement_ID) );    ",extra
400,1785,scholar,"SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  ""jitendra malik"";",What datasets have jitendra malik used,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); ",extra
1134,5095,assets_maintenance,"SELECT count(*) ,  T1.fault_log_entry_id FROM Fault_Log AS T1 JOIN Engineer_Visits AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1",How many engineer visits are required at most for a single fault log? List the number and the log entry id.,"PRAGMA foreign_keys = ON;  CREATE TABLE `Third_Party_Companies` ( `company_id` INTEGER PRIMARY KEY , `company_type` VARCHAR(5) NOT NULL, `company_name` VARCHAR(255), `company_address` VARCHAR(255), `other_company_details` VARCHAR(255) );  CREATE TABLE `Maintenance_Contracts` ( `maintenance_contract_id` INTEGER PRIMARY KEY, `maintenance_contract_company_id` INTEGER NOT NULL, `contract_start_date` DATETIME, `contract_end_date` DATETIME, `other_contract_details` VARCHAR(255), FOREIGN KEY (`maintenance_contract_company_id` ) REFERENCES `Third_Party_Companies`(`company_id` ) );  CREATE TABLE `Parts` ( `part_id` INTEGER PRIMARY KEY, `part_name` VARCHAR(255), `chargeable_yn` VARCHAR(1), `chargeable_amount` VARCHAR(20), `other_part_details` VARCHAR(255) );  CREATE TABLE `Skills` ( `skill_id` INTEGER PRIMARY KEY, `skill_code` VARCHAR(20), `skill_description` VARCHAR(255) );  CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `staff_name` VARCHAR(255), `gender` VARCHAR(1), `other_staff_details` VARCHAR(255) ); CREATE TABLE `Assets` ( `asset_id` INTEGER PRIMARY KEY, `maintenance_contract_id` INTEGER NOT NULL, `supplier_company_id` INTEGER NOT NULL, `asset_details` VARCHAR(255), `asset_make` VARCHAR(20), `asset_model` VARCHAR(20), `asset_acquired_date` DATETIME, `asset_disposed_date` DATETIME, `other_asset_details` VARCHAR(255), FOREIGN KEY (`maintenance_contract_id` ) REFERENCES `Maintenance_Contracts`(`maintenance_contract_id` ), FOREIGN KEY (`supplier_company_id` ) REFERENCES `Third_Party_Companies`(`company_id` ) );    CREATE TABLE `Asset_Parts` ( `asset_id` INTEGER NOT NULL, `part_id` INTEGER NOT NULL, FOREIGN KEY (`part_id` ) REFERENCES `Parts`(`part_id` ), FOREIGN KEY (`asset_id` ) REFERENCES `Assets`(`asset_id` ) );  CREATE TABLE `Maintenance_Engineers` ( `engineer_id` INTEGER PRIMARY KEY, `company_id` INTEGER NOT NULL, `first_name` VARCHAR(50), `last_name` VARCHAR(50), `other_details` VARCHAR(255), FOREIGN KEY (`company_id` ) REFERENCES `Third_Party_Companies`(`company_id` ) );   CREATE TABLE `Engineer_Skills` ( `engineer_id` INTEGER NOT NULL, `skill_id` INTEGER NOT NULL, FOREIGN KEY (`engineer_id` ) REFERENCES `Maintenance_Engineers`(`engineer_id` ), FOREIGN KEY (`skill_id` ) REFERENCES `Skills`(`skill_id` ) );  CREATE TABLE `Fault_Log` ( `fault_log_entry_id` INTEGER PRIMARY KEY, `asset_id` INTEGER NOT NULL, `recorded_by_staff_id` INTEGER NOT NULL, `fault_log_entry_datetime` DATETIME, `fault_description` VARCHAR(255), `other_fault_details` VARCHAR(255), FOREIGN KEY (`asset_id` ) REFERENCES `Assets`(`asset_id` ), FOREIGN KEY (`recorded_by_staff_id` ) REFERENCES `Staff`(`staff_id` ) );  CREATE TABLE `Engineer_Visits` ( `engineer_visit_id` INTEGER PRIMARY KEY, `contact_staff_id` INTEGER, `engineer_id` INTEGER NOT NULL, `fault_log_entry_id` INTEGER NOT NULL, `fault_status` VARCHAR(10) NOT NULL, `visit_start_datetime` DATETIME, `visit_end_datetime` DATETIME, `other_visit_details` VARCHAR(255), FOREIGN KEY (`fault_log_entry_id` ) REFERENCES `Fault_Log`(`fault_log_entry_id` ), FOREIGN KEY (`engineer_id` ) REFERENCES `Maintenance_Engineers`(`engineer_id` ), FOREIGN KEY (`contact_staff_id` ) REFERENCES `Staff`(`staff_id` ) );    CREATE TABLE `Part_Faults` ( `part_fault_id` INTEGER PRIMARY KEY, `part_id` INTEGER NOT NULL, `fault_short_name` VARCHAR(20), `fault_description` VARCHAR(255), `other_fault_details` VARCHAR(255), FOREIGN KEY (`part_id` ) REFERENCES `Parts`(`part_id` ) );   CREATE TABLE `Fault_Log_Parts` ( `fault_log_entry_id` INTEGER NOT NULL, `part_fault_id` INTEGER NOT NULL, `fault_status` VARCHAR(10) NOT NULL, FOREIGN KEY (`part_fault_id` ) REFERENCES `Part_Faults`(`part_fault_id` ), FOREIGN KEY (`fault_log_entry_id` ) REFERENCES `Fault_Log`(`fault_log_entry_id` ) );  CREATE TABLE `Skills_Required_To_Fix` ( `part_fault_id` INTEGER NOT NULL, `skill_id` INTEGER NOT NULL, FOREIGN KEY (`part_fault_id` ) REFERENCES `Part_Faults`(`part_fault_id` ), FOREIGN KEY (`skill_id` ) REFERENCES `Skills`(`skill_id` ) );     ",extra
1315,6259,network_2,SELECT DISTINCT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  <  (SELECT avg(age) FROM person),What are the different names of friends who are younger than the average age for a friend?,"CREATE TABLE Person (   name varchar(20) PRIMARY KEY,   age INTEGER,   city TEXT,   gender TEXT,   job TEXT );  CREATE TABLE PersonFriend (   name varchar(20),   friend varchar(20),   year INTEGER,   FOREIGN KEY (name) REFERENCES Person(name),   FOREIGN KEY (friend) REFERENCES Person(name) );  ",extra
1444,7150,tracking_software_problems,"SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = ""rem"" EXCEPT SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = ""aut""","Find the first and last name of the staff members who reported problems from the product ""rem"" but not ""aut""?","PRAGMA foreign_keys = ON; CREATE TABLE `Problem_Category_Codes` ( `problem_category_code` VARCHAR(20) PRIMARY KEY, `problem_category_description` VARCHAR(80) ); CREATE TABLE `Problem_Log` ( `problem_log_id` INTEGER PRIMARY KEY, `assigned_to_staff_id` INTEGER NOT NULL, `problem_id` INTEGER NOT NULL, `problem_category_code` VARCHAR(20) NOT NULL, `problem_status_code` VARCHAR(20) NOT NULL, `log_entry_date` DATETIME, `log_entry_description` VARCHAR(255), `log_entry_fix` VARCHAR(255), `other_log_details` VARCHAR(255), FOREIGN KEY (`problem_category_code` ) REFERENCES `Problem_Category_Codes`(`problem_category_code` ),FOREIGN KEY (`assigned_to_staff_id` ) REFERENCES `Staff`(`staff_id` ),FOREIGN KEY (`problem_id` ) REFERENCES `Problems`(`problem_id` ),FOREIGN KEY (`problem_status_code` ) REFERENCES `Problem_Status_Codes`(`problem_status_code` ) ); CREATE TABLE `Problem_Status_Codes` ( `problem_status_code` VARCHAR(20) PRIMARY KEY, `problem_status_description` VARCHAR(80) ); CREATE TABLE `Product` ( `product_id` INTEGER PRIMARY KEY, `product_name` VARCHAR(80), `product_details` VARCHAR(255) ); CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `staff_first_name` VARCHAR(80), `staff_last_name` VARCHAR(80), `other_staff_details` VARCHAR(255) );  CREATE TABLE `Problems` ( `problem_id` INTEGER PRIMARY KEY, `product_id` INTEGER NOT NULL, `closure_authorised_by_staff_id` INTEGER NOT NULL, `reported_by_staff_id` INTEGER NOT NULL, `date_problem_reported` DATETIME NOT NULL, `date_problem_closed` DATETIME, `problem_description` VARCHAR(255), `other_problem_details` VARCHAR(255), FOREIGN KEY (`closure_authorised_by_staff_id` ) REFERENCES `Staff`(`staff_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Product`(`product_id` ), FOREIGN KEY (`reported_by_staff_id` ) REFERENCES `Staff`(`staff_id` ) );   ",extra
1548,7722,cre_Theme_park,SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits ),Count the number of tourists who did not visit any place.,"PRAGMA foreign_keys = ON; CREATE TABLE Ref_Hotel_Star_Ratings ( star_rating_code CHAR(15) NOT NULL, star_rating_description VARCHAR(80), PRIMARY KEY (star_rating_code), UNIQUE (star_rating_code) );   CREATE TABLE Locations ( Location_ID INTEGER NOT NULL, Location_Name VARCHAR(255), Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Location_ID) ); CREATE TABLE Ref_Attraction_Types ( Attraction_Type_Code CHAR(15) NOT NULL, Attraction_Type_Description VARCHAR(255), PRIMARY KEY (Attraction_Type_Code), UNIQUE (Attraction_Type_Code) );  CREATE TABLE Visitors ( Tourist_ID INTEGER NOT NULL, Tourist_Details VARCHAR(255), PRIMARY KEY (Tourist_ID), UNIQUE (Tourist_ID) ); CREATE TABLE Features ( Feature_ID INTEGER NOT NULL, Feature_Details VARCHAR(255), PRIMARY KEY (Feature_ID) );  CREATE TABLE Hotels ( hotel_id INTEGER NOT NULL, star_rating_code CHAR(15) NOT NULL, pets_allowed_yn CHAR(1), price_range real, other_hotel_details VARCHAR(255), PRIMARY KEY (hotel_id), FOREIGN KEY (star_rating_code) REFERENCES Ref_Hotel_Star_Ratings (star_rating_code) );  CREATE TABLE Tourist_Attractions ( Tourist_Attraction_ID INTEGER NOT NULL, Attraction_Type_Code CHAR(15) NOT NULL, Location_ID INTEGER NOT NULL, How_to_Get_There VARCHAR(255), Name VARCHAR(255), Description VARCHAR(255), Opening_Hours VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Tourist_Attraction_ID), FOREIGN KEY (Location_ID) REFERENCES Locations (Location_ID), FOREIGN KEY (Attraction_Type_Code) REFERENCES Ref_Attraction_Types (Attraction_Type_Code) );  CREATE TABLE Street_Markets ( Market_ID INTEGER NOT NULL, Market_Details VARCHAR(255), PRIMARY KEY (Market_ID), FOREIGN KEY (Market_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Shops ( Shop_ID INTEGER NOT NULL, Shop_Details VARCHAR(255), PRIMARY KEY (Shop_ID), FOREIGN KEY (Shop_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Museums ( Museum_ID INTEGER NOT NULL, Museum_Details VARCHAR(255), PRIMARY KEY (Museum_ID), FOREIGN KEY (Museum_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Royal_Family ( Royal_Family_ID INTEGER NOT NULL, Royal_Family_Details VARCHAR(255), PRIMARY KEY (Royal_Family_ID), FOREIGN KEY (Royal_Family_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Theme_Parks ( Theme_Park_ID INTEGER NOT NULL, Theme_Park_Details VARCHAR(255), PRIMARY KEY (Theme_Park_ID), FOREIGN KEY (Theme_Park_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) );   CREATE TABLE Visits ( Visit_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Tourist_ID INTEGER NOT NULL, Visit_Date DATETIME NOT NULL, Visit_Details VARCHAR(40) NOT NULL, PRIMARY KEY (Visit_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID), FOREIGN KEY (Tourist_ID) REFERENCES Visitors (Tourist_ID) );   CREATE TABLE Photos ( Photo_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Name VARCHAR(255), Description VARCHAR(255), Filename VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Photo_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Staff ( Staff_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Name VARCHAR(40), Other_Details VARCHAR(255), PRIMARY KEY (Staff_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) );   CREATE TABLE Tourist_Attraction_Features ( Tourist_Attraction_ID INTEGER NOT NULL, Feature_ID INTEGER NOT NULL, PRIMARY KEY (Tourist_Attraction_ID, Feature_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID), FOREIGN KEY (Feature_ID) REFERENCES Features (Feature_ID) ); ",extra
1328,6274,network_2,SELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin'),What is the total number of people who has no friend living in the city of Austin.,"CREATE TABLE Person (   name varchar(20) PRIMARY KEY,   age INTEGER,   city TEXT,   gender TEXT,   job TEXT );  CREATE TABLE PersonFriend (   name varchar(20),   friend varchar(20),   year INTEGER,   FOREIGN KEY (name) REFERENCES Person(name),   FOREIGN KEY (friend) REFERENCES Person(name) );  ",extra
1048,4520,movie_1,"SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) DESC LIMIT 1",Find the movies with the highest average rating. Return the movie titles and average rating.,"-- dbext:type=SQLITE:dbname=movie_rating.db  /* Delete the tables if they already exist */ drop table if exists Movie; drop table if exists Reviewer; drop table if exists Rating;  /* Create the schema for our tables */ create table Movie( 	mID int primary key,  	title text,  	year int,  	director text ); create table Reviewer( 	rID int primary key,  	name text);  create table Rating( 	rID int,  	mID int,  	stars int,  	ratingDate date, 	FOREIGN KEY (mID) references Movie(mID), 	FOREIGN KEY (rID) references Reviewer(rID) );  /* Populate the tables with our data */ ",extra
1138,5103,assets_maintenance,"SELECT T1.engineer_id ,  T1.first_name ,  T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 ON T1.engineer_id  =  T2.engineer_id GROUP BY T1.engineer_id ORDER BY count(*) ASC LIMIT 1","Among those engineers who have visited, which engineer makes the least number of visits? List the engineer id, first name and last name.","PRAGMA foreign_keys = ON;  CREATE TABLE `Third_Party_Companies` ( `company_id` INTEGER PRIMARY KEY , `company_type` VARCHAR(5) NOT NULL, `company_name` VARCHAR(255), `company_address` VARCHAR(255), `other_company_details` VARCHAR(255) );  CREATE TABLE `Maintenance_Contracts` ( `maintenance_contract_id` INTEGER PRIMARY KEY, `maintenance_contract_company_id` INTEGER NOT NULL, `contract_start_date` DATETIME, `contract_end_date` DATETIME, `other_contract_details` VARCHAR(255), FOREIGN KEY (`maintenance_contract_company_id` ) REFERENCES `Third_Party_Companies`(`company_id` ) );  CREATE TABLE `Parts` ( `part_id` INTEGER PRIMARY KEY, `part_name` VARCHAR(255), `chargeable_yn` VARCHAR(1), `chargeable_amount` VARCHAR(20), `other_part_details` VARCHAR(255) );  CREATE TABLE `Skills` ( `skill_id` INTEGER PRIMARY KEY, `skill_code` VARCHAR(20), `skill_description` VARCHAR(255) );  CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `staff_name` VARCHAR(255), `gender` VARCHAR(1), `other_staff_details` VARCHAR(255) ); CREATE TABLE `Assets` ( `asset_id` INTEGER PRIMARY KEY, `maintenance_contract_id` INTEGER NOT NULL, `supplier_company_id` INTEGER NOT NULL, `asset_details` VARCHAR(255), `asset_make` VARCHAR(20), `asset_model` VARCHAR(20), `asset_acquired_date` DATETIME, `asset_disposed_date` DATETIME, `other_asset_details` VARCHAR(255), FOREIGN KEY (`maintenance_contract_id` ) REFERENCES `Maintenance_Contracts`(`maintenance_contract_id` ), FOREIGN KEY (`supplier_company_id` ) REFERENCES `Third_Party_Companies`(`company_id` ) );    CREATE TABLE `Asset_Parts` ( `asset_id` INTEGER NOT NULL, `part_id` INTEGER NOT NULL, FOREIGN KEY (`part_id` ) REFERENCES `Parts`(`part_id` ), FOREIGN KEY (`asset_id` ) REFERENCES `Assets`(`asset_id` ) );  CREATE TABLE `Maintenance_Engineers` ( `engineer_id` INTEGER PRIMARY KEY, `company_id` INTEGER NOT NULL, `first_name` VARCHAR(50), `last_name` VARCHAR(50), `other_details` VARCHAR(255), FOREIGN KEY (`company_id` ) REFERENCES `Third_Party_Companies`(`company_id` ) );   CREATE TABLE `Engineer_Skills` ( `engineer_id` INTEGER NOT NULL, `skill_id` INTEGER NOT NULL, FOREIGN KEY (`engineer_id` ) REFERENCES `Maintenance_Engineers`(`engineer_id` ), FOREIGN KEY (`skill_id` ) REFERENCES `Skills`(`skill_id` ) );  CREATE TABLE `Fault_Log` ( `fault_log_entry_id` INTEGER PRIMARY KEY, `asset_id` INTEGER NOT NULL, `recorded_by_staff_id` INTEGER NOT NULL, `fault_log_entry_datetime` DATETIME, `fault_description` VARCHAR(255), `other_fault_details` VARCHAR(255), FOREIGN KEY (`asset_id` ) REFERENCES `Assets`(`asset_id` ), FOREIGN KEY (`recorded_by_staff_id` ) REFERENCES `Staff`(`staff_id` ) );  CREATE TABLE `Engineer_Visits` ( `engineer_visit_id` INTEGER PRIMARY KEY, `contact_staff_id` INTEGER, `engineer_id` INTEGER NOT NULL, `fault_log_entry_id` INTEGER NOT NULL, `fault_status` VARCHAR(10) NOT NULL, `visit_start_datetime` DATETIME, `visit_end_datetime` DATETIME, `other_visit_details` VARCHAR(255), FOREIGN KEY (`fault_log_entry_id` ) REFERENCES `Fault_Log`(`fault_log_entry_id` ), FOREIGN KEY (`engineer_id` ) REFERENCES `Maintenance_Engineers`(`engineer_id` ), FOREIGN KEY (`contact_staff_id` ) REFERENCES `Staff`(`staff_id` ) );    CREATE TABLE `Part_Faults` ( `part_fault_id` INTEGER PRIMARY KEY, `part_id` INTEGER NOT NULL, `fault_short_name` VARCHAR(20), `fault_description` VARCHAR(255), `other_fault_details` VARCHAR(255), FOREIGN KEY (`part_id` ) REFERENCES `Parts`(`part_id` ) );   CREATE TABLE `Fault_Log_Parts` ( `fault_log_entry_id` INTEGER NOT NULL, `part_fault_id` INTEGER NOT NULL, `fault_status` VARCHAR(10) NOT NULL, FOREIGN KEY (`part_fault_id` ) REFERENCES `Part_Faults`(`part_fault_id` ), FOREIGN KEY (`fault_log_entry_id` ) REFERENCES `Fault_Log`(`fault_log_entry_id` ) );  CREATE TABLE `Skills_Required_To_Fix` ( `part_fault_id` INTEGER NOT NULL, `skill_id` INTEGER NOT NULL, FOREIGN KEY (`part_fault_id` ) REFERENCES `Part_Faults`(`part_fault_id` ), FOREIGN KEY (`skill_id` ) REFERENCES `Skills`(`skill_id` ) );     ",extra
1162,5295,hr_1,"SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  ( SELECT department_id FROM employees WHERE first_name  =  ""Clara"") AND first_name != ""Clara""",display the employee name ( first name and last name ) and hire date for all employees in the same department as Clara excluding Clara.,"-- phpMyAdmin SQL Dump -- version 4.0.10.7 -- http://www.phpmyadmin.net -- -- Host: localhost -- Generation Time: Mar 20, 2015 at 01:43 AM -- Server version: 5.5.34-cll-lve -- PHP Version: 5.4.23    /*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */; /*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */; /*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */; /*!40101 SET NAMES utf8 */; CREATE TABLE IF NOT EXISTS `regions` (   `REGION_ID` decimal(5,0) NOT NULL,   `REGION_NAME` varchar(25) DEFAULT NULL,   PRIMARY KEY (`REGION_ID`) );  -- -- Dumping data for table `regions` --  INSERT INTO `regions` (`REGION_ID`, `REGION_NAME`) VALUES ('1', 'Europe\r'), ('2', 'Americas\r'), ('3', 'Asia\r'), ('4', 'Middle East and Africa\r'); -- -- Database: `wrpracti_bookinfo` --  -- --------------------------------------------------------  -- -- Table structure for table `countries` --  CREATE TABLE IF NOT EXISTS `countries` (   `COUNTRY_ID` varchar(2) NOT NULL,   `COUNTRY_NAME` varchar(40) DEFAULT NULL,   `REGION_ID` decimal(10,0) DEFAULT NULL,   PRIMARY KEY (`COUNTRY_ID`),   FOREIGN KEY (`REGION_ID`) REFERENCES regions (`REGION_ID`) );  -- -- Dumping data for table `countries` --  INSERT INTO `countries` (`COUNTRY_ID`, `COUNTRY_NAME`, `REGION_ID`) VALUES ('AR', 'Argentina', '2'), ('AU', 'Australia', '3'), ('BE', 'Belgium', '1'), ('BR', 'Brazil', '2'), ('CA', 'Canada', '2'), ('CH', 'Switzerland', '1'), ('CN', 'China', '3'), ('DE', 'Germany', '1'), ('DK', 'Denmark', '1'), ('EG', 'Egypt', '4'), ('FR', 'France', '1'), ('HK', 'HongKong', '3'), ('IL', 'Israel', '4'), ('IN', 'India', '3'), ('IT', 'Italy', '1'), ('JP', 'Japan', '3'), ('KW', 'Kuwait', '4'), ('MX', 'Mexico', '2'), ('NG', 'Nigeria', '4'), ('NL', 'Netherlands', '1'), ('SG', 'Singapore', '3'), ('UK', 'United Kingdom', '1'), ('US', 'United States of America', '2'), ('ZM', 'Zambia', '4'), ('ZW', 'Zimbabwe', '4');  -- --------------------------------------------------------  -- -- Table structure for table `departments` --  CREATE TABLE IF NOT EXISTS `departments` (   `DEPARTMENT_ID` decimal(4,0) NOT NULL DEFAULT '0',   `DEPARTMENT_NAME` varchar(30) NOT NULL,   `MANAGER_ID` decimal(6,0) DEFAULT NULL,   `LOCATION_ID` decimal(4,0) DEFAULT NULL,   PRIMARY KEY (`DEPARTMENT_ID`) );  -- -- Dumping data for table `departments` --  INSERT INTO `departments` (`DEPARTMENT_ID`, `DEPARTMENT_NAME`, `MANAGER_ID`, `LOCATION_ID`) VALUES ('10', 'Administration', '200', '1700'), ('20', 'Marketing', '201', '1800'), ('30', 'Purchasing', '114', '1700'), ('40', 'Human Resources', '203', '2400'), ('50', 'Shipping', '121', '1500'), ('60', 'IT', '103', '1400'), ('70', 'Public Relations', '204', '2700'), ('80', 'Sales', '145', '2500'), ('90', 'Executive', '100', '1700'), ('100', 'Finance', '108', '1700'), ('110', 'Accounting', '205', '1700'), ('120', 'Treasury', '0', '1700'), ('130', 'Corporate Tax', '0', '1700'), ('140', 'Control And Credit', '0', '1700'), ('150', 'Shareholder Services', '0', '1700'), ('160', 'Benefits', '0', '1700'), ('170', 'Manufacturing', '0', '1700'), ('180', 'Construction', '0', '1700'), ('190', 'Contracting', '0', '1700'), ('200', 'Operations', '0', '1700'), ('210', 'IT Support', '0', '1700'), ('220', 'NOC', '0', '1700'), ('230', 'IT Helpdesk', '0', '1700'), ('240', 'Government Sales', '0', '1700'), ('250', 'Retail Sales', '0', '1700'), ('260', 'Recruiting', '0', '1700'), ('270', 'Payroll', '0', '1700');   CREATE TABLE IF NOT EXISTS `jobs` (   `JOB_ID` varchar(10) NOT NULL DEFAULT '',   `JOB_TITLE` varchar(35) NOT NULL,   `MIN_SALARY` decimal(6,0) DEFAULT NULL,   `MAX_SALARY` decimal(6,0) DEFAULT NULL,   PRIMARY KEY (`JOB_ID`) );  -- -- Dumping data for table `jobs` --  INSERT INTO `jobs` (`JOB_ID`, `JOB_TITLE`, `MIN_SALARY`, `MAX_SALARY`) VALUES ('AD_PRES', 'President', '20000', '40000'), ('AD_VP', 'Administration Vice President', '15000', '30000'), ('AD_ASST', 'Administration Assistant', '3000', '6000'), ('FI_MGR', 'Finance Manager', '8200', '16000'), ('FI_ACCOUNT', 'Accountant', '4200', '9000'), ('AC_MGR', 'Accounting Manager', '8200', '16000'), ('AC_ACCOUNT', 'Public Accountant', '4200', '9000'), ('SA_MAN', 'Sales Manager', '10000', '20000'), ('SA_REP', 'Sales Representative', '6000', '12000'), ('PU_MAN', 'Purchasing Manager', '8000', '15000'), ('PU_CLERK', 'Purchasing Clerk', '2500', '5500'), ('ST_MAN', 'Stock Manager', '5500', '8500'), ('ST_CLERK', 'Stock Clerk', '2000', '5000'), ('SH_CLERK', 'Shipping Clerk', '2500', '5500'), ('IT_PROG', 'Programmer', '4000', '10000'), ('MK_MAN', 'Marketing Manager', '9000', '15000'), ('MK_REP', 'Marketing Representative', '4000', '9000'), ('HR_REP', 'Human Resources Representative', '4000', '9000'), ('PR_REP', 'Public Relations Representative', '4500', '10500');  -- --------------------------------------------------------  -- -- Table structure for table `employees` --  CREATE TABLE IF NOT EXISTS `employees` (   `EMPLOYEE_ID` decimal(6,0) NOT NULL DEFAULT '0',   `FIRST_NAME` varchar(20) DEFAULT NULL,   `LAST_NAME` varchar(25) NOT NULL,   `EMAIL` varchar(25) NOT NULL,   `PHONE_NUMBER` varchar(20) DEFAULT NULL,   `HIRE_DATE` date NOT NULL,   `JOB_ID` varchar(10) NOT NULL,   `SALARY` decimal(8,2) DEFAULT NULL,   `COMMISSION_PCT` decimal(2,2) DEFAULT NULL,   `MANAGER_ID` decimal(6,0) DEFAULT NULL,   `DEPARTMENT_ID` decimal(4,0) DEFAULT NULL,   PRIMARY KEY (`EMPLOYEE_ID`),   FOREIGN KEY (`DEPARTMENT_ID`) REFERENCES departments(`DEPARTMENT_ID`),   FOREIGN KEY (`JOB_ID`) REFERENCES jobs(`JOB_ID`) );  -- -- Dumping data for table `employees` --  INSERT INTO `employees` (`EMPLOYEE_ID`, `FIRST_NAME`, `LAST_NAME`, `EMAIL`, `PHONE_NUMBER`, `HIRE_DATE`, `JOB_ID`, `SALARY`, `COMMISSION_PCT`, `MANAGER_ID`, `DEPARTMENT_ID`) VALUES ('100', 'Steven', 'King', 'SKING', '515.123.4567', '1987-06-17', 'AD_PRES', '24000.00', '0.00', '0', '90'), ('101', 'Neena', 'Kochhar', 'NKOCHHAR', '515.123.4568', '1987-06-18', 'AD_VP', '17000.00', '0.00', '100', '90'), ('102', 'Lex', 'De Haan', 'LDEHAAN', '515.123.4569', '1987-06-19', 'AD_VP', '17000.00', '0.00', '100', '90'), ('103', 'Alexander', 'Hunold', 'AHUNOLD', '590.423.4567', '1987-06-20', 'IT_PROG', '9000.00', '0.00', '102', '60'), ('104', 'Bruce', 'Ernst', 'BERNST', '590.423.4568', '1987-06-21', 'IT_PROG', '6000.00', '0.00', '103', '60'), ('105', 'David', 'Austin', 'DAUSTIN', '590.423.4569', '1987-06-22', 'IT_PROG', '4800.00', '0.00', '103', '60'), ('106', 'Valli', 'Pataballa', 'VPATABAL', '590.423.4560', '1987-06-23', 'IT_PROG', '4800.00', '0.00', '103', '60'), ('107', 'Diana', 'Lorentz', 'DLORENTZ', '590.423.5567', '1987-06-24', 'IT_PROG', '4200.00', '0.00', '103', '60'), ('108', 'Nancy', 'Greenberg', 'NGREENBE', '515.124.4569', '1987-06-25', 'FI_MGR', '12000.00', '0.00', '101', '100'), ('109', 'Daniel', 'Faviet', 'DFAVIET', '515.124.4169', '1987-06-26', 'FI_ACCOUNT', '9000.00', '0.00', '108', '100'), ('110', 'John', 'Chen', 'JCHEN', '515.124.4269', '1987-06-27', 'FI_ACCOUNT', '8200.00', '0.00', '108', '100'), ('111', 'Ismael', 'Sciarra', 'ISCIARRA', '515.124.4369', '1987-06-28', 'FI_ACCOUNT', '7700.00', '0.00', '108', '100'), ('112', 'Jose Manuel', 'Urman', 'JMURMAN', '515.124.4469', '1987-06-29', 'FI_ACCOUNT', '7800.00', '0.00', '108', '100'), ('113', 'Luis', 'Popp', 'LPOPP', '515.124.4567', '1987-06-30', 'FI_ACCOUNT', '6900.00', '0.00', '108', '100'), ('114', 'Den', 'Raphaely', 'DRAPHEAL', '515.127.4561', '1987-07-01', 'PU_MAN', '11000.00', '0.00', '100', '30'), ('115', 'Alexander', 'Khoo', 'AKHOO', '515.127.4562', '1987-07-02', 'PU_CLERK', '3100.00', '0.00', '114', '30'), ('116', 'Shelli', 'Baida', 'SBAIDA', '515.127.4563', '1987-07-03', 'PU_CLERK', '2900.00', '0.00', '114', '30'), ('117', 'Sigal', 'Tobias', 'STOBIAS', '515.127.4564', '1987-07-04', 'PU_CLERK', '2800.00', '0.00', '114', '30'), ('118', 'Guy', 'Himuro', 'GHIMURO', '515.127.4565', '1987-07-05', 'PU_CLERK', '2600.00', '0.00', '114', '30'), ('119', 'Karen', 'Colmenares', 'KCOLMENA', '515.127.4566', '1987-07-06', 'PU_CLERK', '2500.00', '0.00', '114', '30'), ('120', 'Matthew', 'Weiss', 'MWEISS', '650.123.1234', '1987-07-07', 'ST_MAN', '8000.00', '0.00', '100', '50'), ('121', 'Adam', 'Fripp', 'AFRIPP', '650.123.2234', '1987-07-08', 'ST_MAN', '8200.00', '0.00', '100', '50'), ('122', 'Payam', 'Kaufling', 'PKAUFLIN', '650.123.3234', '1987-07-09', 'ST_MAN', '7900.00', '0.00', '100', '50'), ('123', 'Shanta', 'Vollman', 'SVOLLMAN', '650.123.4234', '1987-07-10', 'ST_MAN', '6500.00', '0.00', '100', '50'), ('124', 'Kevin', 'Mourgos', 'KMOURGOS', '650.123.5234', '1987-07-11', 'ST_MAN', '5800.00', '0.00', '100', '50'), ('125', 'Julia', 'Nayer', 'JNAYER', '650.124.1214', '1987-07-12', 'ST_CLERK', '3200.00', '0.00', '120', '50'), ('126', 'Irene', 'Mikkilineni', 'IMIKKILI', '650.124.1224', '1987-07-13', 'ST_CLERK', '2700.00', '0.00', '120', '50'), ('127', 'James', 'Landry', 'JLANDRY', '650.124.1334', '1987-07-14', 'ST_CLERK', '2400.00', '0.00', '120', '50'), ('128', 'Steven', 'Markle', 'SMARKLE', '650.124.1434', '1987-07-15', 'ST_CLERK', '2200.00', '0.00', '120', '50'), ('129', 'Laura', 'Bissot', 'LBISSOT', '650.124.5234', '1987-07-16', 'ST_CLERK', '3300.00', '0.00', '121', '50'), ('130', 'Mozhe', 'Atkinson', 'MATKINSO', '650.124.6234', '1987-07-17', 'ST_CLERK', '2800.00', '0.00', '121', '50'), ('131', 'James', 'Marlow', 'JAMRLOW', '650.124.7234', '1987-07-18', 'ST_CLERK', '2500.00', '0.00', '121', '50'), ('132', 'TJ', 'Olson', 'TJOLSON', '650.124.8234', '1987-07-19', 'ST_CLERK', '2100.00', '0.00', '121', '50'), ('133', 'Jason', 'Mallin', 'JMALLIN', '650.127.1934', '1987-07-20', 'ST_CLERK', '3300.00', '0.00', '122', '50'), ('134', 'Michael', 'Rogers', 'MROGERS', '650.127.1834', '1987-07-21', 'ST_CLERK', '2900.00', '0.00', '122', '50'), ('135', 'Ki', 'Gee', 'KGEE', '650.127.1734', '1987-07-22', 'ST_CLERK', '2400.00', '0.00', '122', '50'), ('136', 'Hazel', 'Philtanker', 'HPHILTAN', '650.127.1634', '1987-07-23', 'ST_CLERK', '2200.00', '0.00', '122', '50'), ('137', 'Renske', 'Ladwig', 'RLADWIG', '650.121.1234', '1987-07-24', 'ST_CLERK', '3600.00', '0.00', '123', '50'), ('138', 'Stephen', 'Stiles', 'SSTILES', '650.121.2034', '1987-07-25', 'ST_CLERK', '3200.00', '0.00', '123', '50'), ('139', 'John', 'Seo', 'JSEO', '650.121.2019', '1987-07-26', 'ST_CLERK', '2700.00', '0.00', '123', '50'), ('140', 'Joshua', 'Patel', 'JPATEL', '650.121.1834', '1987-07-27', 'ST_CLERK', '2500.00', '0.00', '123', '50'), ('141', 'Trenna', 'Rajs', 'TRAJS', '650.121.8009', '1987-07-28', 'ST_CLERK', '3500.00', '0.00', '124', '50'), ('142', 'Curtis', 'Davies', 'CDAVIES', '650.121.2994', '1987-07-29', 'ST_CLERK', '3100.00', '0.00', '124', '50'), ('143', 'Randall', 'Matos', 'RMATOS', '650.121.2874', '1987-07-30', 'ST_CLERK', '2600.00', '0.00', '124', '50'), ('144', 'Peter', 'Vargas', 'PVARGAS', '650.121.2004', '1987-07-31', 'ST_CLERK', '2500.00', '0.00', '124', '50'), ('145', 'John', 'Russell', 'JRUSSEL', '011.44.1344.429268', '1987-08-01', 'SA_MAN', '14000.00', '0.40', '100', '80'), ('146', 'Karen', 'Partners', 'KPARTNER', '011.44.1344.467268', '1987-08-02', 'SA_MAN', '13500.00', '0.30', '100', '80'), ('147', 'Alberto', 'Errazuriz', 'AERRAZUR', '011.44.1344.429278', '1987-08-03', 'SA_MAN', '12000.00', '0.30', '100', '80'), ('148', 'Gerald', 'Cambrault', 'GCAMBRAU', '011.44.1344.619268', '1987-08-04', 'SA_MAN', '11000.00', '0.30', '100', '80'), ('149', 'Eleni', 'Zlotkey', 'EZLOTKEY', '011.44.1344.429018', '1987-08-05', 'SA_MAN', '10500.00', '0.20', '100', '80'), ('150', 'Peter', 'Tucker', 'PTUCKER', '011.44.1344.129268', '1987-08-06', 'SA_REP', '10000.00', '0.30', '145', '80'), ('151', 'David', 'Bernstein', 'DBERNSTE', '011.44.1344.345268', '1987-08-07', 'SA_REP', '9500.00', '0.25', '145', '80'), ('152', 'Peter', 'Hall', 'PHALL', '011.44.1344.478968', '1987-08-08', 'SA_REP', '9000.00', '0.25', '145', '80'), ('153', 'Christopher', 'Olsen', 'COLSEN', '011.44.1344.498718', '1987-08-09', 'SA_REP', '8000.00', '0.20', '145', '80'), ('154', 'Nanette', 'Cambrault', 'NCAMBRAU', '011.44.1344.987668', '1987-08-10', 'SA_REP', '7500.00', '0.20', '145', '80'), ('155', 'Oliver', 'Tuvault', 'OTUVAULT', '011.44.1344.486508', '1987-08-11', 'SA_REP', '7000.00', '0.15', '145', '80'), ('156', 'Janette', 'King', 'JKING', '011.44.1345.429268', '1987-08-12', 'SA_REP', '10000.00', '0.35', '146', '80'), ('157', 'Patrick', 'Sully', 'PSULLY', '011.44.1345.929268', '1987-08-13', 'SA_REP', '9500.00', '0.35', '146', '80'), ('158', 'Allan', 'McEwen', 'AMCEWEN', '011.44.1345.829268', '1987-08-14', 'SA_REP', '9000.00', '0.35', '146', '80'), ('159', 'Lindsey', 'Smith', 'LSMITH', '011.44.1345.729268', '1987-08-15', 'SA_REP', '8000.00', '0.30', '146', '80'), ('160', 'Louise', 'Doran', 'LDORAN', '011.44.1345.629268', '1987-08-16', 'SA_REP', '7500.00', '0.30', '146', '80'), ('161', 'Sarath', 'Sewall', 'SSEWALL', '011.44.1345.529268', '1987-08-17', 'SA_REP', '7000.00', '0.25', '146', '80'), ('162', 'Clara', 'Vishney', 'CVISHNEY', '011.44.1346.129268', '1987-08-18', 'SA_REP', '10500.00', '0.25', '147', '80'), ('163', 'Danielle', 'Greene', 'DGREENE', '011.44.1346.229268', '1987-08-19', 'SA_REP', '9500.00', '0.15', '147', '80'), ('164', 'Mattea', 'Marvins', 'MMARVINS', '011.44.1346.329268', '1987-08-20', 'SA_REP', '7200.00', '0.10', '147', '80'), ('165', 'David', 'Lee', 'DLEE', '011.44.1346.529268', '1987-08-21', 'SA_REP', '6800.00', '0.10', '147', '80'), ('166', 'Sundar', 'Ande', 'SANDE', '011.44.1346.629268', '1987-08-22', 'SA_REP', '6400.00', '0.10', '147', '80'), ('167', 'Amit', 'Banda', 'ABANDA', '011.44.1346.729268', '1987-08-23', 'SA_REP', '6200.00', '0.10', '147', '80'), ('168', 'Lisa', 'Ozer', 'LOZER', '011.44.1343.929268', '1987-08-24', 'SA_REP', '11500.00', '0.25', '148', '80'), ('169', 'Harrison', 'Bloom', 'HBLOOM', '011.44.1343.829268', '1987-08-25', 'SA_REP', '10000.00', '0.20', '148', '80'), ('170', 'Tayler', 'Fox', 'TFOX', '011.44.1343.729268', '1987-08-26', 'SA_REP', '9600.00', '0.20', '148', '80'), ('171', 'William', 'Smith', 'WSMITH', '011.44.1343.629268', '1987-08-27', 'SA_REP', '7400.00', '0.15', '148', '80'), ('172', 'Elizabeth', 'Bates', 'EBATES', '011.44.1343.529268', '1987-08-28', 'SA_REP', '7300.00', '0.15', '148', '80'), ('173', 'Sundita', 'Kumar', 'SKUMAR', '011.44.1343.329268', '1987-08-29', 'SA_REP', '6100.00', '0.10', '148', '80'), ('174', 'Ellen', 'Abel', 'EABEL', '011.44.1644.429267', '1987-08-30', 'SA_REP', '11000.00', '0.30', '149', '80'), ('175', 'Alyssa', 'Hutton', 'AHUTTON', '011.44.1644.429266', '1987-08-31', 'SA_REP', '8800.00', '0.25', '149', '80'), ('176', 'Jonathon', 'Taylor', 'JTAYLOR', '011.44.1644.429265', '1987-09-01', 'SA_REP', '8600.00', '0.20', '149', '80'), ('177', 'Jack', 'Livingston', 'JLIVINGS', '011.44.1644.429264', '1987-09-02', 'SA_REP', '8400.00', '0.20', '149', '80'), ('178', 'Kimberely', 'Grant', 'KGRANT', '011.44.1644.429263', '1987-09-03', 'SA_REP', '7000.00', '0.15', '149', '0'), ('179', 'Charles', 'Johnson', 'CJOHNSON', '011.44.1644.429262', '1987-09-04', 'SA_REP', '6200.00', '0.10', '149', '80'), ('180', 'Winston', 'Taylor', 'WTAYLOR', '650.507.9876', '1987-09-05', 'SH_CLERK', '3200.00', '0.00', '120', '50'), ('181', 'Jean', 'Fleaur', 'JFLEAUR', '650.507.9877', '1987-09-06', 'SH_CLERK', '3100.00', '0.00', '120', '50'), ('182', 'Martha', 'Sullivan', 'MSULLIVA', '650.507.9878', '1987-09-07', 'SH_CLERK', '2500.00', '0.00', '120', '50'), ('183', 'Girard', 'Geoni', 'GGEONI', '650.507.9879', '1987-09-08', 'SH_CLERK', '2800.00', '0.00', '120', '50'), ('184', 'Nandita', 'Sarchand', 'NSARCHAN', '650.509.1876', '1987-09-09', 'SH_CLERK', '4200.00', '0.00', '121', '50'), ('185', 'Alexis', 'Bull', 'ABULL', '650.509.2876', '1987-09-10', 'SH_CLERK', '4100.00', '0.00', '121', '50'), ('186', 'Julia', 'Dellinger', 'JDELLING', '650.509.3876', '1987-09-11', 'SH_CLERK', '3400.00', '0.00', '121', '50'), ('187', 'Anthony', 'Cabrio', 'ACABRIO', '650.509.4876', '1987-09-12', 'SH_CLERK', '3000.00', '0.00', '121', '50'), ('188', 'Kelly', 'Chung', 'KCHUNG', '650.505.1876', '1987-09-13', 'SH_CLERK', '3800.00', '0.00', '122', '50'), ('189', 'Jennifer', 'Dilly', 'JDILLY', '650.505.2876', '1987-09-14', 'SH_CLERK', '3600.00', '0.00', '122', '50'), ('190', 'Timothy', 'Gates', 'TGATES', '650.505.3876', '1987-09-15', 'SH_CLERK', '2900.00', '0.00', '122', '50'), ('191', 'Randall', 'Perkins', 'RPERKINS', '650.505.4876', '1987-09-16', 'SH_CLERK', '2500.00', '0.00', '122', '50'), ('192', 'Sarah', 'Bell', 'SBELL', '650.501.1876', '1987-09-17', 'SH_CLERK', '4000.00', '0.00', '123', '50'), ('193', 'Britney', 'Everett', 'BEVERETT', '650.501.2876', '1987-09-18', 'SH_CLERK', '3900.00', '0.00', '123', '50'), ('194', 'Samuel', 'McCain', 'SMCCAIN', '650.501.3876', '1987-09-19', 'SH_CLERK', '3200.00', '0.00', '123', '50'), ('195', 'Vance', 'Jones', 'VJONES', '650.501.4876', '1987-09-20', 'SH_CLERK', '2800.00', '0.00', '123', '50'), ('196', 'Alana', 'Walsh', 'AWALSH', '650.507.9811', '1987-09-21', 'SH_CLERK', '3100.00', '0.00', '124', '50'), ('197', 'Kevin', 'Feeney', 'KFEENEY', '650.507.9822', '1987-09-22', 'SH_CLERK', '3000.00', '0.00', '124', '50'), ('198', 'Donald', 'OConnell', 'DOCONNEL', '650.507.9833', '1987-09-23', 'SH_CLERK', '2600.00', '0.00', '124', '50'), ('199', 'Douglas', 'Grant', 'DGRANT', '650.507.9844', '1987-09-24', 'SH_CLERK', '2600.00', '0.00', '124', '50'), ('200', 'Jennifer', 'Whalen', 'JWHALEN', '515.123.4444', '1987-09-25', 'AD_ASST', '4400.00', '0.00', '101', '10'), ('201', 'Michael', 'Hartstein', 'MHARTSTE', '515.123.5555', '1987-09-26', 'MK_MAN', '13000.00', '0.00', '100', '20'), ('202', 'Pat', 'Fay', 'PFAY', '603.123.6666', '1987-09-27', 'MK_REP', '6000.00', '0.00', '201', '20'), ('203', 'Susan', 'Mavris', 'SMAVRIS', '515.123.7777', '1987-09-28', 'HR_REP', '6500.00', '0.00', '101', '40'), ('204', 'Hermann', 'Baer', 'HBAER', '515.123.8888', '1987-09-29', 'PR_REP', '10000.00', '0.00', '101', '70'), ('205', 'Shelley', 'Higgins', 'SHIGGINS', '515.123.8080', '1987-09-30', 'AC_MGR', '12000.00', '0.00', '101', '110'), ('206', 'William', 'Gietz', 'WGIETZ', '515.123.8181', '1987-10-01', 'AC_ACCOUNT', '8300.00', '0.00', '205', '110');  -- --------------------------------------------------------  -- -- Table structure for table `job_history` --  CREATE TABLE IF NOT EXISTS `job_history` (   `EMPLOYEE_ID` decimal(6,0) NOT NULL,   `START_DATE` date NOT NULL,   `END_DATE` date NOT NULL,   `JOB_ID` varchar(10) NOT NULL,   `DEPARTMENT_ID` decimal(4,0) DEFAULT NULL,   PRIMARY KEY (`EMPLOYEE_ID`,`START_DATE`),   FOREIGN KEY (`EMPLOYEE_ID`) REFERENCES employees(`EMPLOYEE_ID`),   FOREIGN KEY (`DEPARTMENT_ID`) REFERENCES departments(`DEPARTMENT_ID`),   FOREIGN KEY (`JOB_ID`) REFERENCES jobs(`JOB_ID`) );  -- -- Dumping data for table `job_history` --  INSERT INTO `job_history` (`EMPLOYEE_ID`, `START_DATE`, `END_DATE`, `JOB_ID`, `DEPARTMENT_ID`) VALUES ('102', '1993-01-13', '1998-07-24', 'IT_PROG', '60'), ('101', '1989-09-21', '1993-10-27', 'AC_ACCOUNT', '110'), ('101', '1993-10-28', '1997-03-15', 'AC_MGR', '110'), ('201', '1996-02-17', '1999-12-19', 'MK_REP', '20'), ('114', '1998-03-24', '1999-12-31', 'ST_CLERK', '50'), ('122', '1999-01-01', '1999-12-31', 'ST_CLERK', '50'), ('200', '1987-09-17', '1993-06-17', 'AD_ASST', '90'), ('176', '1998-03-24', '1998-12-31', 'SA_REP', '80'), ('176', '1999-01-01', '1999-12-31', 'SA_MAN', '80'), ('200', '1994-07-01', '1998-12-31', 'AC_ACCOUNT', '90'), ('0', '0000-00-00', '0000-00-00', '', '0');  -- --------------------------------------------------------  -- -- Table structure for table `jobs` --   -- -- Table structure for table `locations` --  CREATE TABLE IF NOT EXISTS `locations` (   `LOCATION_ID` decimal(4,0) NOT NULL DEFAULT '0',   `STREET_ADDRESS` varchar(40) DEFAULT NULL,   `POSTAL_CODE` varchar(12) DEFAULT NULL,   `CITY` varchar(30) NOT NULL,   `STATE_PROVINCE` varchar(25) DEFAULT NULL,   `COUNTRY_ID` varchar(2) DEFAULT NULL,   PRIMARY KEY (`LOCATION_ID`),   FOREIGN KEY (`COUNTRY_ID`) REFERENCES countries(`COUNTRY_ID`) );  -- -- Dumping data for table `locations` --  INSERT INTO `locations` (`LOCATION_ID`, `STREET_ADDRESS`, `POSTAL_CODE`, `CITY`, `STATE_PROVINCE`, `COUNTRY_ID`) VALUES ('1000', '1297 Via Cola di Rie', '989', 'Roma', '', 'IT'), ('1100', '93091 Calle della Testa', '10934', 'Venice', '', 'IT'), ('1200', '2017 Shinjuku-ku', '1689', 'Tokyo', 'Tokyo Prefecture', 'JP'), ('1300', '9450 Kamiya-cho', '6823', 'Hiroshima', '', 'JP'), ('1400', '2014 Jabberwocky Rd', '26192', 'Southlake', 'Texas', 'US'), ('1500', '2011 Interiors Blvd', '99236', 'South San Francisco', 'California', 'US'), ('1600', '2007 Zagora St', '50090', 'South Brunswick', 'New Jersey', 'US'), ('1700', '2004 Charade Rd', '98199', 'Seattle', 'Washington', 'US'), ('1800', '147 Spadina Ave', 'M5V 2L7', 'Toronto', 'Ontario', 'CA'), ('1900', '6092 Boxwood St', 'YSW 9T2', 'Whitehorse', 'Yukon', 'CA'), ('2000', '40-5-12 Laogianggen', '190518', 'Beijing', '', 'CN'), ('2100', '1298 Vileparle (E)', '490231', 'Bombay', 'Maharashtra', 'IN'), ('2200', '12-98 Victoria Street', '2901', 'Sydney', 'New South Wales', 'AU'), ('2300', '198 Clementi North', '540198', 'Singapore', '', 'SG'), ('2400', '8204 Arthur St', '', 'London', '', 'UK'), ('2500', '""Magdalen Centre', ' The Oxford ', 'OX9 9ZB', 'Oxford', 'Ox'), ('2600', '9702 Chester Road', '9629850293', 'Stretford', 'Manchester', 'UK'), ('2700', 'Schwanthalerstr. 7031', '80925', 'Munich', 'Bavaria', 'DE'), ('2800', 'Rua Frei Caneca 1360', '01307-002', 'Sao Paulo', 'Sao Paulo', 'BR'), ('2900', '20 Rue des Corps-Saints', '1730', 'Geneva', 'Geneve', 'CH'), ('3000', 'Murtenstrasse 921', '3095', 'Bern', 'BE', 'CH'), ('3100', 'Pieter Breughelstraat 837', '3029SK', 'Utrecht', 'Utrecht', 'NL'), ('3200', 'Mariano Escobedo 9991', '11932', 'Mexico City', '""Distrito Federal', '""');  -- --------------------------------------------------------  -- -- Table structure for table `regions` --   /*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */; /*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */; /*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;",extra
158,1179,geo,"SELECT city_name FROM city WHERE population  >  150000 AND state_name IN ( SELECT traverse FROM river WHERE LENGTH  >  750 AND river_name  =  ""mississippi"" );",what are the major cities in states through which the mississippi runs,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );",extra
305,1612,scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  ""Parsing"" AND t3.year  =  2012 AND t4.venuename  =  ""acl"";",how many Parsing papers did acl 2012 have ?,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); ",extra
351,1715,scholar,"SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname LIKE ""ImageNet"";",How many papers written on ImageNet ?,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); ",extra
241,1486,scholar,"SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  ""syntactic parsing"" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",who has the most publications in syntactic parsing ?,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); ",extra
852,2967,flight_1,"SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1",What is the salaray and name of the employee that is certified to fly the most planes?,"-- drop table flight cascade constraints; -- drop table aircraft cascade constraints; -- drop table employee cascade constraints; -- drop table certificate cascade constraints;  create table flight( 	flno number(4,0) primary key, 	origin varchar2(20), 	destination varchar2(20), 	distance number(6,0), 	departure_date date, 	arrival_date date, 	price number(7,2),     aid number(9,0),     foreign key(""aid"") references `aircraft`(""aid""));  create table aircraft( 	aid number(9,0) primary key, 	name varchar2(30), 	distance number(6,0));  create table employee( 	eid number(9,0) primary key, 	name varchar2(30), 	salary number(10,2));  create table certificate( 	eid number(9,0), 	aid number(9,0), 	primary key(eid,aid), 	foreign key(""eid"") references `employee`(""eid""), 	foreign key(""aid"") references `aircraft`(""aid""));   ",extra
724,2432,imdb,"SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.name  =  ""Gabriele Ferzetti"" ORDER BY t3.release_year DESC LIMIT 1;","Find the latest movie which "" Gabriele Ferzetti "" acted in","PRAGMA foreign_keys = ON; CREATE TABLE ""actor"" ( ""aid"" int, ""gender"" text, ""name"" text, ""nationality"" text, ""birth_city"" text, ""birth_year"" int, primary key(""aid"") );   CREATE TABLE ""copyright"" ( ""id"" int, ""msid"" int, ""cid"" int, primary key(""id"") ); CREATE TABLE ""cast"" ( ""id"" int, ""msid"" int, ""aid"" int, ""role"" int, primary key(""id""), foreign key(""aid"") references `actor`(""aid""), foreign key(""msid"") references `copyright`(""msid"") );  CREATE TABLE ""genre"" ( ""gid"" int, ""genre"" text, primary key(""gid"") );  CREATE TABLE ""classification"" ( ""id"" int, ""msid"" int, ""gid"" int, primary key(""id""), foreign key(""gid"") references `genre`(""gid""), foreign key(""msid"") references `copyright`(""msid"") );  CREATE TABLE ""company"" ( ""id"" int, ""name"" text, ""country_code"" text, primary key(""id"") );   CREATE TABLE ""director"" ( ""did"" int, ""gender"" text, ""name"" text, ""nationality"" text, ""birth_city"" text, ""birth_year"" int, primary key(""did"") );  CREATE TABLE ""producer"" ( ""pid"" int, ""gender"" text, ""name"" text, ""nationality"" text, ""birth_city"" text, ""birth_year"" int, primary key(""pid"") );  CREATE TABLE ""directed_by"" ( ""id"" int, ""msid"" int, ""did"" int, primary key(""id""), foreign key(""msid"") references `copyright`(""msid""), foreign key(""did"") references `director`(""did"") );  CREATE TABLE ""keyword"" ( ""id"" int, ""keyword"" text, primary key(""id"") );  CREATE TABLE ""made_by"" ( ""id"" int, ""msid"" int, ""pid"" int, primary key(""id""), foreign key(""msid"") references `copyright`(""msid""), foreign key(""pid"") references `producer`(""pid"") );  CREATE TABLE ""movie"" ( ""mid"" int, ""title"" text, ""release_year"" int, ""title_aka"" text, ""budget"" text, primary key(""mid"") ); CREATE TABLE ""tags"" ( ""id"" int, ""msid"" int, ""kid"" int, primary key(""id""), foreign key(""msid"") references `copyright`(""msid""), foreign key(""kid"") references `keyword`(""kid"") ); CREATE TABLE ""tv_series"" ( ""sid"" int, ""title"" text, ""release_year"" int, ""num_of_seasons"" int, ""num_of_episodes"" int, ""title_aka"" text, ""budget"" text, primary key(""sid"") ); CREATE TABLE ""writer"" ( ""wid"" int, ""gender"" text, ""name"" int, ""nationality"" int, ""num_of_episodes"" int, ""birth_city"" text, ""birth_year"" int, primary key(""wid"") ); CREATE TABLE ""written_by"" ( ""id"" int, ""msid"" int, ""wid"" int, foreign key(""msid"") references `copyright`(""msid""), foreign key(""wid"") references `writer`(""wid"") );",extra
1468,7350,products_gen_characteristics,"SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id","What are the names, details and data types of the characteristics which are never used by any product?","PRAGMA foreign_keys = ON; CREATE TABLE `Ref_Characteristic_Types` ( `characteristic_type_code` VARCHAR(15) PRIMARY KEY, `characteristic_type_description` VARCHAR(80) ); CREATE TABLE `Ref_Colors` ( `color_code` VARCHAR(15) PRIMARY KEY, `color_description` VARCHAR(80) ); CREATE TABLE `Ref_Product_Categories` ( `product_category_code` VARCHAR(15) PRIMARY KEY, `product_category_description` VARCHAR(80), `unit_of_measure` VARCHAR(20) ); CREATE TABLE `Characteristics` ( `characteristic_id` INTEGER PRIMARY KEY, `characteristic_type_code` VARCHAR(15) NOT NULL, `characteristic_data_type` VARCHAR(10), `characteristic_name` VARCHAR(80), `other_characteristic_details` VARCHAR(255), FOREIGN KEY (`characteristic_type_code` ) REFERENCES `Ref_Characteristic_Types`(`characteristic_type_code` ) ); CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `color_code` VARCHAR(15) NOT NULL, `product_category_code` VARCHAR(15) NOT NULL, `product_name` VARCHAR(80), `typical_buying_price` VARCHAR(20), `typical_selling_price` VARCHAR(20), `product_description` VARCHAR(255), `other_product_details` VARCHAR(255), FOREIGN KEY (`product_category_code` ) REFERENCES `Ref_Product_Categories`(`product_category_code` ),FOREIGN KEY (`color_code` ) REFERENCES `Ref_Colors`(`color_code` ) ); CREATE TABLE `Product_Characteristics` ( `product_id` INTEGER NOT NULL, `characteristic_id` INTEGER NOT NULL, `product_characteristic_value` VARCHAR(50), FOREIGN KEY (`characteristic_id` ) REFERENCES `Characteristics`(`characteristic_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) ); ",extra
1580,7896,customers_and_addresses,SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Americano',What are the names of customers who have purchased both products Latte and Americano?,"PRAGMA foreign_keys = ON;  CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `address_content` VARCHAR(80), `city` VARCHAR(50), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(50), `country` VARCHAR(50), `other_address_details` VARCHAR(255) );  CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_details` VARCHAR(255) ); CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `payment_method` VARCHAR(15) NOT NULL, `customer_name` VARCHAR(80), `date_became_customer` DATETIME, `other_customer_details` VARCHAR(255) ); CREATE TABLE `Customer_Addresses` ( `customer_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_address_from` DATETIME NOT NULL, `address_type` VARCHAR(15) NOT NULL, `date_address_to` DATETIME, FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) ); CREATE TABLE `Customer_Contact_Channels` ( `customer_id` INTEGER NOT NULL, `channel_code` VARCHAR(15) NOT NULL, `active_from_date` DATETIME NOT NULL, `active_to_date` DATETIME, `contact_number` VARCHAR(50) NOT NULL, FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) ); CREATE TABLE `Customer_Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `order_status` VARCHAR(15) NOT NULL, `order_date` DATETIME, `order_details` VARCHAR(255), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) );  CREATE TABLE `Order_Items` ( `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, `order_quantity` VARCHAR(15), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ), FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ) ); ",extra
703,2374,imdb,"SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN directed_by AS t2 ON t4.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  ""Taraneh Alidoosti"" AND t3.name  =  ""Asghar Farhadi"";","List all the movies directed by "" Asghar Farhadi "" in which "" Taraneh Alidoosti "" played","PRAGMA foreign_keys = ON; CREATE TABLE ""actor"" ( ""aid"" int, ""gender"" text, ""name"" text, ""nationality"" text, ""birth_city"" text, ""birth_year"" int, primary key(""aid"") );   CREATE TABLE ""copyright"" ( ""id"" int, ""msid"" int, ""cid"" int, primary key(""id"") ); CREATE TABLE ""cast"" ( ""id"" int, ""msid"" int, ""aid"" int, ""role"" int, primary key(""id""), foreign key(""aid"") references `actor`(""aid""), foreign key(""msid"") references `copyright`(""msid"") );  CREATE TABLE ""genre"" ( ""gid"" int, ""genre"" text, primary key(""gid"") );  CREATE TABLE ""classification"" ( ""id"" int, ""msid"" int, ""gid"" int, primary key(""id""), foreign key(""gid"") references `genre`(""gid""), foreign key(""msid"") references `copyright`(""msid"") );  CREATE TABLE ""company"" ( ""id"" int, ""name"" text, ""country_code"" text, primary key(""id"") );   CREATE TABLE ""director"" ( ""did"" int, ""gender"" text, ""name"" text, ""nationality"" text, ""birth_city"" text, ""birth_year"" int, primary key(""did"") );  CREATE TABLE ""producer"" ( ""pid"" int, ""gender"" text, ""name"" text, ""nationality"" text, ""birth_city"" text, ""birth_year"" int, primary key(""pid"") );  CREATE TABLE ""directed_by"" ( ""id"" int, ""msid"" int, ""did"" int, primary key(""id""), foreign key(""msid"") references `copyright`(""msid""), foreign key(""did"") references `director`(""did"") );  CREATE TABLE ""keyword"" ( ""id"" int, ""keyword"" text, primary key(""id"") );  CREATE TABLE ""made_by"" ( ""id"" int, ""msid"" int, ""pid"" int, primary key(""id""), foreign key(""msid"") references `copyright`(""msid""), foreign key(""pid"") references `producer`(""pid"") );  CREATE TABLE ""movie"" ( ""mid"" int, ""title"" text, ""release_year"" int, ""title_aka"" text, ""budget"" text, primary key(""mid"") ); CREATE TABLE ""tags"" ( ""id"" int, ""msid"" int, ""kid"" int, primary key(""id""), foreign key(""msid"") references `copyright`(""msid""), foreign key(""kid"") references `keyword`(""kid"") ); CREATE TABLE ""tv_series"" ( ""sid"" int, ""title"" text, ""release_year"" int, ""num_of_seasons"" int, ""num_of_episodes"" int, ""title_aka"" text, ""budget"" text, primary key(""sid"") ); CREATE TABLE ""writer"" ( ""wid"" int, ""gender"" text, ""name"" int, ""nationality"" int, ""num_of_episodes"" int, ""birth_city"" text, ""birth_year"" int, primary key(""wid"") ); CREATE TABLE ""written_by"" ( ""id"" int, ""msid"" int, ""wid"" int, foreign key(""msid"") references `copyright`(""msid""), foreign key(""wid"") references `writer`(""wid"") );",extra
1367,6584,department_store,"SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  ""Sales Person"" EXCEPT SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  ""Clerical Staff""","What are the names and genders of staff who have held the title Sales Person, but never Clerical Staff?","PRAGMA foreign_keys = ON; CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `address_details` VARCHAR(255) );   INSERT INTO Addresses (`address_id`, `address_details`) VALUES (1, '28481 Crist Circle East Burdettestad, IA 21232'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (2, '0292 Mitchel Pike Port Abefurt, IA 84402-4249'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (3, '4062 Mante Place West Lindsey, DE 76199-8015'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (4, '99666 Julie Junction Marvinburgh, OH 16085-1623'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (5, '195 Mara Rue Jenkinsmouth, OK 22345'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (6, '11784 Stehr Road Port Isaac, NV 61159'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (7, '69482 Renner Ville Suite 653 Langworthborough, OH 95195'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (8, '36594 O''Keefe Lock New Cali, RI 42319'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (9, '7181 Wuckert Port Apt. 571 Lake Zariaburgh, IL 98085'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (10, '92594 Marvin Trafficway Pourosfurt, IA 98649'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (11, '0258 Kessler Mountains Suite 688 Mooreside, ME 41586-5022'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (12, '69275 Mose Drive Wilkinsonstad, CO 79055-7622'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (13, '8207 Morissette Lakes East Rheaview, ID 47493'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (14, '145 Alice Corners Willmsport, NV 36680'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (15, '521 Molly Harbors Apt. 567 Reingerland, HI 97099-1005');  CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `staff_gender` VARCHAR(1), `staff_name` VARCHAR(80) );  CREATE TABLE `Suppliers` ( `supplier_id` INTEGER PRIMARY KEY, `supplier_name` VARCHAR(80), `supplier_phone` VARCHAR(80) );  CREATE TABLE `Department_Store_Chain` ( `dept_store_chain_id` INTEGER PRIMARY KEY, `dept_store_chain_name` VARCHAR(80) );  CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `payment_method_code` VARCHAR(10) NOT NULL, `customer_code` VARCHAR(20), `customer_name` VARCHAR(80), `customer_address` VARCHAR(255), `customer_phone` VARCHAR(80), `customer_email` VARCHAR(80) ); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (1, 'Credit Card', '401', 'Ahmed', '75099 Tremblay Port Apt. 163 South Norrisland, SC 80546', '254-072-4068x33935', 'margarett.vonrueden@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (2, 'Credit Card', '665', 'Chauncey', '8408 Lindsay Court East Dasiabury, IL 72656-3552', '+41(8)1897032009', 'stiedemann.sigrid@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (3, 'Direct Debit', '844', 'Lukas', '7162 Rodolfo Knoll Apt. 502 Lake Annalise, TN 35791-8871', '197-417-3557', 'joelle.monahan@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (4, 'Direct Debit', '662', 'Lexus', '9581 Will Flat Suite 272 East Cathryn, WY 30751-4404', '+08(3)8056580281', 'gbrekke@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (5, 'Credit Card', '848', 'Tara', '5065 Mraz Fields Apt. 041 East Chris, NH 41624', '1-064-498-6609x051', 'nicholas44@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (6, 'Credit Card', '916', 'Jon', '841 Goyette Unions South Dionbury, NC 62021', '(443)013-3112x528', 'cconroy@example.net'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (7, 'Credit Card', '172', 'Cristobal', '8327 Christiansen Lakes Suite 409 Schneiderland, IA 93624', '877-150-8674x63517', 'shawna.cummerata@example.net'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (8, 'Direct Debit', '927', 'Adah', '5049 Hand Land Coymouth, IL 97300-7731', '1-695-364-7586x59256', 'kathlyn24@example.org'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (9, 'Credit Card', '808', 'Yasmeen', '3558 Witting Meadow Apt. 483 Lake Moriahbury, OH 91556-2122', '587.398.2400x31176', 'ludwig54@example.net'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (10, 'Credit Card', '887', 'Karson', '7308 Joan Lake Suite 346 Lizethtown, DE 56522', '857-844-9339x40140', 'moriah91@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (11, 'Direct Debit', '611', 'Cordell', '362 Fisher Forge Apt. 900 New Mckenna, CA 98525-5674', '(730)934-8249', 'qstokes@example.org'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (12, 'Credit Card', '182', 'Darron', '84445 Elinor Glens Port Zita, SD 39410', '117.822.3577', 'gwisozk@example.net'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (13, 'Credit Card', '589', 'Kenya', '338 Floy Mountains Suite 589 Yesseniaville, TN 60847', '08023680831', 'maxime86@example.net'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (14, 'Direct Debit', '240', 'Abbie', '983 Elinore Passage Darrionborough, SC 53915-0479', '07594320656', 'celine.bogan@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (15, 'Credit Card', '980', 'Lyric', '649 Ocie Lights Wyatttown, UT 12697', '1-472-036-0434', 'schultz.arnoldo@example.net');   CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_type_code` VARCHAR(10) NOT NULL, `product_name` VARCHAR(80), `product_price` DECIMAL(19,4) ); CREATE TABLE `Supplier_Addresses` ( `supplier_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_from` DATETIME NOT NULL, `date_to` DATETIME, PRIMARY KEY (`supplier_id`, `address_id`), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`supplier_id` ) REFERENCES `Suppliers`(`supplier_id` ) );  CREATE TABLE `Customer_Addresses` ( `customer_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_from` DATETIME NOT NULL, `date_to` DATETIME, PRIMARY KEY (`customer_id`, `address_id`), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) );   CREATE TABLE `Customer_Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `order_status_code` VARCHAR(10) NOT NULL, `order_date` DATETIME NOT NULL, FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) );  CREATE TABLE `Department_Stores` ( `dept_store_id` INTEGER PRIMARY KEY, `dept_store_chain_id` INTEGER, `store_name` VARCHAR(80), `store_address` VARCHAR(255), `store_phone` VARCHAR(80), `store_email` VARCHAR(80), FOREIGN KEY (`dept_store_chain_id` ) REFERENCES `Department_Store_Chain`(`dept_store_chain_id` ) );   INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (1, 1, 'store_name', '01290 Jeremie Parkway Suite 753 North Arielle, MS 51249', '(948)944-5099x2027', 'bmaggio@example.com'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (2, 3, 'store_name', '082 Purdy Expressway O''Connellshire, IL 31732', '877-917-5029', 'larissa10@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (3, 4, 'store_name', '994 Travis Plains North Wadeton, WV 27575-3951', '1-216-312-0375', 'alexandro.mcclure@example.net'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (4, 2, 'store_name', '93472 Mayert Shore Apt. 360 Mitchellton, TN 84209', '670-466-6367', 'bryon24@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (5, 3, 'store_name', '88112 Parisian Lights Sporermouth, MN 25962', '01399327266', 'creola23@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (6, 4, 'store_name', '49708 Marcella Valleys Suite 181 Ninamouth, WA 86667', '1-859-843-1957', 'jerod.reynolds@example.net'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (7, 4, 'store_name', '41924 Alfredo Cliff New Eviestad, NY 17573', '1-109-872-9142x77078', 'ihamill@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (8, 4, 'store_name', '7081 Shanna Cape West Zacheryshire, NC 17408', '+67(5)4983519062', 'casper.adolfo@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (9, 4, 'store_name', '5288 Kaia Street Devonton, NJ 61782-9006', '(723)503-7086x356', 'selmer.stiedemann@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (10, 3, 'store_name', '00578 Lisa Gateway Suite 476 Strosinville, VA 03998-3292', '07126036440', 'luisa57@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (11, 2, 'store_name', '34894 Everett Road South Jeremiehaven, GA 08730', '611-037-9309', 'vonrueden.vern@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (12, 4, 'store_name', '2676 Cruickshank Gardens North Ginahaven, CT 85046', '(626)763-7031', 'freda.toy@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (13, 2, 'store_name', '29297 West Road Suite 210 West Dulceside, UT 58085-8998', '1-764-126-7567x0795', 'katlynn62@example.com'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (14, 1, 'store_name', '16650 Lysanne River Apt. 281 North Garettton, AL 84756-4375', '319.331.3397', 'mohr.elwin@example.net'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (15, 3, 'store_name', '82470 Hansen Squares Suite 190 Wehnermouth, NC 76791', '(587)993-3604x3077', 'kelly30@example.com');   CREATE TABLE `Departments` ( `department_id` INTEGER PRIMARY KEY, `dept_store_id` INTEGER NOT NULL, `department_name` VARCHAR(80), FOREIGN KEY (`dept_store_id` ) REFERENCES `Department_Stores`(`dept_store_id` ) ); CREATE TABLE `Order_Items` ( `order_item_id` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) ); CREATE TABLE `Product_Suppliers` ( `product_id` INTEGER NOT NULL, `supplier_id` INTEGER NOT NULL, `date_supplied_from` DATETIME NOT NULL, `date_supplied_to` DATETIME, `total_amount_purchased` VARCHAR(80), `total_value_purchased` DECIMAL(19,4), PRIMARY KEY (`product_id`, `supplier_id`), FOREIGN KEY (`supplier_id` ) REFERENCES `Suppliers`(`supplier_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) );   CREATE TABLE `Staff_Department_Assignments` ( `staff_id` INTEGER NOT NULL, `department_id` INTEGER NOT NULL, `date_assigned_from` DATETIME NOT NULL, `job_title_code` VARCHAR(10) NOT NULL, `date_assigned_to` DATETIME, PRIMARY KEY (`staff_id`, `department_id`), FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` ), FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ) );  ",extra
1112,5001,loan_1,SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Auto',What are the names of customers who have taken both Mortgage and Auto loans?,"CREATE TABLE bank ( branch_ID int PRIMARY KEY, bname varchar(20), no_of_customers int, city varchar(10), state varchar(20));   CREATE TABLE customer ( cust_ID varchar(3) PRIMARY KEY, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_ID int, state varchar(20), FOREIGN KEY(branch_ID) REFERENCES bank(branch_ID));   CREATE TABLE loan ( loan_ID varchar(3) PRIMARY KEY, loan_type varchar(15), cust_ID varchar(3), branch_ID varchar(3), amount int, FOREIGN KEY(branch_ID) REFERENCES bank(branch_ID), FOREIGN KEY(Cust_ID) REFERENCES customer(Cust_ID));  ",extra
47,228,flight_2,SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1,Give the code of the airport with the least flights.,"CREATE TABLE 'airlines' ( 	uid INTEGER PRIMARY KEY,  	Airline TEXT,  	Abbreviation TEXT,  	Country TEXT ); CREATE TABLE 'airports' ( 	City TEXT,  	AirportCode TEXT PRIMARY KEY,  	AirportName TEXT,  	Country TEXT,  	CountryAbbrev TEXT ); CREATE TABLE 'flights' ( 	Airline INTEGER,  	FlightNo INTEGER,  	SourceAirport TEXT,  	DestAirport TEXT,  	PRIMARY KEY(Airline, FlightNo), 	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode), 	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode) );",extra
231,1476,scholar,"SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  ""Peter Mertens"" AND t1.authorname  =  ""Dina Barbian"";",Have Peter Mertens and Dina Barbian written a paper together ?,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); ",extra
126,843,dog_kennels,SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments ),How many dogs have not gone through any treatment?,"PRAGMA foreign_keys = ON; CREATE TABLE `Breeds` ( `breed_code` VARCHAR(10) PRIMARY KEY , `breed_name` VARCHAR(80) ); CREATE TABLE `Charges` ( `charge_id` INTEGER PRIMARY KEY , `charge_type` VARCHAR(10), `charge_amount` DECIMAL(19,4) ); CREATE TABLE `Sizes` ( `size_code` VARCHAR(10) PRIMARY KEY , `size_description` VARCHAR(80) );  CREATE TABLE `Treatment_Types` ( `treatment_type_code` VARCHAR(10) PRIMARY KEY , `treatment_type_description` VARCHAR(80) ); CREATE TABLE `Owners` ( `owner_id` INTEGER PRIMARY KEY , `first_name` VARCHAR(50), `last_name` VARCHAR(50), `street` VARCHAR(50), `city` VARCHAR(50), `state` VARCHAR(20), `zip_code` VARCHAR(20), `email_address` VARCHAR(50), `home_phone` VARCHAR(20), `cell_number` VARCHAR(20) ); CREATE TABLE `Dogs` ( `dog_id` INTEGER PRIMARY KEY , `owner_id` INTEGER NOT NULL, `abandoned_yn` VARCHAR(1), `breed_code` VARCHAR(10) NOT NULL, `size_code` VARCHAR(10) NOT NULL, `name` VARCHAR(50), `age` VARCHAR(20), `date_of_birth` DATETIME, `gender` VARCHAR(1), `weight` VARCHAR(20), `date_arrived` DATETIME, `date_adopted` DATETIME, `date_departed` DATETIME, FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ), FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ), FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ), FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ) );  CREATE TABLE `Professionals` ( `professional_id` INTEGER PRIMARY KEY , `role_code` VARCHAR(10) NOT NULL, `first_name` VARCHAR(50), `street` VARCHAR(50), `city` VARCHAR(50), `state` VARCHAR(20), `zip_code` VARCHAR(20), `last_name` VARCHAR(50), `email_address` VARCHAR(50), `home_phone` VARCHAR(20), `cell_number` VARCHAR(20) );  CREATE TABLE `Treatments` ( `treatment_id` INTEGER PRIMARY KEY , `dog_id` INTEGER NOT NULL, `professional_id` INTEGER NOT NULL, `treatment_type_code` VARCHAR(10) NOT NULL, `date_of_treatment` DATETIME, `cost_of_treatment` DECIMAL(19,4), FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ), FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ), FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` ) );  INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491 Gleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904 Corneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (3, 'Employee', 'Olaf', '68589 Bradly Manor New Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (4, 'Veterenarian', 'Vernice', '72532 Hane Course Lake Berylland, ND 95283', 'Domenickton', 'Mississippi', '02281', 'Tillman', 'lourdes.lowe@example.net', '312.216.3352', '00230569697'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (5, 'Veterenarian', 'Danny', '188 VonRueden Tunnel Suite 630 North Macibury, NV ', 'New Laurytown', 'Hawaii', '84515', 'Considine', 'mekhi.little@example.org', '1-609-566-2752x25197', '011.193.9081x3186'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (6, 'Veterenarian', 'Ruben', '17286 Waters Green East Bernadinefort, CA 89573', 'Baileymouth', 'NewMexico', '52476', 'O''Reilly', 'jacynthe.mclaughlin@example.net', '+43(5)1132733868', '139-321-7313'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (7, 'Veterenarian', 'Velva', '44234 Marvin Shoals Suite 659 North Frances, AL 23', 'McLaughlinfort', 'NorthCarolina', '67980', 'Hayes', 'lambert62@example.org', '022.529.0550x1319', '499-434-0215x1628'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (8, 'Employee', 'Karley', '36895 Eli Ferry Port Marcelle, FL 45712', 'Kirastad', 'Indiana', '33020', 'Hyatt', 'goyette.roosevelt@example.net', '891.475.2256', '328.842.3792'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (9, 'Veterenarian', 'Monte', '07073 Brenna Ways Suite 089 Lowehaven, KY 93275-96', 'South Rockyport', 'SouthCarolina', '80775', 'Kshlerin', 'schneider.kathryne@example.org', '320-508-6023', '962-983-8109x3509'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (10, 'Employee', 'Domenica', '7284 Torphy Flats Apt. 610 Diannaburgh, SC 78560', 'New Maryjane', 'California', '54312', 'Jacobs', 'jerrod.bahringer@example.org', '(230)338-3342x585', '461-801-2600'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (11, 'Employee', 'Brady', '09615 McKenzie Stravenue Apt. 128 West Elliottview', 'Raynorfort', 'Alabama', '07412', 'Pouros', 'west.eula@example.net', '(920)304-4499x59146', '609-405-2990'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (12, 'Veterenarian', 'Winfield', '92912 Langworth Valleys Apt. 743 Thompsonborough, ', 'Juddton', 'Utah', '34041', 'Christiansen', 'marquardt.furman@example.org', '246-951-0080x76716', '1-181-670-9466'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (13, 'Veterenarian', 'Ericka', '7783 Abraham Alley Port Madelynhaven, KY 59172-273', 'Borisside', 'Wyoming', '17902', 'Murazik', 'delphine29@example.com', '346.594.3739', '880-659-7577x736'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (14, 'Employee', 'Sigurd', '390 Bryce Drive North Dock, LA 65357-7228', 'East Ila', 'Connecticut', '41215', 'Frami', 'cole.margarita@example.org', '971.048.3763x9404', '1-185-137-1945x409'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (15, 'Employee', 'Lesly', '63949 Keeling Landing Apt. 502 Johnsview, SD 06780', 'North Adelberttown', 'Montana', '98844', 'Walter', 'jeichmann@example.com', '1-138-287-3775', '1-258-285-4707x8020'); ",extra
1596,8031,e_government,SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id  =  t2.party_id WHERE t2.form_id  =  (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1),What are the party emails associated with parties that used the party form that is the most common?,"PRAGMA foreign_keys = ON; CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `line_1_number_building` VARCHAR(80), `town_city` VARCHAR(50), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(50), `country` VARCHAR(50) ); CREATE TABLE `Services` ( `service_id` INTEGER PRIMARY KEY, `service_type_code` VARCHAR(15) NOT NULL, `service_name` VARCHAR(80), `service_descriptio` VARCHAR(255) ); CREATE TABLE `Forms` ( `form_id` INTEGER PRIMARY KEY, `form_type_code` VARCHAR(15) NOT NULL, `service_id` INTEGER, `form_number` VARCHAR(50), `form_name` VARCHAR(80), `form_description` VARCHAR(255), FOREIGN KEY (`service_id` ) REFERENCES `Services`(`service_id` ) );   CREATE TABLE `Individuals` ( `individual_id` INTEGER PRIMARY KEY, `individual_first_name` VARCHAR(80), `individual_middle_name` VARCHAR(80), `inidividual_phone` VARCHAR(80), `individual_email` VARCHAR(80), `individual_address` VARCHAR(255), `individual_last_name` VARCHAR(80) ); CREATE TABLE `Organizations` ( `organization_id` INTEGER PRIMARY KEY, `date_formed` DATETIME, `organization_name` VARCHAR(255), `uk_vat_number` VARCHAR(20) ); CREATE TABLE `Parties` ( `party_id` INTEGER PRIMARY KEY, `payment_method_code` VARCHAR(15) NOT NULL, `party_phone` VARCHAR(80), `party_email` VARCHAR(80) ); CREATE TABLE `Organization_Contact_Individuals` ( `individual_id` INTEGER NOT NULL, `organization_id` INTEGER NOT NULL, `date_contact_from` DATETIME NOT NULL, `date_contact_to` DATETIME, PRIMARY KEY (`individual_id`,`organization_id` ), FOREIGN KEY (`organization_id` ) REFERENCES `Organizations`(`organization_id` ), FOREIGN KEY (`individual_id` ) REFERENCES `Individuals`(`individual_id` ) ); CREATE TABLE `Party_Addresses` ( `party_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_address_from` DATETIME NOT NULL, `address_type_code` VARCHAR(15) NOT NULL, `date_address_to` DATETIME, PRIMARY KEY (`party_id`, `address_id`), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`party_id` ) REFERENCES `Parties`(`party_id` ) ); CREATE TABLE `Party_Forms` ( `party_id` INTEGER NOT NULL, `form_id` INTEGER NOT NULL, `date_completion_started` DATETIME NOT NULL, `form_status_code` VARCHAR(15) NOT NULL, `date_fully_completed` DATETIME, PRIMARY KEY (`party_id`, `form_id`), FOREIGN KEY (`party_id` ) REFERENCES `Parties`(`party_id` ), FOREIGN KEY (`form_id` ) REFERENCES `Forms`(`form_id` ) ); CREATE TABLE `Party_Services` ( `booking_id` INTEGER NOT NULL , `customer_id` INTEGER NOT NULL, `service_id` INTEGER NOT NULL, `service_datetime` DATETIME NOT NULL, `booking_made_date` DATETIME, FOREIGN KEY (`service_id` ) REFERENCES `Services`(`service_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Parties`(`party_id` ) ); ",extra
1276,6116,tracking_grants_for_research,SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id WHERE T2.outcome_code  =  'Paper' INTERSECT SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id WHERE T2.outcome_code  =  'Patent',List the project details of the project both producing patent and paper as outcomes.,"PRAGMA foreign_keys = ON; CREATE TABLE `Document_Types` ( `document_type_code` VARCHAR(10) PRIMARY KEY, `document_description` VARCHAR(255) NOT NULL ); CREATE TABLE `Documents` ( `document_id` INTEGER PRIMARY KEY, `document_type_code` VARCHAR(10), `grant_id` INTEGER NOT NULL, `sent_date` DATETIME NOT NULL, `response_received_date` DATETIME NOT NULL, `other_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`document_type_code` ) REFERENCES `Document_Types`(`document_type_code` ), FOREIGN KEY (`grant_id` ) REFERENCES `Grants`(`grant_id` ) ); CREATE TABLE `Grants` ( `grant_id` INTEGER PRIMARY KEY, `organisation_id` INTEGER NOT NULL, `grant_amount` DECIMAL(19,4) NOT NULL DEFAULT 0, `grant_start_date` DATETIME NOT NULL, `grant_end_date` DATETIME NOT NULL, `other_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`organisation_id` ) REFERENCES `Organisations`(`organisation_id` ) ); CREATE TABLE `Organisation_Types` ( `organisation_type` VARCHAR(10) PRIMARY KEY, `organisation_type_description` VARCHAR(255) NOT NULL ); CREATE TABLE `Organisations` ( `organisation_id` INTEGER PRIMARY KEY, `organisation_type` VARCHAR(10) NOT NULL, `organisation_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`organisation_type` ) REFERENCES `Organisation_Types`(`organisation_type` ) ); CREATE TABLE `Project_Outcomes` ( `project_id` INTEGER NOT NULL, `outcome_code` VARCHAR(10) NOT NULL, `outcome_details` VARCHAR(255), FOREIGN KEY (`project_id` ) REFERENCES `Projects`(`project_id` ),FOREIGN KEY (`outcome_code` ) REFERENCES `Research_Outcomes`(`outcome_code` ) ); CREATE TABLE `Project_Staff` ( `staff_id` DOUBLE PRIMARY KEY, `project_id` INTEGER NOT NULL, `role_code` VARCHAR(10) NOT NULL, `date_from` DATETIME, `date_to` DATETIME, `other_details` VARCHAR(255), FOREIGN KEY (`project_id` ) REFERENCES `Projects`(`project_id` ),FOREIGN KEY (`role_code` ) REFERENCES `Staff_Roles`(`role_code` ) ); CREATE TABLE `Projects` ( `project_id` INTEGER PRIMARY KEY, `organisation_id` INTEGER NOT NULL, `project_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`organisation_id` ) REFERENCES `Organisations`(`organisation_id` ) ); CREATE TABLE `Research_Outcomes` ( `outcome_code` VARCHAR(10) PRIMARY KEY, `outcome_description` VARCHAR(255) NOT NULL ); CREATE TABLE `Research_Staff` ( `staff_id` INTEGER PRIMARY KEY, `employer_organisation_id` INTEGER NOT NULL, `staff_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`employer_organisation_id` ) REFERENCES `Organisations`(`organisation_id` ) ); CREATE TABLE `Staff_Roles` ( `role_code` VARCHAR(10) PRIMARY KEY, `role_description` VARCHAR(255) NOT NULL ); CREATE TABLE `Tasks` ( `task_id` INTEGER PRIMARY KEY, `project_id` INTEGER NOT NULL, `task_details` VARCHAR(255) NOT NULL, `eg Agree Objectives` VARCHAR(1), FOREIGN KEY (`project_id` ) REFERENCES `Projects`(`project_id` ) ); ",extra
1267,5953,film_rank,"SELECT title ,  director FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.market_id  =  T2.Market_ID WHERE country  =  'China')",Return the titles and directors of films that were never in the market of China.," PRAGMA foreign_keys = ON;    CREATE TABLE ""film"" ( ""Film_ID"" int, ""Title"" text, ""Studio"" text, ""Director"" text, ""Gross_in_dollar"" int, PRIMARY KEY (""Film_ID"") );   CREATE TABLE ""market"" ( ""Market_ID"" int, ""Country"" text, ""Number_cities"" int, PRIMARY KEY (""Market_ID"") );  CREATE TABLE ""film_market_estimation"" ( ""Estimation_ID"" int, ""Low_Estimate"" real, ""High_Estimate"" real, ""Film_ID"" int, ""Type"" text, ""Market_ID"" int, ""Year"" int, PRIMARY KEY (""Estimation_ID""), FOREIGN KEY (""Film_ID"") REFERENCES film(""Film_ID""), FOREIGN KEY (""Market_ID"") REFERENCES market(""Market_ID"") );   ",extra
612,2194,academic,"SELECT t2.name FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t1.keyword  =  ""Relational Database"";","return me the authors who have papers containing keyword "" Relational Database "" .","PRAGMA foreign_keys = ON; CREATE TABLE ""author"" ( ""aid"" int, ""homepage"" text, ""name"" text, ""oid"" int, primary key(""aid"") ); CREATE TABLE ""conference"" ( ""cid"" int, ""homepage"" text, ""name"" text, primary key (""cid"") ); CREATE TABLE ""domain"" ( ""did"" int, ""name"" text, primary key (""did"") ); CREATE TABLE ""domain_author"" ( ""aid"" int,  ""did"" int, primary key (""did"", ""aid""), foreign key(""aid"") references `author`(""aid""), foreign key(""did"") references `domain`(""did"") );  CREATE TABLE ""domain_conference"" ( ""cid"" int, ""did"" int, primary key (""did"", ""cid""), foreign key(""cid"") references `conference`(""cid""), foreign key(""did"") references `domain`(""did"") ); CREATE TABLE ""journal"" ( ""homepage"" text, ""jid"" int, ""name"" text, primary key(""jid"") ); CREATE TABLE ""domain_journal"" ( ""did"" int, ""jid"" int, primary key (""did"", ""jid""), foreign key(""jid"") references ""journal""(""jid""), foreign key(""did"") references ""domain""(""did"") ); CREATE TABLE ""keyword"" ( ""keyword"" text, ""kid"" int, primary key(""kid"") ); CREATE TABLE ""domain_keyword"" ( ""did"" int, ""kid"" int, primary key (""did"", ""kid""), foreign key(""kid"") references ""keyword""(""kid""), foreign key(""did"") references ""domain""(""did"") ); CREATE TABLE ""publication"" ( ""abstract"" text, ""cid"" text, ""citation_num"" int, ""jid"" int, ""pid"" int, ""reference_num"" int, ""title"" text, ""year"" int, primary key(""pid""), foreign key(""jid"") references ""journal""(""jid""), foreign key(""cid"") references ""conference""(""cid"") ); CREATE TABLE ""domain_publication"" ( ""did"" int, ""pid"" int, primary key (""did"", ""pid""), foreign key(""pid"") references ""publication""(""pid""), foreign key(""did"") references ""domain""(""did"") );  CREATE TABLE ""organization"" ( ""continent"" text, ""homepage"" text, ""name"" text, ""oid"" int, primary key(""oid"") );  CREATE TABLE ""publication_keyword"" ( ""pid"" int, ""kid"" int, primary key (""kid"", ""pid""), foreign key(""pid"") references ""publication""(""pid""), foreign key(""kid"") references ""keyword""(""kid"") ); CREATE TABLE ""writes"" ( ""aid"" int, ""pid"" int, primary key (""aid"", ""pid""), foreign key(""pid"") references ""publication""(""pid""), foreign key(""aid"") references ""author""(""aid"") ); CREATE TABLE ""cite"" ( ""cited"" int, ""citing""  int, foreign key(""cited"") references ""publication""(""pid""), foreign key(""citing"") references ""publication""(""pid"") );",extra
707,2397,imdb,"SELECT t3.name FROM director AS t3 JOIN directed_by AS t2 ON t3.did  =  t2.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN tags AS t5 ON t5.msid  =  t4.mid JOIN keyword AS t1 ON t5.kid  =  t1.id WHERE t1.keyword  =  ""nuclear weapons"";",List all the directors of movies about nuclear weapons,"PRAGMA foreign_keys = ON; CREATE TABLE ""actor"" ( ""aid"" int, ""gender"" text, ""name"" text, ""nationality"" text, ""birth_city"" text, ""birth_year"" int, primary key(""aid"") );   CREATE TABLE ""copyright"" ( ""id"" int, ""msid"" int, ""cid"" int, primary key(""id"") ); CREATE TABLE ""cast"" ( ""id"" int, ""msid"" int, ""aid"" int, ""role"" int, primary key(""id""), foreign key(""aid"") references `actor`(""aid""), foreign key(""msid"") references `copyright`(""msid"") );  CREATE TABLE ""genre"" ( ""gid"" int, ""genre"" text, primary key(""gid"") );  CREATE TABLE ""classification"" ( ""id"" int, ""msid"" int, ""gid"" int, primary key(""id""), foreign key(""gid"") references `genre`(""gid""), foreign key(""msid"") references `copyright`(""msid"") );  CREATE TABLE ""company"" ( ""id"" int, ""name"" text, ""country_code"" text, primary key(""id"") );   CREATE TABLE ""director"" ( ""did"" int, ""gender"" text, ""name"" text, ""nationality"" text, ""birth_city"" text, ""birth_year"" int, primary key(""did"") );  CREATE TABLE ""producer"" ( ""pid"" int, ""gender"" text, ""name"" text, ""nationality"" text, ""birth_city"" text, ""birth_year"" int, primary key(""pid"") );  CREATE TABLE ""directed_by"" ( ""id"" int, ""msid"" int, ""did"" int, primary key(""id""), foreign key(""msid"") references `copyright`(""msid""), foreign key(""did"") references `director`(""did"") );  CREATE TABLE ""keyword"" ( ""id"" int, ""keyword"" text, primary key(""id"") );  CREATE TABLE ""made_by"" ( ""id"" int, ""msid"" int, ""pid"" int, primary key(""id""), foreign key(""msid"") references `copyright`(""msid""), foreign key(""pid"") references `producer`(""pid"") );  CREATE TABLE ""movie"" ( ""mid"" int, ""title"" text, ""release_year"" int, ""title_aka"" text, ""budget"" text, primary key(""mid"") ); CREATE TABLE ""tags"" ( ""id"" int, ""msid"" int, ""kid"" int, primary key(""id""), foreign key(""msid"") references `copyright`(""msid""), foreign key(""kid"") references `keyword`(""kid"") ); CREATE TABLE ""tv_series"" ( ""sid"" int, ""title"" text, ""release_year"" int, ""num_of_seasons"" int, ""num_of_episodes"" int, ""title_aka"" text, ""budget"" text, primary key(""sid"") ); CREATE TABLE ""writer"" ( ""wid"" int, ""gender"" text, ""name"" int, ""nationality"" int, ""num_of_episodes"" int, ""birth_city"" text, ""birth_year"" int, primary key(""wid"") ); CREATE TABLE ""written_by"" ( ""id"" int, ""msid"" int, ""wid"" int, foreign key(""msid"") references `copyright`(""msid""), foreign key(""wid"") references `writer`(""wid"") );",extra
528,1971,scholar,"SELECT DISTINCT COUNT ( DISTINCT t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname LIKE ""Ye Cao"" GROUP BY t3.year ORDER BY COUNT ( DISTINCT t3.paperid ) DESC;",What year did Ye Cao publish the most papers,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); ",extra
111,796,dog_kennels,"SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1","Return the owner id, first name and last name of the owner who has the most dogs.","PRAGMA foreign_keys = ON; CREATE TABLE `Breeds` ( `breed_code` VARCHAR(10) PRIMARY KEY , `breed_name` VARCHAR(80) ); CREATE TABLE `Charges` ( `charge_id` INTEGER PRIMARY KEY , `charge_type` VARCHAR(10), `charge_amount` DECIMAL(19,4) ); CREATE TABLE `Sizes` ( `size_code` VARCHAR(10) PRIMARY KEY , `size_description` VARCHAR(80) );  CREATE TABLE `Treatment_Types` ( `treatment_type_code` VARCHAR(10) PRIMARY KEY , `treatment_type_description` VARCHAR(80) ); CREATE TABLE `Owners` ( `owner_id` INTEGER PRIMARY KEY , `first_name` VARCHAR(50), `last_name` VARCHAR(50), `street` VARCHAR(50), `city` VARCHAR(50), `state` VARCHAR(20), `zip_code` VARCHAR(20), `email_address` VARCHAR(50), `home_phone` VARCHAR(20), `cell_number` VARCHAR(20) ); CREATE TABLE `Dogs` ( `dog_id` INTEGER PRIMARY KEY , `owner_id` INTEGER NOT NULL, `abandoned_yn` VARCHAR(1), `breed_code` VARCHAR(10) NOT NULL, `size_code` VARCHAR(10) NOT NULL, `name` VARCHAR(50), `age` VARCHAR(20), `date_of_birth` DATETIME, `gender` VARCHAR(1), `weight` VARCHAR(20), `date_arrived` DATETIME, `date_adopted` DATETIME, `date_departed` DATETIME, FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ), FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ), FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ), FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ) );  CREATE TABLE `Professionals` ( `professional_id` INTEGER PRIMARY KEY , `role_code` VARCHAR(10) NOT NULL, `first_name` VARCHAR(50), `street` VARCHAR(50), `city` VARCHAR(50), `state` VARCHAR(20), `zip_code` VARCHAR(20), `last_name` VARCHAR(50), `email_address` VARCHAR(50), `home_phone` VARCHAR(20), `cell_number` VARCHAR(20) );  CREATE TABLE `Treatments` ( `treatment_id` INTEGER PRIMARY KEY , `dog_id` INTEGER NOT NULL, `professional_id` INTEGER NOT NULL, `treatment_type_code` VARCHAR(10) NOT NULL, `date_of_treatment` DATETIME, `cost_of_treatment` DECIMAL(19,4), FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ), FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ), FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` ) );  INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491 Gleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904 Corneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (3, 'Employee', 'Olaf', '68589 Bradly Manor New Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (4, 'Veterenarian', 'Vernice', '72532 Hane Course Lake Berylland, ND 95283', 'Domenickton', 'Mississippi', '02281', 'Tillman', 'lourdes.lowe@example.net', '312.216.3352', '00230569697'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (5, 'Veterenarian', 'Danny', '188 VonRueden Tunnel Suite 630 North Macibury, NV ', 'New Laurytown', 'Hawaii', '84515', 'Considine', 'mekhi.little@example.org', '1-609-566-2752x25197', '011.193.9081x3186'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (6, 'Veterenarian', 'Ruben', '17286 Waters Green East Bernadinefort, CA 89573', 'Baileymouth', 'NewMexico', '52476', 'O''Reilly', 'jacynthe.mclaughlin@example.net', '+43(5)1132733868', '139-321-7313'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (7, 'Veterenarian', 'Velva', '44234 Marvin Shoals Suite 659 North Frances, AL 23', 'McLaughlinfort', 'NorthCarolina', '67980', 'Hayes', 'lambert62@example.org', '022.529.0550x1319', '499-434-0215x1628'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (8, 'Employee', 'Karley', '36895 Eli Ferry Port Marcelle, FL 45712', 'Kirastad', 'Indiana', '33020', 'Hyatt', 'goyette.roosevelt@example.net', '891.475.2256', '328.842.3792'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (9, 'Veterenarian', 'Monte', '07073 Brenna Ways Suite 089 Lowehaven, KY 93275-96', 'South Rockyport', 'SouthCarolina', '80775', 'Kshlerin', 'schneider.kathryne@example.org', '320-508-6023', '962-983-8109x3509'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (10, 'Employee', 'Domenica', '7284 Torphy Flats Apt. 610 Diannaburgh, SC 78560', 'New Maryjane', 'California', '54312', 'Jacobs', 'jerrod.bahringer@example.org', '(230)338-3342x585', '461-801-2600'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (11, 'Employee', 'Brady', '09615 McKenzie Stravenue Apt. 128 West Elliottview', 'Raynorfort', 'Alabama', '07412', 'Pouros', 'west.eula@example.net', '(920)304-4499x59146', '609-405-2990'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (12, 'Veterenarian', 'Winfield', '92912 Langworth Valleys Apt. 743 Thompsonborough, ', 'Juddton', 'Utah', '34041', 'Christiansen', 'marquardt.furman@example.org', '246-951-0080x76716', '1-181-670-9466'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (13, 'Veterenarian', 'Ericka', '7783 Abraham Alley Port Madelynhaven, KY 59172-273', 'Borisside', 'Wyoming', '17902', 'Murazik', 'delphine29@example.com', '346.594.3739', '880-659-7577x736'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (14, 'Employee', 'Sigurd', '390 Bryce Drive North Dock, LA 65357-7228', 'East Ila', 'Connecticut', '41215', 'Frami', 'cole.margarita@example.org', '971.048.3763x9404', '1-185-137-1945x409'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (15, 'Employee', 'Lesly', '63949 Keeling Landing Apt. 502 Johnsview, SD 06780', 'North Adelberttown', 'Montana', '98844', 'Walter', 'jeichmann@example.com', '1-138-287-3775', '1-258-285-4707x8020'); ",extra
1172,5313,hr_1,"SELECT T1.first_name ,  T1.last_name ,  T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id WHERE T1.first_name LIKE '%z%'","display those employees who contain a letter z to their first name and also display their last name, city.","-- phpMyAdmin SQL Dump -- version 4.0.10.7 -- http://www.phpmyadmin.net -- -- Host: localhost -- Generation Time: Mar 20, 2015 at 01:43 AM -- Server version: 5.5.34-cll-lve -- PHP Version: 5.4.23    /*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */; /*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */; /*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */; /*!40101 SET NAMES utf8 */; CREATE TABLE IF NOT EXISTS `regions` (   `REGION_ID` decimal(5,0) NOT NULL,   `REGION_NAME` varchar(25) DEFAULT NULL,   PRIMARY KEY (`REGION_ID`) );  -- -- Dumping data for table `regions` --  INSERT INTO `regions` (`REGION_ID`, `REGION_NAME`) VALUES ('1', 'Europe\r'), ('2', 'Americas\r'), ('3', 'Asia\r'), ('4', 'Middle East and Africa\r'); -- -- Database: `wrpracti_bookinfo` --  -- --------------------------------------------------------  -- -- Table structure for table `countries` --  CREATE TABLE IF NOT EXISTS `countries` (   `COUNTRY_ID` varchar(2) NOT NULL,   `COUNTRY_NAME` varchar(40) DEFAULT NULL,   `REGION_ID` decimal(10,0) DEFAULT NULL,   PRIMARY KEY (`COUNTRY_ID`),   FOREIGN KEY (`REGION_ID`) REFERENCES regions (`REGION_ID`) );  -- -- Dumping data for table `countries` --  INSERT INTO `countries` (`COUNTRY_ID`, `COUNTRY_NAME`, `REGION_ID`) VALUES ('AR', 'Argentina', '2'), ('AU', 'Australia', '3'), ('BE', 'Belgium', '1'), ('BR', 'Brazil', '2'), ('CA', 'Canada', '2'), ('CH', 'Switzerland', '1'), ('CN', 'China', '3'), ('DE', 'Germany', '1'), ('DK', 'Denmark', '1'), ('EG', 'Egypt', '4'), ('FR', 'France', '1'), ('HK', 'HongKong', '3'), ('IL', 'Israel', '4'), ('IN', 'India', '3'), ('IT', 'Italy', '1'), ('JP', 'Japan', '3'), ('KW', 'Kuwait', '4'), ('MX', 'Mexico', '2'), ('NG', 'Nigeria', '4'), ('NL', 'Netherlands', '1'), ('SG', 'Singapore', '3'), ('UK', 'United Kingdom', '1'), ('US', 'United States of America', '2'), ('ZM', 'Zambia', '4'), ('ZW', 'Zimbabwe', '4');  -- --------------------------------------------------------  -- -- Table structure for table `departments` --  CREATE TABLE IF NOT EXISTS `departments` (   `DEPARTMENT_ID` decimal(4,0) NOT NULL DEFAULT '0',   `DEPARTMENT_NAME` varchar(30) NOT NULL,   `MANAGER_ID` decimal(6,0) DEFAULT NULL,   `LOCATION_ID` decimal(4,0) DEFAULT NULL,   PRIMARY KEY (`DEPARTMENT_ID`) );  -- -- Dumping data for table `departments` --  INSERT INTO `departments` (`DEPARTMENT_ID`, `DEPARTMENT_NAME`, `MANAGER_ID`, `LOCATION_ID`) VALUES ('10', 'Administration', '200', '1700'), ('20', 'Marketing', '201', '1800'), ('30', 'Purchasing', '114', '1700'), ('40', 'Human Resources', '203', '2400'), ('50', 'Shipping', '121', '1500'), ('60', 'IT', '103', '1400'), ('70', 'Public Relations', '204', '2700'), ('80', 'Sales', '145', '2500'), ('90', 'Executive', '100', '1700'), ('100', 'Finance', '108', '1700'), ('110', 'Accounting', '205', '1700'), ('120', 'Treasury', '0', '1700'), ('130', 'Corporate Tax', '0', '1700'), ('140', 'Control And Credit', '0', '1700'), ('150', 'Shareholder Services', '0', '1700'), ('160', 'Benefits', '0', '1700'), ('170', 'Manufacturing', '0', '1700'), ('180', 'Construction', '0', '1700'), ('190', 'Contracting', '0', '1700'), ('200', 'Operations', '0', '1700'), ('210', 'IT Support', '0', '1700'), ('220', 'NOC', '0', '1700'), ('230', 'IT Helpdesk', '0', '1700'), ('240', 'Government Sales', '0', '1700'), ('250', 'Retail Sales', '0', '1700'), ('260', 'Recruiting', '0', '1700'), ('270', 'Payroll', '0', '1700');   CREATE TABLE IF NOT EXISTS `jobs` (   `JOB_ID` varchar(10) NOT NULL DEFAULT '',   `JOB_TITLE` varchar(35) NOT NULL,   `MIN_SALARY` decimal(6,0) DEFAULT NULL,   `MAX_SALARY` decimal(6,0) DEFAULT NULL,   PRIMARY KEY (`JOB_ID`) );  -- -- Dumping data for table `jobs` --  INSERT INTO `jobs` (`JOB_ID`, `JOB_TITLE`, `MIN_SALARY`, `MAX_SALARY`) VALUES ('AD_PRES', 'President', '20000', '40000'), ('AD_VP', 'Administration Vice President', '15000', '30000'), ('AD_ASST', 'Administration Assistant', '3000', '6000'), ('FI_MGR', 'Finance Manager', '8200', '16000'), ('FI_ACCOUNT', 'Accountant', '4200', '9000'), ('AC_MGR', 'Accounting Manager', '8200', '16000'), ('AC_ACCOUNT', 'Public Accountant', '4200', '9000'), ('SA_MAN', 'Sales Manager', '10000', '20000'), ('SA_REP', 'Sales Representative', '6000', '12000'), ('PU_MAN', 'Purchasing Manager', '8000', '15000'), ('PU_CLERK', 'Purchasing Clerk', '2500', '5500'), ('ST_MAN', 'Stock Manager', '5500', '8500'), ('ST_CLERK', 'Stock Clerk', '2000', '5000'), ('SH_CLERK', 'Shipping Clerk', '2500', '5500'), ('IT_PROG', 'Programmer', '4000', '10000'), ('MK_MAN', 'Marketing Manager', '9000', '15000'), ('MK_REP', 'Marketing Representative', '4000', '9000'), ('HR_REP', 'Human Resources Representative', '4000', '9000'), ('PR_REP', 'Public Relations Representative', '4500', '10500');  -- --------------------------------------------------------  -- -- Table structure for table `employees` --  CREATE TABLE IF NOT EXISTS `employees` (   `EMPLOYEE_ID` decimal(6,0) NOT NULL DEFAULT '0',   `FIRST_NAME` varchar(20) DEFAULT NULL,   `LAST_NAME` varchar(25) NOT NULL,   `EMAIL` varchar(25) NOT NULL,   `PHONE_NUMBER` varchar(20) DEFAULT NULL,   `HIRE_DATE` date NOT NULL,   `JOB_ID` varchar(10) NOT NULL,   `SALARY` decimal(8,2) DEFAULT NULL,   `COMMISSION_PCT` decimal(2,2) DEFAULT NULL,   `MANAGER_ID` decimal(6,0) DEFAULT NULL,   `DEPARTMENT_ID` decimal(4,0) DEFAULT NULL,   PRIMARY KEY (`EMPLOYEE_ID`),   FOREIGN KEY (`DEPARTMENT_ID`) REFERENCES departments(`DEPARTMENT_ID`),   FOREIGN KEY (`JOB_ID`) REFERENCES jobs(`JOB_ID`) );  -- -- Dumping data for table `employees` --  INSERT INTO `employees` (`EMPLOYEE_ID`, `FIRST_NAME`, `LAST_NAME`, `EMAIL`, `PHONE_NUMBER`, `HIRE_DATE`, `JOB_ID`, `SALARY`, `COMMISSION_PCT`, `MANAGER_ID`, `DEPARTMENT_ID`) VALUES ('100', 'Steven', 'King', 'SKING', '515.123.4567', '1987-06-17', 'AD_PRES', '24000.00', '0.00', '0', '90'), ('101', 'Neena', 'Kochhar', 'NKOCHHAR', '515.123.4568', '1987-06-18', 'AD_VP', '17000.00', '0.00', '100', '90'), ('102', 'Lex', 'De Haan', 'LDEHAAN', '515.123.4569', '1987-06-19', 'AD_VP', '17000.00', '0.00', '100', '90'), ('103', 'Alexander', 'Hunold', 'AHUNOLD', '590.423.4567', '1987-06-20', 'IT_PROG', '9000.00', '0.00', '102', '60'), ('104', 'Bruce', 'Ernst', 'BERNST', '590.423.4568', '1987-06-21', 'IT_PROG', '6000.00', '0.00', '103', '60'), ('105', 'David', 'Austin', 'DAUSTIN', '590.423.4569', '1987-06-22', 'IT_PROG', '4800.00', '0.00', '103', '60'), ('106', 'Valli', 'Pataballa', 'VPATABAL', '590.423.4560', '1987-06-23', 'IT_PROG', '4800.00', '0.00', '103', '60'), ('107', 'Diana', 'Lorentz', 'DLORENTZ', '590.423.5567', '1987-06-24', 'IT_PROG', '4200.00', '0.00', '103', '60'), ('108', 'Nancy', 'Greenberg', 'NGREENBE', '515.124.4569', '1987-06-25', 'FI_MGR', '12000.00', '0.00', '101', '100'), ('109', 'Daniel', 'Faviet', 'DFAVIET', '515.124.4169', '1987-06-26', 'FI_ACCOUNT', '9000.00', '0.00', '108', '100'), ('110', 'John', 'Chen', 'JCHEN', '515.124.4269', '1987-06-27', 'FI_ACCOUNT', '8200.00', '0.00', '108', '100'), ('111', 'Ismael', 'Sciarra', 'ISCIARRA', '515.124.4369', '1987-06-28', 'FI_ACCOUNT', '7700.00', '0.00', '108', '100'), ('112', 'Jose Manuel', 'Urman', 'JMURMAN', '515.124.4469', '1987-06-29', 'FI_ACCOUNT', '7800.00', '0.00', '108', '100'), ('113', 'Luis', 'Popp', 'LPOPP', '515.124.4567', '1987-06-30', 'FI_ACCOUNT', '6900.00', '0.00', '108', '100'), ('114', 'Den', 'Raphaely', 'DRAPHEAL', '515.127.4561', '1987-07-01', 'PU_MAN', '11000.00', '0.00', '100', '30'), ('115', 'Alexander', 'Khoo', 'AKHOO', '515.127.4562', '1987-07-02', 'PU_CLERK', '3100.00', '0.00', '114', '30'), ('116', 'Shelli', 'Baida', 'SBAIDA', '515.127.4563', '1987-07-03', 'PU_CLERK', '2900.00', '0.00', '114', '30'), ('117', 'Sigal', 'Tobias', 'STOBIAS', '515.127.4564', '1987-07-04', 'PU_CLERK', '2800.00', '0.00', '114', '30'), ('118', 'Guy', 'Himuro', 'GHIMURO', '515.127.4565', '1987-07-05', 'PU_CLERK', '2600.00', '0.00', '114', '30'), ('119', 'Karen', 'Colmenares', 'KCOLMENA', '515.127.4566', '1987-07-06', 'PU_CLERK', '2500.00', '0.00', '114', '30'), ('120', 'Matthew', 'Weiss', 'MWEISS', '650.123.1234', '1987-07-07', 'ST_MAN', '8000.00', '0.00', '100', '50'), ('121', 'Adam', 'Fripp', 'AFRIPP', '650.123.2234', '1987-07-08', 'ST_MAN', '8200.00', '0.00', '100', '50'), ('122', 'Payam', 'Kaufling', 'PKAUFLIN', '650.123.3234', '1987-07-09', 'ST_MAN', '7900.00', '0.00', '100', '50'), ('123', 'Shanta', 'Vollman', 'SVOLLMAN', '650.123.4234', '1987-07-10', 'ST_MAN', '6500.00', '0.00', '100', '50'), ('124', 'Kevin', 'Mourgos', 'KMOURGOS', '650.123.5234', '1987-07-11', 'ST_MAN', '5800.00', '0.00', '100', '50'), ('125', 'Julia', 'Nayer', 'JNAYER', '650.124.1214', '1987-07-12', 'ST_CLERK', '3200.00', '0.00', '120', '50'), ('126', 'Irene', 'Mikkilineni', 'IMIKKILI', '650.124.1224', '1987-07-13', 'ST_CLERK', '2700.00', '0.00', '120', '50'), ('127', 'James', 'Landry', 'JLANDRY', '650.124.1334', '1987-07-14', 'ST_CLERK', '2400.00', '0.00', '120', '50'), ('128', 'Steven', 'Markle', 'SMARKLE', '650.124.1434', '1987-07-15', 'ST_CLERK', '2200.00', '0.00', '120', '50'), ('129', 'Laura', 'Bissot', 'LBISSOT', '650.124.5234', '1987-07-16', 'ST_CLERK', '3300.00', '0.00', '121', '50'), ('130', 'Mozhe', 'Atkinson', 'MATKINSO', '650.124.6234', '1987-07-17', 'ST_CLERK', '2800.00', '0.00', '121', '50'), ('131', 'James', 'Marlow', 'JAMRLOW', '650.124.7234', '1987-07-18', 'ST_CLERK', '2500.00', '0.00', '121', '50'), ('132', 'TJ', 'Olson', 'TJOLSON', '650.124.8234', '1987-07-19', 'ST_CLERK', '2100.00', '0.00', '121', '50'), ('133', 'Jason', 'Mallin', 'JMALLIN', '650.127.1934', '1987-07-20', 'ST_CLERK', '3300.00', '0.00', '122', '50'), ('134', 'Michael', 'Rogers', 'MROGERS', '650.127.1834', '1987-07-21', 'ST_CLERK', '2900.00', '0.00', '122', '50'), ('135', 'Ki', 'Gee', 'KGEE', '650.127.1734', '1987-07-22', 'ST_CLERK', '2400.00', '0.00', '122', '50'), ('136', 'Hazel', 'Philtanker', 'HPHILTAN', '650.127.1634', '1987-07-23', 'ST_CLERK', '2200.00', '0.00', '122', '50'), ('137', 'Renske', 'Ladwig', 'RLADWIG', '650.121.1234', '1987-07-24', 'ST_CLERK', '3600.00', '0.00', '123', '50'), ('138', 'Stephen', 'Stiles', 'SSTILES', '650.121.2034', '1987-07-25', 'ST_CLERK', '3200.00', '0.00', '123', '50'), ('139', 'John', 'Seo', 'JSEO', '650.121.2019', '1987-07-26', 'ST_CLERK', '2700.00', '0.00', '123', '50'), ('140', 'Joshua', 'Patel', 'JPATEL', '650.121.1834', '1987-07-27', 'ST_CLERK', '2500.00', '0.00', '123', '50'), ('141', 'Trenna', 'Rajs', 'TRAJS', '650.121.8009', '1987-07-28', 'ST_CLERK', '3500.00', '0.00', '124', '50'), ('142', 'Curtis', 'Davies', 'CDAVIES', '650.121.2994', '1987-07-29', 'ST_CLERK', '3100.00', '0.00', '124', '50'), ('143', 'Randall', 'Matos', 'RMATOS', '650.121.2874', '1987-07-30', 'ST_CLERK', '2600.00', '0.00', '124', '50'), ('144', 'Peter', 'Vargas', 'PVARGAS', '650.121.2004', '1987-07-31', 'ST_CLERK', '2500.00', '0.00', '124', '50'), ('145', 'John', 'Russell', 'JRUSSEL', '011.44.1344.429268', '1987-08-01', 'SA_MAN', '14000.00', '0.40', '100', '80'), ('146', 'Karen', 'Partners', 'KPARTNER', '011.44.1344.467268', '1987-08-02', 'SA_MAN', '13500.00', '0.30', '100', '80'), ('147', 'Alberto', 'Errazuriz', 'AERRAZUR', '011.44.1344.429278', '1987-08-03', 'SA_MAN', '12000.00', '0.30', '100', '80'), ('148', 'Gerald', 'Cambrault', 'GCAMBRAU', '011.44.1344.619268', '1987-08-04', 'SA_MAN', '11000.00', '0.30', '100', '80'), ('149', 'Eleni', 'Zlotkey', 'EZLOTKEY', '011.44.1344.429018', '1987-08-05', 'SA_MAN', '10500.00', '0.20', '100', '80'), ('150', 'Peter', 'Tucker', 'PTUCKER', '011.44.1344.129268', '1987-08-06', 'SA_REP', '10000.00', '0.30', '145', '80'), ('151', 'David', 'Bernstein', 'DBERNSTE', '011.44.1344.345268', '1987-08-07', 'SA_REP', '9500.00', '0.25', '145', '80'), ('152', 'Peter', 'Hall', 'PHALL', '011.44.1344.478968', '1987-08-08', 'SA_REP', '9000.00', '0.25', '145', '80'), ('153', 'Christopher', 'Olsen', 'COLSEN', '011.44.1344.498718', '1987-08-09', 'SA_REP', '8000.00', '0.20', '145', '80'), ('154', 'Nanette', 'Cambrault', 'NCAMBRAU', '011.44.1344.987668', '1987-08-10', 'SA_REP', '7500.00', '0.20', '145', '80'), ('155', 'Oliver', 'Tuvault', 'OTUVAULT', '011.44.1344.486508', '1987-08-11', 'SA_REP', '7000.00', '0.15', '145', '80'), ('156', 'Janette', 'King', 'JKING', '011.44.1345.429268', '1987-08-12', 'SA_REP', '10000.00', '0.35', '146', '80'), ('157', 'Patrick', 'Sully', 'PSULLY', '011.44.1345.929268', '1987-08-13', 'SA_REP', '9500.00', '0.35', '146', '80'), ('158', 'Allan', 'McEwen', 'AMCEWEN', '011.44.1345.829268', '1987-08-14', 'SA_REP', '9000.00', '0.35', '146', '80'), ('159', 'Lindsey', 'Smith', 'LSMITH', '011.44.1345.729268', '1987-08-15', 'SA_REP', '8000.00', '0.30', '146', '80'), ('160', 'Louise', 'Doran', 'LDORAN', '011.44.1345.629268', '1987-08-16', 'SA_REP', '7500.00', '0.30', '146', '80'), ('161', 'Sarath', 'Sewall', 'SSEWALL', '011.44.1345.529268', '1987-08-17', 'SA_REP', '7000.00', '0.25', '146', '80'), ('162', 'Clara', 'Vishney', 'CVISHNEY', '011.44.1346.129268', '1987-08-18', 'SA_REP', '10500.00', '0.25', '147', '80'), ('163', 'Danielle', 'Greene', 'DGREENE', '011.44.1346.229268', '1987-08-19', 'SA_REP', '9500.00', '0.15', '147', '80'), ('164', 'Mattea', 'Marvins', 'MMARVINS', '011.44.1346.329268', '1987-08-20', 'SA_REP', '7200.00', '0.10', '147', '80'), ('165', 'David', 'Lee', 'DLEE', '011.44.1346.529268', '1987-08-21', 'SA_REP', '6800.00', '0.10', '147', '80'), ('166', 'Sundar', 'Ande', 'SANDE', '011.44.1346.629268', '1987-08-22', 'SA_REP', '6400.00', '0.10', '147', '80'), ('167', 'Amit', 'Banda', 'ABANDA', '011.44.1346.729268', '1987-08-23', 'SA_REP', '6200.00', '0.10', '147', '80'), ('168', 'Lisa', 'Ozer', 'LOZER', '011.44.1343.929268', '1987-08-24', 'SA_REP', '11500.00', '0.25', '148', '80'), ('169', 'Harrison', 'Bloom', 'HBLOOM', '011.44.1343.829268', '1987-08-25', 'SA_REP', '10000.00', '0.20', '148', '80'), ('170', 'Tayler', 'Fox', 'TFOX', '011.44.1343.729268', '1987-08-26', 'SA_REP', '9600.00', '0.20', '148', '80'), ('171', 'William', 'Smith', 'WSMITH', '011.44.1343.629268', '1987-08-27', 'SA_REP', '7400.00', '0.15', '148', '80'), ('172', 'Elizabeth', 'Bates', 'EBATES', '011.44.1343.529268', '1987-08-28', 'SA_REP', '7300.00', '0.15', '148', '80'), ('173', 'Sundita', 'Kumar', 'SKUMAR', '011.44.1343.329268', '1987-08-29', 'SA_REP', '6100.00', '0.10', '148', '80'), ('174', 'Ellen', 'Abel', 'EABEL', '011.44.1644.429267', '1987-08-30', 'SA_REP', '11000.00', '0.30', '149', '80'), ('175', 'Alyssa', 'Hutton', 'AHUTTON', '011.44.1644.429266', '1987-08-31', 'SA_REP', '8800.00', '0.25', '149', '80'), ('176', 'Jonathon', 'Taylor', 'JTAYLOR', '011.44.1644.429265', '1987-09-01', 'SA_REP', '8600.00', '0.20', '149', '80'), ('177', 'Jack', 'Livingston', 'JLIVINGS', '011.44.1644.429264', '1987-09-02', 'SA_REP', '8400.00', '0.20', '149', '80'), ('178', 'Kimberely', 'Grant', 'KGRANT', '011.44.1644.429263', '1987-09-03', 'SA_REP', '7000.00', '0.15', '149', '0'), ('179', 'Charles', 'Johnson', 'CJOHNSON', '011.44.1644.429262', '1987-09-04', 'SA_REP', '6200.00', '0.10', '149', '80'), ('180', 'Winston', 'Taylor', 'WTAYLOR', '650.507.9876', '1987-09-05', 'SH_CLERK', '3200.00', '0.00', '120', '50'), ('181', 'Jean', 'Fleaur', 'JFLEAUR', '650.507.9877', '1987-09-06', 'SH_CLERK', '3100.00', '0.00', '120', '50'), ('182', 'Martha', 'Sullivan', 'MSULLIVA', '650.507.9878', '1987-09-07', 'SH_CLERK', '2500.00', '0.00', '120', '50'), ('183', 'Girard', 'Geoni', 'GGEONI', '650.507.9879', '1987-09-08', 'SH_CLERK', '2800.00', '0.00', '120', '50'), ('184', 'Nandita', 'Sarchand', 'NSARCHAN', '650.509.1876', '1987-09-09', 'SH_CLERK', '4200.00', '0.00', '121', '50'), ('185', 'Alexis', 'Bull', 'ABULL', '650.509.2876', '1987-09-10', 'SH_CLERK', '4100.00', '0.00', '121', '50'), ('186', 'Julia', 'Dellinger', 'JDELLING', '650.509.3876', '1987-09-11', 'SH_CLERK', '3400.00', '0.00', '121', '50'), ('187', 'Anthony', 'Cabrio', 'ACABRIO', '650.509.4876', '1987-09-12', 'SH_CLERK', '3000.00', '0.00', '121', '50'), ('188', 'Kelly', 'Chung', 'KCHUNG', '650.505.1876', '1987-09-13', 'SH_CLERK', '3800.00', '0.00', '122', '50'), ('189', 'Jennifer', 'Dilly', 'JDILLY', '650.505.2876', '1987-09-14', 'SH_CLERK', '3600.00', '0.00', '122', '50'), ('190', 'Timothy', 'Gates', 'TGATES', '650.505.3876', '1987-09-15', 'SH_CLERK', '2900.00', '0.00', '122', '50'), ('191', 'Randall', 'Perkins', 'RPERKINS', '650.505.4876', '1987-09-16', 'SH_CLERK', '2500.00', '0.00', '122', '50'), ('192', 'Sarah', 'Bell', 'SBELL', '650.501.1876', '1987-09-17', 'SH_CLERK', '4000.00', '0.00', '123', '50'), ('193', 'Britney', 'Everett', 'BEVERETT', '650.501.2876', '1987-09-18', 'SH_CLERK', '3900.00', '0.00', '123', '50'), ('194', 'Samuel', 'McCain', 'SMCCAIN', '650.501.3876', '1987-09-19', 'SH_CLERK', '3200.00', '0.00', '123', '50'), ('195', 'Vance', 'Jones', 'VJONES', '650.501.4876', '1987-09-20', 'SH_CLERK', '2800.00', '0.00', '123', '50'), ('196', 'Alana', 'Walsh', 'AWALSH', '650.507.9811', '1987-09-21', 'SH_CLERK', '3100.00', '0.00', '124', '50'), ('197', 'Kevin', 'Feeney', 'KFEENEY', '650.507.9822', '1987-09-22', 'SH_CLERK', '3000.00', '0.00', '124', '50'), ('198', 'Donald', 'OConnell', 'DOCONNEL', '650.507.9833', '1987-09-23', 'SH_CLERK', '2600.00', '0.00', '124', '50'), ('199', 'Douglas', 'Grant', 'DGRANT', '650.507.9844', '1987-09-24', 'SH_CLERK', '2600.00', '0.00', '124', '50'), ('200', 'Jennifer', 'Whalen', 'JWHALEN', '515.123.4444', '1987-09-25', 'AD_ASST', '4400.00', '0.00', '101', '10'), ('201', 'Michael', 'Hartstein', 'MHARTSTE', '515.123.5555', '1987-09-26', 'MK_MAN', '13000.00', '0.00', '100', '20'), ('202', 'Pat', 'Fay', 'PFAY', '603.123.6666', '1987-09-27', 'MK_REP', '6000.00', '0.00', '201', '20'), ('203', 'Susan', 'Mavris', 'SMAVRIS', '515.123.7777', '1987-09-28', 'HR_REP', '6500.00', '0.00', '101', '40'), ('204', 'Hermann', 'Baer', 'HBAER', '515.123.8888', '1987-09-29', 'PR_REP', '10000.00', '0.00', '101', '70'), ('205', 'Shelley', 'Higgins', 'SHIGGINS', '515.123.8080', '1987-09-30', 'AC_MGR', '12000.00', '0.00', '101', '110'), ('206', 'William', 'Gietz', 'WGIETZ', '515.123.8181', '1987-10-01', 'AC_ACCOUNT', '8300.00', '0.00', '205', '110');  -- --------------------------------------------------------  -- -- Table structure for table `job_history` --  CREATE TABLE IF NOT EXISTS `job_history` (   `EMPLOYEE_ID` decimal(6,0) NOT NULL,   `START_DATE` date NOT NULL,   `END_DATE` date NOT NULL,   `JOB_ID` varchar(10) NOT NULL,   `DEPARTMENT_ID` decimal(4,0) DEFAULT NULL,   PRIMARY KEY (`EMPLOYEE_ID`,`START_DATE`),   FOREIGN KEY (`EMPLOYEE_ID`) REFERENCES employees(`EMPLOYEE_ID`),   FOREIGN KEY (`DEPARTMENT_ID`) REFERENCES departments(`DEPARTMENT_ID`),   FOREIGN KEY (`JOB_ID`) REFERENCES jobs(`JOB_ID`) );  -- -- Dumping data for table `job_history` --  INSERT INTO `job_history` (`EMPLOYEE_ID`, `START_DATE`, `END_DATE`, `JOB_ID`, `DEPARTMENT_ID`) VALUES ('102', '1993-01-13', '1998-07-24', 'IT_PROG', '60'), ('101', '1989-09-21', '1993-10-27', 'AC_ACCOUNT', '110'), ('101', '1993-10-28', '1997-03-15', 'AC_MGR', '110'), ('201', '1996-02-17', '1999-12-19', 'MK_REP', '20'), ('114', '1998-03-24', '1999-12-31', 'ST_CLERK', '50'), ('122', '1999-01-01', '1999-12-31', 'ST_CLERK', '50'), ('200', '1987-09-17', '1993-06-17', 'AD_ASST', '90'), ('176', '1998-03-24', '1998-12-31', 'SA_REP', '80'), ('176', '1999-01-01', '1999-12-31', 'SA_MAN', '80'), ('200', '1994-07-01', '1998-12-31', 'AC_ACCOUNT', '90'), ('0', '0000-00-00', '0000-00-00', '', '0');  -- --------------------------------------------------------  -- -- Table structure for table `jobs` --   -- -- Table structure for table `locations` --  CREATE TABLE IF NOT EXISTS `locations` (   `LOCATION_ID` decimal(4,0) NOT NULL DEFAULT '0',   `STREET_ADDRESS` varchar(40) DEFAULT NULL,   `POSTAL_CODE` varchar(12) DEFAULT NULL,   `CITY` varchar(30) NOT NULL,   `STATE_PROVINCE` varchar(25) DEFAULT NULL,   `COUNTRY_ID` varchar(2) DEFAULT NULL,   PRIMARY KEY (`LOCATION_ID`),   FOREIGN KEY (`COUNTRY_ID`) REFERENCES countries(`COUNTRY_ID`) );  -- -- Dumping data for table `locations` --  INSERT INTO `locations` (`LOCATION_ID`, `STREET_ADDRESS`, `POSTAL_CODE`, `CITY`, `STATE_PROVINCE`, `COUNTRY_ID`) VALUES ('1000', '1297 Via Cola di Rie', '989', 'Roma', '', 'IT'), ('1100', '93091 Calle della Testa', '10934', 'Venice', '', 'IT'), ('1200', '2017 Shinjuku-ku', '1689', 'Tokyo', 'Tokyo Prefecture', 'JP'), ('1300', '9450 Kamiya-cho', '6823', 'Hiroshima', '', 'JP'), ('1400', '2014 Jabberwocky Rd', '26192', 'Southlake', 'Texas', 'US'), ('1500', '2011 Interiors Blvd', '99236', 'South San Francisco', 'California', 'US'), ('1600', '2007 Zagora St', '50090', 'South Brunswick', 'New Jersey', 'US'), ('1700', '2004 Charade Rd', '98199', 'Seattle', 'Washington', 'US'), ('1800', '147 Spadina Ave', 'M5V 2L7', 'Toronto', 'Ontario', 'CA'), ('1900', '6092 Boxwood St', 'YSW 9T2', 'Whitehorse', 'Yukon', 'CA'), ('2000', '40-5-12 Laogianggen', '190518', 'Beijing', '', 'CN'), ('2100', '1298 Vileparle (E)', '490231', 'Bombay', 'Maharashtra', 'IN'), ('2200', '12-98 Victoria Street', '2901', 'Sydney', 'New South Wales', 'AU'), ('2300', '198 Clementi North', '540198', 'Singapore', '', 'SG'), ('2400', '8204 Arthur St', '', 'London', '', 'UK'), ('2500', '""Magdalen Centre', ' The Oxford ', 'OX9 9ZB', 'Oxford', 'Ox'), ('2600', '9702 Chester Road', '9629850293', 'Stretford', 'Manchester', 'UK'), ('2700', 'Schwanthalerstr. 7031', '80925', 'Munich', 'Bavaria', 'DE'), ('2800', 'Rua Frei Caneca 1360', '01307-002', 'Sao Paulo', 'Sao Paulo', 'BR'), ('2900', '20 Rue des Corps-Saints', '1730', 'Geneva', 'Geneve', 'CH'), ('3000', 'Murtenstrasse 921', '3095', 'Bern', 'BE', 'CH'), ('3100', 'Pieter Breughelstraat 837', '3029SK', 'Utrecht', 'Utrecht', 'NL'), ('3200', 'Mariano Escobedo 9991', '11932', 'Mexico City', '""Distrito Federal', '""');  -- --------------------------------------------------------  -- -- Table structure for table `regions` --   /*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */; /*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */; /*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;",extra
304,1611,scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  ""Parsing"" AND t3.year  =  2012 AND t4.venuename  =  ""acl"";",papers on Parsing appeared at acl in 2012,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); ",extra
403,1788,scholar,"SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""deep learning"" ORDER BY t3.year DESC;",What are the latest publications on deep learning ?,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); ",extra
1308,6234,network_2,"SELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Alice'",Find the name and age of the person who is a friend of both Dan and Alice.,"CREATE TABLE Person (   name varchar(20) PRIMARY KEY,   age INTEGER,   city TEXT,   gender TEXT,   job TEXT );  CREATE TABLE PersonFriend (   name varchar(20),   friend varchar(20),   year INTEGER,   FOREIGN KEY (name) REFERENCES Person(name),   FOREIGN KEY (friend) REFERENCES Person(name) );  ",extra
1530,7565,customer_complaints,SELECT t1.first_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id GROUP BY t2.staff_id ORDER BY count(*) LIMIT 5,Return the first names of the 5 staff members who have handled the most complaints.,"PRAGMA foreign_keys = ON;   CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `gender` VARCHAR(1), `first_name` VARCHAR(80), `last_name` VARCHAR(80), `email_address` VARCHAR(255), `phone_number` VARCHAR(80) ); CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_type_code` VARCHAR(20) NOT NULL, `address_line_1` VARCHAR(80), `address_line_2` VARCHAR(80), `town_city` VARCHAR(80), `state` VARCHAR(80), `email_address` VARCHAR(255), `phone_number` VARCHAR(80) ); CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `parent_product_id` INTEGER, `product_category_code` VARCHAR(20) NOT NULL, `date_product_first_available` DATETIME, `date_product_discontinued` DATETIME, `product_name` VARCHAR(80), `product_description` VARCHAR(255), `product_price` DECIMAL(19,4) ); CREATE TABLE `Complaints` ( `complaint_id` INTEGER NOT NULL , `product_id` INTEGER NOT NULL, `customer_id` INTEGER NOT NULL, `complaint_outcome_code` VARCHAR(20) NOT NULL, `complaint_status_code` VARCHAR(20) NOT NULL, `complaint_type_code` VARCHAR(20) NOT NULL, `date_complaint_raised` DATETIME, `date_complaint_closed` DATETIME, `staff_id` INTEGER NOT NULL , FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) ); ",extra
628,2229,academic,"SELECT COUNT ( DISTINCT t4.title ) FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  ""H. V. Jagadish"" AND t2.name  =  ""PVLDB"" AND t4.year  >  2000;","return me the number of papers by "" H. V. Jagadish "" on PVLDB after 2000 .","PRAGMA foreign_keys = ON; CREATE TABLE ""author"" ( ""aid"" int, ""homepage"" text, ""name"" text, ""oid"" int, primary key(""aid"") ); CREATE TABLE ""conference"" ( ""cid"" int, ""homepage"" text, ""name"" text, primary key (""cid"") ); CREATE TABLE ""domain"" ( ""did"" int, ""name"" text, primary key (""did"") ); CREATE TABLE ""domain_author"" ( ""aid"" int,  ""did"" int, primary key (""did"", ""aid""), foreign key(""aid"") references `author`(""aid""), foreign key(""did"") references `domain`(""did"") );  CREATE TABLE ""domain_conference"" ( ""cid"" int, ""did"" int, primary key (""did"", ""cid""), foreign key(""cid"") references `conference`(""cid""), foreign key(""did"") references `domain`(""did"") ); CREATE TABLE ""journal"" ( ""homepage"" text, ""jid"" int, ""name"" text, primary key(""jid"") ); CREATE TABLE ""domain_journal"" ( ""did"" int, ""jid"" int, primary key (""did"", ""jid""), foreign key(""jid"") references ""journal""(""jid""), foreign key(""did"") references ""domain""(""did"") ); CREATE TABLE ""keyword"" ( ""keyword"" text, ""kid"" int, primary key(""kid"") ); CREATE TABLE ""domain_keyword"" ( ""did"" int, ""kid"" int, primary key (""did"", ""kid""), foreign key(""kid"") references ""keyword""(""kid""), foreign key(""did"") references ""domain""(""did"") ); CREATE TABLE ""publication"" ( ""abstract"" text, ""cid"" text, ""citation_num"" int, ""jid"" int, ""pid"" int, ""reference_num"" int, ""title"" text, ""year"" int, primary key(""pid""), foreign key(""jid"") references ""journal""(""jid""), foreign key(""cid"") references ""conference""(""cid"") ); CREATE TABLE ""domain_publication"" ( ""did"" int, ""pid"" int, primary key (""did"", ""pid""), foreign key(""pid"") references ""publication""(""pid""), foreign key(""did"") references ""domain""(""did"") );  CREATE TABLE ""organization"" ( ""continent"" text, ""homepage"" text, ""name"" text, ""oid"" int, primary key(""oid"") );  CREATE TABLE ""publication_keyword"" ( ""pid"" int, ""kid"" int, primary key (""kid"", ""pid""), foreign key(""pid"") references ""publication""(""pid""), foreign key(""kid"") references ""keyword""(""kid"") ); CREATE TABLE ""writes"" ( ""aid"" int, ""pid"" int, primary key (""aid"", ""pid""), foreign key(""pid"") references ""publication""(""pid""), foreign key(""aid"") references ""author""(""aid"") ); CREATE TABLE ""cite"" ( ""cited"" int, ""citing""  int, foreign key(""cited"") references ""publication""(""pid""), foreign key(""citing"") references ""publication""(""pid"") );",extra
248,1493,scholar,"SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  ""syntactic parsing"" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",who published the most in syntactic parsing ?,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); ",extra
1065,4607,inn_1,"SELECT T2.roomName ,  T1.Rate ,  T1.CheckIn ,  T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT 1;","Return the name, rate, check in and check out date for the room with the highest rate.","CREATE TABLE ""Rooms"" (  	""RoomId"" TEXT PRIMARY KEY, 	""roomName"" TEXT,  	""beds"" INTEGER,  	""bedType"" TEXT,  	""maxOccupancy"" INTEGER,  	""basePrice"" INTEGER,  	""decor"" TEXT  );  CREATE TABLE ""Reservations"" (  	""Code"" INTEGER PRIMARY KEY,  	""Room"" TEXT,  	""CheckIn"" TEXT,  	""CheckOut"" TEXT,  	""Rate"" REAL,  	""LastName"" TEXT,  	""FirstName"" TEXT,  	""Adults"" INTEGER,  	""Kids"" INTEGER, 	FOREIGN KEY (Room) REFERENCES Rooms(RoomId) ); ",extra
874,3104,customers_card_transactions,"SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",Show the first names and last names of customers without any account.,"PRAGMA foreign_keys = ON;  CREATE TABLE `Accounts` ( `account_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `account_name` VARCHAR(50), `other_account_details` VARCHAR(255) ); CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_first_name` VARCHAR(20), `customer_last_name` VARCHAR(20), `customer_address` VARCHAR(255), `customer_phone` VARCHAR(255), `customer_email` VARCHAR(255), `other_customer_details` VARCHAR(255) ); CREATE TABLE `Customers_Cards` ( `card_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `card_type_code` VARCHAR(15) NOT NULL, `card_number` VARCHAR(80), `date_valid_from` DATETIME, `date_valid_to` DATETIME, `other_card_details` VARCHAR(255) ); CREATE TABLE `Financial_Transactions` ( `transaction_id` INTEGER NOT NULL , `previous_transaction_id` INTEGER, `account_id` INTEGER NOT NULL, `card_id` INTEGER NOT NULL, `transaction_type` VARCHAR(15) NOT NULL, `transaction_date` DATETIME, `transaction_amount` DOUBLE NULL, `transaction_comment` VARCHAR(255), `other_transaction_details` VARCHAR(255), FOREIGN KEY (`card_id` ) REFERENCES `Customers_Cards`(`card_id` ), FOREIGN KEY (`account_id` ) REFERENCES `Accounts`(`account_id` ) );  INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (1, 'Aniyah', 'Feest', '55975 Theodore Estates Lake Brody, VT 57078', '(673)872-5338', 'fahey.dorian@example.com', NULL); INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (2, 'Susie', 'Wiza', '6478 Moen Isle Suite 910 Schimmelmouth, VT 96364-4898', '679-845-8645x94312', 'idickinson@example.com', NULL); INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (3, 'Marcel', 'Brekke', '1965 Abernathy Plains Port Lilla, LA 44867', '1-511-656-6664', 'nichole.rodriguez@example.com', NULL); INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (4, 'Art', 'Turcotte', '6862 Domenic Port New Elbert, DE 86980-8517', '941-213-6716x675', 'enrique59@example.com', NULL); INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (5, 'Armani', 'Farrell', '3031 Ludwig Square Unaview, SC 86336-3287', '224-123-1012', 'dauer@example.net', NULL); INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (6, 'Kiel', 'Schinner', '19935 Allie Bypass Apt. 409 Coleberg, FL 69194-5357', '1-564-044-3909', 'ebert.omer@example.net', NULL); INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (7, 'Izabella', 'Erdman', '23793 Athena Inlet Apt. 455 Schmidtmouth, NH 15794', '751.049.9948', 'kling.catalina@example.com', NULL); INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (8, 'Elyssa', 'Lind', '094 Julianne Mill Webstertown, KY 91980-4004', '+12(6)9024410984', 'dell13@example.com', NULL); INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (9, 'Faustino', 'Langworth', '0748 Lola Union Apt. 874 Reynoldsfurt, NM 94584-3767', '284.749.0453', 'ahomenick@example.org', NULL); INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (10, 'Axel', 'Effertz', '936 Lula Overpass East Alisonville, NH 14890', '+90(8)1290735932', 'kyra.murazik@example.org', NULL); INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (11, 'Frederic', 'Swift', '7127 Hilpert Parks South Johnfort, SD 67577-9504', '1-207-977-5182', 'keegan16@example.com', NULL); INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (12, 'Bryce', 'Rath', '74962 Hugh Mills North Laurenland, KY 46376', '(415)237-0701x3115', 'grady.general@example.org', NULL); INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (13, 'Serenity', 'Effertz', '71560 Eulah Squares Torphyberg, OK 34312-0380', '1-894-567-2283', 'schaden.katrina@example.net', NULL); INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (14, 'Blanche', 'Huels', '47286 Mraz Park Apt. 424 Jocelynfurt, OH 59023-2787', '(703)950-4708x8972', 'huels.antonina@example.com', NULL); INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (15, 'Nat', 'Davis', '163 Collier Square New Ceciltown, AL 64723-5646', '246-469-4472x359', 'earlene.carroll@example.net', NULL); ",extra
1434,7138,tracking_software_problems,"SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = ""Dameon"" AND T2.staff_last_name = ""Frami"" UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = ""Jolie"" AND T2.staff_last_name = ""Weber""",What are the id of problems reported by the staff named Dameon Frami or Jolie Weber?,"PRAGMA foreign_keys = ON; CREATE TABLE `Problem_Category_Codes` ( `problem_category_code` VARCHAR(20) PRIMARY KEY, `problem_category_description` VARCHAR(80) ); CREATE TABLE `Problem_Log` ( `problem_log_id` INTEGER PRIMARY KEY, `assigned_to_staff_id` INTEGER NOT NULL, `problem_id` INTEGER NOT NULL, `problem_category_code` VARCHAR(20) NOT NULL, `problem_status_code` VARCHAR(20) NOT NULL, `log_entry_date` DATETIME, `log_entry_description` VARCHAR(255), `log_entry_fix` VARCHAR(255), `other_log_details` VARCHAR(255), FOREIGN KEY (`problem_category_code` ) REFERENCES `Problem_Category_Codes`(`problem_category_code` ),FOREIGN KEY (`assigned_to_staff_id` ) REFERENCES `Staff`(`staff_id` ),FOREIGN KEY (`problem_id` ) REFERENCES `Problems`(`problem_id` ),FOREIGN KEY (`problem_status_code` ) REFERENCES `Problem_Status_Codes`(`problem_status_code` ) ); CREATE TABLE `Problem_Status_Codes` ( `problem_status_code` VARCHAR(20) PRIMARY KEY, `problem_status_description` VARCHAR(80) ); CREATE TABLE `Product` ( `product_id` INTEGER PRIMARY KEY, `product_name` VARCHAR(80), `product_details` VARCHAR(255) ); CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `staff_first_name` VARCHAR(80), `staff_last_name` VARCHAR(80), `other_staff_details` VARCHAR(255) );  CREATE TABLE `Problems` ( `problem_id` INTEGER PRIMARY KEY, `product_id` INTEGER NOT NULL, `closure_authorised_by_staff_id` INTEGER NOT NULL, `reported_by_staff_id` INTEGER NOT NULL, `date_problem_reported` DATETIME NOT NULL, `date_problem_closed` DATETIME, `problem_description` VARCHAR(255), `other_problem_details` VARCHAR(255), FOREIGN KEY (`closure_authorised_by_staff_id` ) REFERENCES `Staff`(`staff_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Product`(`product_id` ), FOREIGN KEY (`reported_by_staff_id` ) REFERENCES `Staff`(`staff_id` ) );   ",extra
1068,4660,inn_1,SELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations),Find the number of rooms that do not have any reservation.,"CREATE TABLE ""Rooms"" (  	""RoomId"" TEXT PRIMARY KEY, 	""roomName"" TEXT,  	""beds"" INTEGER,  	""bedType"" TEXT,  	""maxOccupancy"" INTEGER,  	""basePrice"" INTEGER,  	""decor"" TEXT  );  CREATE TABLE ""Reservations"" (  	""Code"" INTEGER PRIMARY KEY,  	""Room"" TEXT,  	""CheckIn"" TEXT,  	""CheckOut"" TEXT,  	""Rate"" REAL,  	""LastName"" TEXT,  	""FirstName"" TEXT,  	""Adults"" INTEGER,  	""Kids"" INTEGER, 	FOREIGN KEY (Room) REFERENCES Rooms(RoomId) ); ",extra
957,3763,customers_and_invoices,"SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1","Return the last name, id and phone number of the customer who has made the greatest number of orders.","PRAGMA foreign_keys = ON; CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_first_name` VARCHAR(50), `customer_middle_initial` VARCHAR(1), `customer_last_name` VARCHAR(50), `gender` VARCHAR(1), `email_address` VARCHAR(255), `login_name` VARCHAR(80), `login_password` VARCHAR(20), `phone_number` VARCHAR(255), `town_city` VARCHAR(50), `state_county_province` VARCHAR(50), `country` VARCHAR(50) );  CREATE TABLE `Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `date_order_placed` DATETIME NOT NULL, `order_details` VARCHAR(255), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) ); CREATE TABLE `Invoices` ( `invoice_number` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `invoice_date` DATETIME, FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ) ); CREATE TABLE `Accounts` ( `account_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `date_account_opened` DATETIME, `account_name` VARCHAR(50), `other_account_details` VARCHAR(255), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) );    CREATE TABLE `Product_Categories` ( `production_type_code` VARCHAR(15) PRIMARY KEY, `product_type_description` VARCHAR(80), `vat_rating` DECIMAL(19,4) ); CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `parent_product_id` INTEGER, `production_type_code` VARCHAR(15) NOT NULL, `unit_price` DECIMAL(19,4), `product_name` VARCHAR(80), `product_color` VARCHAR(20), `product_size` VARCHAR(20), FOREIGN KEY (`production_type_code` ) REFERENCES `Product_Categories`(`production_type_code` ) );  CREATE TABLE `Financial_Transactions` ( `transaction_id` INTEGER NOT NULL , `account_id` INTEGER NOT NULL, `invoice_number` INTEGER, `transaction_type` VARCHAR(15) NOT NULL, `transaction_date` DATETIME, `transaction_amount` DECIMAL(19,4), `transaction_comment` VARCHAR(255), `other_transaction_details` VARCHAR(255), FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ), FOREIGN KEY (`account_id` ) REFERENCES `Accounts`(`account_id` ) ); CREATE TABLE `Order_Items` ( `order_item_id` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, `product_quantity` VARCHAR(50), `other_order_item_details` VARCHAR(255), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ), FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ) );   CREATE TABLE `Invoice_Line_Items` ( `order_item_id` INTEGER NOT NULL, `invoice_number` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, `product_title` VARCHAR(80), `product_quantity` VARCHAR(50), `product_price` DECIMAL(19,4), `derived_product_cost` DECIMAL(19,4), `derived_vat_payable` DECIMAL(19,4), `derived_total_cost` DECIMAL(19,4), FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ), FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) ); ",extra
1215,5541,program_share,SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning' INTERSECT SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Night',Which channels broadcast both in the morning and at night? Give me the channel names.," PRAGMA foreign_keys = ON;   CREATE TABLE ""program"" ( ""Program_ID"" int, ""Name"" text, ""Origin"" text, ""Launch"" real, ""Owner"" text, PRIMARY KEY (""Program_ID"") );   CREATE TABLE ""channel"" ( ""Channel_ID"" int, ""Name"" text, ""Owner"" text, ""Share_in_percent"" real, ""Rating_in_percent"" real, PRIMARY KEY (""Channel_ID"") );    CREATE TABLE ""broadcast"" ( ""Channel_ID"" int, ""Program_ID"" int, ""Time_of_day"" text, PRIMARY KEY (""Channel_ID"",""Program_ID""), FOREIGN KEY (`Channel_ID`) REFERENCES `channel`(`Channel_ID`), FOREIGN KEY (`Program_ID`) REFERENCES `program`(`Program_ID`) );   CREATE TABLE ""broadcast_share"" ( ""Channel_ID"" int, ""Program_ID"" int, ""Date"" text, ""Share_in_percent"" real, PRIMARY KEY (""Channel_ID"",""Program_ID""), FOREIGN KEY (`Channel_ID`) REFERENCES `channel`(`Channel_ID`), FOREIGN KEY (`Program_ID`) REFERENCES `program`(`Program_ID`) );  ",extra
453,1847,scholar,"SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  ""CVPR"" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC;",who wrote the most papers for CVPR 2007,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); ",extra
898,3289,medicine_enzyme_interaction,"SELECT T1.id ,  T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id WHERE T2.interaction_type  =  'activitor' GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",What is the id and name of the enzyme that can interact with the most medicines as an activator?,"PRAGMA foreign_keys = ON; CREATE TABLE ""medicine"" ( ""id"" int, ""name"" text, ""Trade_Name"" text, ""FDA_approved"" text, primary key (""id"") );  CREATE TABLE ""enzyme"" ( ""id"" int, ""name"" text, ""Location"" text, ""Product"" text, ""Chromosome"" text, ""OMIM"" int, ""Porphyria"" text, primary key (""id"") );   CREATE TABLE ""medicine_enzyme_interaction"" ( ""enzyme_id"" int, ""medicine_id"" int, ""interaction_type"" text, primary key (""enzyme_id"", ""medicine_id""), foreign key (""enzyme_id"") references `enzyme`(""id""), foreign key (""medicine_id"") references `medicine`(""id"") );     ",extra
1260,5856,student_1,"SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  ""EVELINA"" AND T1.lastname  =  ""BROMLEY""",Find the first and last name of all the teachers that teach EVELINA BROMLEY.,"CREATE TABLE ""list"" (  	""LastName"" TEXT,  	""FirstName"" TEXT,  	""Grade"" INTEGER,  	""Classroom"" INTEGER, 	PRIMARY KEY(LastName, FirstName) ); CREATE TABLE ""teachers"" (  	""LastName"" TEXT,  	""FirstName"" TEXT,  	""Classroom"" INTEGER, 	PRIMARY KEY(LastName, FirstName) );",extra
434,1825,scholar,"SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  ""parsing"" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",What is the paper about parsing of the most citation ?,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); ",extra
91,562,student_transcripts_tracking,"SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1","What is the id, line 1, and line 2 of the address with the most students?","PRAGMA foreign_keys = ON; CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `line_1` VARCHAR(255), `line_2` VARCHAR(255), `line_3` VARCHAR(255), `city` VARCHAR(255), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(255), `country` VARCHAR(255), `other_address_details` VARCHAR(255) ); CREATE TABLE `Courses` ( `course_id` INTEGER PRIMARY KEY, `course_name` VARCHAR(255), `course_description` VARCHAR(255), `other_details` VARCHAR(255) );  CREATE TABLE `Departments` ( `department_id` INTEGER PRIMARY KEY, `department_name` VARCHAR(255), `department_description` VARCHAR(255), `other_details` VARCHAR(255) ); CREATE TABLE `Degree_Programs` ( `degree_program_id` INTEGER PRIMARY KEY, `department_id` INTEGER NOT NULL, `degree_summary_name` VARCHAR(255), `degree_summary_description` VARCHAR(255), `other_details` VARCHAR(255), FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` ) );  CREATE TABLE `Sections` ( `section_id` INTEGER PRIMARY KEY, `course_id` INTEGER NOT NULL, `section_name` VARCHAR(255), `section_description` VARCHAR(255), `other_details` VARCHAR(255), FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ) ); CREATE TABLE `Semesters` ( `semester_id` INTEGER PRIMARY KEY, `semester_name` VARCHAR(255), `semester_description` VARCHAR(255), `other_details` VARCHAR(255) ); CREATE TABLE `Students` ( `student_id` INTEGER PRIMARY KEY, `current_address_id` INTEGER NOT NULL, `permanent_address_id` INTEGER NOT NULL, `first_name` VARCHAR(80), `middle_name` VARCHAR(40), `last_name` VARCHAR(40), `cell_mobile_number` VARCHAR(40), `email_address` VARCHAR(40), `ssn` VARCHAR(40), `date_first_registered` DATETIME, `date_left` DATETIME, `other_student_details` VARCHAR(255), FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` ) );  CREATE TABLE `Student_Enrolment` ( `student_enrolment_id` INTEGER PRIMARY KEY, `degree_program_id` INTEGER NOT NULL, `semester_id` INTEGER NOT NULL, `student_id` INTEGER NOT NULL, `other_details` VARCHAR(255), FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ), FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ), FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ) ); CREATE TABLE `Student_Enrolment_Courses` ( `student_course_id` INTEGER PRIMARY KEY, `course_id` INTEGER NOT NULL, `student_enrolment_id` INTEGER NOT NULL, FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ), FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` ) );  CREATE TABLE `Transcripts` ( `transcript_id` INTEGER PRIMARY KEY, `transcript_date` DATETIME, `other_details` VARCHAR(255) );  CREATE TABLE `Transcript_Contents` ( `student_course_id` INTEGER NOT NULL, `transcript_id` INTEGER NOT NULL, FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ), FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` ) );  ",extra
1129,5081,behavior_monitoring,SELECT count(*) FROM STUDENTS WHERE student_id NOT IN ( SELECT student_id FROM Behavior_Incident ),How many students are not involved in any behavior incident?,"PRAGMA foreign_keys = ON; CREATE TABLE `Ref_Address_Types` ( `address_type_code` VARCHAR(15) PRIMARY KEY, `address_type_description` VARCHAR(80) ); CREATE TABLE `Ref_Detention_Type` ( `detention_type_code` VARCHAR(10) PRIMARY KEY, `detention_type_description` VARCHAR(80) ); CREATE TABLE `Ref_Incident_Type` ( `incident_type_code` VARCHAR(10) PRIMARY KEY, `incident_type_description` VARCHAR(80) );  CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `line_1` VARCHAR(120), `line_2` VARCHAR(120), `line_3` VARCHAR(120), `city` VARCHAR(80), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(50), `country` VARCHAR(50), `other_address_details` VARCHAR(255) );  CREATE TABLE `Students` ( `student_id` INTEGER PRIMARY KEY, `address_id` INTEGER NOT NULL, `first_name` VARCHAR(80), `middle_name` VARCHAR(40), `last_name` VARCHAR(40), `cell_mobile_number` VARCHAR(40), `email_address` VARCHAR(40), `date_first_rental` DATETIME, `date_left_university` DATETIME, `other_student_details` VARCHAR(255), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ) );  CREATE TABLE `Teachers` ( `teacher_id` INTEGER PRIMARY KEY, `address_id` INTEGER NOT NULL, `first_name` VARCHAR(80), `middle_name` VARCHAR(80), `last_name` VARCHAR(80), `gender` VARCHAR(1), `cell_mobile_number` VARCHAR(40), `email_address` VARCHAR(40), `other_details` VARCHAR(255), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ) ); CREATE TABLE `Assessment_Notes` ( `notes_id` INTEGER NOT NULL , `student_id` INTEGER, `teacher_id` INTEGER NOT NULL, `date_of_notes` DATETIME, `text_of_notes` VARCHAR(255), `other_details` VARCHAR(255), FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ), FOREIGN KEY (`teacher_id` ) REFERENCES `Teachers`(`teacher_id` ) ); CREATE TABLE `Behavior_Incident` ( `incident_id` INTEGER PRIMARY KEY, `incident_type_code` VARCHAR(10) NOT NULL, `student_id` INTEGER NOT NULL, `date_incident_start` DATETIME, `date_incident_end` DATETIME, `incident_summary` VARCHAR(255), `recommendations` VARCHAR(255), `other_details` VARCHAR(255), FOREIGN KEY (`incident_type_code` ) REFERENCES `Ref_Incident_Type`(`incident_type_code` ), FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ) ); CREATE TABLE `Detention` ( `detention_id` INTEGER PRIMARY KEY, `detention_type_code` VARCHAR(10) NOT NULL, `teacher_id` INTEGER, `datetime_detention_start` DATETIME, `datetime_detention_end` DATETIME, `detention_summary` VARCHAR(255), `other_details` VARCHAR(255), FOREIGN KEY (`detention_type_code` ) REFERENCES `Ref_Detention_Type`(`detention_type_code` ), FOREIGN KEY (`teacher_id` ) REFERENCES `Teachers`(`teacher_id` ) );  CREATE TABLE `Student_Addresses` ( `student_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_address_from` DATETIME NOT NULL, `date_address_to` DATETIME, `monthly_rental` DECIMAL(19,4), `other_details` VARCHAR(255), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ) );  CREATE TABLE `Students_in_Detention` ( `student_id` INTEGER NOT NULL, `detention_id` INTEGER NOT NULL, `incident_id` INTEGER NOT NULL, FOREIGN KEY (`incident_id` ) REFERENCES `Behavior_Incident`(`incident_id` ), FOREIGN KEY (`detention_id` ) REFERENCES `Detention`(`detention_id` ), FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ) );  ",extra
48,229,flight_2,SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1,Which airline has most number of flights?,"CREATE TABLE 'airlines' ( 	uid INTEGER PRIMARY KEY,  	Airline TEXT,  	Abbreviation TEXT,  	Country TEXT ); CREATE TABLE 'airports' ( 	City TEXT,  	AirportCode TEXT PRIMARY KEY,  	AirportName TEXT,  	Country TEXT,  	CountryAbbrev TEXT ); CREATE TABLE 'flights' ( 	Airline INTEGER,  	FlightNo INTEGER,  	SourceAirport TEXT,  	DestAirport TEXT,  	PRIMARY KEY(Airline, FlightNo), 	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode), 	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode) );",extra
460,1858,scholar,"SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""Richard Ladner"" AND t4.venuename  =  ""chi"";",what paper has Richard Ladner published in chi journal ?,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); ",extra
916,3503,body_builder,"SELECT Name ,  birth_place FROM people EXCEPT SELECT T1.Name ,  T1.birth_place FROM people AS T1 JOIN body_builder AS T2 ON T1.people_id  =  T2.people_id",List the names and origins of people who are not body builders.,"PRAGMA foreign_keys = ON;  CREATE TABLE ""body_builder"" ( ""Body_Builder_ID"" int, ""People_ID"" int, ""Snatch"" real, ""Clean_Jerk"" real, ""Total"" real, PRIMARY KEY (""Body_Builder_ID""), FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"") );  CREATE TABLE ""people"" ( ""People_ID"" int, ""Name"" text, ""Height"" real, ""Weight"" real, ""Birth_Date"" text, ""Birth_Place"" text, PRIMARY KEY (""People_ID"") );  ",extra
389,1774,scholar,"SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  ""Noah A Smith"";",who are all the co-authors of Noah A Smith ?,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); ",extra
1377,6652,local_govt_and_lot,SELECT count(*) FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM customer_events ),How many customers did not have any event?,"PRAGMA foreign_keys = ON;  CREATE TABLE Customers ( customer_id INTEGER NOT NULL, customer_details VARCHAR(255), PRIMARY KEY (customer_id) ); CREATE TABLE Properties ( property_id INTEGER NOT NULL, property_type_code CHAR(15) NOT NULL, property_address VARCHAR(255), other_details VARCHAR(255), PRIMARY KEY (property_id) ); CREATE TABLE Residents ( resident_id INTEGER NOT NULL, property_id INTEGER NOT NULL, date_moved_in DATETIME NOT NULL, date_moved_out DATETIME NOT NULL, other_details VARCHAR(255), PRIMARY KEY (resident_id, property_id, date_moved_in), FOREIGN KEY (property_id) REFERENCES Properties (property_id) );  CREATE TABLE Organizations ( organization_id INTEGER NOT NULL, parent_organization_id INTEGER, organization_details VARCHAR(255), PRIMARY KEY (organization_id) );  CREATE TABLE Services ( service_id INTEGER NOT NULL, organization_id INTEGER NOT NULL, service_type_code CHAR(15) NOT NULL, service_details VARCHAR(255), PRIMARY KEY (service_id), FOREIGN KEY (organization_id) REFERENCES Organizations (organization_id) ); CREATE TABLE Residents_Services ( resident_id INTEGER NOT NULL, service_id INTEGER NOT NULL, date_moved_in DATETIME, property_id INTEGER, date_requested DATETIME, date_provided DATETIME, other_details VARCHAR(255), PRIMARY KEY (resident_id, service_id), FOREIGN KEY (service_id) REFERENCES Services (service_id), FOREIGN KEY (resident_id, property_id, date_moved_in) REFERENCES Residents (resident_id,property_id,date_moved_in) );  CREATE TABLE Things ( thing_id INTEGER NOT NULL, organization_id INTEGER NOT NULL, Type_of_Thing_Code CHAR(15) NOT NULL, service_type_code CHAR(10) NOT NULL, service_details VARCHAR(255), PRIMARY KEY (thing_id), FOREIGN KEY (organization_id) REFERENCES Organizations (organization_id) ); CREATE TABLE Customer_Events ( Customer_Event_ID INTEGER NOT NULL, customer_id INTEGER, date_moved_in DATETIME, property_id INTEGER, resident_id INTEGER, thing_id INTEGER NOT NULL, PRIMARY KEY (Customer_Event_ID), FOREIGN KEY (thing_id) REFERENCES Things (thing_id), FOREIGN KEY (customer_id) REFERENCES Customers (customer_id), FOREIGN KEY (resident_id, property_id, date_moved_in) REFERENCES Residents (resident_id,property_id,date_moved_in) ); CREATE TABLE Customer_Event_Notes ( Customer_Event_Note_ID INTEGER NOT NULL, Customer_Event_ID INTEGER NOT NULL, service_type_code CHAR(15) NOT NULL, resident_id INTEGER NOT NULL, property_id INTEGER NOT NULL, date_moved_in DATETIME NOT NULL, PRIMARY KEY (Customer_Event_Note_ID), FOREIGN KEY (Customer_Event_ID) REFERENCES Customer_Events (Customer_Event_ID) );  CREATE TABLE Timed_Status_of_Things ( thing_id INTEGER NOT NULL, Date_and_Date DATETIME NOT NULL, Status_of_Thing_Code CHAR(15) NOT NULL, PRIMARY KEY (thing_id, Date_and_Date, Status_of_Thing_Code), FOREIGN KEY (thing_id) REFERENCES Things (thing_id) ); CREATE TABLE Timed_Locations_of_Things ( thing_id INTEGER NOT NULL, Date_and_Time DATETIME NOT NULL, Location_Code CHAR(15) NOT NULL, PRIMARY KEY (thing_id, Date_and_Time, Location_Code), FOREIGN KEY (thing_id) REFERENCES Things (thing_id));   ",extra
268,1545,scholar,"SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""David M. Blei"" AND t4.venuename  =  ""AISTATS"";",how many papers does David M. Blei have at AISTATS,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); ",extra
368,1735,scholar,"SELECT DISTINCT t3.journalid  ,  t4.venueid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""Peter Mertens"";",where does Peter Mertens publish ?,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); ",extra
98,709,orchestra,SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1,Show the name of the conductor that has conducted the most number of orchestras.," PRAGMA foreign_keys = ON;    CREATE TABLE ""conductor"" ( ""Conductor_ID"" int, ""Name"" text, ""Age"" int, ""Nationality"" text, ""Year_of_Work"" int, PRIMARY KEY (""Conductor_ID"") );  CREATE TABLE ""orchestra"" ( ""Orchestra_ID"" int, ""Orchestra"" text, ""Conductor_ID"" int, ""Record_Company"" text, ""Year_of_Founded"" real, ""Major_Record_Format"" text, PRIMARY KEY (""Orchestra_ID""), FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`) );  CREATE TABLE ""performance"" ( ""Performance_ID"" int, ""Orchestra_ID"" int, ""Type"" text, ""Date"" text, ""Official_ratings_(millions)"" real, ""Weekly_rank"" text, ""Share"" text, PRIMARY KEY (""Performance_ID""), FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`) );  CREATE TABLE ""show"" ( ""Show_ID"" int, ""Performance_ID"" int, ""If_first_show"" bool, ""Result"" text, ""Attendance"" real, FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`) );    ",extra
161,1240,geo,SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) );,what is the biggest city in the smallest state,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );",extra
613,2195,academic,"SELECT t2.name FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  ""Databases"";",return me all the organizations in Databases area .,"PRAGMA foreign_keys = ON; CREATE TABLE ""author"" ( ""aid"" int, ""homepage"" text, ""name"" text, ""oid"" int, primary key(""aid"") ); CREATE TABLE ""conference"" ( ""cid"" int, ""homepage"" text, ""name"" text, primary key (""cid"") ); CREATE TABLE ""domain"" ( ""did"" int, ""name"" text, primary key (""did"") ); CREATE TABLE ""domain_author"" ( ""aid"" int,  ""did"" int, primary key (""did"", ""aid""), foreign key(""aid"") references `author`(""aid""), foreign key(""did"") references `domain`(""did"") );  CREATE TABLE ""domain_conference"" ( ""cid"" int, ""did"" int, primary key (""did"", ""cid""), foreign key(""cid"") references `conference`(""cid""), foreign key(""did"") references `domain`(""did"") ); CREATE TABLE ""journal"" ( ""homepage"" text, ""jid"" int, ""name"" text, primary key(""jid"") ); CREATE TABLE ""domain_journal"" ( ""did"" int, ""jid"" int, primary key (""did"", ""jid""), foreign key(""jid"") references ""journal""(""jid""), foreign key(""did"") references ""domain""(""did"") ); CREATE TABLE ""keyword"" ( ""keyword"" text, ""kid"" int, primary key(""kid"") ); CREATE TABLE ""domain_keyword"" ( ""did"" int, ""kid"" int, primary key (""did"", ""kid""), foreign key(""kid"") references ""keyword""(""kid""), foreign key(""did"") references ""domain""(""did"") ); CREATE TABLE ""publication"" ( ""abstract"" text, ""cid"" text, ""citation_num"" int, ""jid"" int, ""pid"" int, ""reference_num"" int, ""title"" text, ""year"" int, primary key(""pid""), foreign key(""jid"") references ""journal""(""jid""), foreign key(""cid"") references ""conference""(""cid"") ); CREATE TABLE ""domain_publication"" ( ""did"" int, ""pid"" int, primary key (""did"", ""pid""), foreign key(""pid"") references ""publication""(""pid""), foreign key(""did"") references ""domain""(""did"") );  CREATE TABLE ""organization"" ( ""continent"" text, ""homepage"" text, ""name"" text, ""oid"" int, primary key(""oid"") );  CREATE TABLE ""publication_keyword"" ( ""pid"" int, ""kid"" int, primary key (""kid"", ""pid""), foreign key(""pid"") references ""publication""(""pid""), foreign key(""kid"") references ""keyword""(""kid"") ); CREATE TABLE ""writes"" ( ""aid"" int, ""pid"" int, primary key (""aid"", ""pid""), foreign key(""pid"") references ""publication""(""pid""), foreign key(""aid"") references ""author""(""aid"") ); CREATE TABLE ""cite"" ( ""cited"" int, ""citing""  int, foreign key(""cited"") references ""publication""(""pid""), foreign key(""citing"") references ""publication""(""pid"") );",extra
1351,6476,college_3,SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1,Give the building that the instructor who teaches the greatest number of courses lives in.,"create table Student (         StuID        INTEGER PRIMARY KEY,         LName        VARCHAR(12),         Fname        VARCHAR(12),         Age      INTEGER,         Sex      VARCHAR(1),         Major        INTEGER,         Advisor      INTEGER,         city_code    VARCHAR(3)  );  create table Faculty (        FacID 	       INTEGER PRIMARY KEY,        Lname		VARCHAR(15),        Fname		VARCHAR(15),        Rank		VARCHAR(15),        Sex		VARCHAR(1),        Phone		INTEGER,        Room		VARCHAR(5),        Building		VARCHAR(13) );  create table Department (        DNO   		INTEGER PRIMARY KEY,        Division		VARCHAR(2),        DName		VARCHAR(25),        Room		VARCHAR(5),        Building		VARCHAR(13),        DPhone		INTEGER );  create table Member_of (        FacID 	       INTEGER,        DNO	       INTEGER,        Appt_Type       VARCHAR(15),        FOREIGN KEY(FacID) REFERENCES Faculty(FacID),        FOREIGN KEY(DNO) REFERENCES Department(DNO) );  create table Course (        CID   	    	VARCHAR(7) PRIMARY KEY,        CName		VARCHAR(40),        Credits		INTEGER,        Instructor	INTEGER,        Days		VARCHAR(5),        Hours		VARCHAR(11),        DNO		INTEGER,        FOREIGN KEY(Instructor) REFERENCES Faculty(FacID),        FOREIGN KEY(DNO) REFERENCES Department(DNO) );  create table Minor_in (        StuID 	      INTEGER,        DNO		INTEGER,        FOREIGN KEY(StuID) REFERENCES Student(StuID),        FOREIGN KEY(DNO) REFERENCES Department(DNO) );  create table Enrolled_in (        StuID 		 INTEGER,        CID		VARCHAR(7),        Grade		VARCHAR(2),        FOREIGN KEY(StuID) REFERENCES Student(StuID),        FOREIGN KEY(CID) REFERENCES Course(CID),        FOREIGN KEY(Grade) REFERENCES Gradeconversion(lettergrade) );  create table Gradeconversion (        lettergrade	     VARCHAR(2) PRIMARY KEY,        gradepoint	     FLOAT );  ",extra
1115,5024,loan_1,SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname ORDER BY sum(T2.amount) DESC LIMIT 1,Find the name of bank branch that provided the greatest total amount of loans.,"CREATE TABLE bank ( branch_ID int PRIMARY KEY, bname varchar(20), no_of_customers int, city varchar(10), state varchar(20));   CREATE TABLE customer ( cust_ID varchar(3) PRIMARY KEY, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_ID int, state varchar(20), FOREIGN KEY(branch_ID) REFERENCES bank(branch_ID));   CREATE TABLE loan ( loan_ID varchar(3) PRIMARY KEY, loan_type varchar(15), cust_ID varchar(3), branch_ID varchar(3), amount int, FOREIGN KEY(branch_ID) REFERENCES bank(branch_ID), FOREIGN KEY(Cust_ID) REFERENCES customer(Cust_ID));  ",extra
75,505,battle_death,"SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'","Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.","PRAGMA foreign_keys = ON; CREATE TABLE ""battle"" ( ""id"" int, ""name"" text, ""date"" text, ""bulgarian_commander"" text, ""latin_commander"" text, ""result"" text, primary key(""id"") );  CREATE TABLE ""ship"" ( ""lost_in_battle"" int, ""id"" int, ""name"" text, ""tonnage"" text, ""ship_type"" text, ""location"" text, ""disposition_of_ship"" text, primary key(""id""), foreign key (`lost_in_battle`) references `battle`(""id"")  );   CREATE TABLE ""death"" ( ""caused_by_ship_id"" int, ""id"" int, ""note"" text, ""killed"" int, ""injured"" int, primary key(""id""), foreign key (""caused_by_ship_id"") references `ship`(""id"")  );  ",extra
1381,6679,store_product,SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city ORDER BY count(*) DESC LIMIT 1,What is the city with the most number of flagship stores?," PRAGMA foreign_keys = ON;  CREATE TABLE ""product"" ( ""product_id"" int, ""product"" text, ""dimensions"" text, ""dpi"" real, ""pages_per_minute_color"" real, ""max_page_size"" text, ""interface"" text, PRIMARY KEY (""product_id"") );  CREATE TABLE ""store"" ( ""Store_ID"" int, ""Store_Name"" text, ""Type"" text, ""Area_size"" real, ""Number_of_product_category"" real, ""Ranking"" int, PRIMARY KEY (""Store_ID"") );  CREATE TABLE ""district"" ( ""District_ID"" int, ""District_name"" text, ""Headquartered_City"" text, ""City_Population"" real, ""City_Area"" real, PRIMARY KEY (""District_ID"") );   CREATE TABLE ""store_product"" ( ""Store_ID"" int, ""Product_ID"" int, PRIMARY KEY (""Store_ID"",""Product_ID""), FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`), FOREIGN KEY (`Product_ID`) REFERENCES `product`(`Product_ID`) );  CREATE TABLE ""store_district"" ( ""Store_ID"" int, ""District_ID"" int, PRIMARY KEY (""Store_ID""), FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`), FOREIGN KEY (`District_ID`) REFERENCES `district`(`District_ID`) );  ",extra
527,1970,scholar,"SELECT DISTINCT COUNT ( DISTINCT t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname LIKE ""Ye Cao"" GROUP BY t3.year ORDER BY COUNT ( DISTINCT t3.paperid ) DESC;",In what year did Ye Cao publish the most papers,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); ",extra
1185,5414,music_1,"SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  ""bangla"" GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3",What are the top 3 artists with the largest number of songs in the language Bangla?," --data definition  create table genre( 	g_name varchar2(20) not null, 	rating varchar2(10), 	most_popular_in varchar2(50), 	primary key(g_name) );  create table artist( 	artist_name varchar2(50) not null, 	country varchar2(20), 	gender varchar2(20), 	preferred_genre varchar2(50), 	constraint a_name primary key(artist_name), 	foreign key(preferred_genre) references genre(g_name) ON DELETE CASCADE );  create table files( 	f_id number(10) not null, 	artist_name varchar2(50), 	file_size varchar2(20), 	duration varchar2(20), 	formats varchar2(20), 	primary key(f_id), 	foreign key(artist_name) references artist(artist_name) ON DELETE CASCADE );   create table song( 	song_name varchar2(50), 	artist_name varchar2(50), 	country varchar2(20), 	f_id number(10),     	genre_is varchar2(20), 	rating number(10) check(rating>0 and rating<11), 	languages varchar2(20), 	releasedate Date,  	resolution number(10) not null, 	constraint s_name primary key(song_name), 	foreign key(artist_name) references artist(artist_name) ON DELETE CASCADE, 	foreign key(f_id) references files(f_id) ON DELETE CASCADE, 	foreign key(genre_is) references genre(g_name) ON DELETE CASCADE );   --insertion of attributes in the table   ",extra
688,2313,academic,"SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  ""PVLDB"" GROUP BY t1.name ORDER BY COUNT ( DISTINCT t4.title ) DESC LIMIT 1;",return me the authors who have the most number of papers in PVLDB .,"PRAGMA foreign_keys = ON; CREATE TABLE ""author"" ( ""aid"" int, ""homepage"" text, ""name"" text, ""oid"" int, primary key(""aid"") ); CREATE TABLE ""conference"" ( ""cid"" int, ""homepage"" text, ""name"" text, primary key (""cid"") ); CREATE TABLE ""domain"" ( ""did"" int, ""name"" text, primary key (""did"") ); CREATE TABLE ""domain_author"" ( ""aid"" int,  ""did"" int, primary key (""did"", ""aid""), foreign key(""aid"") references `author`(""aid""), foreign key(""did"") references `domain`(""did"") );  CREATE TABLE ""domain_conference"" ( ""cid"" int, ""did"" int, primary key (""did"", ""cid""), foreign key(""cid"") references `conference`(""cid""), foreign key(""did"") references `domain`(""did"") ); CREATE TABLE ""journal"" ( ""homepage"" text, ""jid"" int, ""name"" text, primary key(""jid"") ); CREATE TABLE ""domain_journal"" ( ""did"" int, ""jid"" int, primary key (""did"", ""jid""), foreign key(""jid"") references ""journal""(""jid""), foreign key(""did"") references ""domain""(""did"") ); CREATE TABLE ""keyword"" ( ""keyword"" text, ""kid"" int, primary key(""kid"") ); CREATE TABLE ""domain_keyword"" ( ""did"" int, ""kid"" int, primary key (""did"", ""kid""), foreign key(""kid"") references ""keyword""(""kid""), foreign key(""did"") references ""domain""(""did"") ); CREATE TABLE ""publication"" ( ""abstract"" text, ""cid"" text, ""citation_num"" int, ""jid"" int, ""pid"" int, ""reference_num"" int, ""title"" text, ""year"" int, primary key(""pid""), foreign key(""jid"") references ""journal""(""jid""), foreign key(""cid"") references ""conference""(""cid"") ); CREATE TABLE ""domain_publication"" ( ""did"" int, ""pid"" int, primary key (""did"", ""pid""), foreign key(""pid"") references ""publication""(""pid""), foreign key(""did"") references ""domain""(""did"") );  CREATE TABLE ""organization"" ( ""continent"" text, ""homepage"" text, ""name"" text, ""oid"" int, primary key(""oid"") );  CREATE TABLE ""publication_keyword"" ( ""pid"" int, ""kid"" int, primary key (""kid"", ""pid""), foreign key(""pid"") references ""publication""(""pid""), foreign key(""kid"") references ""keyword""(""kid"") ); CREATE TABLE ""writes"" ( ""aid"" int, ""pid"" int, primary key (""aid"", ""pid""), foreign key(""pid"") references ""publication""(""pid""), foreign key(""aid"") references ""author""(""aid"") ); CREATE TABLE ""cite"" ( ""cited"" int, ""citing""  int, foreign key(""cited"") references ""publication""(""pid""), foreign key(""citing"") references ""publication""(""pid"") );",extra
1683,8544,tracking_orders,"SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = ""On Road"" INTERSECT SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = ""Shipped""","Which customers have both ""On Road"" and ""Shipped"" as order status? List the customer ids.","PRAGMA foreign_keys = ON; CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_name` VARCHAR(80), `customer_details` VARCHAR(255) ); CREATE TABLE `Invoices` ( `invoice_number` INTEGER PRIMARY KEY, `invoice_date` DATETIME, `invoice_details` VARCHAR(255) );  CREATE TABLE `Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `order_status` VARCHAR(10) NOT NULL, `date_order_placed` DATETIME NOT NULL, `order_details` VARCHAR(255), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) );  CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_name` VARCHAR(80), `product_details` VARCHAR(255) );  CREATE TABLE `Order_Items` ( `order_item_id` INTEGER PRIMARY KEY, `product_id` INTEGER NOT NULL, `order_id` INTEGER NOT NULL, `order_item_status` VARCHAR(10) NOT NULL, `order_item_details` VARCHAR(255), FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) );  CREATE TABLE `Shipments` ( `shipment_id` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `invoice_number` INTEGER NOT NULL, `shipment_tracking_number` VARCHAR(80), `shipment_date` DATETIME, `other_shipment_details` VARCHAR(255), FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ), FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ) );  CREATE TABLE `Shipment_Items` ( `shipment_id` INTEGER NOT NULL, `order_item_id` INTEGER NOT NULL, FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ), FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ) );  ",extra
1195,5442,baseball_1,"SELECT T1.name_first ,  T1.name_last ,  T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 3;","Find the first name, last name and id for the top three players won the most player awards.","PRAGMA foreign_keys=OFF; BEGIN TRANSACTION; CREATE TABLE all_star (     player_id TEXT,     year INTEGER,     game_num INTEGER,     game_id TEXT,     team_id TEXT,     league_id TEXT,     gp NUMERIC,     starting_pos NUMERIC,     foreign key (player_id) references player(player_id) ); CREATE TABLE appearances (     year INTEGER,     team_id TEXT,     league_id TEXT,     player_id TEXT,     g_all NUMERIC,     gs NUMERIC,     g_batting INTEGER,     g_defense NUMERIC,     g_p INTEGER,     g_c INTEGER,     g_1b INTEGER,     g_2b INTEGER,     g_3b INTEGER,     g_ss INTEGER,     g_lf INTEGER,     g_cf INTEGER,     g_rf INTEGER,     g_of INTEGER,     g_dh NUMERIC,     g_ph NUMERIC,     g_pr NUMERIC,     foreign key (team_id) references team(team_id),     foreign key (player_id) references player(player_id) ); CREATE TABLE manager_award (     player_id TEXT,     award_id TEXT,     year INTEGER,     league_id TEXT,     tie TEXT,     notes NUMERIC,     foreign key (player_id) references player(player_id) ); CREATE TABLE player_award (  	player_id TEXT,  	award_id TEXT,  	year INTEGER,  	league_id TEXT,     	tie TEXT,     	notes TEXT, 	foreign key (player_id) references player(player_id) ); CREATE TABLE manager_award_vote (     award_id TEXT,     year INTEGER,     league_id TEXT,     player_id TEXT,     points_won INTEGER,     points_max INTEGER,     votes_first INTEGER); CREATE TABLE player_award_vote (     award_id TEXT,     year INTEGER,     league_id TEXT,     player_id TEXT,     points_won NUMERIC,     points_max INTEGER,     votes_first NUMERIC,    foreign key (player_id) references player(player_id) ); CREATE TABLE batting ( player_id TEXT, year INTEGER, stint INTEGER, team_id TEXT, league_id TEXT, g INTEGER, ab NUMERIC,     r NUMERIC,     h NUMERIC,     double NUMERIC,     triple NUMERIC,     hr NUMERIC,     rbi NUMERIC,     sb NUMERIC,     cs NUMERIC,     bb NUMERIC,     so NUMERIC,     ibb NUMERIC,     hbp NUMERIC,     sh NUMERIC,     sf NUMERIC,     g_idp NUMERIC, foreign key (player_id) references player(player_id) ); CREATE TABLE batting_postseason (     year INTEGER,     round TEXT,     player_id TEXT,     team_id TEXT,     league_id TEXT,     g INTEGER,     ab INTEGER,     r INTEGER,     h INTEGER,     double INTEGER,     triple INTEGER,     hr INTEGER,     rbi INTEGER,     sb INTEGER,     cs NUMERIC,     bb INTEGER,     so INTEGER,     ibb NUMERIC,     hbp NUMERIC,     sh NUMERIC,     sf NUMERIC,     g_idp NUMERIC, 	foreign key (player_id) references player(player_id), 	foreign key (team_id) references team(team_id) ); CREATE TABLE player_college ( player_id TEXT,     college_id TEXT,     year INTEGER, 	foreign key (player_id) references player(player_id), 	foreign key (college_id) references college(college_id) ); CREATE TABLE fielding (     player_id TEXT,     year INTEGER,     stint INTEGER,     team_id TEXT,     league_id TEXT,     pos TEXT,     g INTEGER,     gs NUMERIC,     inn_outs NUMERIC,     po NUMERIC,     a NUMERIC,     e NUMERIC,     dp NUMERIC,     pb NUMERIC,     wp NUMERIC,     sb NUMERIC,     cs NUMERIC,     zr NUMERIC, 	foreign key (player_id) references player(player_id) ); CREATE TABLE fielding_outfield (     player_id TEXT,     year INTEGER,     stint INTEGER,     glf NUMERIC,     gcf NUMERIC,     grf NUMERIC, 	foreign key (player_id) references player(player_id) ); CREATE TABLE fielding_postseason (     player_id TEXT,     year INTEGER,     team_id TEXT,     league_id TEXT,     round TEXT,     pos TEXT,     g INTEGER,     gs NUMERIC,     inn_outs NUMERIC,     po INTEGER,     a INTEGER,     e INTEGER,     dp INTEGER,     tp INTEGER,     pb NUMERIC,     sb NUMERIC,     cs NUMERIC, 	foreign key (player_id) references player(player_id), 	foreign key (team_id) references player(team_id) ); CREATE TABLE hall_of_fame (     player_id TEXT,     yearid INTEGER,     votedby TEXT,     ballots NUMERIC,     needed NUMERIC,     votes NUMERIC,     inducted TEXT,     category TEXT,     needed_note TEXT, 	foreign key (player_id) references player(player_id) ); CREATE TABLE home_game (     year INTEGER,     league_id TEXT,     team_id TEXT,     park_id TEXT,     span_first TEXT,     span_last TEXT,     games INTEGER,     openings INTEGER,     attendance INTEGER, 	foreign key (team_id) references team(team_id), 	foreign key (park_id) references park(park_id) ); CREATE TABLE manager (     player_id TEXT,     year INTEGER,     team_id TEXT,     league_id TEXT,     inseason INTEGER,     g INTEGER,     w INTEGER,     l INTEGER,     rank NUMERIC,     plyr_mgr TEXT, 	foreign key (team_id) references team(team_id) ); CREATE TABLE manager_half (     player_id TEXT,     year INTEGER,     team_id TEXT,     league_id TEXT,     inseason INTEGER,     half INTEGER,     g INTEGER,     w INTEGER,     l INTEGER,     rank INTEGER, 	foreign key (team_id) references team(team_id) ); CREATE TABLE player (     player_id TEXT,     birth_year NUMERIC,     birth_month NUMERIC,     birth_day NUMERIC,     birth_country TEXT,     birth_state TEXT,     birth_city TEXT,     death_year NUMERIC,     death_month NUMERIC,     death_day NUMERIC,     death_country TEXT,     death_state TEXT,     death_city TEXT,     name_first TEXT,     name_last TEXT,     name_given TEXT,     weight NUMERIC,     height NUMERIC,     bats TEXT,     throws TEXT,     debut TEXT,     final_game TEXT,     retro_id TEXT,     bbref_id TEXT); Macomb County','Steve','Gromek','Stephen Joseph',180,74,'B','R','1941-08-18','1957-07-25','groms101','gromest01'); Calhoun Cty','Charlie','Grover','Charles Byrd',185,73,'L','R','1913-09-09','1913-09-12','grovc101','grovech01'); CREATE TABLE park (     park_id TEXT,     park_name TEXT,     park_alias TEXT,     city TEXT,     state TEXT,     country TEXT); Anaheim Stadium','Anaheim','CA','US'); Ameriquest Field','Arlington','TX','US'); Union Grounds','Chicago','IL','US'); Cubs Park','Chicago','IL','US'); Comiskey Park II','Chicago','IL','US'); Briggs Stadium','Detroit','MI','US'); Astros Field','Houston','TX','US'); Pro Player Stadium; Dolphin Stadium; LandShark Stadium','Miami','FL','US'); SBC Park','San Francisco','CA','US'); CREATE TABLE pitching (     player_id TEXT,     year INTEGER,     stint INTEGER,     team_id TEXT,     league_id TEXT,     w INTEGER,     l INTEGER,     g INTEGER,     gs INTEGER,     cg INTEGER,     sho INTEGER,     sv INTEGER,     ipouts NUMERIC,     h INTEGER,     er INTEGER,     hr INTEGER,     bb INTEGER,     so INTEGER,     baopp NUMERIC,     era NUMERIC,     ibb NUMERIC,     wp NUMERIC,     hbp NUMERIC,     bk INTEGER,     bfp NUMERIC,     gf NUMERIC,     r INTEGER,     sh NUMERIC,     sf NUMERIC,     g_idp NUMERIC); CREATE TABLE pitching_postseason (     player_id TEXT,     year INTEGER,     round TEXT,     team_id TEXT,     league_id TEXT,     w INTEGER,     l INTEGER,     g INTEGER,     gs INTEGER,     cg INTEGER,     sho INTEGER,     sv INTEGER,     ipouts INTEGER,     h INTEGER,     er INTEGER,     hr INTEGER,     bb INTEGER,     so INTEGER,     baopp TEXT,     era NUMERIC,     ibb NUMERIC,     wp NUMERIC,     hbp NUMERIC,     bk NUMERIC,     bfp NUMERIC,     gf INTEGER,     r INTEGER,     sh NUMERIC,     sf NUMERIC,     g_idp NUMERIC); CREATE TABLE salary (     year INTEGER,     team_id TEXT,     league_id TEXT,     player_id TEXT,     salary INTEGER); CREATE TABLE college (     college_id TEXT,     name_full TEXT,     city TEXT,     state TEXT,     country TEXT); CREATE TABLE postseason (     year INTEGER,     round TEXT,     team_id_winner TEXT,     league_id_winner TEXT,     team_id_loser TEXT,     league_id_loser TEXT,     wins INTEGER,     losses INTEGER,     ties INTEGER); CREATE TABLE team (     year INTEGER,     league_id TEXT,     team_id TEXT,     franchise_id TEXT,     div_id TEXT,     rank INTEGER,     g INTEGER,     ghome NUMERIC,     w INTEGER,     l INTEGER,     div_win TEXT,     wc_win TEXT,     lg_win TEXT,     ws_win TEXT,     r INTEGER,     ab INTEGER,     h INTEGER,     double INTEGER,     triple INTEGER,     hr INTEGER,     bb INTEGER,     so NUMERIC,     sb NUMERIC,     cs NUMERIC,     hbp NUMERIC,     sf NUMERIC,     ra INTEGER,     er INTEGER,     era NUMERIC,     cg INTEGER,     sho INTEGER,     sv INTEGER,     ipouts INTEGER,     ha INTEGER,     hra INTEGER,     bba INTEGER,     soa INTEGER,     e INTEGER,     dp NUMERIC,     fp NUMERIC,     name TEXT,     park TEXT,     attendance NUMERIC,     bpf INTEGER,     ppf INTEGER,     team_id_br TEXT,     team_id_lahman45 TEXT,     team_id_retro TEXT); CREATE TABLE team_franchise (     franchise_id TEXT,     franchise_name TEXT,     active TEXT,     na_assoc TEXT); CREATE TABLE team_half (     year INTEGER,     league_id TEXT,     team_id TEXT,     half INTEGER,     div_id TEXT,     div_win TEXT,     rank INTEGER,     g INTEGER,     w INTEGER,     l INTEGER); COMMIT;",extra
1085,4823,election,"SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  ""Appropriations"" INTERSECT SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  ""Economic Matters""","Which parties have delegates in both the ""Appropriations"" committee and the ""Economic Matters"" committee?","PRAGMA foreign_keys = ON;  CREATE TABLE ""county"" ( ""County_Id"" int, ""County_name"" text, ""Population"" real, ""Zip_code"" text, PRIMARY KEY (""County_Id"") );  CREATE TABLE ""party"" ( ""Party_ID"" int, ""Year"" real, ""Party"" text, ""Governor"" text, ""Lieutenant_Governor"" text, ""Comptroller"" text, ""Attorney_General"" text, ""US_Senate"" text, PRIMARY KEY (""Party_ID"") );   CREATE TABLE ""election"" ( ""Election_ID"" int, ""Counties_Represented"" text, ""District"" int, ""Delegate"" text, ""Party"" int, ""First_Elected"" real, ""Committee"" text, PRIMARY KEY (""Election_ID""), FOREIGN KEY (`Party`) REFERENCES `party`(`Party_ID`), FOREIGN KEY (`District`) REFERENCES `county`(`County_Id`) );  ",extra
1461,7331,products_gen_characteristics,"SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  ""white"" OR t3.characteristic_name  =  ""hot""",How many products have their color described as 'white' or have a characteristic with the name 'hot'?,"PRAGMA foreign_keys = ON; CREATE TABLE `Ref_Characteristic_Types` ( `characteristic_type_code` VARCHAR(15) PRIMARY KEY, `characteristic_type_description` VARCHAR(80) ); CREATE TABLE `Ref_Colors` ( `color_code` VARCHAR(15) PRIMARY KEY, `color_description` VARCHAR(80) ); CREATE TABLE `Ref_Product_Categories` ( `product_category_code` VARCHAR(15) PRIMARY KEY, `product_category_description` VARCHAR(80), `unit_of_measure` VARCHAR(20) ); CREATE TABLE `Characteristics` ( `characteristic_id` INTEGER PRIMARY KEY, `characteristic_type_code` VARCHAR(15) NOT NULL, `characteristic_data_type` VARCHAR(10), `characteristic_name` VARCHAR(80), `other_characteristic_details` VARCHAR(255), FOREIGN KEY (`characteristic_type_code` ) REFERENCES `Ref_Characteristic_Types`(`characteristic_type_code` ) ); CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `color_code` VARCHAR(15) NOT NULL, `product_category_code` VARCHAR(15) NOT NULL, `product_name` VARCHAR(80), `typical_buying_price` VARCHAR(20), `typical_selling_price` VARCHAR(20), `product_description` VARCHAR(255), `other_product_details` VARCHAR(255), FOREIGN KEY (`product_category_code` ) REFERENCES `Ref_Product_Categories`(`product_category_code` ),FOREIGN KEY (`color_code` ) REFERENCES `Ref_Colors`(`color_code` ) ); CREATE TABLE `Product_Characteristics` ( `product_id` INTEGER NOT NULL, `characteristic_id` INTEGER NOT NULL, `product_characteristic_value` VARCHAR(50), FOREIGN KEY (`characteristic_id` ) REFERENCES `Characteristics`(`characteristic_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) ); ",extra
396,1781,scholar,"SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  ""jitendra malik"";",what datasets did jitendra malik use in his papers ?,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); ",extra
1415,6977,music_2,"SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE lastname  =  ""Heilo"" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1","What is the type of vocals that the band member with the last name ""Heilo"" played the most?","  CREATE TABLE ""Songs"" (  	""SongId"" INTEGER PRIMARY KEY,  	""Title"" TEXT  ); CREATE TABLE ""Albums"" (  	""AId"" INTEGER PRIMARY KEY,  	""Title"" TEXT,  	""Year"" INTEGER,  	""Label"" TEXT,  	""Type"" TEXT ); CREATE TABLE ""Band"" (  	""Id"" INTEGER PRIMARY KEY,  	""Firstname"" TEXT,  	""Lastname"" TEXT ); CREATE TABLE ""Instruments"" (  	""SongId"" INTEGER,  	""BandmateId"" INTEGER,  	""Instrument"" TEXT , 	PRIMARY KEY(SongId, BandmateId, Instrument), 	FOREIGN KEY (SongId) REFERENCES Songs(SongId), 	FOREIGN KEY (BandmateId) REFERENCES Band(Id) ); CREATE TABLE ""Performance"" (  	""SongId"" INTEGER,  	""Bandmate"" INTEGER,  	""StagePosition"" TEXT, 	PRIMARY KEY(SongId, Bandmate), 	FOREIGN KEY (SongId) REFERENCES Songs(SongId), 	FOREIGN KEY (Bandmate) REFERENCES Band(Id) ); CREATE TABLE ""Tracklists"" (  	""AlbumId"" INTEGER,  	""Position"" INTEGER,  	""SongId"" INTEGER , 	PRIMARY KEY(AlbumId, Position), 	FOREIGN KEY (SongId) REFERENCES Songs(SongId), 	FOREIGN KEY (AlbumId) REFERENCES Albums(AId) ); CREATE TABLE ""Vocals"" (  	""SongId"" INTEGER,  	""Bandmate"" INTEGER,  	""Type"" TEXT, 	PRIMARY KEY(SongId, Bandmate), 	FOREIGN KEY (SongId) REFERENCES Songs(SongId), 	FOREIGN KEY (Bandmate) REFERENCES Band(Id) ); ",extra
341,1696,scholar,"SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  ""Christof Dallermassl"" AND t3.year  =  2000;",keyphrases used by Christof Dallermassl in 2000,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); ",extra
1573,7883,customers_and_addresses,SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1,Which product has been ordered most number of times?,"PRAGMA foreign_keys = ON;  CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `address_content` VARCHAR(80), `city` VARCHAR(50), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(50), `country` VARCHAR(50), `other_address_details` VARCHAR(255) );  CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_details` VARCHAR(255) ); CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `payment_method` VARCHAR(15) NOT NULL, `customer_name` VARCHAR(80), `date_became_customer` DATETIME, `other_customer_details` VARCHAR(255) ); CREATE TABLE `Customer_Addresses` ( `customer_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_address_from` DATETIME NOT NULL, `address_type` VARCHAR(15) NOT NULL, `date_address_to` DATETIME, FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) ); CREATE TABLE `Customer_Contact_Channels` ( `customer_id` INTEGER NOT NULL, `channel_code` VARCHAR(15) NOT NULL, `active_from_date` DATETIME NOT NULL, `active_to_date` DATETIME, `contact_number` VARCHAR(50) NOT NULL, FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) ); CREATE TABLE `Customer_Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `order_status` VARCHAR(15) NOT NULL, `order_date` DATETIME, `order_details` VARCHAR(255), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) );  CREATE TABLE `Order_Items` ( `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, `order_quantity` VARCHAR(15), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ), FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ) ); ",extra
510,1945,scholar,"SELECT DISTINCT t3.journalid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""Temporal Data"" GROUP BY t3.journalid;",List the journals related to Temporal Data,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); ",extra
446,1837,scholar,"SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""ohad shamir"" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",What is ohad shamir 's highest cited paper ?,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); ",extra
674,2297,academic,"SELECT t1.name FROM DOMAIN AS t4 JOIN domain_publication AS t2 ON t4.did  =  t2.did JOIN publication AS t5 ON t5.pid  =  t2.pid JOIN writes AS t3 ON t3.pid  =  t5.pid JOIN author AS t1 ON t3.aid  =  t1.aid JOIN organization AS t6 ON t6.oid  =  t1.oid WHERE t4.name  =  ""Databases"" AND t6.name  =  ""University of Michigan"" GROUP BY t1.name ORDER BY SUM ( t5.citation_num ) DESC LIMIT 1;","return me the author in the "" University of Michigan "" whose papers in Databases area have the most total citations .","PRAGMA foreign_keys = ON; CREATE TABLE ""author"" ( ""aid"" int, ""homepage"" text, ""name"" text, ""oid"" int, primary key(""aid"") ); CREATE TABLE ""conference"" ( ""cid"" int, ""homepage"" text, ""name"" text, primary key (""cid"") ); CREATE TABLE ""domain"" ( ""did"" int, ""name"" text, primary key (""did"") ); CREATE TABLE ""domain_author"" ( ""aid"" int,  ""did"" int, primary key (""did"", ""aid""), foreign key(""aid"") references `author`(""aid""), foreign key(""did"") references `domain`(""did"") );  CREATE TABLE ""domain_conference"" ( ""cid"" int, ""did"" int, primary key (""did"", ""cid""), foreign key(""cid"") references `conference`(""cid""), foreign key(""did"") references `domain`(""did"") ); CREATE TABLE ""journal"" ( ""homepage"" text, ""jid"" int, ""name"" text, primary key(""jid"") ); CREATE TABLE ""domain_journal"" ( ""did"" int, ""jid"" int, primary key (""did"", ""jid""), foreign key(""jid"") references ""journal""(""jid""), foreign key(""did"") references ""domain""(""did"") ); CREATE TABLE ""keyword"" ( ""keyword"" text, ""kid"" int, primary key(""kid"") ); CREATE TABLE ""domain_keyword"" ( ""did"" int, ""kid"" int, primary key (""did"", ""kid""), foreign key(""kid"") references ""keyword""(""kid""), foreign key(""did"") references ""domain""(""did"") ); CREATE TABLE ""publication"" ( ""abstract"" text, ""cid"" text, ""citation_num"" int, ""jid"" int, ""pid"" int, ""reference_num"" int, ""title"" text, ""year"" int, primary key(""pid""), foreign key(""jid"") references ""journal""(""jid""), foreign key(""cid"") references ""conference""(""cid"") ); CREATE TABLE ""domain_publication"" ( ""did"" int, ""pid"" int, primary key (""did"", ""pid""), foreign key(""pid"") references ""publication""(""pid""), foreign key(""did"") references ""domain""(""did"") );  CREATE TABLE ""organization"" ( ""continent"" text, ""homepage"" text, ""name"" text, ""oid"" int, primary key(""oid"") );  CREATE TABLE ""publication_keyword"" ( ""pid"" int, ""kid"" int, primary key (""kid"", ""pid""), foreign key(""pid"") references ""publication""(""pid""), foreign key(""kid"") references ""keyword""(""kid"") ); CREATE TABLE ""writes"" ( ""aid"" int, ""pid"" int, primary key (""aid"", ""pid""), foreign key(""pid"") references ""publication""(""pid""), foreign key(""aid"") references ""author""(""aid"") ); CREATE TABLE ""cite"" ( ""cited"" int, ""citing""  int, foreign key(""cited"") references ""publication""(""pid""), foreign key(""citing"") references ""publication""(""pid"") );",extra
1635,8301,wine_1,"SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  ""White"" GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3",Find the top 3 wineries with the greatest number of wines made of white color grapes.,"CREATE TABLE ""grapes"" (  	""ID"" INTEGER PRIMARY KEY,  	""Grape"" TEXT UNIQUE,  	""Color"" TEXT  );  CREATE TABLE ""appellations"" (  	""No"" INTEGER PRIMARY KEY,  	""Appelation"" TEXT UNIQUE,  	""County"" TEXT,  	""State"" TEXT,  	""Area"" TEXT,  	""isAVA"" TEXT );  CREATE TABLE ""wine"" (  	""No"" INTEGER,  	""Grape"" TEXT,  	""Winery"" TEXT,  	""Appelation"" TEXT,  	""State"" TEXT,  	""Name"" TEXT,  	""Year"" INTEGER,  	""Price"" INTEGER,  	""Score"" INTEGER,  	""Cases"" INTEGER,  	""Drink"" TEXT, 	FOREIGN KEY (Grape) REFERENCES grapes(Grape), 	FOREIGN KEY (Appelation) REFERENCES appellations(Appelation) );",extra
1012,4219,formula_1,"SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  <  (SELECT max(duration) FROM pitstops WHERE raceid  =  841)",Find the distinct driver id and the stop number of all drivers that have a shorter pit stop duration than some drivers in the race with id 841.,"BEGIN TRANSACTION; CREATE TABLE IF NOT EXISTS ""circuits"" ( ""circuitId"" INTEGER PRIMARY KEY,   ""circuitRef"" TEXT,   ""name"" TEXT,   ""location"" TEXT,   ""country"" TEXT,   ""lat"" REAL,   ""lng"" REAL,   ""alt"" INTEGER,   ""url"" TEXT ); CREATE TABLE IF NOT EXISTS ""races"" ( ""raceId"" INTEGER PRIMARY KEY,   ""year"" INTEGER,   ""round"" INTEGER,   ""circuitId"" INTEGER,   ""name"" TEXT,   ""date"" TEXT,   ""time"" TEXT,   ""url"" TEXT,   FOREIGN KEY (""circuitId"") REFERENCES ""circuits""(""circuitId"") );  CREATE TABLE IF NOT EXISTS ""drivers"" ( ""driverId"" INTEGER PRIMARY KEY,   ""driverRef"" TEXT,   ""number"" INTEGER,   ""code"" TEXT,   ""forename"" TEXT,   ""surname"" TEXT,   ""dob"" TEXT,   ""nationality"" TEXT,   ""url"" TEXT ); CREATE TABLE IF NOT EXISTS ""status"" ( ""statusId"" INTEGER PRIMARY KEY,   ""status"" TEXT ); CREATE TABLE IF NOT EXISTS ""seasons"" ( ""year"" INTEGER PRIMARY KEY,   ""url"" TEXT ); CREATE TABLE IF NOT EXISTS ""constructors"" ( 	""constructorId"" INTEGER PRIMARY KEY,   ""constructorRef"" TEXT,   ""name"" TEXT,   ""nationality"" TEXT,   ""url"" TEXT ); CREATE TABLE IF NOT EXISTS ""constructorStandings"" ( 	""constructorStandingsId"" INTEGER PRIMARY KEY,   ""raceId"" INTEGER,   ""constructorId"" INTEGER,   ""points"" REAL,   ""position"" INTEGER,   ""positionText"" TEXT,   ""wins"" INTEGER,   FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),   FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId"") ); CREATE TABLE IF NOT EXISTS ""results"" ( ""resultId"" INTEGER PRIMARY KEY,   ""raceId"" INTEGER,   ""driverId"" INTEGER,   ""constructorId"" INTEGER,   ""number"" INTEGER,   ""grid"" INTEGER,   ""position"" INTEGER,   ""positionText"" TEXT,   ""positionOrder"" INTEGER,   ""points"" REAL,   ""laps"" INTEGER,   ""time"" TEXT,   ""milliseconds"" INTEGER,   ""fastestLap"" INTEGER,   ""rank"" INTEGER,   ""fastestLapTime"" TEXT,   ""fastestLapSpeed"" TEXT,   ""statusId"" INTEGER,   FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),   FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),   FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId"") ); CREATE TABLE IF NOT EXISTS ""driverStandings"" ( ""driverStandingsId"" INTEGER PRIMARY KEY,   ""raceId"" INTEGER,   ""driverId"" INTEGER,   ""points"" REAL,   ""position"" INTEGER,   ""positionText"" TEXT,   ""wins"" INTEGER,   FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),   FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId"") ); CREATE TABLE IF NOT EXISTS ""constructorResults"" ( ""constructorResultsId"" INTEGER PRIMARY KEY,   ""raceId"" INTEGER,   ""constructorId"" INTEGER,   ""points"" REAL,   ""status"" REAL,   FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),   FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId"") ); CREATE TABLE IF NOT EXISTS ""qualifying"" ( ""qualifyId"" INTEGER PRIMARY KEY,   ""raceId"" INTEGER,   ""driverId"" INTEGER,   ""constructorId"" INTEGER,   ""number"" INTEGER,   ""position"" INTEGER,   ""q1"" TEXT,   ""q2"" TEXT,   ""q3"" TEXT,   FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),   FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),   FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId"") ); CREATE TABLE IF NOT EXISTS ""pitStops"" ( ""raceId"" INTEGER,   ""driverId"" INTEGER,   ""stop"" INTEGER,   ""lap"" INTEGER,   ""time"" TEXT,   ""duration"" TEXT,   ""milliseconds"" INTEGER,   PRIMARY KEY (""raceId"", ""driverId"", ""stop""),   FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),   FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId"") ); CREATE TABLE IF NOT EXISTS ""lapTimes"" ( ""raceId"" INTEGER,   ""driverId"" INTEGER,   ""lap"" INTEGER,   ""position"" INTEGER,   ""time"" TEXT,   ""milliseconds"" INTEGER,   PRIMARY KEY(""raceId"", ""driverId"", ""lap""),   FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),   FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId"") );COMMIT;",extra
1617,8197,scientist_1,"SELECT T1.name ,  T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1",Find the name and hours of project that has the most number of scientists.,"create table Scientists (   SSN int,   Name Char(30) not null,   Primary Key (SSN) );  Create table Projects (   Code Char(4),   Name Char(50) not null,   Hours int,   Primary Key (Code) ); 	 create table AssignedTo (   Scientist int not null,   Project char(4) not null,   Primary Key (Scientist, Project),   Foreign Key (Scientist) references Scientists (SSN),   Foreign Key (Project) references Projects (Code) );  INSERT INTO Scientists(SSN,Name)    VALUES(123234877,'Michael Rogers'),     (152934485,'Anand Manikutty'),     (222364883, 'Carol Smith'),     (326587417,'Joe Stevens'),     (332154719,'Mary-Anne Foster'),	     (332569843,'George ODonnell'),     (546523478,'John Doe'),     (631231482,'David Smith'),     (654873219,'Zacary Efron'),     (745685214,'Eric Goldsmith'),     (845657245,'Elizabeth Doe'),     (845657246,'Kumar Swamy');   INSERT INTO Projects ( Code,Name,Hours)  VALUES ('AeH1','Winds: Studying Bernoullis Principle', 156),        ('AeH2','Aerodynamics and Bridge Design',189),        ('AeH3','Aerodynamics and Gas Mileage', 256),        ('AeH4','Aerodynamics and Ice Hockey', 789),        ('AeH5','Aerodynamics of a Football', 98),        ('AeH6','Aerodynamics of Air Hockey',89),        ('Ast1','A Matter of Time',112),        ('Ast2','A Puzzling Parallax', 299),        ('Ast3','Build Your Own Telescope', 6546),        ('Bte1','Juicy: Extracting Apple Juice with Pectinase', 321),        ('Bte2','A Magnetic Primer Designer', 9684),        ('Bte3','Bacterial Transformation Efficiency', 321),        ('Che1','A Silver-Cleaning Battery', 545),        ('Che2','A Soluble Separation Solution', 778);   INSERT INTO AssignedTo ( Scientist, Project)    VALUES (123234877,'AeH1'),     (152934485,'AeH3'),     (222364883,'Ast3'),	        (326587417,'Ast3'),     (332154719,'Bte1'),     (546523478,'Che1'),     (631231482,'Ast3'),     (654873219,'Che1'),     (745685214,'AeH3'),     (845657245,'Ast1'),     (845657246,'Ast2'),     (332569843,'AeH4');",extra
108,793,dog_kennels,"SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id","Which professional did not operate any treatment on dogs? List the professional's id, role and email.","PRAGMA foreign_keys = ON; CREATE TABLE `Breeds` ( `breed_code` VARCHAR(10) PRIMARY KEY , `breed_name` VARCHAR(80) ); CREATE TABLE `Charges` ( `charge_id` INTEGER PRIMARY KEY , `charge_type` VARCHAR(10), `charge_amount` DECIMAL(19,4) ); CREATE TABLE `Sizes` ( `size_code` VARCHAR(10) PRIMARY KEY , `size_description` VARCHAR(80) );  CREATE TABLE `Treatment_Types` ( `treatment_type_code` VARCHAR(10) PRIMARY KEY , `treatment_type_description` VARCHAR(80) ); CREATE TABLE `Owners` ( `owner_id` INTEGER PRIMARY KEY , `first_name` VARCHAR(50), `last_name` VARCHAR(50), `street` VARCHAR(50), `city` VARCHAR(50), `state` VARCHAR(20), `zip_code` VARCHAR(20), `email_address` VARCHAR(50), `home_phone` VARCHAR(20), `cell_number` VARCHAR(20) ); CREATE TABLE `Dogs` ( `dog_id` INTEGER PRIMARY KEY , `owner_id` INTEGER NOT NULL, `abandoned_yn` VARCHAR(1), `breed_code` VARCHAR(10) NOT NULL, `size_code` VARCHAR(10) NOT NULL, `name` VARCHAR(50), `age` VARCHAR(20), `date_of_birth` DATETIME, `gender` VARCHAR(1), `weight` VARCHAR(20), `date_arrived` DATETIME, `date_adopted` DATETIME, `date_departed` DATETIME, FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ), FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ), FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ), FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ) );  CREATE TABLE `Professionals` ( `professional_id` INTEGER PRIMARY KEY , `role_code` VARCHAR(10) NOT NULL, `first_name` VARCHAR(50), `street` VARCHAR(50), `city` VARCHAR(50), `state` VARCHAR(20), `zip_code` VARCHAR(20), `last_name` VARCHAR(50), `email_address` VARCHAR(50), `home_phone` VARCHAR(20), `cell_number` VARCHAR(20) );  CREATE TABLE `Treatments` ( `treatment_id` INTEGER PRIMARY KEY , `dog_id` INTEGER NOT NULL, `professional_id` INTEGER NOT NULL, `treatment_type_code` VARCHAR(10) NOT NULL, `date_of_treatment` DATETIME, `cost_of_treatment` DECIMAL(19,4), FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ), FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ), FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` ) );  INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491 Gleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904 Corneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (3, 'Employee', 'Olaf', '68589 Bradly Manor New Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (4, 'Veterenarian', 'Vernice', '72532 Hane Course Lake Berylland, ND 95283', 'Domenickton', 'Mississippi', '02281', 'Tillman', 'lourdes.lowe@example.net', '312.216.3352', '00230569697'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (5, 'Veterenarian', 'Danny', '188 VonRueden Tunnel Suite 630 North Macibury, NV ', 'New Laurytown', 'Hawaii', '84515', 'Considine', 'mekhi.little@example.org', '1-609-566-2752x25197', '011.193.9081x3186'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (6, 'Veterenarian', 'Ruben', '17286 Waters Green East Bernadinefort, CA 89573', 'Baileymouth', 'NewMexico', '52476', 'O''Reilly', 'jacynthe.mclaughlin@example.net', '+43(5)1132733868', '139-321-7313'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (7, 'Veterenarian', 'Velva', '44234 Marvin Shoals Suite 659 North Frances, AL 23', 'McLaughlinfort', 'NorthCarolina', '67980', 'Hayes', 'lambert62@example.org', '022.529.0550x1319', '499-434-0215x1628'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (8, 'Employee', 'Karley', '36895 Eli Ferry Port Marcelle, FL 45712', 'Kirastad', 'Indiana', '33020', 'Hyatt', 'goyette.roosevelt@example.net', '891.475.2256', '328.842.3792'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (9, 'Veterenarian', 'Monte', '07073 Brenna Ways Suite 089 Lowehaven, KY 93275-96', 'South Rockyport', 'SouthCarolina', '80775', 'Kshlerin', 'schneider.kathryne@example.org', '320-508-6023', '962-983-8109x3509'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (10, 'Employee', 'Domenica', '7284 Torphy Flats Apt. 610 Diannaburgh, SC 78560', 'New Maryjane', 'California', '54312', 'Jacobs', 'jerrod.bahringer@example.org', '(230)338-3342x585', '461-801-2600'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (11, 'Employee', 'Brady', '09615 McKenzie Stravenue Apt. 128 West Elliottview', 'Raynorfort', 'Alabama', '07412', 'Pouros', 'west.eula@example.net', '(920)304-4499x59146', '609-405-2990'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (12, 'Veterenarian', 'Winfield', '92912 Langworth Valleys Apt. 743 Thompsonborough, ', 'Juddton', 'Utah', '34041', 'Christiansen', 'marquardt.furman@example.org', '246-951-0080x76716', '1-181-670-9466'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (13, 'Veterenarian', 'Ericka', '7783 Abraham Alley Port Madelynhaven, KY 59172-273', 'Borisside', 'Wyoming', '17902', 'Murazik', 'delphine29@example.com', '346.594.3739', '880-659-7577x736'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (14, 'Employee', 'Sigurd', '390 Bryce Drive North Dock, LA 65357-7228', 'East Ila', 'Connecticut', '41215', 'Frami', 'cole.margarita@example.org', '971.048.3763x9404', '1-185-137-1945x409'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (15, 'Employee', 'Lesly', '63949 Keeling Landing Apt. 502 Johnsview, SD 06780', 'North Adelberttown', 'Montana', '98844', 'Walter', 'jeichmann@example.com', '1-138-287-3775', '1-258-285-4707x8020'); ",extra
1488,7459,dorm_1,SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room',What is the name of each dorm that has a TV Lounge but no study rooms?," create table Student (         StuID        INTEGER PRIMARY KEY,         LName        VARCHAR(12),         Fname        VARCHAR(12),         Age      INTEGER,         Sex      VARCHAR(1),         Major        INTEGER,         Advisor      INTEGER,         city_code    VARCHAR(3)  );    create table Dorm (        dormid		INTEGER,        dorm_name	VARCHAR(20),        student_capacity	INTEGER,        gender			VARCHAR(1) ) ;  create table Dorm_amenity (        amenid			INTEGER,        amenity_name		VARCHAR(25) ) ;  create table Has_amenity (        dormid			INTEGER,        amenid				INTEGER, 	FOREIGN KEY (dormid) REFERENCES `Dorm`(dormid), 	FOREIGN KEY (amenid) REFERENCES `Dorm_amenity`(amenid) );  create table Lives_in (        stuid 	      INTEGER,        dormid		INTEGER,        room_number	INTEGER, 	FOREIGN KEY (stuid) REFERENCES `Student`(StuID),         FOREIGN KEY (dormid) REFERENCES `Dorm`(dormid) );  ",extra
309,1642,scholar,"SELECT DISTINCT t2.keyphraseid  ,  t3.year FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  ""Luke S Zettlemoyer"" ORDER BY t3.year  ,  t2.keyphraseid;",keyphrases used by Luke S Zettlemoyer for each year,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); ",extra
969,3856,riding_club,"SELECT T1.club_id ,  T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id ORDER BY count(*) DESC LIMIT 1",How many gold medals has the club with the most coaches won?,"PRAGMA foreign_keys=OFF; BEGIN TRANSACTION; CREATE TABLE IF NOT EXISTS ""player"" ( ""Player_ID"" int, ""Sponsor_name"" text, ""Player_name"" text, ""Gender"" text, ""Residence"" text, ""Occupation"" text, ""Votes"" int, ""Rank"" text, PRIMARY KEY (""Player_ID"") ); CREATE TABLE IF NOT EXISTS ""club"" ( ""Club_ID"" int, ""Club_name"" text, ""Region"" text, ""Start_year"" int, PRIMARY KEY (""Club_ID"") ); CREATE TABLE IF NOT EXISTS ""coach"" ( ""Coach_ID"" int, ""Coach_name"" text, ""Gender"" text, ""Club_ID"" int, ""Rank"" int, PRIMARY KEY (""Coach_ID""), FOREIGN KEY (`Club_ID`) REFERENCES `club`(`Club_ID`) ); CREATE TABLE IF NOT EXISTS ""player_coach"" ( ""Player_ID"" int, ""Coach_ID"" int, ""Starting_year"" int, PRIMARY KEY (""Player_ID"",""Coach_ID""), FOREIGN KEY (`Player_ID`) REFERENCES `player`(`Player_ID`), FOREIGN KEY (`Coach_ID`) REFERENCES `coach`(`Coach_ID`) ); CREATE TABLE IF NOT EXISTS ""match_result"" ( ""Rank"" int, ""Club_ID"" int, ""Gold"" int, ""Big_Silver"" int, ""Small_Silver"" int, ""Bronze"" int, ""Points"" int, PRIMARY KEY (""Rank"",""Club_ID""), FOREIGN KEY (`Club_ID`) REFERENCES `club`(`Club_ID`) ); COMMIT; ",extra
1145,5178,sports_competition,SELECT country FROM competition WHERE competition_type  =  'Tournament' GROUP BY country ORDER BY count(*) DESC LIMIT 1,what is the name of the country that participated in the most tournament competitions?," PRAGMA foreign_keys = ON;  CREATE TABLE ""club"" ( ""Club_ID"" int, ""name"" text, ""Region"" text, ""Start_year"" text, PRIMARY KEY (""Club_ID"") );  CREATE TABLE ""club_rank"" ( ""Rank"" real, ""Club_ID"" int, ""Gold"" real, ""Silver"" real, ""Bronze"" real, ""Total"" real, PRIMARY KEY (""Rank"",""Club_ID"") FOREIGN KEY (`Club_ID`) REFERENCES `club`(`Club_ID`) );  CREATE TABLE ""player"" ( ""Player_ID"" int, ""name"" text, ""Position"" text, ""Club_ID"" int, ""Apps"" real, ""Tries"" real, ""Goals"" text, ""Points"" real, PRIMARY KEY (""Player_ID""), FOREIGN KEY (`Club_ID`) REFERENCES `club`(`Club_ID`) );  CREATE TABLE ""competition"" ( ""Competition_ID"" int, ""Year"" real, ""Competition_type"" text, ""Country"" text, PRIMARY KEY (""Competition_ID"") );  CREATE TABLE ""competition_result"" ( ""Competition_ID"" int, ""Club_ID_1"" int, ""Club_ID_2"" int, ""Score"" text, PRIMARY KEY (""Competition_ID"",""Club_ID_1"",""Club_ID_2""), FOREIGN KEY (`Club_ID_1`) REFERENCES `club`(`Club_ID`), FOREIGN KEY (`Club_ID_2`) REFERENCES `club`(`Club_ID`), FOREIGN KEY (`Competition_ID`) REFERENCES `competition`(`Competition_ID`) );   ",extra
1404,6924,cre_Drama_Workshop_Groups,SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  'photo' INTERSECT SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  'film',What is the description of the service type which offers both the photo product and the film product?,"PRAGMA foreign_keys = ON;  CREATE TABLE Ref_Payment_Methods ( payment_method_code CHAR(10) NOT NULL, payment_method_description VARCHAR(80), PRIMARY KEY (payment_method_code), UNIQUE (payment_method_code) ); CREATE TABLE Ref_Service_Types ( Service_Type_Code CHAR(15) NOT NULL, Parent_Service_Type_Code CHAR(15), Service_Type_Description VARCHAR(255), PRIMARY KEY (Service_Type_Code), UNIQUE (Service_Type_Code) );  CREATE TABLE Addresses ( Address_ID VARCHAR(100) NOT NULL, Line_1 VARCHAR(255), Line_2 VARCHAR(255), City_Town VARCHAR(255), State_County VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Address_ID), UNIQUE (Address_ID) ); CREATE TABLE Products ( Product_ID VARCHAR(100) NOT NULL, Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Product_Description VARCHAR(255), Other_Product_Service_Details VARCHAR(255), PRIMARY KEY (Product_ID), UNIQUE (Product_ID) ); CREATE TABLE Marketing_Regions ( Marketing_Region_Code CHAR(15) NOT NULL, Marketing_Region_Name VARCHAR(255) NOT NULL, Marketing_Region_Descriptrion VARCHAR(255) NOT NULL, Other_Details VARCHAR(255), PRIMARY KEY (Marketing_Region_Code), UNIQUE (Marketing_Region_Code) );  CREATE TABLE Clients ( Client_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Customer_Email_Address VARCHAR(255), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Client_ID), UNIQUE (Client_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) ); CREATE TABLE Drama_Workshop_Groups ( Workshop_Group_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Currency_Code CHAR(15) NOT NULL, Marketing_Region_Code CHAR(15) NOT NULL, Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Workshop_Group_ID), UNIQUE (Workshop_Group_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) ); CREATE TABLE Performers ( Performer_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Performer_ID), UNIQUE (Performer_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) ); CREATE TABLE Customers ( Customer_ID VARCHAR(100) NOT NULL, Address_ID INTEGER NOT NULL, Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Customer_ID), UNIQUE (Customer_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) ); CREATE TABLE Stores ( Store_ID VARCHAR(100) NOT NULL, Address_ID INTEGER NOT NULL, Marketing_Region_Code CHAR(15) NOT NULL, Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Store_ID), UNIQUE (Store_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID), FOREIGN KEY (Marketing_Region_Code) REFERENCES Marketing_Regions (Marketing_Region_Code) ); CREATE TABLE Bookings ( Booking_ID INTEGER NOT NULL , Customer_ID INTEGER NOT NULL, Workshop_Group_ID VARCHAR(100) NOT NULL, Status_Code CHAR(15) NOT NULL, Store_ID INTEGER NOT NULL, Order_Date DATETIME NOT NULL, Planned_Delivery_Date DATETIME NOT NULL, Actual_Delivery_Date DATETIME NOT NULL, Other_Order_Details VARCHAR(255), PRIMARY KEY (Booking_ID), UNIQUE (Booking_ID), FOREIGN KEY (Customer_ID) REFERENCES Clients (Client_ID), FOREIGN KEY (Workshop_Group_ID) REFERENCES Drama_Workshop_Groups (Workshop_Group_ID) ); CREATE TABLE Performers_in_Bookings ( Order_ID INTEGER NOT NULL, Performer_ID INTEGER NOT NULL, PRIMARY KEY (Order_ID, Performer_ID), FOREIGN KEY (Performer_ID) REFERENCES Performers (Performer_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID) ); CREATE TABLE Customer_Orders ( Order_ID INTEGER NOT NULL , Customer_ID INTEGER NOT NULL, Store_ID INTEGER NOT NULL, Order_Date DATETIME NOT NULL, Planned_Delivery_Date DATETIME NOT NULL, Actual_Delivery_Date DATETIME NOT NULL, Other_Order_Details VARCHAR(255), PRIMARY KEY (Order_ID), UNIQUE (Order_ID), FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY (Store_ID) REFERENCES Stores (Store_ID) ); CREATE TABLE Order_Items ( Order_Item_ID INTEGER NOT NULL , Order_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), PRIMARY KEY (Order_Item_ID), FOREIGN KEY (Order_ID) REFERENCES Customer_Orders (Order_ID), FOREIGN KEY (Product_ID) REFERENCES Products (Product_ID) ); CREATE TABLE Invoices ( Invoice_ID INTEGER NOT NULL, Order_ID INTEGER NOT NULL, payment_method_code CHAR(15), Product_ID INTEGER NOT NULL, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), Order_Item_ID INTEGER NOT NULL, PRIMARY KEY (Invoice_ID), FOREIGN KEY (Order_ID) REFERENCES Customer_Orders (Order_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID), FOREIGN KEY (payment_method_code) REFERENCES Ref_Payment_Methods (payment_method_code) ); CREATE TABLE Services ( Service_ID INTEGER NOT NULL, Service_Type_Code CHAR(15), Workshop_Group_ID INTEGER NOT NULL, Product_Description VARCHAR(255), Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Other_Product_Service_Details VARCHAR(255), PRIMARY KEY (Service_ID), UNIQUE (Service_ID), FOREIGN KEY (Workshop_Group_ID) REFERENCES Drama_Workshop_Groups (Workshop_Group_ID), FOREIGN KEY (Service_Type_Code) REFERENCES Ref_Service_Types (Service_Type_Code) ); CREATE TABLE Bookings_Services ( Order_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, PRIMARY KEY (Order_ID, Product_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID), FOREIGN KEY (Product_ID) REFERENCES Services (Service_ID) );  CREATE TABLE Invoice_Items ( Invoice_Item_ID INTEGER NOT NULL , Invoice_ID INTEGER NOT NULL, Order_ID INTEGER NOT NULL, Order_Item_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, Order_Quantity INTEGER, Other_Item_Details VARCHAR(255), PRIMARY KEY (Invoice_Item_ID), FOREIGN KEY (Order_Item_ID) REFERENCES Order_Items (Order_Item_ID), FOREIGN KEY (Invoice_ID) REFERENCES Invoices (Invoice_ID), FOREIGN KEY (Order_ID, Product_ID) REFERENCES Bookings_Services (Order_ID,Product_ID) ); ",extra
1547,7721,cre_Theme_park,SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits ),How many tourists did not make any visit?,"PRAGMA foreign_keys = ON; CREATE TABLE Ref_Hotel_Star_Ratings ( star_rating_code CHAR(15) NOT NULL, star_rating_description VARCHAR(80), PRIMARY KEY (star_rating_code), UNIQUE (star_rating_code) );   CREATE TABLE Locations ( Location_ID INTEGER NOT NULL, Location_Name VARCHAR(255), Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Location_ID) ); CREATE TABLE Ref_Attraction_Types ( Attraction_Type_Code CHAR(15) NOT NULL, Attraction_Type_Description VARCHAR(255), PRIMARY KEY (Attraction_Type_Code), UNIQUE (Attraction_Type_Code) );  CREATE TABLE Visitors ( Tourist_ID INTEGER NOT NULL, Tourist_Details VARCHAR(255), PRIMARY KEY (Tourist_ID), UNIQUE (Tourist_ID) ); CREATE TABLE Features ( Feature_ID INTEGER NOT NULL, Feature_Details VARCHAR(255), PRIMARY KEY (Feature_ID) );  CREATE TABLE Hotels ( hotel_id INTEGER NOT NULL, star_rating_code CHAR(15) NOT NULL, pets_allowed_yn CHAR(1), price_range real, other_hotel_details VARCHAR(255), PRIMARY KEY (hotel_id), FOREIGN KEY (star_rating_code) REFERENCES Ref_Hotel_Star_Ratings (star_rating_code) );  CREATE TABLE Tourist_Attractions ( Tourist_Attraction_ID INTEGER NOT NULL, Attraction_Type_Code CHAR(15) NOT NULL, Location_ID INTEGER NOT NULL, How_to_Get_There VARCHAR(255), Name VARCHAR(255), Description VARCHAR(255), Opening_Hours VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Tourist_Attraction_ID), FOREIGN KEY (Location_ID) REFERENCES Locations (Location_ID), FOREIGN KEY (Attraction_Type_Code) REFERENCES Ref_Attraction_Types (Attraction_Type_Code) );  CREATE TABLE Street_Markets ( Market_ID INTEGER NOT NULL, Market_Details VARCHAR(255), PRIMARY KEY (Market_ID), FOREIGN KEY (Market_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Shops ( Shop_ID INTEGER NOT NULL, Shop_Details VARCHAR(255), PRIMARY KEY (Shop_ID), FOREIGN KEY (Shop_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Museums ( Museum_ID INTEGER NOT NULL, Museum_Details VARCHAR(255), PRIMARY KEY (Museum_ID), FOREIGN KEY (Museum_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Royal_Family ( Royal_Family_ID INTEGER NOT NULL, Royal_Family_Details VARCHAR(255), PRIMARY KEY (Royal_Family_ID), FOREIGN KEY (Royal_Family_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Theme_Parks ( Theme_Park_ID INTEGER NOT NULL, Theme_Park_Details VARCHAR(255), PRIMARY KEY (Theme_Park_ID), FOREIGN KEY (Theme_Park_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) );   CREATE TABLE Visits ( Visit_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Tourist_ID INTEGER NOT NULL, Visit_Date DATETIME NOT NULL, Visit_Details VARCHAR(40) NOT NULL, PRIMARY KEY (Visit_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID), FOREIGN KEY (Tourist_ID) REFERENCES Visitors (Tourist_ID) );   CREATE TABLE Photos ( Photo_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Name VARCHAR(255), Description VARCHAR(255), Filename VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Photo_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Staff ( Staff_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Name VARCHAR(40), Other_Details VARCHAR(255), PRIMARY KEY (Staff_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) );   CREATE TABLE Tourist_Attraction_Features ( Tourist_Attraction_ID INTEGER NOT NULL, Feature_ID INTEGER NOT NULL, PRIMARY KEY (Tourist_Attraction_ID, Feature_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID), FOREIGN KEY (Feature_ID) REFERENCES Features (Feature_ID) ); ",extra
258,1512,scholar,"SELECT DISTINCT COUNT ( t3.paperid )  ,  t2.authorid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  ""mirella lapata"" AND t3.year  =  2016 GROUP BY t2.authorid;",Has mirella lapata written any papers in 2016 ?,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); ",extra
1600,8039,e_government,SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.uk_vat_number  =  (SELECT max(uk_vat_number) FROM organizations) ORDER BY t2.date_contact_to ASC LIMIT 1,What is the last name of the first individual contacted from the organization with the maximum UK Vat number across all organizations?,"PRAGMA foreign_keys = ON; CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `line_1_number_building` VARCHAR(80), `town_city` VARCHAR(50), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(50), `country` VARCHAR(50) ); CREATE TABLE `Services` ( `service_id` INTEGER PRIMARY KEY, `service_type_code` VARCHAR(15) NOT NULL, `service_name` VARCHAR(80), `service_descriptio` VARCHAR(255) ); CREATE TABLE `Forms` ( `form_id` INTEGER PRIMARY KEY, `form_type_code` VARCHAR(15) NOT NULL, `service_id` INTEGER, `form_number` VARCHAR(50), `form_name` VARCHAR(80), `form_description` VARCHAR(255), FOREIGN KEY (`service_id` ) REFERENCES `Services`(`service_id` ) );   CREATE TABLE `Individuals` ( `individual_id` INTEGER PRIMARY KEY, `individual_first_name` VARCHAR(80), `individual_middle_name` VARCHAR(80), `inidividual_phone` VARCHAR(80), `individual_email` VARCHAR(80), `individual_address` VARCHAR(255), `individual_last_name` VARCHAR(80) ); CREATE TABLE `Organizations` ( `organization_id` INTEGER PRIMARY KEY, `date_formed` DATETIME, `organization_name` VARCHAR(255), `uk_vat_number` VARCHAR(20) ); CREATE TABLE `Parties` ( `party_id` INTEGER PRIMARY KEY, `payment_method_code` VARCHAR(15) NOT NULL, `party_phone` VARCHAR(80), `party_email` VARCHAR(80) ); CREATE TABLE `Organization_Contact_Individuals` ( `individual_id` INTEGER NOT NULL, `organization_id` INTEGER NOT NULL, `date_contact_from` DATETIME NOT NULL, `date_contact_to` DATETIME, PRIMARY KEY (`individual_id`,`organization_id` ), FOREIGN KEY (`organization_id` ) REFERENCES `Organizations`(`organization_id` ), FOREIGN KEY (`individual_id` ) REFERENCES `Individuals`(`individual_id` ) ); CREATE TABLE `Party_Addresses` ( `party_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_address_from` DATETIME NOT NULL, `address_type_code` VARCHAR(15) NOT NULL, `date_address_to` DATETIME, PRIMARY KEY (`party_id`, `address_id`), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`party_id` ) REFERENCES `Parties`(`party_id` ) ); CREATE TABLE `Party_Forms` ( `party_id` INTEGER NOT NULL, `form_id` INTEGER NOT NULL, `date_completion_started` DATETIME NOT NULL, `form_status_code` VARCHAR(15) NOT NULL, `date_fully_completed` DATETIME, PRIMARY KEY (`party_id`, `form_id`), FOREIGN KEY (`party_id` ) REFERENCES `Parties`(`party_id` ), FOREIGN KEY (`form_id` ) REFERENCES `Forms`(`form_id` ) ); CREATE TABLE `Party_Services` ( `booking_id` INTEGER NOT NULL , `customer_id` INTEGER NOT NULL, `service_id` INTEGER NOT NULL, `service_datetime` DATETIME NOT NULL, `booking_made_date` DATETIME, FOREIGN KEY (`service_id` ) REFERENCES `Services`(`service_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Parties`(`party_id` ) ); ",extra
82,539,student_transcripts_tracking,"SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",Find the program which most number of students are enrolled in. List both the id and the summary.,"PRAGMA foreign_keys = ON; CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `line_1` VARCHAR(255), `line_2` VARCHAR(255), `line_3` VARCHAR(255), `city` VARCHAR(255), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(255), `country` VARCHAR(255), `other_address_details` VARCHAR(255) ); CREATE TABLE `Courses` ( `course_id` INTEGER PRIMARY KEY, `course_name` VARCHAR(255), `course_description` VARCHAR(255), `other_details` VARCHAR(255) );  CREATE TABLE `Departments` ( `department_id` INTEGER PRIMARY KEY, `department_name` VARCHAR(255), `department_description` VARCHAR(255), `other_details` VARCHAR(255) ); CREATE TABLE `Degree_Programs` ( `degree_program_id` INTEGER PRIMARY KEY, `department_id` INTEGER NOT NULL, `degree_summary_name` VARCHAR(255), `degree_summary_description` VARCHAR(255), `other_details` VARCHAR(255), FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` ) );  CREATE TABLE `Sections` ( `section_id` INTEGER PRIMARY KEY, `course_id` INTEGER NOT NULL, `section_name` VARCHAR(255), `section_description` VARCHAR(255), `other_details` VARCHAR(255), FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ) ); CREATE TABLE `Semesters` ( `semester_id` INTEGER PRIMARY KEY, `semester_name` VARCHAR(255), `semester_description` VARCHAR(255), `other_details` VARCHAR(255) ); CREATE TABLE `Students` ( `student_id` INTEGER PRIMARY KEY, `current_address_id` INTEGER NOT NULL, `permanent_address_id` INTEGER NOT NULL, `first_name` VARCHAR(80), `middle_name` VARCHAR(40), `last_name` VARCHAR(40), `cell_mobile_number` VARCHAR(40), `email_address` VARCHAR(40), `ssn` VARCHAR(40), `date_first_registered` DATETIME, `date_left` DATETIME, `other_student_details` VARCHAR(255), FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` ) );  CREATE TABLE `Student_Enrolment` ( `student_enrolment_id` INTEGER PRIMARY KEY, `degree_program_id` INTEGER NOT NULL, `semester_id` INTEGER NOT NULL, `student_id` INTEGER NOT NULL, `other_details` VARCHAR(255), FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ), FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ), FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ) ); CREATE TABLE `Student_Enrolment_Courses` ( `student_course_id` INTEGER PRIMARY KEY, `course_id` INTEGER NOT NULL, `student_enrolment_id` INTEGER NOT NULL, FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ), FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` ) );  CREATE TABLE `Transcripts` ( `transcript_id` INTEGER PRIMARY KEY, `transcript_date` DATETIME, `other_details` VARCHAR(255) );  CREATE TABLE `Transcript_Contents` ( `student_course_id` INTEGER NOT NULL, `transcript_id` INTEGER NOT NULL, FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ), FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` ) );  ",extra
644,2252,academic,"SELECT COUNT ( DISTINCT t5.title ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN journal AS t3 ON t5.jid  =  t3.jid WHERE t3.name  =  ""PVLDB"" AND t2.name  =  ""University of Michigan"";","return me the number of papers in PVLDB in "" University of Michigan "" .","PRAGMA foreign_keys = ON; CREATE TABLE ""author"" ( ""aid"" int, ""homepage"" text, ""name"" text, ""oid"" int, primary key(""aid"") ); CREATE TABLE ""conference"" ( ""cid"" int, ""homepage"" text, ""name"" text, primary key (""cid"") ); CREATE TABLE ""domain"" ( ""did"" int, ""name"" text, primary key (""did"") ); CREATE TABLE ""domain_author"" ( ""aid"" int,  ""did"" int, primary key (""did"", ""aid""), foreign key(""aid"") references `author`(""aid""), foreign key(""did"") references `domain`(""did"") );  CREATE TABLE ""domain_conference"" ( ""cid"" int, ""did"" int, primary key (""did"", ""cid""), foreign key(""cid"") references `conference`(""cid""), foreign key(""did"") references `domain`(""did"") ); CREATE TABLE ""journal"" ( ""homepage"" text, ""jid"" int, ""name"" text, primary key(""jid"") ); CREATE TABLE ""domain_journal"" ( ""did"" int, ""jid"" int, primary key (""did"", ""jid""), foreign key(""jid"") references ""journal""(""jid""), foreign key(""did"") references ""domain""(""did"") ); CREATE TABLE ""keyword"" ( ""keyword"" text, ""kid"" int, primary key(""kid"") ); CREATE TABLE ""domain_keyword"" ( ""did"" int, ""kid"" int, primary key (""did"", ""kid""), foreign key(""kid"") references ""keyword""(""kid""), foreign key(""did"") references ""domain""(""did"") ); CREATE TABLE ""publication"" ( ""abstract"" text, ""cid"" text, ""citation_num"" int, ""jid"" int, ""pid"" int, ""reference_num"" int, ""title"" text, ""year"" int, primary key(""pid""), foreign key(""jid"") references ""journal""(""jid""), foreign key(""cid"") references ""conference""(""cid"") ); CREATE TABLE ""domain_publication"" ( ""did"" int, ""pid"" int, primary key (""did"", ""pid""), foreign key(""pid"") references ""publication""(""pid""), foreign key(""did"") references ""domain""(""did"") );  CREATE TABLE ""organization"" ( ""continent"" text, ""homepage"" text, ""name"" text, ""oid"" int, primary key(""oid"") );  CREATE TABLE ""publication_keyword"" ( ""pid"" int, ""kid"" int, primary key (""kid"", ""pid""), foreign key(""pid"") references ""publication""(""pid""), foreign key(""kid"") references ""keyword""(""kid"") ); CREATE TABLE ""writes"" ( ""aid"" int, ""pid"" int, primary key (""aid"", ""pid""), foreign key(""pid"") references ""publication""(""pid""), foreign key(""aid"") references ""author""(""aid"") ); CREATE TABLE ""cite"" ( ""cited"" int, ""citing""  int, foreign key(""cited"") references ""publication""(""pid""), foreign key(""citing"") references ""publication""(""pid"") );",extra
462,1760,scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""question answering"" AND t3.year  =  2016;",What papers were written on question answering this year ?,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); ",hard
1030,4742,storm_record,SELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region),Show the name of storms which don't have affected region in record.," PRAGMA foreign_keys = ON;  CREATE TABLE ""storm"" ( ""Storm_ID"" int, ""Name"" text, ""Dates_active"" text, ""Max_speed"" int, ""Damage_millions_USD"" real, ""Number_Deaths"" int, PRIMARY KEY (""Storm_ID"") );  CREATE TABLE ""region"" ( `Region_id` int, `Region_code` text, `Region_name` text, PRIMARY KEY (""Region_id"") );  CREATE TABLE `affected_region` ( `Region_id` int, `Storm_ID` int, `Number_city_affected` real, PRIMARY KEY (`Region_id`,`Storm_ID`), FOREIGN KEY (`Region_id`) REFERENCES `region`(`Region_id`), FOREIGN KEY (`Storm_ID`) REFERENCES `storm`(`Storm_ID`) );  ",hard
531,2170,academic,"SELECT t1.name FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t3.title  =  ""Making database systems usable"";","return me the authors of "" Making database systems usable "" .","PRAGMA foreign_keys = ON; CREATE TABLE ""author"" ( ""aid"" int, ""homepage"" text, ""name"" text, ""oid"" int, primary key(""aid"") ); CREATE TABLE ""conference"" ( ""cid"" int, ""homepage"" text, ""name"" text, primary key (""cid"") ); CREATE TABLE ""domain"" ( ""did"" int, ""name"" text, primary key (""did"") ); CREATE TABLE ""domain_author"" ( ""aid"" int,  ""did"" int, primary key (""did"", ""aid""), foreign key(""aid"") references `author`(""aid""), foreign key(""did"") references `domain`(""did"") );  CREATE TABLE ""domain_conference"" ( ""cid"" int, ""did"" int, primary key (""did"", ""cid""), foreign key(""cid"") references `conference`(""cid""), foreign key(""did"") references `domain`(""did"") ); CREATE TABLE ""journal"" ( ""homepage"" text, ""jid"" int, ""name"" text, primary key(""jid"") ); CREATE TABLE ""domain_journal"" ( ""did"" int, ""jid"" int, primary key (""did"", ""jid""), foreign key(""jid"") references ""journal""(""jid""), foreign key(""did"") references ""domain""(""did"") ); CREATE TABLE ""keyword"" ( ""keyword"" text, ""kid"" int, primary key(""kid"") ); CREATE TABLE ""domain_keyword"" ( ""did"" int, ""kid"" int, primary key (""did"", ""kid""), foreign key(""kid"") references ""keyword""(""kid""), foreign key(""did"") references ""domain""(""did"") ); CREATE TABLE ""publication"" ( ""abstract"" text, ""cid"" text, ""citation_num"" int, ""jid"" int, ""pid"" int, ""reference_num"" int, ""title"" text, ""year"" int, primary key(""pid""), foreign key(""jid"") references ""journal""(""jid""), foreign key(""cid"") references ""conference""(""cid"") ); CREATE TABLE ""domain_publication"" ( ""did"" int, ""pid"" int, primary key (""did"", ""pid""), foreign key(""pid"") references ""publication""(""pid""), foreign key(""did"") references ""domain""(""did"") );  CREATE TABLE ""organization"" ( ""continent"" text, ""homepage"" text, ""name"" text, ""oid"" int, primary key(""oid"") );  CREATE TABLE ""publication_keyword"" ( ""pid"" int, ""kid"" int, primary key (""kid"", ""pid""), foreign key(""pid"") references ""publication""(""pid""), foreign key(""kid"") references ""keyword""(""kid"") ); CREATE TABLE ""writes"" ( ""aid"" int, ""pid"" int, primary key (""aid"", ""pid""), foreign key(""pid"") references ""publication""(""pid""), foreign key(""aid"") references ""author""(""aid"") ); CREATE TABLE ""cite"" ( ""cited"" int, ""citing""  int, foreign key(""cited"") references ""publication""(""pid""), foreign key(""citing"") references ""publication""(""pid"") );",hard
1138,5347,music_1,"SELECT artist_name FROM artist WHERE country  =  ""UK"" INTERSECT SELECT artist_name FROM song WHERE languages  =  ""english""",Find the names of the artists who are from UK and have produced English songs.," --data definition  create table genre( 	g_name varchar2(20) not null, 	rating varchar2(10), 	most_popular_in varchar2(50), 	primary key(g_name) );  create table artist( 	artist_name varchar2(50) not null, 	country varchar2(20), 	gender varchar2(20), 	preferred_genre varchar2(50), 	constraint a_name primary key(artist_name), 	foreign key(preferred_genre) references genre(g_name) ON DELETE CASCADE );  create table files( 	f_id number(10) not null, 	artist_name varchar2(50), 	file_size varchar2(20), 	duration varchar2(20), 	formats varchar2(20), 	primary key(f_id), 	foreign key(artist_name) references artist(artist_name) ON DELETE CASCADE );   create table song( 	song_name varchar2(50), 	artist_name varchar2(50), 	country varchar2(20), 	f_id number(10),     	genre_is varchar2(20), 	rating number(10) check(rating>0 and rating<11), 	languages varchar2(20), 	releasedate Date,  	resolution number(10) not null, 	constraint s_name primary key(song_name), 	foreign key(artist_name) references artist(artist_name) ON DELETE CASCADE, 	foreign key(f_id) references files(f_id) ON DELETE CASCADE, 	foreign key(genre_is) references genre(g_name) ON DELETE CASCADE );   --insertion of attributes in the table   ",hard
372,1446,geo,SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );,what rivers flow through the largest state,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );",hard
1681,7681,cre_Theme_park,"SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  ""walk"" OR  T2.How_to_Get_There  =  ""bus""",What are the details of the markets that can be accessed by walk or bus?,"PRAGMA foreign_keys = ON; CREATE TABLE Ref_Hotel_Star_Ratings ( star_rating_code CHAR(15) NOT NULL, star_rating_description VARCHAR(80), PRIMARY KEY (star_rating_code), UNIQUE (star_rating_code) );   CREATE TABLE Locations ( Location_ID INTEGER NOT NULL, Location_Name VARCHAR(255), Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Location_ID) ); CREATE TABLE Ref_Attraction_Types ( Attraction_Type_Code CHAR(15) NOT NULL, Attraction_Type_Description VARCHAR(255), PRIMARY KEY (Attraction_Type_Code), UNIQUE (Attraction_Type_Code) );  CREATE TABLE Visitors ( Tourist_ID INTEGER NOT NULL, Tourist_Details VARCHAR(255), PRIMARY KEY (Tourist_ID), UNIQUE (Tourist_ID) ); CREATE TABLE Features ( Feature_ID INTEGER NOT NULL, Feature_Details VARCHAR(255), PRIMARY KEY (Feature_ID) );  CREATE TABLE Hotels ( hotel_id INTEGER NOT NULL, star_rating_code CHAR(15) NOT NULL, pets_allowed_yn CHAR(1), price_range real, other_hotel_details VARCHAR(255), PRIMARY KEY (hotel_id), FOREIGN KEY (star_rating_code) REFERENCES Ref_Hotel_Star_Ratings (star_rating_code) );  CREATE TABLE Tourist_Attractions ( Tourist_Attraction_ID INTEGER NOT NULL, Attraction_Type_Code CHAR(15) NOT NULL, Location_ID INTEGER NOT NULL, How_to_Get_There VARCHAR(255), Name VARCHAR(255), Description VARCHAR(255), Opening_Hours VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Tourist_Attraction_ID), FOREIGN KEY (Location_ID) REFERENCES Locations (Location_ID), FOREIGN KEY (Attraction_Type_Code) REFERENCES Ref_Attraction_Types (Attraction_Type_Code) );  CREATE TABLE Street_Markets ( Market_ID INTEGER NOT NULL, Market_Details VARCHAR(255), PRIMARY KEY (Market_ID), FOREIGN KEY (Market_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Shops ( Shop_ID INTEGER NOT NULL, Shop_Details VARCHAR(255), PRIMARY KEY (Shop_ID), FOREIGN KEY (Shop_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Museums ( Museum_ID INTEGER NOT NULL, Museum_Details VARCHAR(255), PRIMARY KEY (Museum_ID), FOREIGN KEY (Museum_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Royal_Family ( Royal_Family_ID INTEGER NOT NULL, Royal_Family_Details VARCHAR(255), PRIMARY KEY (Royal_Family_ID), FOREIGN KEY (Royal_Family_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Theme_Parks ( Theme_Park_ID INTEGER NOT NULL, Theme_Park_Details VARCHAR(255), PRIMARY KEY (Theme_Park_ID), FOREIGN KEY (Theme_Park_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) );   CREATE TABLE Visits ( Visit_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Tourist_ID INTEGER NOT NULL, Visit_Date DATETIME NOT NULL, Visit_Details VARCHAR(40) NOT NULL, PRIMARY KEY (Visit_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID), FOREIGN KEY (Tourist_ID) REFERENCES Visitors (Tourist_ID) );   CREATE TABLE Photos ( Photo_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Name VARCHAR(255), Description VARCHAR(255), Filename VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Photo_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Staff ( Staff_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Name VARCHAR(40), Other_Details VARCHAR(255), PRIMARY KEY (Staff_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) );   CREATE TABLE Tourist_Attraction_Features ( Tourist_Attraction_ID INTEGER NOT NULL, Feature_ID INTEGER NOT NULL, PRIMARY KEY (Tourist_Attraction_ID, Feature_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID), FOREIGN KEY (Feature_ID) REFERENCES Features (Feature_ID) ); ",hard
241,1200,geo,SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );,what is the biggest city in the usa,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );",hard
464,1814,scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""character recognition"" AND t3.year  <  2010;",character recognition papers earlier than 2010,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); ",hard
1429,6538,department_store,SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1,Return the id of the department with the fewest staff assignments.,"PRAGMA foreign_keys = ON; CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `address_details` VARCHAR(255) );   INSERT INTO Addresses (`address_id`, `address_details`) VALUES (1, '28481 Crist Circle East Burdettestad, IA 21232'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (2, '0292 Mitchel Pike Port Abefurt, IA 84402-4249'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (3, '4062 Mante Place West Lindsey, DE 76199-8015'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (4, '99666 Julie Junction Marvinburgh, OH 16085-1623'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (5, '195 Mara Rue Jenkinsmouth, OK 22345'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (6, '11784 Stehr Road Port Isaac, NV 61159'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (7, '69482 Renner Ville Suite 653 Langworthborough, OH 95195'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (8, '36594 O''Keefe Lock New Cali, RI 42319'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (9, '7181 Wuckert Port Apt. 571 Lake Zariaburgh, IL 98085'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (10, '92594 Marvin Trafficway Pourosfurt, IA 98649'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (11, '0258 Kessler Mountains Suite 688 Mooreside, ME 41586-5022'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (12, '69275 Mose Drive Wilkinsonstad, CO 79055-7622'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (13, '8207 Morissette Lakes East Rheaview, ID 47493'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (14, '145 Alice Corners Willmsport, NV 36680'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (15, '521 Molly Harbors Apt. 567 Reingerland, HI 97099-1005');  CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `staff_gender` VARCHAR(1), `staff_name` VARCHAR(80) );  CREATE TABLE `Suppliers` ( `supplier_id` INTEGER PRIMARY KEY, `supplier_name` VARCHAR(80), `supplier_phone` VARCHAR(80) );  CREATE TABLE `Department_Store_Chain` ( `dept_store_chain_id` INTEGER PRIMARY KEY, `dept_store_chain_name` VARCHAR(80) );  CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `payment_method_code` VARCHAR(10) NOT NULL, `customer_code` VARCHAR(20), `customer_name` VARCHAR(80), `customer_address` VARCHAR(255), `customer_phone` VARCHAR(80), `customer_email` VARCHAR(80) ); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (1, 'Credit Card', '401', 'Ahmed', '75099 Tremblay Port Apt. 163 South Norrisland, SC 80546', '254-072-4068x33935', 'margarett.vonrueden@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (2, 'Credit Card', '665', 'Chauncey', '8408 Lindsay Court East Dasiabury, IL 72656-3552', '+41(8)1897032009', 'stiedemann.sigrid@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (3, 'Direct Debit', '844', 'Lukas', '7162 Rodolfo Knoll Apt. 502 Lake Annalise, TN 35791-8871', '197-417-3557', 'joelle.monahan@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (4, 'Direct Debit', '662', 'Lexus', '9581 Will Flat Suite 272 East Cathryn, WY 30751-4404', '+08(3)8056580281', 'gbrekke@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (5, 'Credit Card', '848', 'Tara', '5065 Mraz Fields Apt. 041 East Chris, NH 41624', '1-064-498-6609x051', 'nicholas44@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (6, 'Credit Card', '916', 'Jon', '841 Goyette Unions South Dionbury, NC 62021', '(443)013-3112x528', 'cconroy@example.net'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (7, 'Credit Card', '172', 'Cristobal', '8327 Christiansen Lakes Suite 409 Schneiderland, IA 93624', '877-150-8674x63517', 'shawna.cummerata@example.net'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (8, 'Direct Debit', '927', 'Adah', '5049 Hand Land Coymouth, IL 97300-7731', '1-695-364-7586x59256', 'kathlyn24@example.org'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (9, 'Credit Card', '808', 'Yasmeen', '3558 Witting Meadow Apt. 483 Lake Moriahbury, OH 91556-2122', '587.398.2400x31176', 'ludwig54@example.net'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (10, 'Credit Card', '887', 'Karson', '7308 Joan Lake Suite 346 Lizethtown, DE 56522', '857-844-9339x40140', 'moriah91@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (11, 'Direct Debit', '611', 'Cordell', '362 Fisher Forge Apt. 900 New Mckenna, CA 98525-5674', '(730)934-8249', 'qstokes@example.org'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (12, 'Credit Card', '182', 'Darron', '84445 Elinor Glens Port Zita, SD 39410', '117.822.3577', 'gwisozk@example.net'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (13, 'Credit Card', '589', 'Kenya', '338 Floy Mountains Suite 589 Yesseniaville, TN 60847', '08023680831', 'maxime86@example.net'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (14, 'Direct Debit', '240', 'Abbie', '983 Elinore Passage Darrionborough, SC 53915-0479', '07594320656', 'celine.bogan@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (15, 'Credit Card', '980', 'Lyric', '649 Ocie Lights Wyatttown, UT 12697', '1-472-036-0434', 'schultz.arnoldo@example.net');   CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_type_code` VARCHAR(10) NOT NULL, `product_name` VARCHAR(80), `product_price` DECIMAL(19,4) ); CREATE TABLE `Supplier_Addresses` ( `supplier_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_from` DATETIME NOT NULL, `date_to` DATETIME, PRIMARY KEY (`supplier_id`, `address_id`), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`supplier_id` ) REFERENCES `Suppliers`(`supplier_id` ) );  CREATE TABLE `Customer_Addresses` ( `customer_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_from` DATETIME NOT NULL, `date_to` DATETIME, PRIMARY KEY (`customer_id`, `address_id`), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) );   CREATE TABLE `Customer_Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `order_status_code` VARCHAR(10) NOT NULL, `order_date` DATETIME NOT NULL, FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) );  CREATE TABLE `Department_Stores` ( `dept_store_id` INTEGER PRIMARY KEY, `dept_store_chain_id` INTEGER, `store_name` VARCHAR(80), `store_address` VARCHAR(255), `store_phone` VARCHAR(80), `store_email` VARCHAR(80), FOREIGN KEY (`dept_store_chain_id` ) REFERENCES `Department_Store_Chain`(`dept_store_chain_id` ) );   INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (1, 1, 'store_name', '01290 Jeremie Parkway Suite 753 North Arielle, MS 51249', '(948)944-5099x2027', 'bmaggio@example.com'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (2, 3, 'store_name', '082 Purdy Expressway O''Connellshire, IL 31732', '877-917-5029', 'larissa10@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (3, 4, 'store_name', '994 Travis Plains North Wadeton, WV 27575-3951', '1-216-312-0375', 'alexandro.mcclure@example.net'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (4, 2, 'store_name', '93472 Mayert Shore Apt. 360 Mitchellton, TN 84209', '670-466-6367', 'bryon24@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (5, 3, 'store_name', '88112 Parisian Lights Sporermouth, MN 25962', '01399327266', 'creola23@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (6, 4, 'store_name', '49708 Marcella Valleys Suite 181 Ninamouth, WA 86667', '1-859-843-1957', 'jerod.reynolds@example.net'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (7, 4, 'store_name', '41924 Alfredo Cliff New Eviestad, NY 17573', '1-109-872-9142x77078', 'ihamill@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (8, 4, 'store_name', '7081 Shanna Cape West Zacheryshire, NC 17408', '+67(5)4983519062', 'casper.adolfo@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (9, 4, 'store_name', '5288 Kaia Street Devonton, NJ 61782-9006', '(723)503-7086x356', 'selmer.stiedemann@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (10, 3, 'store_name', '00578 Lisa Gateway Suite 476 Strosinville, VA 03998-3292', '07126036440', 'luisa57@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (11, 2, 'store_name', '34894 Everett Road South Jeremiehaven, GA 08730', '611-037-9309', 'vonrueden.vern@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (12, 4, 'store_name', '2676 Cruickshank Gardens North Ginahaven, CT 85046', '(626)763-7031', 'freda.toy@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (13, 2, 'store_name', '29297 West Road Suite 210 West Dulceside, UT 58085-8998', '1-764-126-7567x0795', 'katlynn62@example.com'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (14, 1, 'store_name', '16650 Lysanne River Apt. 281 North Garettton, AL 84756-4375', '319.331.3397', 'mohr.elwin@example.net'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (15, 3, 'store_name', '82470 Hansen Squares Suite 190 Wehnermouth, NC 76791', '(587)993-3604x3077', 'kelly30@example.com');   CREATE TABLE `Departments` ( `department_id` INTEGER PRIMARY KEY, `dept_store_id` INTEGER NOT NULL, `department_name` VARCHAR(80), FOREIGN KEY (`dept_store_id` ) REFERENCES `Department_Stores`(`dept_store_id` ) ); CREATE TABLE `Order_Items` ( `order_item_id` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) ); CREATE TABLE `Product_Suppliers` ( `product_id` INTEGER NOT NULL, `supplier_id` INTEGER NOT NULL, `date_supplied_from` DATETIME NOT NULL, `date_supplied_to` DATETIME, `total_amount_purchased` VARCHAR(80), `total_value_purchased` DECIMAL(19,4), PRIMARY KEY (`product_id`, `supplier_id`), FOREIGN KEY (`supplier_id` ) REFERENCES `Suppliers`(`supplier_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) );   CREATE TABLE `Staff_Department_Assignments` ( `staff_id` INTEGER NOT NULL, `department_id` INTEGER NOT NULL, `date_assigned_from` DATETIME NOT NULL, `job_title_code` VARCHAR(10) NOT NULL, `date_assigned_to` DATETIME, PRIMARY KEY (`staff_id`, `department_id`), FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` ), FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ) );  ",hard
1317,6095,club_1,"SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  ""Bootup Baltimore"" AND t3.age  >  18","Count the number of members in club ""Bootup Baltimore"" whose age is above 18.","create table Student (          StuID        INTEGER PRIMARY KEY,          LName        VARCHAR(12),          Fname        VARCHAR(12),          Age      INTEGER,          Sex      VARCHAR(1),          Major        INTEGER,          Advisor      INTEGER,          city_code    VARCHAR(3)   );   create table Club (        ClubID           INTEGER PRIMARY KEY,        ClubName         VARCHAR(40),        ClubDesc         VARCHAR(1024),        ClubLocation VARCHAR(40) );  create table Member_of_club (        StuID            INTEGER,        ClubID           INTEGER,        Position     VARCHAR(40),        FOREIGN KEY(StuID) REFERENCES Student(StuID),        FOREIGN KEY(ClubID) REFERENCES Club(ClubID) );   teach kids and adults about computer basics.', 'AKW'); ",hard
102,636,tvshow,SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey',What are the countries that are not playing cartoons written by Todd Casey?,"PRAGMA foreign_keys=ON; BEGIN TRANSACTION;  CREATE TABLE IF NOT EXISTS ""TV_Channel"" ( ""id"" text, ""series_name"" text, ""Country"" text, ""Language"" text, ""Content"" text, ""Pixel_aspect_ratio_PAR"" text, ""Hight_definition_TV"" text, ""Pay_per_view_PPV"" text, ""Package_Option"" text, PRIMARY KEY (""id"") );  CREATE TABLE IF NOT EXISTS ""TV_series"" ( ""id"" real, ""Episode"" text, ""Air_Date"" text, ""Rating"" text, ""Share"" real, ""18_49_Rating_Share"" text, ""Viewers_m"" text, ""Weekly_Rank"" real, ""Channel"" text, PRIMARY KEY (""id""), FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`) );  CREATE TABLE IF NOT EXISTS ""Cartoon"" ( ""id"" real, ""Title"" text, ""Directed_by"" text, ""Written_by"" text, ""Original_air_date"" text, ""Production_code"" real, ""Channel"" text, PRIMARY KEY (""id""), FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`) );   COMMIT;",hard
1438,6553,department_store,"SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.date_assigned_from LIKE ""2016%""",Return the name and gender of the staff who was assigned in 2016.,"PRAGMA foreign_keys = ON; CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `address_details` VARCHAR(255) );   INSERT INTO Addresses (`address_id`, `address_details`) VALUES (1, '28481 Crist Circle East Burdettestad, IA 21232'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (2, '0292 Mitchel Pike Port Abefurt, IA 84402-4249'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (3, '4062 Mante Place West Lindsey, DE 76199-8015'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (4, '99666 Julie Junction Marvinburgh, OH 16085-1623'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (5, '195 Mara Rue Jenkinsmouth, OK 22345'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (6, '11784 Stehr Road Port Isaac, NV 61159'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (7, '69482 Renner Ville Suite 653 Langworthborough, OH 95195'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (8, '36594 O''Keefe Lock New Cali, RI 42319'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (9, '7181 Wuckert Port Apt. 571 Lake Zariaburgh, IL 98085'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (10, '92594 Marvin Trafficway Pourosfurt, IA 98649'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (11, '0258 Kessler Mountains Suite 688 Mooreside, ME 41586-5022'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (12, '69275 Mose Drive Wilkinsonstad, CO 79055-7622'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (13, '8207 Morissette Lakes East Rheaview, ID 47493'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (14, '145 Alice Corners Willmsport, NV 36680'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (15, '521 Molly Harbors Apt. 567 Reingerland, HI 97099-1005');  CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `staff_gender` VARCHAR(1), `staff_name` VARCHAR(80) );  CREATE TABLE `Suppliers` ( `supplier_id` INTEGER PRIMARY KEY, `supplier_name` VARCHAR(80), `supplier_phone` VARCHAR(80) );  CREATE TABLE `Department_Store_Chain` ( `dept_store_chain_id` INTEGER PRIMARY KEY, `dept_store_chain_name` VARCHAR(80) );  CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `payment_method_code` VARCHAR(10) NOT NULL, `customer_code` VARCHAR(20), `customer_name` VARCHAR(80), `customer_address` VARCHAR(255), `customer_phone` VARCHAR(80), `customer_email` VARCHAR(80) ); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (1, 'Credit Card', '401', 'Ahmed', '75099 Tremblay Port Apt. 163 South Norrisland, SC 80546', '254-072-4068x33935', 'margarett.vonrueden@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (2, 'Credit Card', '665', 'Chauncey', '8408 Lindsay Court East Dasiabury, IL 72656-3552', '+41(8)1897032009', 'stiedemann.sigrid@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (3, 'Direct Debit', '844', 'Lukas', '7162 Rodolfo Knoll Apt. 502 Lake Annalise, TN 35791-8871', '197-417-3557', 'joelle.monahan@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (4, 'Direct Debit', '662', 'Lexus', '9581 Will Flat Suite 272 East Cathryn, WY 30751-4404', '+08(3)8056580281', 'gbrekke@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (5, 'Credit Card', '848', 'Tara', '5065 Mraz Fields Apt. 041 East Chris, NH 41624', '1-064-498-6609x051', 'nicholas44@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (6, 'Credit Card', '916', 'Jon', '841 Goyette Unions South Dionbury, NC 62021', '(443)013-3112x528', 'cconroy@example.net'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (7, 'Credit Card', '172', 'Cristobal', '8327 Christiansen Lakes Suite 409 Schneiderland, IA 93624', '877-150-8674x63517', 'shawna.cummerata@example.net'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (8, 'Direct Debit', '927', 'Adah', '5049 Hand Land Coymouth, IL 97300-7731', '1-695-364-7586x59256', 'kathlyn24@example.org'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (9, 'Credit Card', '808', 'Yasmeen', '3558 Witting Meadow Apt. 483 Lake Moriahbury, OH 91556-2122', '587.398.2400x31176', 'ludwig54@example.net'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (10, 'Credit Card', '887', 'Karson', '7308 Joan Lake Suite 346 Lizethtown, DE 56522', '857-844-9339x40140', 'moriah91@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (11, 'Direct Debit', '611', 'Cordell', '362 Fisher Forge Apt. 900 New Mckenna, CA 98525-5674', '(730)934-8249', 'qstokes@example.org'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (12, 'Credit Card', '182', 'Darron', '84445 Elinor Glens Port Zita, SD 39410', '117.822.3577', 'gwisozk@example.net'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (13, 'Credit Card', '589', 'Kenya', '338 Floy Mountains Suite 589 Yesseniaville, TN 60847', '08023680831', 'maxime86@example.net'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (14, 'Direct Debit', '240', 'Abbie', '983 Elinore Passage Darrionborough, SC 53915-0479', '07594320656', 'celine.bogan@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (15, 'Credit Card', '980', 'Lyric', '649 Ocie Lights Wyatttown, UT 12697', '1-472-036-0434', 'schultz.arnoldo@example.net');   CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_type_code` VARCHAR(10) NOT NULL, `product_name` VARCHAR(80), `product_price` DECIMAL(19,4) ); CREATE TABLE `Supplier_Addresses` ( `supplier_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_from` DATETIME NOT NULL, `date_to` DATETIME, PRIMARY KEY (`supplier_id`, `address_id`), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`supplier_id` ) REFERENCES `Suppliers`(`supplier_id` ) );  CREATE TABLE `Customer_Addresses` ( `customer_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_from` DATETIME NOT NULL, `date_to` DATETIME, PRIMARY KEY (`customer_id`, `address_id`), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) );   CREATE TABLE `Customer_Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `order_status_code` VARCHAR(10) NOT NULL, `order_date` DATETIME NOT NULL, FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) );  CREATE TABLE `Department_Stores` ( `dept_store_id` INTEGER PRIMARY KEY, `dept_store_chain_id` INTEGER, `store_name` VARCHAR(80), `store_address` VARCHAR(255), `store_phone` VARCHAR(80), `store_email` VARCHAR(80), FOREIGN KEY (`dept_store_chain_id` ) REFERENCES `Department_Store_Chain`(`dept_store_chain_id` ) );   INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (1, 1, 'store_name', '01290 Jeremie Parkway Suite 753 North Arielle, MS 51249', '(948)944-5099x2027', 'bmaggio@example.com'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (2, 3, 'store_name', '082 Purdy Expressway O''Connellshire, IL 31732', '877-917-5029', 'larissa10@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (3, 4, 'store_name', '994 Travis Plains North Wadeton, WV 27575-3951', '1-216-312-0375', 'alexandro.mcclure@example.net'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (4, 2, 'store_name', '93472 Mayert Shore Apt. 360 Mitchellton, TN 84209', '670-466-6367', 'bryon24@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (5, 3, 'store_name', '88112 Parisian Lights Sporermouth, MN 25962', '01399327266', 'creola23@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (6, 4, 'store_name', '49708 Marcella Valleys Suite 181 Ninamouth, WA 86667', '1-859-843-1957', 'jerod.reynolds@example.net'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (7, 4, 'store_name', '41924 Alfredo Cliff New Eviestad, NY 17573', '1-109-872-9142x77078', 'ihamill@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (8, 4, 'store_name', '7081 Shanna Cape West Zacheryshire, NC 17408', '+67(5)4983519062', 'casper.adolfo@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (9, 4, 'store_name', '5288 Kaia Street Devonton, NJ 61782-9006', '(723)503-7086x356', 'selmer.stiedemann@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (10, 3, 'store_name', '00578 Lisa Gateway Suite 476 Strosinville, VA 03998-3292', '07126036440', 'luisa57@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (11, 2, 'store_name', '34894 Everett Road South Jeremiehaven, GA 08730', '611-037-9309', 'vonrueden.vern@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (12, 4, 'store_name', '2676 Cruickshank Gardens North Ginahaven, CT 85046', '(626)763-7031', 'freda.toy@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (13, 2, 'store_name', '29297 West Road Suite 210 West Dulceside, UT 58085-8998', '1-764-126-7567x0795', 'katlynn62@example.com'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (14, 1, 'store_name', '16650 Lysanne River Apt. 281 North Garettton, AL 84756-4375', '319.331.3397', 'mohr.elwin@example.net'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (15, 3, 'store_name', '82470 Hansen Squares Suite 190 Wehnermouth, NC 76791', '(587)993-3604x3077', 'kelly30@example.com');   CREATE TABLE `Departments` ( `department_id` INTEGER PRIMARY KEY, `dept_store_id` INTEGER NOT NULL, `department_name` VARCHAR(80), FOREIGN KEY (`dept_store_id` ) REFERENCES `Department_Stores`(`dept_store_id` ) ); CREATE TABLE `Order_Items` ( `order_item_id` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) ); CREATE TABLE `Product_Suppliers` ( `product_id` INTEGER NOT NULL, `supplier_id` INTEGER NOT NULL, `date_supplied_from` DATETIME NOT NULL, `date_supplied_to` DATETIME, `total_amount_purchased` VARCHAR(80), `total_value_purchased` DECIMAL(19,4), PRIMARY KEY (`product_id`, `supplier_id`), FOREIGN KEY (`supplier_id` ) REFERENCES `Suppliers`(`supplier_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) );   CREATE TABLE `Staff_Department_Assignments` ( `staff_id` INTEGER NOT NULL, `department_id` INTEGER NOT NULL, `date_assigned_from` DATETIME NOT NULL, `job_title_code` VARCHAR(10) NOT NULL, `date_assigned_to` DATETIME, PRIMARY KEY (`staff_id`, `department_id`), FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` ), FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ) );  ",hard
1507,6836,device,SELECT Shop_Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM stock),List the names of shops that have no devices in stock.,"PRAGMA foreign_keys = ON;  CREATE TABLE ""device"" ( ""Device_ID"" int, ""Device"" text, ""Carrier"" text, ""Package_Version"" text, ""Applications"" text, ""Software_Platform"" text, PRIMARY KEY (""Device_ID"") );  CREATE TABLE ""shop"" ( ""Shop_ID"" int, ""Shop_Name"" text, ""Location"" text, ""Open_Date"" text, ""Open_Year"" int, PRIMARY KEY (""Shop_ID"") );  CREATE TABLE ""stock"" ( ""Shop_ID"" int, ""Device_ID"" int, ""Quantity"" int, PRIMARY KEY (""Shop_ID"",""Device_ID""), FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`), FOREIGN KEY (`Device_ID`) REFERENCES `device`(`Device_ID`) );  ",hard
1103,5161,sports_competition,SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC LIMIT 1,List the most common type of competition.," PRAGMA foreign_keys = ON;  CREATE TABLE ""club"" ( ""Club_ID"" int, ""name"" text, ""Region"" text, ""Start_year"" text, PRIMARY KEY (""Club_ID"") );  CREATE TABLE ""club_rank"" ( ""Rank"" real, ""Club_ID"" int, ""Gold"" real, ""Silver"" real, ""Bronze"" real, ""Total"" real, PRIMARY KEY (""Rank"",""Club_ID"") FOREIGN KEY (`Club_ID`) REFERENCES `club`(`Club_ID`) );  CREATE TABLE ""player"" ( ""Player_ID"" int, ""name"" text, ""Position"" text, ""Club_ID"" int, ""Apps"" real, ""Tries"" real, ""Goals"" text, ""Points"" real, PRIMARY KEY (""Player_ID""), FOREIGN KEY (`Club_ID`) REFERENCES `club`(`Club_ID`) );  CREATE TABLE ""competition"" ( ""Competition_ID"" int, ""Year"" real, ""Competition_type"" text, ""Country"" text, PRIMARY KEY (""Competition_ID"") );  CREATE TABLE ""competition_result"" ( ""Competition_ID"" int, ""Club_ID_1"" int, ""Club_ID_2"" int, ""Score"" text, PRIMARY KEY (""Competition_ID"",""Club_ID_1"",""Club_ID_2""), FOREIGN KEY (`Club_ID_1`) REFERENCES `club`(`Club_ID`), FOREIGN KEY (`Club_ID_2`) REFERENCES `club`(`Club_ID`), FOREIGN KEY (`Competition_ID`) REFERENCES `competition`(`Competition_ID`) );   ",hard
1097,5082,behavior_monitoring,SELECT last_name FROM Teachers EXCEPT SELECT T1.last_name FROM Teachers AS T1 JOIN Detention AS T2 ON T1.teacher_id  =  T2.teacher_id,Find the last names of teachers who are not involved in any detention.,"PRAGMA foreign_keys = ON; CREATE TABLE `Ref_Address_Types` ( `address_type_code` VARCHAR(15) PRIMARY KEY, `address_type_description` VARCHAR(80) ); CREATE TABLE `Ref_Detention_Type` ( `detention_type_code` VARCHAR(10) PRIMARY KEY, `detention_type_description` VARCHAR(80) ); CREATE TABLE `Ref_Incident_Type` ( `incident_type_code` VARCHAR(10) PRIMARY KEY, `incident_type_description` VARCHAR(80) );  CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `line_1` VARCHAR(120), `line_2` VARCHAR(120), `line_3` VARCHAR(120), `city` VARCHAR(80), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(50), `country` VARCHAR(50), `other_address_details` VARCHAR(255) );  CREATE TABLE `Students` ( `student_id` INTEGER PRIMARY KEY, `address_id` INTEGER NOT NULL, `first_name` VARCHAR(80), `middle_name` VARCHAR(40), `last_name` VARCHAR(40), `cell_mobile_number` VARCHAR(40), `email_address` VARCHAR(40), `date_first_rental` DATETIME, `date_left_university` DATETIME, `other_student_details` VARCHAR(255), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ) );  CREATE TABLE `Teachers` ( `teacher_id` INTEGER PRIMARY KEY, `address_id` INTEGER NOT NULL, `first_name` VARCHAR(80), `middle_name` VARCHAR(80), `last_name` VARCHAR(80), `gender` VARCHAR(1), `cell_mobile_number` VARCHAR(40), `email_address` VARCHAR(40), `other_details` VARCHAR(255), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ) ); CREATE TABLE `Assessment_Notes` ( `notes_id` INTEGER NOT NULL , `student_id` INTEGER, `teacher_id` INTEGER NOT NULL, `date_of_notes` DATETIME, `text_of_notes` VARCHAR(255), `other_details` VARCHAR(255), FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ), FOREIGN KEY (`teacher_id` ) REFERENCES `Teachers`(`teacher_id` ) ); CREATE TABLE `Behavior_Incident` ( `incident_id` INTEGER PRIMARY KEY, `incident_type_code` VARCHAR(10) NOT NULL, `student_id` INTEGER NOT NULL, `date_incident_start` DATETIME, `date_incident_end` DATETIME, `incident_summary` VARCHAR(255), `recommendations` VARCHAR(255), `other_details` VARCHAR(255), FOREIGN KEY (`incident_type_code` ) REFERENCES `Ref_Incident_Type`(`incident_type_code` ), FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ) ); CREATE TABLE `Detention` ( `detention_id` INTEGER PRIMARY KEY, `detention_type_code` VARCHAR(10) NOT NULL, `teacher_id` INTEGER, `datetime_detention_start` DATETIME, `datetime_detention_end` DATETIME, `detention_summary` VARCHAR(255), `other_details` VARCHAR(255), FOREIGN KEY (`detention_type_code` ) REFERENCES `Ref_Detention_Type`(`detention_type_code` ), FOREIGN KEY (`teacher_id` ) REFERENCES `Teachers`(`teacher_id` ) );  CREATE TABLE `Student_Addresses` ( `student_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_address_from` DATETIME NOT NULL, `date_address_to` DATETIME, `monthly_rental` DECIMAL(19,4), `other_details` VARCHAR(255), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ) );  CREATE TABLE `Students_in_Detention` ( `student_id` INTEGER NOT NULL, `detention_id` INTEGER NOT NULL, `incident_id` INTEGER NOT NULL, FOREIGN KEY (`incident_id` ) REFERENCES `Behavior_Incident`(`incident_id` ), FOREIGN KEY (`detention_id` ) REFERENCES `Detention`(`detention_id` ), FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ) );  ",hard
985,4508,movie_1,SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Chris Jackson',Find the titles of all movies not reviewed by Chris Jackson.,"-- dbext:type=SQLITE:dbname=movie_rating.db  /* Delete the tables if they already exist */ drop table if exists Movie; drop table if exists Reviewer; drop table if exists Rating;  /* Create the schema for our tables */ create table Movie( 	mID int primary key,  	title text,  	year int,  	director text ); create table Reviewer( 	rID int primary key,  	name text);  create table Rating( 	rID int,  	mID int,  	stars int,  	ratingDate date, 	FOREIGN KEY (mID) references Movie(mID), 	FOREIGN KEY (rID) references Reviewer(rID) );  /* Populate the tables with our data */ ",hard
1081,4994,loan_1,SELECT cust_name FROM customer WHERE acc_type  =  'saving' INTERSECT SELECT cust_name FROM customer WHERE acc_type  =  'checking',Find the name of customers who have both saving and checking account types.,"CREATE TABLE bank ( branch_ID int PRIMARY KEY, bname varchar(20), no_of_customers int, city varchar(10), state varchar(20));   CREATE TABLE customer ( cust_ID varchar(3) PRIMARY KEY, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_ID int, state varchar(20), FOREIGN KEY(branch_ID) REFERENCES bank(branch_ID));   CREATE TABLE loan ( loan_ID varchar(3) PRIMARY KEY, loan_type varchar(15), cust_ID varchar(3), branch_ID varchar(3), amount int, FOREIGN KEY(branch_ID) REFERENCES bank(branch_ID), FOREIGN KEY(Cust_ID) REFERENCES customer(Cust_ID));  ",hard
1242,5772,hospital_1,"SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  ""John Wen""",Find the names of procedures which physician John Wen was trained in.,"-- https://en.wikibooks.org/wiki/SQL_Exercises/The_Hospital  DROP TABLE IF EXISTS Physician; CREATE TABLE Physician (   EmployeeID INTEGER NOT NULL,   Name VARCHAR(30) NOT NULL,   Position VARCHAR(30) NOT NULL,   SSN INTEGER NOT NULL,   CONSTRAINT pk_physician PRIMARY KEY(EmployeeID) );   DROP TABLE IF EXISTS Department; CREATE TABLE Department (   DepartmentID INTEGER NOT NULL,   Name VARCHAR(30) NOT NULL,   Head INTEGER NOT NULL,   CONSTRAINT pk_Department PRIMARY KEY(DepartmentID),   CONSTRAINT fk_Department_Physician_EmployeeID FOREIGN KEY(Head) REFERENCES Physician(EmployeeID) );   DROP TABLE IF EXISTS Affiliated_With; CREATE TABLE Affiliated_With (   Physician INTEGER NOT NULL,   Department INTEGER NOT NULL,   PrimaryAffiliation BOOLEAN NOT NULL,   CONSTRAINT fk_Affiliated_With_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),   CONSTRAINT fk_Affiliated_With_Department_DepartmentID FOREIGN KEY(Department) REFERENCES Department(DepartmentID),   PRIMARY KEY(Physician, Department) );  DROP TABLE IF EXISTS Procedures; CREATE TABLE Procedures (   Code INTEGER PRIMARY KEY NOT NULL,   Name VARCHAR(30) NOT NULL,   Cost REAL NOT NULL );  DROP TABLE IF EXISTS Trained_In; CREATE TABLE Trained_In (   Physician INTEGER NOT NULL,   Treatment INTEGER NOT NULL,   CertificationDate DATETIME NOT NULL,   CertificationExpires DATETIME NOT NULL,   CONSTRAINT fk_Trained_In_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),   CONSTRAINT fk_Trained_In_Procedures_Code FOREIGN KEY(Treatment) REFERENCES Procedures(Code),   PRIMARY KEY(Physician, Treatment) );  DROP TABLE IF EXISTS Patient; CREATE TABLE Patient (   SSN INTEGER PRIMARY KEY NOT NULL,   Name VARCHAR(30) NOT NULL,   Address VARCHAR(30) NOT NULL,   Phone VARCHAR(30) NOT NULL,   InsuranceID INTEGER NOT NULL,   PCP INTEGER NOT NULL,   CONSTRAINT fk_Patient_Physician_EmployeeID FOREIGN KEY(PCP) REFERENCES Physician(EmployeeID) );  DROP TABLE IF EXISTS Nurse; CREATE TABLE Nurse (   EmployeeID INTEGER PRIMARY KEY NOT NULL,   Name VARCHAR(30) NOT NULL,   Position VARCHAR(30) NOT NULL,   Registered BOOLEAN NOT NULL,   SSN INTEGER NOT NULL );  DROP TABLE IF EXISTS Appointment; CREATE TABLE Appointment (   AppointmentID INTEGER PRIMARY KEY NOT NULL,   Patient INTEGER NOT NULL,       PrepNurse INTEGER,   Physician INTEGER NOT NULL,   Start DATETIME NOT NULL,   End DATETIME NOT NULL,   ExaminationRoom TEXT NOT NULL,   CONSTRAINT fk_Appointment_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),   CONSTRAINT fk_Appointment_Nurse_EmployeeID FOREIGN KEY(PrepNurse) REFERENCES Nurse(EmployeeID),   CONSTRAINT fk_Appointment_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID) );  DROP TABLE IF EXISTS Medication; CREATE TABLE Medication (   Code INTEGER PRIMARY KEY NOT NULL,   Name VARCHAR(30) NOT NULL,   Brand VARCHAR(30) NOT NULL,   Description VARCHAR(30) NOT NULL );   DROP TABLE IF EXISTS Prescribes; CREATE TABLE Prescribes (   Physician INTEGER NOT NULL,   Patient INTEGER NOT NULL,    Medication INTEGER NOT NULL,    Date DATETIME NOT NULL,   Appointment INTEGER,     Dose VARCHAR(30) NOT NULL,   PRIMARY KEY(Physician, Patient, Medication, Date),   CONSTRAINT fk_Prescribes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),   CONSTRAINT fk_Prescribes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),   CONSTRAINT fk_Prescribes_Medication_Code FOREIGN KEY(Medication) REFERENCES Medication(Code),   CONSTRAINT fk_Prescribes_Appointment_AppointmentID FOREIGN KEY(Appointment) REFERENCES Appointment(AppointmentID) );  DROP TABLE IF EXISTS Block; CREATE TABLE Block (   BlockFloor INTEGER NOT NULL,   BlockCode INTEGER NOT NULL,   PRIMARY KEY(BlockFloor, BlockCode) );   DROP TABLE IF EXISTS Room; CREATE TABLE Room (   RoomNumber INTEGER PRIMARY KEY NOT NULL,   RoomType VARCHAR(30) NOT NULL,   BlockFloor INTEGER NOT NULL,     BlockCode INTEGER NOT NULL,     Unavailable BOOLEAN NOT NULL,   CONSTRAINT fk_Room_Block_PK FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode) );  DROP TABLE IF EXISTS On_Call; CREATE TABLE On_Call (   Nurse INTEGER NOT NULL,   BlockFloor INTEGER NOT NULL,    BlockCode INTEGER NOT NULL,   OnCallStart DATETIME NOT NULL,   OnCallEnd DATETIME NOT NULL,   PRIMARY KEY(Nurse, BlockFloor, BlockCode, OnCallStart, OnCallEnd),   CONSTRAINT fk_OnCall_Nurse_EmployeeID FOREIGN KEY(Nurse) REFERENCES Nurse(EmployeeID),   CONSTRAINT fk_OnCall_Block_Floor FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode)  );  DROP TABLE IF EXISTS Stay; CREATE TABLE Stay (   StayID INTEGER PRIMARY KEY NOT NULL,   Patient INTEGER NOT NULL,   Room INTEGER NOT NULL,   StayStart DATETIME NOT NULL,   StayEnd DATETIME NOT NULL,   CONSTRAINT fk_Stay_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),   CONSTRAINT fk_Stay_Room_Number FOREIGN KEY(Room) REFERENCES Room(RoomNumber) );  DROP TABLE IF EXISTS Undergoes; CREATE TABLE Undergoes (   Patient INTEGER NOT NULL,   Procedures INTEGER NOT NULL,   Stay INTEGER NOT NULL,   DateUndergoes DATETIME NOT NULL,   Physician INTEGER NOT NULL,   AssistingNurse INTEGER,   PRIMARY KEY(Patient, Procedures, Stay, DateUndergoes),   CONSTRAINT fk_Undergoes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),   CONSTRAINT fk_Undergoes_Procedures_Code FOREIGN KEY(Procedures) REFERENCES Procedures(Code),   CONSTRAINT fk_Undergoes_Stay_StayID FOREIGN KEY(Stay) REFERENCES Stay(StayID),   CONSTRAINT fk_Undergoes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),   CONSTRAINT fk_Undergoes_Nurse_EmployeeID FOREIGN KEY(AssistingNurse) REFERENCES Nurse(EmployeeID) );   ",hard
47,281,employee_hire_evaluation,SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation),Find the names of employees who never won any award in the evaluation.," PRAGMA foreign_keys = ON;  CREATE TABLE ""employee"" ( ""Employee_ID"" int, ""Name"" text, ""Age"" int, ""City"" text, PRIMARY KEY (""Employee_ID"") );   CREATE TABLE ""shop"" ( ""Shop_ID"" int, ""Name"" text, ""Location"" text, ""District"" text, ""Number_products"" int, ""Manager_name"" text, PRIMARY KEY (""Shop_ID"") );   CREATE TABLE ""hiring"" ( ""Shop_ID"" int, ""Employee_ID"" int, ""Start_from"" text, ""Is_full_time"" bool, PRIMARY KEY (""Employee_ID""), FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`), FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`) );  CREATE TABLE ""evaluation"" ( ""Employee_ID"" text, ""Year_awarded"" text, ""Bonus"" real, PRIMARY KEY (""Employee_ID"",""Year_awarded""), FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`) );   ",hard
992,4527,movie_1,"SELECT T2.title ,  T1.stars ,  T2.director ,  max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE director != ""null"" GROUP BY director","For each director, what are the titles and ratings for all the movies they reviewed?","-- dbext:type=SQLITE:dbname=movie_rating.db  /* Delete the tables if they already exist */ drop table if exists Movie; drop table if exists Reviewer; drop table if exists Rating;  /* Create the schema for our tables */ create table Movie( 	mID int primary key,  	title text,  	year int,  	director text ); create table Reviewer( 	rID int primary key,  	name text);  create table Rating( 	rID int,  	mID int,  	stars int,  	ratingDate date, 	FOREIGN KEY (mID) references Movie(mID), 	FOREIGN KEY (rID) references Reviewer(rID) );  /* Populate the tables with our data */ ",hard
1508,6837,device,SELECT Shop_Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM stock),What are the names of shops that do not have any devices in stock?,"PRAGMA foreign_keys = ON;  CREATE TABLE ""device"" ( ""Device_ID"" int, ""Device"" text, ""Carrier"" text, ""Package_Version"" text, ""Applications"" text, ""Software_Platform"" text, PRIMARY KEY (""Device_ID"") );  CREATE TABLE ""shop"" ( ""Shop_ID"" int, ""Shop_Name"" text, ""Location"" text, ""Open_Date"" text, ""Open_Year"" int, PRIMARY KEY (""Shop_ID"") );  CREATE TABLE ""stock"" ( ""Shop_ID"" int, ""Device_ID"" int, ""Quantity"" int, PRIMARY KEY (""Shop_ID"",""Device_ID""), FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`), FOREIGN KEY (`Device_ID`) REFERENCES `device`(`Device_ID`) );  ",hard
194,1073,geo,SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );,what state is the biggest,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );",hard
321,1322,geo,SELECT state_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX ( mountain_altitude ) FROM mountain );,where is the highest mountain of the united states,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );",hard
764,3325,university_basketball,SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1,Return the primary conference of the school with the lowest acc percentage score.,"CREATE TABLE ""basketball_match"" ( ""Team_ID"" int, ""School_ID"" int, ""Team_Name"" text, ""ACC_Regular_Season"" text, ""ACC_Percent"" text, ""ACC_Home"" text, ""ACC_Road"" text, ""All_Games"" text, ""All_Games_Percent"" int, ""All_Home"" text, ""All_Road"" text, ""All_Neutral"" text, PRIMARY KEY (""Team_ID""), FOREIGN KEY (`School_ID`) REFERENCES `university`(`School_ID`) );  CREATE TABLE ""university"" ( ""School_ID"" int, ""School"" text, ""Location"" text, ""Founded"" real, ""Affiliation"" text, ""Enrollment"" real, ""Nickname"" text, ""Primary_conference"" text, PRIMARY KEY (""School_ID"") );  ",hard
1229,5719,hospital_1,SELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1,What is the id of the patient who stayed in room 111 most recently?,"-- https://en.wikibooks.org/wiki/SQL_Exercises/The_Hospital  DROP TABLE IF EXISTS Physician; CREATE TABLE Physician (   EmployeeID INTEGER NOT NULL,   Name VARCHAR(30) NOT NULL,   Position VARCHAR(30) NOT NULL,   SSN INTEGER NOT NULL,   CONSTRAINT pk_physician PRIMARY KEY(EmployeeID) );   DROP TABLE IF EXISTS Department; CREATE TABLE Department (   DepartmentID INTEGER NOT NULL,   Name VARCHAR(30) NOT NULL,   Head INTEGER NOT NULL,   CONSTRAINT pk_Department PRIMARY KEY(DepartmentID),   CONSTRAINT fk_Department_Physician_EmployeeID FOREIGN KEY(Head) REFERENCES Physician(EmployeeID) );   DROP TABLE IF EXISTS Affiliated_With; CREATE TABLE Affiliated_With (   Physician INTEGER NOT NULL,   Department INTEGER NOT NULL,   PrimaryAffiliation BOOLEAN NOT NULL,   CONSTRAINT fk_Affiliated_With_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),   CONSTRAINT fk_Affiliated_With_Department_DepartmentID FOREIGN KEY(Department) REFERENCES Department(DepartmentID),   PRIMARY KEY(Physician, Department) );  DROP TABLE IF EXISTS Procedures; CREATE TABLE Procedures (   Code INTEGER PRIMARY KEY NOT NULL,   Name VARCHAR(30) NOT NULL,   Cost REAL NOT NULL );  DROP TABLE IF EXISTS Trained_In; CREATE TABLE Trained_In (   Physician INTEGER NOT NULL,   Treatment INTEGER NOT NULL,   CertificationDate DATETIME NOT NULL,   CertificationExpires DATETIME NOT NULL,   CONSTRAINT fk_Trained_In_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),   CONSTRAINT fk_Trained_In_Procedures_Code FOREIGN KEY(Treatment) REFERENCES Procedures(Code),   PRIMARY KEY(Physician, Treatment) );  DROP TABLE IF EXISTS Patient; CREATE TABLE Patient (   SSN INTEGER PRIMARY KEY NOT NULL,   Name VARCHAR(30) NOT NULL,   Address VARCHAR(30) NOT NULL,   Phone VARCHAR(30) NOT NULL,   InsuranceID INTEGER NOT NULL,   PCP INTEGER NOT NULL,   CONSTRAINT fk_Patient_Physician_EmployeeID FOREIGN KEY(PCP) REFERENCES Physician(EmployeeID) );  DROP TABLE IF EXISTS Nurse; CREATE TABLE Nurse (   EmployeeID INTEGER PRIMARY KEY NOT NULL,   Name VARCHAR(30) NOT NULL,   Position VARCHAR(30) NOT NULL,   Registered BOOLEAN NOT NULL,   SSN INTEGER NOT NULL );  DROP TABLE IF EXISTS Appointment; CREATE TABLE Appointment (   AppointmentID INTEGER PRIMARY KEY NOT NULL,   Patient INTEGER NOT NULL,       PrepNurse INTEGER,   Physician INTEGER NOT NULL,   Start DATETIME NOT NULL,   End DATETIME NOT NULL,   ExaminationRoom TEXT NOT NULL,   CONSTRAINT fk_Appointment_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),   CONSTRAINT fk_Appointment_Nurse_EmployeeID FOREIGN KEY(PrepNurse) REFERENCES Nurse(EmployeeID),   CONSTRAINT fk_Appointment_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID) );  DROP TABLE IF EXISTS Medication; CREATE TABLE Medication (   Code INTEGER PRIMARY KEY NOT NULL,   Name VARCHAR(30) NOT NULL,   Brand VARCHAR(30) NOT NULL,   Description VARCHAR(30) NOT NULL );   DROP TABLE IF EXISTS Prescribes; CREATE TABLE Prescribes (   Physician INTEGER NOT NULL,   Patient INTEGER NOT NULL,    Medication INTEGER NOT NULL,    Date DATETIME NOT NULL,   Appointment INTEGER,     Dose VARCHAR(30) NOT NULL,   PRIMARY KEY(Physician, Patient, Medication, Date),   CONSTRAINT fk_Prescribes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),   CONSTRAINT fk_Prescribes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),   CONSTRAINT fk_Prescribes_Medication_Code FOREIGN KEY(Medication) REFERENCES Medication(Code),   CONSTRAINT fk_Prescribes_Appointment_AppointmentID FOREIGN KEY(Appointment) REFERENCES Appointment(AppointmentID) );  DROP TABLE IF EXISTS Block; CREATE TABLE Block (   BlockFloor INTEGER NOT NULL,   BlockCode INTEGER NOT NULL,   PRIMARY KEY(BlockFloor, BlockCode) );   DROP TABLE IF EXISTS Room; CREATE TABLE Room (   RoomNumber INTEGER PRIMARY KEY NOT NULL,   RoomType VARCHAR(30) NOT NULL,   BlockFloor INTEGER NOT NULL,     BlockCode INTEGER NOT NULL,     Unavailable BOOLEAN NOT NULL,   CONSTRAINT fk_Room_Block_PK FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode) );  DROP TABLE IF EXISTS On_Call; CREATE TABLE On_Call (   Nurse INTEGER NOT NULL,   BlockFloor INTEGER NOT NULL,    BlockCode INTEGER NOT NULL,   OnCallStart DATETIME NOT NULL,   OnCallEnd DATETIME NOT NULL,   PRIMARY KEY(Nurse, BlockFloor, BlockCode, OnCallStart, OnCallEnd),   CONSTRAINT fk_OnCall_Nurse_EmployeeID FOREIGN KEY(Nurse) REFERENCES Nurse(EmployeeID),   CONSTRAINT fk_OnCall_Block_Floor FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode)  );  DROP TABLE IF EXISTS Stay; CREATE TABLE Stay (   StayID INTEGER PRIMARY KEY NOT NULL,   Patient INTEGER NOT NULL,   Room INTEGER NOT NULL,   StayStart DATETIME NOT NULL,   StayEnd DATETIME NOT NULL,   CONSTRAINT fk_Stay_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),   CONSTRAINT fk_Stay_Room_Number FOREIGN KEY(Room) REFERENCES Room(RoomNumber) );  DROP TABLE IF EXISTS Undergoes; CREATE TABLE Undergoes (   Patient INTEGER NOT NULL,   Procedures INTEGER NOT NULL,   Stay INTEGER NOT NULL,   DateUndergoes DATETIME NOT NULL,   Physician INTEGER NOT NULL,   AssistingNurse INTEGER,   PRIMARY KEY(Patient, Procedures, Stay, DateUndergoes),   CONSTRAINT fk_Undergoes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),   CONSTRAINT fk_Undergoes_Procedures_Code FOREIGN KEY(Procedures) REFERENCES Procedures(Code),   CONSTRAINT fk_Undergoes_Stay_StayID FOREIGN KEY(Stay) REFERENCES Stay(StayID),   CONSTRAINT fk_Undergoes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),   CONSTRAINT fk_Undergoes_Nurse_EmployeeID FOREIGN KEY(AssistingNurse) REFERENCES Nurse(EmployeeID) );   ",hard
1118,5255,hr_1,"SELECT T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id",Find employee with ID and name of the country presently where (s)he is working.,"-- phpMyAdmin SQL Dump -- version 4.0.10.7 -- http://www.phpmyadmin.net -- -- Host: localhost -- Generation Time: Mar 20, 2015 at 01:43 AM -- Server version: 5.5.34-cll-lve -- PHP Version: 5.4.23    /*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */; /*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */; /*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */; /*!40101 SET NAMES utf8 */; CREATE TABLE IF NOT EXISTS `regions` (   `REGION_ID` decimal(5,0) NOT NULL,   `REGION_NAME` varchar(25) DEFAULT NULL,   PRIMARY KEY (`REGION_ID`) );  -- -- Dumping data for table `regions` --  INSERT INTO `regions` (`REGION_ID`, `REGION_NAME`) VALUES ('1', 'Europe\r'), ('2', 'Americas\r'), ('3', 'Asia\r'), ('4', 'Middle East and Africa\r'); -- -- Database: `wrpracti_bookinfo` --  -- --------------------------------------------------------  -- -- Table structure for table `countries` --  CREATE TABLE IF NOT EXISTS `countries` (   `COUNTRY_ID` varchar(2) NOT NULL,   `COUNTRY_NAME` varchar(40) DEFAULT NULL,   `REGION_ID` decimal(10,0) DEFAULT NULL,   PRIMARY KEY (`COUNTRY_ID`),   FOREIGN KEY (`REGION_ID`) REFERENCES regions (`REGION_ID`) );  -- -- Dumping data for table `countries` --  INSERT INTO `countries` (`COUNTRY_ID`, `COUNTRY_NAME`, `REGION_ID`) VALUES ('AR', 'Argentina', '2'), ('AU', 'Australia', '3'), ('BE', 'Belgium', '1'), ('BR', 'Brazil', '2'), ('CA', 'Canada', '2'), ('CH', 'Switzerland', '1'), ('CN', 'China', '3'), ('DE', 'Germany', '1'), ('DK', 'Denmark', '1'), ('EG', 'Egypt', '4'), ('FR', 'France', '1'), ('HK', 'HongKong', '3'), ('IL', 'Israel', '4'), ('IN', 'India', '3'), ('IT', 'Italy', '1'), ('JP', 'Japan', '3'), ('KW', 'Kuwait', '4'), ('MX', 'Mexico', '2'), ('NG', 'Nigeria', '4'), ('NL', 'Netherlands', '1'), ('SG', 'Singapore', '3'), ('UK', 'United Kingdom', '1'), ('US', 'United States of America', '2'), ('ZM', 'Zambia', '4'), ('ZW', 'Zimbabwe', '4');  -- --------------------------------------------------------  -- -- Table structure for table `departments` --  CREATE TABLE IF NOT EXISTS `departments` (   `DEPARTMENT_ID` decimal(4,0) NOT NULL DEFAULT '0',   `DEPARTMENT_NAME` varchar(30) NOT NULL,   `MANAGER_ID` decimal(6,0) DEFAULT NULL,   `LOCATION_ID` decimal(4,0) DEFAULT NULL,   PRIMARY KEY (`DEPARTMENT_ID`) );  -- -- Dumping data for table `departments` --  INSERT INTO `departments` (`DEPARTMENT_ID`, `DEPARTMENT_NAME`, `MANAGER_ID`, `LOCATION_ID`) VALUES ('10', 'Administration', '200', '1700'), ('20', 'Marketing', '201', '1800'), ('30', 'Purchasing', '114', '1700'), ('40', 'Human Resources', '203', '2400'), ('50', 'Shipping', '121', '1500'), ('60', 'IT', '103', '1400'), ('70', 'Public Relations', '204', '2700'), ('80', 'Sales', '145', '2500'), ('90', 'Executive', '100', '1700'), ('100', 'Finance', '108', '1700'), ('110', 'Accounting', '205', '1700'), ('120', 'Treasury', '0', '1700'), ('130', 'Corporate Tax', '0', '1700'), ('140', 'Control And Credit', '0', '1700'), ('150', 'Shareholder Services', '0', '1700'), ('160', 'Benefits', '0', '1700'), ('170', 'Manufacturing', '0', '1700'), ('180', 'Construction', '0', '1700'), ('190', 'Contracting', '0', '1700'), ('200', 'Operations', '0', '1700'), ('210', 'IT Support', '0', '1700'), ('220', 'NOC', '0', '1700'), ('230', 'IT Helpdesk', '0', '1700'), ('240', 'Government Sales', '0', '1700'), ('250', 'Retail Sales', '0', '1700'), ('260', 'Recruiting', '0', '1700'), ('270', 'Payroll', '0', '1700');   CREATE TABLE IF NOT EXISTS `jobs` (   `JOB_ID` varchar(10) NOT NULL DEFAULT '',   `JOB_TITLE` varchar(35) NOT NULL,   `MIN_SALARY` decimal(6,0) DEFAULT NULL,   `MAX_SALARY` decimal(6,0) DEFAULT NULL,   PRIMARY KEY (`JOB_ID`) );  -- -- Dumping data for table `jobs` --  INSERT INTO `jobs` (`JOB_ID`, `JOB_TITLE`, `MIN_SALARY`, `MAX_SALARY`) VALUES ('AD_PRES', 'President', '20000', '40000'), ('AD_VP', 'Administration Vice President', '15000', '30000'), ('AD_ASST', 'Administration Assistant', '3000', '6000'), ('FI_MGR', 'Finance Manager', '8200', '16000'), ('FI_ACCOUNT', 'Accountant', '4200', '9000'), ('AC_MGR', 'Accounting Manager', '8200', '16000'), ('AC_ACCOUNT', 'Public Accountant', '4200', '9000'), ('SA_MAN', 'Sales Manager', '10000', '20000'), ('SA_REP', 'Sales Representative', '6000', '12000'), ('PU_MAN', 'Purchasing Manager', '8000', '15000'), ('PU_CLERK', 'Purchasing Clerk', '2500', '5500'), ('ST_MAN', 'Stock Manager', '5500', '8500'), ('ST_CLERK', 'Stock Clerk', '2000', '5000'), ('SH_CLERK', 'Shipping Clerk', '2500', '5500'), ('IT_PROG', 'Programmer', '4000', '10000'), ('MK_MAN', 'Marketing Manager', '9000', '15000'), ('MK_REP', 'Marketing Representative', '4000', '9000'), ('HR_REP', 'Human Resources Representative', '4000', '9000'), ('PR_REP', 'Public Relations Representative', '4500', '10500');  -- --------------------------------------------------------  -- -- Table structure for table `employees` --  CREATE TABLE IF NOT EXISTS `employees` (   `EMPLOYEE_ID` decimal(6,0) NOT NULL DEFAULT '0',   `FIRST_NAME` varchar(20) DEFAULT NULL,   `LAST_NAME` varchar(25) NOT NULL,   `EMAIL` varchar(25) NOT NULL,   `PHONE_NUMBER` varchar(20) DEFAULT NULL,   `HIRE_DATE` date NOT NULL,   `JOB_ID` varchar(10) NOT NULL,   `SALARY` decimal(8,2) DEFAULT NULL,   `COMMISSION_PCT` decimal(2,2) DEFAULT NULL,   `MANAGER_ID` decimal(6,0) DEFAULT NULL,   `DEPARTMENT_ID` decimal(4,0) DEFAULT NULL,   PRIMARY KEY (`EMPLOYEE_ID`),   FOREIGN KEY (`DEPARTMENT_ID`) REFERENCES departments(`DEPARTMENT_ID`),   FOREIGN KEY (`JOB_ID`) REFERENCES jobs(`JOB_ID`) );  -- -- Dumping data for table `employees` --  INSERT INTO `employees` (`EMPLOYEE_ID`, `FIRST_NAME`, `LAST_NAME`, `EMAIL`, `PHONE_NUMBER`, `HIRE_DATE`, `JOB_ID`, `SALARY`, `COMMISSION_PCT`, `MANAGER_ID`, `DEPARTMENT_ID`) VALUES ('100', 'Steven', 'King', 'SKING', '515.123.4567', '1987-06-17', 'AD_PRES', '24000.00', '0.00', '0', '90'), ('101', 'Neena', 'Kochhar', 'NKOCHHAR', '515.123.4568', '1987-06-18', 'AD_VP', '17000.00', '0.00', '100', '90'), ('102', 'Lex', 'De Haan', 'LDEHAAN', '515.123.4569', '1987-06-19', 'AD_VP', '17000.00', '0.00', '100', '90'), ('103', 'Alexander', 'Hunold', 'AHUNOLD', '590.423.4567', '1987-06-20', 'IT_PROG', '9000.00', '0.00', '102', '60'), ('104', 'Bruce', 'Ernst', 'BERNST', '590.423.4568', '1987-06-21', 'IT_PROG', '6000.00', '0.00', '103', '60'), ('105', 'David', 'Austin', 'DAUSTIN', '590.423.4569', '1987-06-22', 'IT_PROG', '4800.00', '0.00', '103', '60'), ('106', 'Valli', 'Pataballa', 'VPATABAL', '590.423.4560', '1987-06-23', 'IT_PROG', '4800.00', '0.00', '103', '60'), ('107', 'Diana', 'Lorentz', 'DLORENTZ', '590.423.5567', '1987-06-24', 'IT_PROG', '4200.00', '0.00', '103', '60'), ('108', 'Nancy', 'Greenberg', 'NGREENBE', '515.124.4569', '1987-06-25', 'FI_MGR', '12000.00', '0.00', '101', '100'), ('109', 'Daniel', 'Faviet', 'DFAVIET', '515.124.4169', '1987-06-26', 'FI_ACCOUNT', '9000.00', '0.00', '108', '100'), ('110', 'John', 'Chen', 'JCHEN', '515.124.4269', '1987-06-27', 'FI_ACCOUNT', '8200.00', '0.00', '108', '100'), ('111', 'Ismael', 'Sciarra', 'ISCIARRA', '515.124.4369', '1987-06-28', 'FI_ACCOUNT', '7700.00', '0.00', '108', '100'), ('112', 'Jose Manuel', 'Urman', 'JMURMAN', '515.124.4469', '1987-06-29', 'FI_ACCOUNT', '7800.00', '0.00', '108', '100'), ('113', 'Luis', 'Popp', 'LPOPP', '515.124.4567', '1987-06-30', 'FI_ACCOUNT', '6900.00', '0.00', '108', '100'), ('114', 'Den', 'Raphaely', 'DRAPHEAL', '515.127.4561', '1987-07-01', 'PU_MAN', '11000.00', '0.00', '100', '30'), ('115', 'Alexander', 'Khoo', 'AKHOO', '515.127.4562', '1987-07-02', 'PU_CLERK', '3100.00', '0.00', '114', '30'), ('116', 'Shelli', 'Baida', 'SBAIDA', '515.127.4563', '1987-07-03', 'PU_CLERK', '2900.00', '0.00', '114', '30'), ('117', 'Sigal', 'Tobias', 'STOBIAS', '515.127.4564', '1987-07-04', 'PU_CLERK', '2800.00', '0.00', '114', '30'), ('118', 'Guy', 'Himuro', 'GHIMURO', '515.127.4565', '1987-07-05', 'PU_CLERK', '2600.00', '0.00', '114', '30'), ('119', 'Karen', 'Colmenares', 'KCOLMENA', '515.127.4566', '1987-07-06', 'PU_CLERK', '2500.00', '0.00', '114', '30'), ('120', 'Matthew', 'Weiss', 'MWEISS', '650.123.1234', '1987-07-07', 'ST_MAN', '8000.00', '0.00', '100', '50'), ('121', 'Adam', 'Fripp', 'AFRIPP', '650.123.2234', '1987-07-08', 'ST_MAN', '8200.00', '0.00', '100', '50'), ('122', 'Payam', 'Kaufling', 'PKAUFLIN', '650.123.3234', '1987-07-09', 'ST_MAN', '7900.00', '0.00', '100', '50'), ('123', 'Shanta', 'Vollman', 'SVOLLMAN', '650.123.4234', '1987-07-10', 'ST_MAN', '6500.00', '0.00', '100', '50'), ('124', 'Kevin', 'Mourgos', 'KMOURGOS', '650.123.5234', '1987-07-11', 'ST_MAN', '5800.00', '0.00', '100', '50'), ('125', 'Julia', 'Nayer', 'JNAYER', '650.124.1214', '1987-07-12', 'ST_CLERK', '3200.00', '0.00', '120', '50'), ('126', 'Irene', 'Mikkilineni', 'IMIKKILI', '650.124.1224', '1987-07-13', 'ST_CLERK', '2700.00', '0.00', '120', '50'), ('127', 'James', 'Landry', 'JLANDRY', '650.124.1334', '1987-07-14', 'ST_CLERK', '2400.00', '0.00', '120', '50'), ('128', 'Steven', 'Markle', 'SMARKLE', '650.124.1434', '1987-07-15', 'ST_CLERK', '2200.00', '0.00', '120', '50'), ('129', 'Laura', 'Bissot', 'LBISSOT', '650.124.5234', '1987-07-16', 'ST_CLERK', '3300.00', '0.00', '121', '50'), ('130', 'Mozhe', 'Atkinson', 'MATKINSO', '650.124.6234', '1987-07-17', 'ST_CLERK', '2800.00', '0.00', '121', '50'), ('131', 'James', 'Marlow', 'JAMRLOW', '650.124.7234', '1987-07-18', 'ST_CLERK', '2500.00', '0.00', '121', '50'), ('132', 'TJ', 'Olson', 'TJOLSON', '650.124.8234', '1987-07-19', 'ST_CLERK', '2100.00', '0.00', '121', '50'), ('133', 'Jason', 'Mallin', 'JMALLIN', '650.127.1934', '1987-07-20', 'ST_CLERK', '3300.00', '0.00', '122', '50'), ('134', 'Michael', 'Rogers', 'MROGERS', '650.127.1834', '1987-07-21', 'ST_CLERK', '2900.00', '0.00', '122', '50'), ('135', 'Ki', 'Gee', 'KGEE', '650.127.1734', '1987-07-22', 'ST_CLERK', '2400.00', '0.00', '122', '50'), ('136', 'Hazel', 'Philtanker', 'HPHILTAN', '650.127.1634', '1987-07-23', 'ST_CLERK', '2200.00', '0.00', '122', '50'), ('137', 'Renske', 'Ladwig', 'RLADWIG', '650.121.1234', '1987-07-24', 'ST_CLERK', '3600.00', '0.00', '123', '50'), ('138', 'Stephen', 'Stiles', 'SSTILES', '650.121.2034', '1987-07-25', 'ST_CLERK', '3200.00', '0.00', '123', '50'), ('139', 'John', 'Seo', 'JSEO', '650.121.2019', '1987-07-26', 'ST_CLERK', '2700.00', '0.00', '123', '50'), ('140', 'Joshua', 'Patel', 'JPATEL', '650.121.1834', '1987-07-27', 'ST_CLERK', '2500.00', '0.00', '123', '50'), ('141', 'Trenna', 'Rajs', 'TRAJS', '650.121.8009', '1987-07-28', 'ST_CLERK', '3500.00', '0.00', '124', '50'), ('142', 'Curtis', 'Davies', 'CDAVIES', '650.121.2994', '1987-07-29', 'ST_CLERK', '3100.00', '0.00', '124', '50'), ('143', 'Randall', 'Matos', 'RMATOS', '650.121.2874', '1987-07-30', 'ST_CLERK', '2600.00', '0.00', '124', '50'), ('144', 'Peter', 'Vargas', 'PVARGAS', '650.121.2004', '1987-07-31', 'ST_CLERK', '2500.00', '0.00', '124', '50'), ('145', 'John', 'Russell', 'JRUSSEL', '011.44.1344.429268', '1987-08-01', 'SA_MAN', '14000.00', '0.40', '100', '80'), ('146', 'Karen', 'Partners', 'KPARTNER', '011.44.1344.467268', '1987-08-02', 'SA_MAN', '13500.00', '0.30', '100', '80'), ('147', 'Alberto', 'Errazuriz', 'AERRAZUR', '011.44.1344.429278', '1987-08-03', 'SA_MAN', '12000.00', '0.30', '100', '80'), ('148', 'Gerald', 'Cambrault', 'GCAMBRAU', '011.44.1344.619268', '1987-08-04', 'SA_MAN', '11000.00', '0.30', '100', '80'), ('149', 'Eleni', 'Zlotkey', 'EZLOTKEY', '011.44.1344.429018', '1987-08-05', 'SA_MAN', '10500.00', '0.20', '100', '80'), ('150', 'Peter', 'Tucker', 'PTUCKER', '011.44.1344.129268', '1987-08-06', 'SA_REP', '10000.00', '0.30', '145', '80'), ('151', 'David', 'Bernstein', 'DBERNSTE', '011.44.1344.345268', '1987-08-07', 'SA_REP', '9500.00', '0.25', '145', '80'), ('152', 'Peter', 'Hall', 'PHALL', '011.44.1344.478968', '1987-08-08', 'SA_REP', '9000.00', '0.25', '145', '80'), ('153', 'Christopher', 'Olsen', 'COLSEN', '011.44.1344.498718', '1987-08-09', 'SA_REP', '8000.00', '0.20', '145', '80'), ('154', 'Nanette', 'Cambrault', 'NCAMBRAU', '011.44.1344.987668', '1987-08-10', 'SA_REP', '7500.00', '0.20', '145', '80'), ('155', 'Oliver', 'Tuvault', 'OTUVAULT', '011.44.1344.486508', '1987-08-11', 'SA_REP', '7000.00', '0.15', '145', '80'), ('156', 'Janette', 'King', 'JKING', '011.44.1345.429268', '1987-08-12', 'SA_REP', '10000.00', '0.35', '146', '80'), ('157', 'Patrick', 'Sully', 'PSULLY', '011.44.1345.929268', '1987-08-13', 'SA_REP', '9500.00', '0.35', '146', '80'), ('158', 'Allan', 'McEwen', 'AMCEWEN', '011.44.1345.829268', '1987-08-14', 'SA_REP', '9000.00', '0.35', '146', '80'), ('159', 'Lindsey', 'Smith', 'LSMITH', '011.44.1345.729268', '1987-08-15', 'SA_REP', '8000.00', '0.30', '146', '80'), ('160', 'Louise', 'Doran', 'LDORAN', '011.44.1345.629268', '1987-08-16', 'SA_REP', '7500.00', '0.30', '146', '80'), ('161', 'Sarath', 'Sewall', 'SSEWALL', '011.44.1345.529268', '1987-08-17', 'SA_REP', '7000.00', '0.25', '146', '80'), ('162', 'Clara', 'Vishney', 'CVISHNEY', '011.44.1346.129268', '1987-08-18', 'SA_REP', '10500.00', '0.25', '147', '80'), ('163', 'Danielle', 'Greene', 'DGREENE', '011.44.1346.229268', '1987-08-19', 'SA_REP', '9500.00', '0.15', '147', '80'), ('164', 'Mattea', 'Marvins', 'MMARVINS', '011.44.1346.329268', '1987-08-20', 'SA_REP', '7200.00', '0.10', '147', '80'), ('165', 'David', 'Lee', 'DLEE', '011.44.1346.529268', '1987-08-21', 'SA_REP', '6800.00', '0.10', '147', '80'), ('166', 'Sundar', 'Ande', 'SANDE', '011.44.1346.629268', '1987-08-22', 'SA_REP', '6400.00', '0.10', '147', '80'), ('167', 'Amit', 'Banda', 'ABANDA', '011.44.1346.729268', '1987-08-23', 'SA_REP', '6200.00', '0.10', '147', '80'), ('168', 'Lisa', 'Ozer', 'LOZER', '011.44.1343.929268', '1987-08-24', 'SA_REP', '11500.00', '0.25', '148', '80'), ('169', 'Harrison', 'Bloom', 'HBLOOM', '011.44.1343.829268', '1987-08-25', 'SA_REP', '10000.00', '0.20', '148', '80'), ('170', 'Tayler', 'Fox', 'TFOX', '011.44.1343.729268', '1987-08-26', 'SA_REP', '9600.00', '0.20', '148', '80'), ('171', 'William', 'Smith', 'WSMITH', '011.44.1343.629268', '1987-08-27', 'SA_REP', '7400.00', '0.15', '148', '80'), ('172', 'Elizabeth', 'Bates', 'EBATES', '011.44.1343.529268', '1987-08-28', 'SA_REP', '7300.00', '0.15', '148', '80'), ('173', 'Sundita', 'Kumar', 'SKUMAR', '011.44.1343.329268', '1987-08-29', 'SA_REP', '6100.00', '0.10', '148', '80'), ('174', 'Ellen', 'Abel', 'EABEL', '011.44.1644.429267', '1987-08-30', 'SA_REP', '11000.00', '0.30', '149', '80'), ('175', 'Alyssa', 'Hutton', 'AHUTTON', '011.44.1644.429266', '1987-08-31', 'SA_REP', '8800.00', '0.25', '149', '80'), ('176', 'Jonathon', 'Taylor', 'JTAYLOR', '011.44.1644.429265', '1987-09-01', 'SA_REP', '8600.00', '0.20', '149', '80'), ('177', 'Jack', 'Livingston', 'JLIVINGS', '011.44.1644.429264', '1987-09-02', 'SA_REP', '8400.00', '0.20', '149', '80'), ('178', 'Kimberely', 'Grant', 'KGRANT', '011.44.1644.429263', '1987-09-03', 'SA_REP', '7000.00', '0.15', '149', '0'), ('179', 'Charles', 'Johnson', 'CJOHNSON', '011.44.1644.429262', '1987-09-04', 'SA_REP', '6200.00', '0.10', '149', '80'), ('180', 'Winston', 'Taylor', 'WTAYLOR', '650.507.9876', '1987-09-05', 'SH_CLERK', '3200.00', '0.00', '120', '50'), ('181', 'Jean', 'Fleaur', 'JFLEAUR', '650.507.9877', '1987-09-06', 'SH_CLERK', '3100.00', '0.00', '120', '50'), ('182', 'Martha', 'Sullivan', 'MSULLIVA', '650.507.9878', '1987-09-07', 'SH_CLERK', '2500.00', '0.00', '120', '50'), ('183', 'Girard', 'Geoni', 'GGEONI', '650.507.9879', '1987-09-08', 'SH_CLERK', '2800.00', '0.00', '120', '50'), ('184', 'Nandita', 'Sarchand', 'NSARCHAN', '650.509.1876', '1987-09-09', 'SH_CLERK', '4200.00', '0.00', '121', '50'), ('185', 'Alexis', 'Bull', 'ABULL', '650.509.2876', '1987-09-10', 'SH_CLERK', '4100.00', '0.00', '121', '50'), ('186', 'Julia', 'Dellinger', 'JDELLING', '650.509.3876', '1987-09-11', 'SH_CLERK', '3400.00', '0.00', '121', '50'), ('187', 'Anthony', 'Cabrio', 'ACABRIO', '650.509.4876', '1987-09-12', 'SH_CLERK', '3000.00', '0.00', '121', '50'), ('188', 'Kelly', 'Chung', 'KCHUNG', '650.505.1876', '1987-09-13', 'SH_CLERK', '3800.00', '0.00', '122', '50'), ('189', 'Jennifer', 'Dilly', 'JDILLY', '650.505.2876', '1987-09-14', 'SH_CLERK', '3600.00', '0.00', '122', '50'), ('190', 'Timothy', 'Gates', 'TGATES', '650.505.3876', '1987-09-15', 'SH_CLERK', '2900.00', '0.00', '122', '50'), ('191', 'Randall', 'Perkins', 'RPERKINS', '650.505.4876', '1987-09-16', 'SH_CLERK', '2500.00', '0.00', '122', '50'), ('192', 'Sarah', 'Bell', 'SBELL', '650.501.1876', '1987-09-17', 'SH_CLERK', '4000.00', '0.00', '123', '50'), ('193', 'Britney', 'Everett', 'BEVERETT', '650.501.2876', '1987-09-18', 'SH_CLERK', '3900.00', '0.00', '123', '50'), ('194', 'Samuel', 'McCain', 'SMCCAIN', '650.501.3876', '1987-09-19', 'SH_CLERK', '3200.00', '0.00', '123', '50'), ('195', 'Vance', 'Jones', 'VJONES', '650.501.4876', '1987-09-20', 'SH_CLERK', '2800.00', '0.00', '123', '50'), ('196', 'Alana', 'Walsh', 'AWALSH', '650.507.9811', '1987-09-21', 'SH_CLERK', '3100.00', '0.00', '124', '50'), ('197', 'Kevin', 'Feeney', 'KFEENEY', '650.507.9822', '1987-09-22', 'SH_CLERK', '3000.00', '0.00', '124', '50'), ('198', 'Donald', 'OConnell', 'DOCONNEL', '650.507.9833', '1987-09-23', 'SH_CLERK', '2600.00', '0.00', '124', '50'), ('199', 'Douglas', 'Grant', 'DGRANT', '650.507.9844', '1987-09-24', 'SH_CLERK', '2600.00', '0.00', '124', '50'), ('200', 'Jennifer', 'Whalen', 'JWHALEN', '515.123.4444', '1987-09-25', 'AD_ASST', '4400.00', '0.00', '101', '10'), ('201', 'Michael', 'Hartstein', 'MHARTSTE', '515.123.5555', '1987-09-26', 'MK_MAN', '13000.00', '0.00', '100', '20'), ('202', 'Pat', 'Fay', 'PFAY', '603.123.6666', '1987-09-27', 'MK_REP', '6000.00', '0.00', '201', '20'), ('203', 'Susan', 'Mavris', 'SMAVRIS', '515.123.7777', '1987-09-28', 'HR_REP', '6500.00', '0.00', '101', '40'), ('204', 'Hermann', 'Baer', 'HBAER', '515.123.8888', '1987-09-29', 'PR_REP', '10000.00', '0.00', '101', '70'), ('205', 'Shelley', 'Higgins', 'SHIGGINS', '515.123.8080', '1987-09-30', 'AC_MGR', '12000.00', '0.00', '101', '110'), ('206', 'William', 'Gietz', 'WGIETZ', '515.123.8181', '1987-10-01', 'AC_ACCOUNT', '8300.00', '0.00', '205', '110');  -- --------------------------------------------------------  -- -- Table structure for table `job_history` --  CREATE TABLE IF NOT EXISTS `job_history` (   `EMPLOYEE_ID` decimal(6,0) NOT NULL,   `START_DATE` date NOT NULL,   `END_DATE` date NOT NULL,   `JOB_ID` varchar(10) NOT NULL,   `DEPARTMENT_ID` decimal(4,0) DEFAULT NULL,   PRIMARY KEY (`EMPLOYEE_ID`,`START_DATE`),   FOREIGN KEY (`EMPLOYEE_ID`) REFERENCES employees(`EMPLOYEE_ID`),   FOREIGN KEY (`DEPARTMENT_ID`) REFERENCES departments(`DEPARTMENT_ID`),   FOREIGN KEY (`JOB_ID`) REFERENCES jobs(`JOB_ID`) );  -- -- Dumping data for table `job_history` --  INSERT INTO `job_history` (`EMPLOYEE_ID`, `START_DATE`, `END_DATE`, `JOB_ID`, `DEPARTMENT_ID`) VALUES ('102', '1993-01-13', '1998-07-24', 'IT_PROG', '60'), ('101', '1989-09-21', '1993-10-27', 'AC_ACCOUNT', '110'), ('101', '1993-10-28', '1997-03-15', 'AC_MGR', '110'), ('201', '1996-02-17', '1999-12-19', 'MK_REP', '20'), ('114', '1998-03-24', '1999-12-31', 'ST_CLERK', '50'), ('122', '1999-01-01', '1999-12-31', 'ST_CLERK', '50'), ('200', '1987-09-17', '1993-06-17', 'AD_ASST', '90'), ('176', '1998-03-24', '1998-12-31', 'SA_REP', '80'), ('176', '1999-01-01', '1999-12-31', 'SA_MAN', '80'), ('200', '1994-07-01', '1998-12-31', 'AC_ACCOUNT', '90'), ('0', '0000-00-00', '0000-00-00', '', '0');  -- --------------------------------------------------------  -- -- Table structure for table `jobs` --   -- -- Table structure for table `locations` --  CREATE TABLE IF NOT EXISTS `locations` (   `LOCATION_ID` decimal(4,0) NOT NULL DEFAULT '0',   `STREET_ADDRESS` varchar(40) DEFAULT NULL,   `POSTAL_CODE` varchar(12) DEFAULT NULL,   `CITY` varchar(30) NOT NULL,   `STATE_PROVINCE` varchar(25) DEFAULT NULL,   `COUNTRY_ID` varchar(2) DEFAULT NULL,   PRIMARY KEY (`LOCATION_ID`),   FOREIGN KEY (`COUNTRY_ID`) REFERENCES countries(`COUNTRY_ID`) );  -- -- Dumping data for table `locations` --  INSERT INTO `locations` (`LOCATION_ID`, `STREET_ADDRESS`, `POSTAL_CODE`, `CITY`, `STATE_PROVINCE`, `COUNTRY_ID`) VALUES ('1000', '1297 Via Cola di Rie', '989', 'Roma', '', 'IT'), ('1100', '93091 Calle della Testa', '10934', 'Venice', '', 'IT'), ('1200', '2017 Shinjuku-ku', '1689', 'Tokyo', 'Tokyo Prefecture', 'JP'), ('1300', '9450 Kamiya-cho', '6823', 'Hiroshima', '', 'JP'), ('1400', '2014 Jabberwocky Rd', '26192', 'Southlake', 'Texas', 'US'), ('1500', '2011 Interiors Blvd', '99236', 'South San Francisco', 'California', 'US'), ('1600', '2007 Zagora St', '50090', 'South Brunswick', 'New Jersey', 'US'), ('1700', '2004 Charade Rd', '98199', 'Seattle', 'Washington', 'US'), ('1800', '147 Spadina Ave', 'M5V 2L7', 'Toronto', 'Ontario', 'CA'), ('1900', '6092 Boxwood St', 'YSW 9T2', 'Whitehorse', 'Yukon', 'CA'), ('2000', '40-5-12 Laogianggen', '190518', 'Beijing', '', 'CN'), ('2100', '1298 Vileparle (E)', '490231', 'Bombay', 'Maharashtra', 'IN'), ('2200', '12-98 Victoria Street', '2901', 'Sydney', 'New South Wales', 'AU'), ('2300', '198 Clementi North', '540198', 'Singapore', '', 'SG'), ('2400', '8204 Arthur St', '', 'London', '', 'UK'), ('2500', '""Magdalen Centre', ' The Oxford ', 'OX9 9ZB', 'Oxford', 'Ox'), ('2600', '9702 Chester Road', '9629850293', 'Stretford', 'Manchester', 'UK'), ('2700', 'Schwanthalerstr. 7031', '80925', 'Munich', 'Bavaria', 'DE'), ('2800', 'Rua Frei Caneca 1360', '01307-002', 'Sao Paulo', 'Sao Paulo', 'BR'), ('2900', '20 Rue des Corps-Saints', '1730', 'Geneva', 'Geneve', 'CH'), ('3000', 'Murtenstrasse 921', '3095', 'Bern', 'BE', 'CH'), ('3100', 'Pieter Breughelstraat 837', '3029SK', 'Utrecht', 'Utrecht', 'NL'), ('3200', 'Mariano Escobedo 9991', '11932', 'Mexico City', '""Distrito Federal', '""');  -- --------------------------------------------------------  -- -- Table structure for table `regions` --   /*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */; /*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */; /*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;",hard
281,1267,geo,SELECT state_name FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );,what is the state with the largest density in usa,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );",hard
1553,7010,music_2,"SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.lastname  =  ""Heilo"" AND T2.title  =  ""Der Kapitan""","Which vocal type did the musician with last name ""Heilo"" played in the song with title ""Der Kapitan""?","  CREATE TABLE ""Songs"" (  	""SongId"" INTEGER PRIMARY KEY,  	""Title"" TEXT  ); CREATE TABLE ""Albums"" (  	""AId"" INTEGER PRIMARY KEY,  	""Title"" TEXT,  	""Year"" INTEGER,  	""Label"" TEXT,  	""Type"" TEXT ); CREATE TABLE ""Band"" (  	""Id"" INTEGER PRIMARY KEY,  	""Firstname"" TEXT,  	""Lastname"" TEXT ); CREATE TABLE ""Instruments"" (  	""SongId"" INTEGER,  	""BandmateId"" INTEGER,  	""Instrument"" TEXT , 	PRIMARY KEY(SongId, BandmateId, Instrument), 	FOREIGN KEY (SongId) REFERENCES Songs(SongId), 	FOREIGN KEY (BandmateId) REFERENCES Band(Id) ); CREATE TABLE ""Performance"" (  	""SongId"" INTEGER,  	""Bandmate"" INTEGER,  	""StagePosition"" TEXT, 	PRIMARY KEY(SongId, Bandmate), 	FOREIGN KEY (SongId) REFERENCES Songs(SongId), 	FOREIGN KEY (Bandmate) REFERENCES Band(Id) ); CREATE TABLE ""Tracklists"" (  	""AlbumId"" INTEGER,  	""Position"" INTEGER,  	""SongId"" INTEGER , 	PRIMARY KEY(AlbumId, Position), 	FOREIGN KEY (SongId) REFERENCES Songs(SongId), 	FOREIGN KEY (AlbumId) REFERENCES Albums(AId) ); CREATE TABLE ""Vocals"" (  	""SongId"" INTEGER,  	""Bandmate"" INTEGER,  	""Type"" TEXT, 	PRIMARY KEY(SongId, Bandmate), 	FOREIGN KEY (SongId) REFERENCES Songs(SongId), 	FOREIGN KEY (Bandmate) REFERENCES Band(Id) ); ",hard
790,3493,body_builder,SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1,What is the name of the body builder with the greatest body weight?,"PRAGMA foreign_keys = ON;  CREATE TABLE ""body_builder"" ( ""Body_Builder_ID"" int, ""People_ID"" int, ""Snatch"" real, ""Clean_Jerk"" real, ""Total"" real, PRIMARY KEY (""Body_Builder_ID""), FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"") );  CREATE TABLE ""people"" ( ""People_ID"" int, ""Name"" text, ""Height"" real, ""Weight"" real, ""Birth_Date"" text, ""Birth_Place"" text, PRIMARY KEY (""People_ID"") );  ",hard
650,2700,bike_1,"SELECT id FROM station WHERE city  =  ""San Francisco"" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10",What are the ids of the stations in San Francisco that normally have more than 10 bikes available?,"PRAGMA foreign_keys=OFF; BEGIN TRANSACTION; CREATE TABLE station (     id INTEGER PRIMARY KEY,     name TEXT,     lat NUMERIC,     long NUMERIC,     dock_count INTEGER,     city TEXT,     installation_date TEXT); CREATE TABLE status (     station_id INTEGER,     bikes_available INTEGER,     docks_available INTEGER,     time TEXT,     FOREIGN KEY (station_id) REFERENCES station(id) ); CREATE TABLE trip (     id INTEGER PRIMARY KEY,     duration INTEGER,     start_date TEXT,     start_station_name TEXT, -- this should be removed     start_station_id INTEGER,     end_date TEXT,     end_station_name TEXT, -- this should be removed     end_station_id INTEGER,     bike_id INTEGER,     subscription_type TEXT,     zip_code INTEGER); CREATE TABLE weather (     date TEXT,     max_temperature_f INTEGER,     mean_temperature_f INTEGER,     min_temperature_f INTEGER,     max_dew_point_f INTEGER,     mean_dew_point_f INTEGER,     min_dew_point_f INTEGER,     max_humidity INTEGER,     mean_humidity INTEGER,     min_humidity INTEGER,     max_sea_level_pressure_inches NUMERIC,     mean_sea_level_pressure_inches NUMERIC,     min_sea_level_pressure_inches NUMERIC,     max_visibility_miles INTEGER,     mean_visibility_miles INTEGER,     min_visibility_miles INTEGER,     max_wind_Speed_mph INTEGER,     mean_wind_speed_mph INTEGER,     max_gust_speed_mph INTEGER,     precipitation_inches INTEGER,     cloud_cover INTEGER,     events TEXT,     wind_dir_degrees INTEGER,     zip_code INTEGER); COMMIT;",hard
589,2399,imdb,"SELECT COUNT ( DISTINCT t1.name  ) FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t3.title  =  ""Saving Private Ryan"";","What is the number of actors in the movie "" Saving Private Ryan "" ?","PRAGMA foreign_keys = ON; CREATE TABLE ""actor"" ( ""aid"" int, ""gender"" text, ""name"" text, ""nationality"" text, ""birth_city"" text, ""birth_year"" int, primary key(""aid"") );   CREATE TABLE ""copyright"" ( ""id"" int, ""msid"" int, ""cid"" int, primary key(""id"") ); CREATE TABLE ""cast"" ( ""id"" int, ""msid"" int, ""aid"" int, ""role"" int, primary key(""id""), foreign key(""aid"") references `actor`(""aid""), foreign key(""msid"") references `copyright`(""msid"") );  CREATE TABLE ""genre"" ( ""gid"" int, ""genre"" text, primary key(""gid"") );  CREATE TABLE ""classification"" ( ""id"" int, ""msid"" int, ""gid"" int, primary key(""id""), foreign key(""gid"") references `genre`(""gid""), foreign key(""msid"") references `copyright`(""msid"") );  CREATE TABLE ""company"" ( ""id"" int, ""name"" text, ""country_code"" text, primary key(""id"") );   CREATE TABLE ""director"" ( ""did"" int, ""gender"" text, ""name"" text, ""nationality"" text, ""birth_city"" text, ""birth_year"" int, primary key(""did"") );  CREATE TABLE ""producer"" ( ""pid"" int, ""gender"" text, ""name"" text, ""nationality"" text, ""birth_city"" text, ""birth_year"" int, primary key(""pid"") );  CREATE TABLE ""directed_by"" ( ""id"" int, ""msid"" int, ""did"" int, primary key(""id""), foreign key(""msid"") references `copyright`(""msid""), foreign key(""did"") references `director`(""did"") );  CREATE TABLE ""keyword"" ( ""id"" int, ""keyword"" text, primary key(""id"") );  CREATE TABLE ""made_by"" ( ""id"" int, ""msid"" int, ""pid"" int, primary key(""id""), foreign key(""msid"") references `copyright`(""msid""), foreign key(""pid"") references `producer`(""pid"") );  CREATE TABLE ""movie"" ( ""mid"" int, ""title"" text, ""release_year"" int, ""title_aka"" text, ""budget"" text, primary key(""mid"") ); CREATE TABLE ""tags"" ( ""id"" int, ""msid"" int, ""kid"" int, primary key(""id""), foreign key(""msid"") references `copyright`(""msid""), foreign key(""kid"") references `keyword`(""kid"") ); CREATE TABLE ""tv_series"" ( ""sid"" int, ""title"" text, ""release_year"" int, ""num_of_seasons"" int, ""num_of_episodes"" int, ""title_aka"" text, ""budget"" text, primary key(""sid"") ); CREATE TABLE ""writer"" ( ""wid"" int, ""gender"" text, ""name"" int, ""nationality"" int, ""num_of_episodes"" int, ""birth_city"" text, ""birth_year"" int, primary key(""wid"") ); CREATE TABLE ""written_by"" ( ""id"" int, ""msid"" int, ""wid"" int, foreign key(""msid"") references `copyright`(""msid""), foreign key(""wid"") references `writer`(""wid"") );",hard
447,1705,scholar,"SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  ""acl"";",who published at acl 2016 ?,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); ",hard
1582,7175,shop_membership,"SELECT T3.name ,  T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id ORDER BY T1.register_year",What are the names of the members and branches at which they are registered sorted by year of registration?,"PRAGMA foreign_keys = ON;  CREATE TABLE ""member"" ( ""Member_ID"" int, ""Card_Number"" text, ""Name"" text, ""Hometown"" text, ""Level"" int, PRIMARY KEY (""Member_ID"") );   CREATE TABLE ""branch"" ( ""Branch_ID"" int, ""Name"" text, ""Open_year"" text, ""Address_road"" text, ""City"" text, ""membership_amount"" text, PRIMARY KEY (""Branch_ID"") );   CREATE TABLE ""membership_register_branch"" ( ""Member_ID"" int, ""Branch_ID"" text, ""Register_Year"" text, PRIMARY KEY (""Member_ID""), FOREIGN KEY (""Member_ID"") REFERENCES ""member""(""Member_ID""), FOREIGN KEY (""Branch_ID"") REFERENCES ""branch""(""Branch_ID"") );  CREATE TABLE ""purchase"" ( ""Member_ID"" int, ""Branch_ID"" text, ""Year"" text, ""Total_pounds"" real, PRIMARY KEY (""Member_ID"",""Branch_ID"",""Year""), FOREIGN KEY (""Member_ID"") REFERENCES ""member""(""Member_ID""), FOREIGN KEY (""Branch_ID"") REFERENCES ""branch""(""Branch_ID"") );  ",hard
894,4112,party_people,"SELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  ""United Kingdom"" AND t3.Event_Name  =  ""Annaual Meeting""",How many Annual Meeting events happened in the United Kingdom region?," PRAGMA foreign_keys = ON;   CREATE TABLE ""region"" ( ""Region_ID"" int, ""Region_name"" text, ""Date"" text, ""Label"" text, ""Format"" text, ""Catalogue"" text, PRIMARY KEY (""Region_ID"") );   CREATE TABLE ""party"" ( ""Party_ID"" int, ""Minister"" text, ""Took_office"" text, ""Left_office"" text, ""Region_ID"" int, ""Party_name"" text, PRIMARY KEY (""Party_ID""), FOREIGN KEY (`Region_ID`) REFERENCES `region`(`Region_ID`) );  CREATE TABLE ""member"" ( ""Member_ID"" int, ""Member_Name"" text, ""Party_ID"" text, ""In_office"" text, PRIMARY KEY (""Member_ID""), FOREIGN KEY (`Party_ID`) REFERENCES `party`(`Party_ID`) );   CREATE TABLE ""party_events"" ( ""Event_ID"" int, ""Event_Name"" text, ""Party_ID"" int, ""Member_in_charge_ID"" int, PRIMARY KEY (""Event_ID""), FOREIGN KEY (`Party_ID`) REFERENCES `party`(`Party_ID`), FOREIGN KEY (`Member_in_charge_ID`) REFERENCES `member`(`Member_ID`) );   ",hard
87,488,wta_1,"SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1","What is the first name, country code, and birth date of the player with the most winner rank points across all matches?","CRloser_rank_pointsEATE TABLE players(     ""player_id"" INT PRIMARY KEY,     ""first_name"" TEXT,     ""last_name"" TEXT,     ""hand"" TEXT,     ""birth_date"" DATE,     ""country_code"" TEXT ); CREATE TABLE matches(   ""best_of"" INT,   ""draw_size"" INT,   ""loser_age"" FLOAT,   ""loser_entry"" TEXT,   ""loser_hand"" TEXT,   ""loser_ht"" INT,   ""loser_id"" INT,   ""loser_ioc"" TEXT,   ""loser_name"" TEXT,   ""loser_rank"" INT,   ""loser_rank_points"" INT,   ""loser_seed"" INT,   ""match_num"" INT,   ""minutes"" INT,   ""round"" TEXT,   ""score"" TEXT,   ""surface"" TEXT,   ""tourney_date"" DATE,   ""tourney_id"" TEXT,   ""tourney_level"" TEXT,   ""tourney_name"" TEXT,   ""winner_age"" FLOAT,   ""winner_entry"" TEXT,   ""winner_hand"" TEXT,   ""winner_ht"" INT,   ""winner_id"" INT,   ""winner_ioc"" TEXT,   ""winner_name"" TEXT,   ""winner_rank"" INT,   ""winner_rank_points"" INT,   ""winner_seed"" INT,   ""year"" INT,   FOREIGN KEY(loser_id) REFERENCES players(player_id),   FOREIGN KEY(winner_id) REFERENCES players(player_id) );    CREATE TABLE qualifying_matches(   ""best_of"" INT,   ""draw_size"" INT,   ""l_1stIn"" TEXT,   ""l_1stWon"" TEXT,   ""l_2ndWon"" TEXT,   ""l_SvGms"" TEXT,   ""l_ace"" TEXT,   ""l_bpFaced"" TEXT,   ""l_bpSaved"" TEXT,   ""l_df"" TEXT,   ""l_svpt"" TEXT,   ""loser_age"" FLOAT,   ""loser_entry"" TEXT,   ""loser_hand"" TEXT,   ""loser_ht"" INT,   ""loser_id"" INT,   ""loser_ioc"" TEXT,   ""loser_name"" TEXT,   ""loser_rank"" INT,   ""loser_rank_points"" INT,   ""loser_seed"" INT,   ""match_num"" INT,   ""minutes"" INT,   ""round"" TEXT,   ""score"" TEXT,   ""surface"" TEXT,   ""tourney_date"" DATE,   ""tourney_id"" TEXT,   ""tourney_level"" TEXT,   ""tourney_name"" TEXT,   ""w_1stIn"" TEXT,   ""w_1stWon"" TEXT,   ""w_2ndWon"" TEXT,   ""w_SvGms"" TEXT,   ""w_ace"" TEXT,   ""w_bpFaced"" TEXT,   ""w_bpSaved"" TEXT,   ""w_df"" TEXT,   ""w_svpt"" TEXT,   ""winner_age"" FLOAT,   ""winner_entry"" TEXT,   ""winner_hand"" TEXT,   ""winner_ht"" INT,   ""winner_id"" INT,   ""winner_ioc"" TEXT,   ""winner_name"" TEXT,   ""winner_rank"" INT,   ""winner_rank_points"" INT,   ""winner_seed"" INT,   ""year"" INT,   FOREIGN KEY(loser_id) REFERENCES players(player_id),   FOREIGN KEY(winner_id) REFERENCES players(player_id) );  CREATE TABLE rankings(   ""ranking_date"" DATE,   ""ranking"" INT,   ""player_id"" INT,   ""ranking_points"" INT,   ""tours"" INT,   FOREIGN KEY(player_id) REFERENCES players(player_id) );",hard
48,282,employee_hire_evaluation,SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation),What are the names of the employees who never received any evaluation?," PRAGMA foreign_keys = ON;  CREATE TABLE ""employee"" ( ""Employee_ID"" int, ""Name"" text, ""Age"" int, ""City"" text, PRIMARY KEY (""Employee_ID"") );   CREATE TABLE ""shop"" ( ""Shop_ID"" int, ""Name"" text, ""Location"" text, ""District"" text, ""Number_products"" int, ""Manager_name"" text, PRIMARY KEY (""Shop_ID"") );   CREATE TABLE ""hiring"" ( ""Shop_ID"" int, ""Employee_ID"" int, ""Start_from"" text, ""Is_full_time"" bool, PRIMARY KEY (""Employee_ID""), FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`), FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`) );  CREATE TABLE ""evaluation"" ( ""Employee_ID"" text, ""Year_awarded"" text, ""Bonus"" real, PRIMARY KEY (""Employee_ID"",""Year_awarded""), FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`) );   ",hard
1344,6162,tracking_grants_for_research,"SELECT grant_id ,  count(*) FROM Documents GROUP BY grant_id ORDER BY count(*) DESC LIMIT 1",How many documents can one grant have at most? List the grant id and number.,"PRAGMA foreign_keys = ON; CREATE TABLE `Document_Types` ( `document_type_code` VARCHAR(10) PRIMARY KEY, `document_description` VARCHAR(255) NOT NULL ); CREATE TABLE `Documents` ( `document_id` INTEGER PRIMARY KEY, `document_type_code` VARCHAR(10), `grant_id` INTEGER NOT NULL, `sent_date` DATETIME NOT NULL, `response_received_date` DATETIME NOT NULL, `other_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`document_type_code` ) REFERENCES `Document_Types`(`document_type_code` ), FOREIGN KEY (`grant_id` ) REFERENCES `Grants`(`grant_id` ) ); CREATE TABLE `Grants` ( `grant_id` INTEGER PRIMARY KEY, `organisation_id` INTEGER NOT NULL, `grant_amount` DECIMAL(19,4) NOT NULL DEFAULT 0, `grant_start_date` DATETIME NOT NULL, `grant_end_date` DATETIME NOT NULL, `other_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`organisation_id` ) REFERENCES `Organisations`(`organisation_id` ) ); CREATE TABLE `Organisation_Types` ( `organisation_type` VARCHAR(10) PRIMARY KEY, `organisation_type_description` VARCHAR(255) NOT NULL ); CREATE TABLE `Organisations` ( `organisation_id` INTEGER PRIMARY KEY, `organisation_type` VARCHAR(10) NOT NULL, `organisation_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`organisation_type` ) REFERENCES `Organisation_Types`(`organisation_type` ) ); CREATE TABLE `Project_Outcomes` ( `project_id` INTEGER NOT NULL, `outcome_code` VARCHAR(10) NOT NULL, `outcome_details` VARCHAR(255), FOREIGN KEY (`project_id` ) REFERENCES `Projects`(`project_id` ),FOREIGN KEY (`outcome_code` ) REFERENCES `Research_Outcomes`(`outcome_code` ) ); CREATE TABLE `Project_Staff` ( `staff_id` DOUBLE PRIMARY KEY, `project_id` INTEGER NOT NULL, `role_code` VARCHAR(10) NOT NULL, `date_from` DATETIME, `date_to` DATETIME, `other_details` VARCHAR(255), FOREIGN KEY (`project_id` ) REFERENCES `Projects`(`project_id` ),FOREIGN KEY (`role_code` ) REFERENCES `Staff_Roles`(`role_code` ) ); CREATE TABLE `Projects` ( `project_id` INTEGER PRIMARY KEY, `organisation_id` INTEGER NOT NULL, `project_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`organisation_id` ) REFERENCES `Organisations`(`organisation_id` ) ); CREATE TABLE `Research_Outcomes` ( `outcome_code` VARCHAR(10) PRIMARY KEY, `outcome_description` VARCHAR(255) NOT NULL ); CREATE TABLE `Research_Staff` ( `staff_id` INTEGER PRIMARY KEY, `employer_organisation_id` INTEGER NOT NULL, `staff_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`employer_organisation_id` ) REFERENCES `Organisations`(`organisation_id` ) ); CREATE TABLE `Staff_Roles` ( `role_code` VARCHAR(10) PRIMARY KEY, `role_description` VARCHAR(255) NOT NULL ); CREATE TABLE `Tasks` ( `task_id` INTEGER PRIMARY KEY, `project_id` INTEGER NOT NULL, `task_details` VARCHAR(255) NOT NULL, `eg Agree Objectives` VARCHAR(1), FOREIGN KEY (`project_id` ) REFERENCES `Projects`(`project_id` ) ); ",hard
1664,7567,customer_complaints,SELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT 1,Give the state that has the most customers.,"PRAGMA foreign_keys = ON;   CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `gender` VARCHAR(1), `first_name` VARCHAR(80), `last_name` VARCHAR(80), `email_address` VARCHAR(255), `phone_number` VARCHAR(80) ); CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_type_code` VARCHAR(20) NOT NULL, `address_line_1` VARCHAR(80), `address_line_2` VARCHAR(80), `town_city` VARCHAR(80), `state` VARCHAR(80), `email_address` VARCHAR(255), `phone_number` VARCHAR(80) ); CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `parent_product_id` INTEGER, `product_category_code` VARCHAR(20) NOT NULL, `date_product_first_available` DATETIME, `date_product_discontinued` DATETIME, `product_name` VARCHAR(80), `product_description` VARCHAR(255), `product_price` DECIMAL(19,4) ); CREATE TABLE `Complaints` ( `complaint_id` INTEGER NOT NULL , `product_id` INTEGER NOT NULL, `customer_id` INTEGER NOT NULL, `complaint_outcome_code` VARCHAR(20) NOT NULL, `complaint_status_code` VARCHAR(20) NOT NULL, `complaint_type_code` VARCHAR(20) NOT NULL, `date_complaint_raised` DATETIME, `date_complaint_closed` DATETIME, `staff_id` INTEGER NOT NULL , FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) ); ",hard
598,2413,imdb,"SELECT COUNT ( DISTINCT t3.title  ) FROM tags AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.id JOIN movie AS t3 ON t2.msid  =  t3.mid WHERE t1.keyword  =  ""Persians"" AND t3.release_year  >  1990;",How many movies about Persians were released after 1990 ?,"PRAGMA foreign_keys = ON; CREATE TABLE ""actor"" ( ""aid"" int, ""gender"" text, ""name"" text, ""nationality"" text, ""birth_city"" text, ""birth_year"" int, primary key(""aid"") );   CREATE TABLE ""copyright"" ( ""id"" int, ""msid"" int, ""cid"" int, primary key(""id"") ); CREATE TABLE ""cast"" ( ""id"" int, ""msid"" int, ""aid"" int, ""role"" int, primary key(""id""), foreign key(""aid"") references `actor`(""aid""), foreign key(""msid"") references `copyright`(""msid"") );  CREATE TABLE ""genre"" ( ""gid"" int, ""genre"" text, primary key(""gid"") );  CREATE TABLE ""classification"" ( ""id"" int, ""msid"" int, ""gid"" int, primary key(""id""), foreign key(""gid"") references `genre`(""gid""), foreign key(""msid"") references `copyright`(""msid"") );  CREATE TABLE ""company"" ( ""id"" int, ""name"" text, ""country_code"" text, primary key(""id"") );   CREATE TABLE ""director"" ( ""did"" int, ""gender"" text, ""name"" text, ""nationality"" text, ""birth_city"" text, ""birth_year"" int, primary key(""did"") );  CREATE TABLE ""producer"" ( ""pid"" int, ""gender"" text, ""name"" text, ""nationality"" text, ""birth_city"" text, ""birth_year"" int, primary key(""pid"") );  CREATE TABLE ""directed_by"" ( ""id"" int, ""msid"" int, ""did"" int, primary key(""id""), foreign key(""msid"") references `copyright`(""msid""), foreign key(""did"") references `director`(""did"") );  CREATE TABLE ""keyword"" ( ""id"" int, ""keyword"" text, primary key(""id"") );  CREATE TABLE ""made_by"" ( ""id"" int, ""msid"" int, ""pid"" int, primary key(""id""), foreign key(""msid"") references `copyright`(""msid""), foreign key(""pid"") references `producer`(""pid"") );  CREATE TABLE ""movie"" ( ""mid"" int, ""title"" text, ""release_year"" int, ""title_aka"" text, ""budget"" text, primary key(""mid"") ); CREATE TABLE ""tags"" ( ""id"" int, ""msid"" int, ""kid"" int, primary key(""id""), foreign key(""msid"") references `copyright`(""msid""), foreign key(""kid"") references `keyword`(""kid"") ); CREATE TABLE ""tv_series"" ( ""sid"" int, ""title"" text, ""release_year"" int, ""num_of_seasons"" int, ""num_of_episodes"" int, ""title_aka"" text, ""budget"" text, primary key(""sid"") ); CREATE TABLE ""writer"" ( ""wid"" int, ""gender"" text, ""name"" int, ""nationality"" int, ""num_of_episodes"" int, ""birth_city"" text, ""birth_year"" int, primary key(""wid"") ); CREATE TABLE ""written_by"" ( ""id"" int, ""msid"" int, ""wid"" int, foreign key(""msid"") references `copyright`(""msid""), foreign key(""wid"") references `writer`(""wid"") );",hard
599,2414,imdb,"SELECT COUNT ( DISTINCT t3.title  ) FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  ""Quentin Tarantino"" AND t3.release_year  >  2010;","How many movies did "" Quentin Tarantino "" direct after 2010 ?","PRAGMA foreign_keys = ON; CREATE TABLE ""actor"" ( ""aid"" int, ""gender"" text, ""name"" text, ""nationality"" text, ""birth_city"" text, ""birth_year"" int, primary key(""aid"") );   CREATE TABLE ""copyright"" ( ""id"" int, ""msid"" int, ""cid"" int, primary key(""id"") ); CREATE TABLE ""cast"" ( ""id"" int, ""msid"" int, ""aid"" int, ""role"" int, primary key(""id""), foreign key(""aid"") references `actor`(""aid""), foreign key(""msid"") references `copyright`(""msid"") );  CREATE TABLE ""genre"" ( ""gid"" int, ""genre"" text, primary key(""gid"") );  CREATE TABLE ""classification"" ( ""id"" int, ""msid"" int, ""gid"" int, primary key(""id""), foreign key(""gid"") references `genre`(""gid""), foreign key(""msid"") references `copyright`(""msid"") );  CREATE TABLE ""company"" ( ""id"" int, ""name"" text, ""country_code"" text, primary key(""id"") );   CREATE TABLE ""director"" ( ""did"" int, ""gender"" text, ""name"" text, ""nationality"" text, ""birth_city"" text, ""birth_year"" int, primary key(""did"") );  CREATE TABLE ""producer"" ( ""pid"" int, ""gender"" text, ""name"" text, ""nationality"" text, ""birth_city"" text, ""birth_year"" int, primary key(""pid"") );  CREATE TABLE ""directed_by"" ( ""id"" int, ""msid"" int, ""did"" int, primary key(""id""), foreign key(""msid"") references `copyright`(""msid""), foreign key(""did"") references `director`(""did"") );  CREATE TABLE ""keyword"" ( ""id"" int, ""keyword"" text, primary key(""id"") );  CREATE TABLE ""made_by"" ( ""id"" int, ""msid"" int, ""pid"" int, primary key(""id""), foreign key(""msid"") references `copyright`(""msid""), foreign key(""pid"") references `producer`(""pid"") );  CREATE TABLE ""movie"" ( ""mid"" int, ""title"" text, ""release_year"" int, ""title_aka"" text, ""budget"" text, primary key(""mid"") ); CREATE TABLE ""tags"" ( ""id"" int, ""msid"" int, ""kid"" int, primary key(""id""), foreign key(""msid"") references `copyright`(""msid""), foreign key(""kid"") references `keyword`(""kid"") ); CREATE TABLE ""tv_series"" ( ""sid"" int, ""title"" text, ""release_year"" int, ""num_of_seasons"" int, ""num_of_episodes"" int, ""title_aka"" text, ""budget"" text, primary key(""sid"") ); CREATE TABLE ""writer"" ( ""wid"" int, ""gender"" text, ""name"" int, ""nationality"" int, ""num_of_episodes"" int, ""birth_city"" text, ""birth_year"" int, primary key(""wid"") ); CREATE TABLE ""written_by"" ( ""id"" int, ""msid"" int, ""wid"" int, foreign key(""msid"") references `copyright`(""msid""), foreign key(""wid"") references `writer`(""wid"") );",hard
1285,6015,cre_Doc_Tracking_DB,"SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id  =  T2.document_id JOIN Ref_locations AS T3 ON T2.location_code  =  T3.location_code WHERE T1.document_name  =  ""Robin CV""","What is the location name of the document ""Robin CV""?","PRAGMA foreign_keys = ON; CREATE TABLE Ref_Document_Types ( Document_Type_Code CHAR(15) NOT NULL, Document_Type_Name VARCHAR(255) NOT NULL, Document_Type_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Document_Type_Code) );  CREATE TABLE Ref_Calendar ( Calendar_Date DATETIME NOT NULL, Day_Number INTEGER, PRIMARY KEY (Calendar_Date) ); CREATE TABLE Ref_Locations ( Location_Code CHAR(15) NOT NULL, Location_Name VARCHAR(255) NOT NULL, Location_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Location_Code) );  CREATE TABLE Roles ( Role_Code CHAR(15) NOT NULL, Role_Name VARCHAR(255), Role_Description VARCHAR(255), PRIMARY KEY (Role_Code) );  CREATE TABLE All_Documents ( Document_ID INTEGER NOT NULL, Date_Stored DATETIME, Document_Type_Code CHAR(15) NOT NULL, Document_Name CHAR(255), Document_Description CHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Document_ID), FOREIGN KEY (Document_Type_Code) REFERENCES Ref_Document_Types (Document_Type_Code), FOREIGN KEY (Date_Stored) REFERENCES Ref_Calendar (Calendar_Date) );  CREATE TABLE Employees ( Employee_ID INTEGER NOT NULL, Role_Code CHAR(15) NOT NULL, Employee_Name VARCHAR(255), Gender_MFU CHAR(1) NOT NULL, Date_of_Birth DATETIME NOT NULL, Other_Details VARCHAR(255), PRIMARY KEY (Employee_ID), FOREIGN KEY (Role_Code) REFERENCES Roles (Role_Code) );  CREATE TABLE Document_Locations ( Document_ID INTEGER NOT NULL, Location_Code CHAR(15) NOT NULL, Date_in_Location_From DATETIME NOT NULL, Date_in_Locaton_To DATETIME, PRIMARY KEY (Document_ID, Location_Code, Date_in_Location_From), FOREIGN KEY (Location_Code) REFERENCES Ref_Locations (Location_Code), FOREIGN KEY (Date_in_Location_From) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Date_in_Locaton_To) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Document_ID) REFERENCES All_Documents (Document_ID) );  CREATE TABLE Documents_to_be_Destroyed ( Document_ID INTEGER NOT NULL, Destruction_Authorised_by_Employee_ID INTEGER, Destroyed_by_Employee_ID INTEGER, Planned_Destruction_Date DATETIME, Actual_Destruction_Date DATETIME, Other_Details VARCHAR(255), PRIMARY KEY (Document_ID), FOREIGN KEY (Destroyed_by_Employee_ID) REFERENCES Employees (Employee_ID), FOREIGN KEY (Destruction_Authorised_by_Employee_ID) REFERENCES Employees (Employee_ID), FOREIGN KEY (Planned_Destruction_Date) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Actual_Destruction_Date) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Document_ID) REFERENCES All_Documents (Document_ID) ); ",hard
969,4482,movie_1,SELECT title FROM Movie WHERE mID NOT IN (SELECT mID FROM Rating),Find the titles of all movies that have no ratings.,"-- dbext:type=SQLITE:dbname=movie_rating.db  /* Delete the tables if they already exist */ drop table if exists Movie; drop table if exists Reviewer; drop table if exists Rating;  /* Create the schema for our tables */ create table Movie( 	mID int primary key,  	title text,  	year int,  	director text ); create table Reviewer( 	rID int primary key,  	name text);  create table Rating( 	rID int,  	mID int,  	stars int,  	ratingDate date, 	FOREIGN KEY (mID) references Movie(mID), 	FOREIGN KEY (rID) references Reviewer(rID) );  /* Populate the tables with our data */ ",hard
1307,6065,club_1,"SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  ""Bootup Baltimore"" AND t3.sex  =  ""F""","Give me the first name and last name for all the female members of the club ""Bootup Baltimore"".","create table Student (          StuID        INTEGER PRIMARY KEY,          LName        VARCHAR(12),          Fname        VARCHAR(12),          Age      INTEGER,          Sex      VARCHAR(1),          Major        INTEGER,          Advisor      INTEGER,          city_code    VARCHAR(3)   );   create table Club (        ClubID           INTEGER PRIMARY KEY,        ClubName         VARCHAR(40),        ClubDesc         VARCHAR(1024),        ClubLocation VARCHAR(40) );  create table Member_of_club (        StuID            INTEGER,        ClubID           INTEGER,        Position     VARCHAR(40),        FOREIGN KEY(StuID) REFERENCES Student(StuID),        FOREIGN KEY(ClubID) REFERENCES Club(ClubID) );   teach kids and adults about computer basics.', 'AKW'); ",hard
1203,5641,e_learning,SELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students,What are the login names used both by some course authors and some students?,"PRAGMA foreign_keys = ON; CREATE TABLE `Course_Authors_and_Tutors` ( `author_id` INTEGER PRIMARY KEY, `author_tutor_ATB` VARCHAR(3), `login_name` VARCHAR(40), `password` VARCHAR(40), `personal_name` VARCHAR(80), `middle_name` VARCHAR(80), `family_name` VARCHAR(80), `gender_mf` VARCHAR(1), `address_line_1` VARCHAR(80) ); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (1, '331', 'jmckenzie', 'c40fa148bdd0d2d45cd6e9ec1e685750fe07f81b', 'Cathrine', 'Ruthie', 'Grant', '0', '756 Monahan Mews Spinkashire, NJ 64230-5098'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (2, '975', 'heidenreich.ara', '24b0ee84063c3b017ab1839e01b7280f47f7c7c2', 'Retha', 'Corene', 'Armstrong', '0', '98623 Huels Manor Jasttown, DE 31611'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (3, '349', 'clementina29', 'cdaf6c3483f19e2253659a40a3aab786a3390f78', 'Darius', 'Ethyl', 'Reichel', '0', '99296 Keeling Courts North Audreanne, IL 28272'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (4, '782', 'wlehner', 'd34378200c9b5f72d3039fa640e7920aaec0fdf2', 'Julio', 'Aniyah', 'Nader', '1', '644 Montana Hill Suite 489 Daijamouth, CA 19587-4254'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (5, '388', 'nyundt', '2c196efe8aee23a1b9a7e752fe63029c5879af6f', 'Yessenia', 'Zena', 'Barrows', '1', '5284 Champlin Roads Cassinport, WY 54636'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (6, '817', 'al75', 'e96c0bcbbbb14747747a56ff4c17354f343a5b4f', 'Adolf', 'Keira', 'Rohan', '1', '92220 Hellen Skyway Apt. 635 Rennerview, MS 81036'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (7, '869', 'marty.bergnaum', '3e2f7bf1e6acf0d616a8703ee0050fba13bc007f', 'Logan', 'Ethelyn', 'Treutel', '1', '67541 Osborne Creek Suite 532 Bernhardview, WV 30288-1050'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (8, '557', 'medhurst.alvah', '02d64f11de97436343a0beba41bfcf69af61be1e', 'Kelsie', 'Kennith', 'Rowe', '0', '0256 Walter Meadows Suite 523 Norbertoborough, AZ 49193'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (9, '505', 'antonetta19', '4d8e909ae9b8888c93a2c5f1eccbd0c4ac6a01c3', 'Georgiana', 'Mathew', 'Zboncak', '0', '445 Quigley Fall Port Antonette, IN 81992-1255'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (10, '159', 'adam.rippin', 'b517a107b5f08fafe9628e88e7263a6f3a4a55c0', 'Deja', 'Joyce', 'Champlin', '1', '22575 Effertz Neck Apt. 046 Port Scotty, NY 67108-9197'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (11, '229', 'dschaefer', '4f149f75ecd84afcdf27343509cdd03d81edb119', 'Ciara', 'Alejandra', 'Greenholt', '0', '425 White Brooks Emmaleefort, IN 97850-2510'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (12, '847', 'nellie.mosciski', 'a48e25a58b3088e9cfdaca61130555ed2c772452', 'Sheldon', 'Jayce', 'Kreiger', '1', '513 Collins Plain Apt. 829 Clementinaville, VT 59908-2793'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (13, '613', 'qking', '6b9979a83b4a9e03ead034c8de47f1b013a3d3af', 'Madonna', 'Jaclyn', 'Effertz', '1', '139 O''Conner Circles Virginieland, KS 23365'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (14, '833', 'fiona77', '120ac8a5744f5b710ecaebbd8dd1633e3e33886e', 'Dusty', 'Amani', 'Crist', '1', '3602 Boehm Forest Zulaufton, DC 35229-0366'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (15, '974', 'ekshlerin', '6d587cec8006e3a40565e1dad2c5b5b12b475b8f', 'Shakira', 'Fritz', 'Haley', '0', '8928 Kunze Valley Apt. 747 South Jedidiahmouth, DE 28167');   CREATE TABLE `Students` ( `student_id` INTEGER PRIMARY KEY, `date_of_registration` DATETIME, `date_of_latest_logon` DATETIME, `login_name` VARCHAR(40), `password` VARCHAR(10), `personal_name` VARCHAR(40), `middle_name` VARCHAR(40), `family_name` VARCHAR(40) ); CREATE TABLE `Subjects` ( `subject_id` INTEGER PRIMARY KEY, `subject_name` VARCHAR(120) ); CREATE TABLE `Courses` ( `course_id` INTEGER PRIMARY KEY, `author_id` INTEGER NOT NULL, `subject_id` INTEGER NOT NULL, `course_name` VARCHAR(120), `course_description` VARCHAR(255), FOREIGN KEY (`author_id` ) REFERENCES `Course_Authors_and_Tutors`(`author_id` ), FOREIGN KEY (`subject_id` ) REFERENCES `Subjects`(`subject_id` ) ); CREATE TABLE `Student_Course_Enrolment` ( `registration_id` INTEGER PRIMARY KEY, `student_id` INTEGER NOT NULL, `course_id` INTEGER NOT NULL, `date_of_enrolment` DATETIME NOT NULL, `date_of_completion` DATETIME NOT NULL, FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ), FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ) );  CREATE TABLE `Student_Tests_Taken` ( `registration_id` INTEGER NOT NULL, `date_test_taken` DATETIME NOT NULL, `test_result` VARCHAR(255), FOREIGN KEY (`registration_id` ) REFERENCES `Student_Course_Enrolment`(`registration_id` ) );  ",hard
1210,5674,insurance_policies,SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) ASC LIMIT 1,With which kind of payment method were the least number of payments processed?,"PRAGMA foreign_keys = ON; CREATE TABLE Customers ( Customer_ID INTEGER NOT NULL, Customer_Details VARCHAR(255) NOT NULL, PRIMARY KEY (Customer_ID) ); CREATE TABLE Customer_Policies ( Policy_ID INTEGER NOT NULL, Customer_ID INTEGER NOT NULL, Policy_Type_Code CHAR(15) NOT NULL, Start_Date DATE, End_Date DATE, PRIMARY KEY (Policy_ID), FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID) );  CREATE TABLE Claims ( Claim_ID INTEGER NOT NULL, Policy_ID INTEGER NOT NULL, Date_Claim_Made DATE, Date_Claim_Settled DATE, Amount_Claimed INTEGER, Amount_Settled INTEGER, PRIMARY KEY (Claim_ID), FOREIGN KEY (Policy_ID) REFERENCES Customer_Policies (Policy_ID) );  CREATE TABLE Settlements ( Settlement_ID INTEGER NOT NULL, Claim_ID INTEGER NOT NULL, Date_Claim_Made DATE, Date_Claim_Settled DATE, Amount_Claimed INTEGER, Amount_Settled INTEGER, Customer_Policy_ID INTEGER NOT NULL, PRIMARY KEY (Settlement_ID), FOREIGN KEY (Claim_ID) REFERENCES Claims (Claim_ID) ); CREATE TABLE Payments ( Payment_ID INTEGER NOT NULL, Settlement_ID INTEGER NOT NULL, Payment_Method_Code VARCHAR(255), Date_Payment_Made DATE, Amount_Payment INTEGER, PRIMARY KEY (Payment_ID), FOREIGN KEY (Settlement_ID) REFERENCES Settlements (Settlement_ID) );    ",hard
1112,5180,sports_competition,SELECT country FROM competition WHERE competition_type  =  'Friendly' INTERSECT SELECT country FROM competition WHERE competition_type  =  'Tournament',What are the countries that participated in both friendly and tournament type competitions?," PRAGMA foreign_keys = ON;  CREATE TABLE ""club"" ( ""Club_ID"" int, ""name"" text, ""Region"" text, ""Start_year"" text, PRIMARY KEY (""Club_ID"") );  CREATE TABLE ""club_rank"" ( ""Rank"" real, ""Club_ID"" int, ""Gold"" real, ""Silver"" real, ""Bronze"" real, ""Total"" real, PRIMARY KEY (""Rank"",""Club_ID"") FOREIGN KEY (`Club_ID`) REFERENCES `club`(`Club_ID`) );  CREATE TABLE ""player"" ( ""Player_ID"" int, ""name"" text, ""Position"" text, ""Club_ID"" int, ""Apps"" real, ""Tries"" real, ""Goals"" text, ""Points"" real, PRIMARY KEY (""Player_ID""), FOREIGN KEY (`Club_ID`) REFERENCES `club`(`Club_ID`) );  CREATE TABLE ""competition"" ( ""Competition_ID"" int, ""Year"" real, ""Competition_type"" text, ""Country"" text, PRIMARY KEY (""Competition_ID"") );  CREATE TABLE ""competition_result"" ( ""Competition_ID"" int, ""Club_ID_1"" int, ""Club_ID_2"" int, ""Score"" text, PRIMARY KEY (""Competition_ID"",""Club_ID_1"",""Club_ID_2""), FOREIGN KEY (`Club_ID_1`) REFERENCES `club`(`Club_ID`), FOREIGN KEY (`Club_ID_2`) REFERENCES `club`(`Club_ID`), FOREIGN KEY (`Competition_ID`) REFERENCES `competition`(`Competition_ID`) );   ",hard
331,1333,geo,SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );,which state has the highest elevation,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );",hard
1246,5776,hospital_1,"SELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  ""John Wen""",Find the names of all procedures which cost more than 1000 but which physician John Wen was not trained in?,"-- https://en.wikibooks.org/wiki/SQL_Exercises/The_Hospital  DROP TABLE IF EXISTS Physician; CREATE TABLE Physician (   EmployeeID INTEGER NOT NULL,   Name VARCHAR(30) NOT NULL,   Position VARCHAR(30) NOT NULL,   SSN INTEGER NOT NULL,   CONSTRAINT pk_physician PRIMARY KEY(EmployeeID) );   DROP TABLE IF EXISTS Department; CREATE TABLE Department (   DepartmentID INTEGER NOT NULL,   Name VARCHAR(30) NOT NULL,   Head INTEGER NOT NULL,   CONSTRAINT pk_Department PRIMARY KEY(DepartmentID),   CONSTRAINT fk_Department_Physician_EmployeeID FOREIGN KEY(Head) REFERENCES Physician(EmployeeID) );   DROP TABLE IF EXISTS Affiliated_With; CREATE TABLE Affiliated_With (   Physician INTEGER NOT NULL,   Department INTEGER NOT NULL,   PrimaryAffiliation BOOLEAN NOT NULL,   CONSTRAINT fk_Affiliated_With_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),   CONSTRAINT fk_Affiliated_With_Department_DepartmentID FOREIGN KEY(Department) REFERENCES Department(DepartmentID),   PRIMARY KEY(Physician, Department) );  DROP TABLE IF EXISTS Procedures; CREATE TABLE Procedures (   Code INTEGER PRIMARY KEY NOT NULL,   Name VARCHAR(30) NOT NULL,   Cost REAL NOT NULL );  DROP TABLE IF EXISTS Trained_In; CREATE TABLE Trained_In (   Physician INTEGER NOT NULL,   Treatment INTEGER NOT NULL,   CertificationDate DATETIME NOT NULL,   CertificationExpires DATETIME NOT NULL,   CONSTRAINT fk_Trained_In_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),   CONSTRAINT fk_Trained_In_Procedures_Code FOREIGN KEY(Treatment) REFERENCES Procedures(Code),   PRIMARY KEY(Physician, Treatment) );  DROP TABLE IF EXISTS Patient; CREATE TABLE Patient (   SSN INTEGER PRIMARY KEY NOT NULL,   Name VARCHAR(30) NOT NULL,   Address VARCHAR(30) NOT NULL,   Phone VARCHAR(30) NOT NULL,   InsuranceID INTEGER NOT NULL,   PCP INTEGER NOT NULL,   CONSTRAINT fk_Patient_Physician_EmployeeID FOREIGN KEY(PCP) REFERENCES Physician(EmployeeID) );  DROP TABLE IF EXISTS Nurse; CREATE TABLE Nurse (   EmployeeID INTEGER PRIMARY KEY NOT NULL,   Name VARCHAR(30) NOT NULL,   Position VARCHAR(30) NOT NULL,   Registered BOOLEAN NOT NULL,   SSN INTEGER NOT NULL );  DROP TABLE IF EXISTS Appointment; CREATE TABLE Appointment (   AppointmentID INTEGER PRIMARY KEY NOT NULL,   Patient INTEGER NOT NULL,       PrepNurse INTEGER,   Physician INTEGER NOT NULL,   Start DATETIME NOT NULL,   End DATETIME NOT NULL,   ExaminationRoom TEXT NOT NULL,   CONSTRAINT fk_Appointment_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),   CONSTRAINT fk_Appointment_Nurse_EmployeeID FOREIGN KEY(PrepNurse) REFERENCES Nurse(EmployeeID),   CONSTRAINT fk_Appointment_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID) );  DROP TABLE IF EXISTS Medication; CREATE TABLE Medication (   Code INTEGER PRIMARY KEY NOT NULL,   Name VARCHAR(30) NOT NULL,   Brand VARCHAR(30) NOT NULL,   Description VARCHAR(30) NOT NULL );   DROP TABLE IF EXISTS Prescribes; CREATE TABLE Prescribes (   Physician INTEGER NOT NULL,   Patient INTEGER NOT NULL,    Medication INTEGER NOT NULL,    Date DATETIME NOT NULL,   Appointment INTEGER,     Dose VARCHAR(30) NOT NULL,   PRIMARY KEY(Physician, Patient, Medication, Date),   CONSTRAINT fk_Prescribes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),   CONSTRAINT fk_Prescribes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),   CONSTRAINT fk_Prescribes_Medication_Code FOREIGN KEY(Medication) REFERENCES Medication(Code),   CONSTRAINT fk_Prescribes_Appointment_AppointmentID FOREIGN KEY(Appointment) REFERENCES Appointment(AppointmentID) );  DROP TABLE IF EXISTS Block; CREATE TABLE Block (   BlockFloor INTEGER NOT NULL,   BlockCode INTEGER NOT NULL,   PRIMARY KEY(BlockFloor, BlockCode) );   DROP TABLE IF EXISTS Room; CREATE TABLE Room (   RoomNumber INTEGER PRIMARY KEY NOT NULL,   RoomType VARCHAR(30) NOT NULL,   BlockFloor INTEGER NOT NULL,     BlockCode INTEGER NOT NULL,     Unavailable BOOLEAN NOT NULL,   CONSTRAINT fk_Room_Block_PK FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode) );  DROP TABLE IF EXISTS On_Call; CREATE TABLE On_Call (   Nurse INTEGER NOT NULL,   BlockFloor INTEGER NOT NULL,    BlockCode INTEGER NOT NULL,   OnCallStart DATETIME NOT NULL,   OnCallEnd DATETIME NOT NULL,   PRIMARY KEY(Nurse, BlockFloor, BlockCode, OnCallStart, OnCallEnd),   CONSTRAINT fk_OnCall_Nurse_EmployeeID FOREIGN KEY(Nurse) REFERENCES Nurse(EmployeeID),   CONSTRAINT fk_OnCall_Block_Floor FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode)  );  DROP TABLE IF EXISTS Stay; CREATE TABLE Stay (   StayID INTEGER PRIMARY KEY NOT NULL,   Patient INTEGER NOT NULL,   Room INTEGER NOT NULL,   StayStart DATETIME NOT NULL,   StayEnd DATETIME NOT NULL,   CONSTRAINT fk_Stay_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),   CONSTRAINT fk_Stay_Room_Number FOREIGN KEY(Room) REFERENCES Room(RoomNumber) );  DROP TABLE IF EXISTS Undergoes; CREATE TABLE Undergoes (   Patient INTEGER NOT NULL,   Procedures INTEGER NOT NULL,   Stay INTEGER NOT NULL,   DateUndergoes DATETIME NOT NULL,   Physician INTEGER NOT NULL,   AssistingNurse INTEGER,   PRIMARY KEY(Patient, Procedures, Stay, DateUndergoes),   CONSTRAINT fk_Undergoes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),   CONSTRAINT fk_Undergoes_Procedures_Code FOREIGN KEY(Procedures) REFERENCES Procedures(Code),   CONSTRAINT fk_Undergoes_Stay_StayID FOREIGN KEY(Stay) REFERENCES Stay(StayID),   CONSTRAINT fk_Undergoes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),   CONSTRAINT fk_Undergoes_Nurse_EmployeeID FOREIGN KEY(AssistingNurse) REFERENCES Nurse(EmployeeID) );   ",hard
636,2658,student_assessment,SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance,What are the ids of the students who either registered or attended a course?,"PRAGMA foreign_keys = ON;  CREATE TABLE Addresses ( address_id INTEGER NOT NULL, line_1 VARCHAR(80), line_2 VARCHAR(80), city VARCHAR(50), zip_postcode CHAR(20), state_province_county VARCHAR(50), country VARCHAR(50), PRIMARY KEY (address_id) );  INSERT INTO Addresses (`address_id`, `line_1`, `line_2`, `city`, `zip_postcode`, `state_province_county`, `country`) VALUES (5, '0900 Roderick Oval New Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'); INSERT INTO Addresses (`address_id`, `line_1`, `line_2`, `city`, `zip_postcode`, `state_province_county`, `country`) VALUES (9, '966 Dach Ports Apt. 322 Lake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'); INSERT INTO Addresses (`address_id`, `line_1`, `line_2`, `city`, `zip_postcode`, `state_province_county`, `country`) VALUES (29, '28550 Broderick Underpass Suite 667 Zakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA'); INSERT INTO Addresses (`address_id`, `line_1`, `line_2`, `city`, `zip_postcode`, `state_province_county`, `country`) VALUES (30, '83706 Ana Trafficway Apt. 992 West Jarret, MI 01112', 'Apt. 884', 'Lake Kaley', '431', 'Washington', 'USA'); INSERT INTO Addresses (`address_id`, `line_1`, `line_2`, `city`, `zip_postcode`, `state_province_county`, `country`) VALUES (43, '69165 Beatty Station Haleighstad, MS 55164', 'Suite 333', 'Stephaniemouth', '559', 'Massachusetts', 'USA'); INSERT INTO Addresses (`address_id`, `line_1`, `line_2`, `city`, `zip_postcode`, `state_province_county`, `country`) VALUES (45, '242 Pacocha Streets East Isabellashire, ND 03506', 'Suite 370', 'O''Connellview', '514', 'NewMexico', 'USA'); INSERT INTO Addresses (`address_id`, `line_1`, `line_2`, `city`, `zip_postcode`, `state_province_county`, `country`) VALUES (55, '801 Modesto Island Suite 306 Lacyville, VT 34059', 'Suite 764', 'New Alta', '176', 'Mississippi', 'USA'); INSERT INTO Addresses (`address_id`, `line_1`, `line_2`, `city`, `zip_postcode`, `state_province_county`, `country`) VALUES (63, '0177 Fisher Dam Berniershire, KS 00038-7574', 'Apt. 903', 'South Keenan', '613', 'Michigan', 'USA'); INSERT INTO Addresses (`address_id`, `line_1`, `line_2`, `city`, `zip_postcode`, `state_province_county`, `country`) VALUES (68, '09471 Hickle Light Port Maxime, NJ 91550-5409', 'Suite 903', 'Hannahside', '354', 'Connecticut', 'USA'); INSERT INTO Addresses (`address_id`, `line_1`, `line_2`, `city`, `zip_postcode`, `state_province_county`, `country`) VALUES (73, '67831 Lavonne Lodge Olsontown, DC 20894', 'Apt. 756', 'Alizeshire', '687', 'NewMexico', 'USA'); INSERT INTO Addresses (`address_id`, `line_1`, `line_2`, `city`, `zip_postcode`, `state_province_county`, `country`) VALUES (82, '228 Fahey Land Baileymouth, FL 06297-5606', 'Suite 087', 'South Naomibury', '079', 'Ohio', 'USA'); INSERT INTO Addresses (`address_id`, `line_1`, `line_2`, `city`, `zip_postcode`, `state_province_county`, `country`) VALUES (88, '1770 Adriel Ramp Apt. 397 West Ashlynnchester, UT 91968', 'Apt. 617', 'East Tavaresburgh', '179', 'SouthDakota', 'USA'); INSERT INTO Addresses (`address_id`, `line_1`, `line_2`, `city`, `zip_postcode`, `state_province_county`, `country`) VALUES (92, '8760 Eldon Squares Suite 260 Marquisestad, GA 38537', 'Apt. 435', 'Lake Devon', '244', 'SouthDakota', 'USA'); INSERT INTO Addresses (`address_id`, `line_1`, `line_2`, `city`, `zip_postcode`, `state_province_county`, `country`) VALUES (94, '8263 Abbott Crossing Apt. 066 Oberbrunnerbury, LA 67451', 'Apt. 626', 'Boyleshire', '536', 'Kansas', 'USA'); INSERT INTO Addresses (`address_id`, `line_1`, `line_2`, `city`, `zip_postcode`, `state_province_county`, `country`) VALUES (99, '521 Paucek Field North Oscartown, WI 31527', 'Apt. 849', 'Terencetown', '979', 'Michigan', 'USA');  CREATE TABLE People ( person_id INTEGER NOT NULL, first_name VARCHAR(255), middle_name VARCHAR(255), last_name VARCHAR(255), cell_mobile_number VARCHAR(40), email_address VARCHAR(40), login_name VARCHAR(40), password VARCHAR(40), PRIMARY KEY (person_id) ); CREATE TABLE Students ( student_id INTEGER NOT NULL, student_details VARCHAR(255), PRIMARY KEY (student_id), FOREIGN KEY (student_id) REFERENCES People (person_id) ); CREATE TABLE Courses ( course_id VARCHAR(100) NOT NULL, course_name VARCHAR(120), course_description VARCHAR(255), other_details VARCHAR(255), PRIMARY KEY (course_id) ); CREATE TABLE People_Addresses ( person_address_id INTEGER NOT NULL, person_id INTEGER NOT NULL, address_id INTEGER NOT NULL, date_from DATETIME, date_to DATETIME, PRIMARY KEY (person_address_id), FOREIGN KEY (person_id) REFERENCES People (person_id), FOREIGN KEY (address_id) REFERENCES Addresses (address_id) ); CREATE TABLE Student_Course_Registrations ( student_id INTEGER NOT NULL, course_id INTEGER NOT NULL, registration_date DATETIME NOT NULL, PRIMARY KEY (student_id, course_id), FOREIGN KEY (student_id) REFERENCES Students (student_id), FOREIGN KEY (course_id) REFERENCES Courses (course_id) );  CREATE TABLE Student_Course_Attendance ( student_id INTEGER NOT NULL, course_id INTEGER NOT NULL, date_of_attendance DATETIME NOT NULL, PRIMARY KEY (student_id, course_id), FOREIGN KEY (student_id, course_id) REFERENCES Student_Course_Registrations (student_id,course_id) );  CREATE TABLE Candidates ( candidate_id INTEGER NOT NULL , candidate_details VARCHAR(255), PRIMARY KEY (candidate_id), FOREIGN KEY (candidate_id) REFERENCES People (person_id) ); CREATE TABLE Candidate_Assessments ( candidate_id INTEGER NOT NULL, qualification CHAR(15) NOT NULL, assessment_date DATETIME NOT NULL, asessment_outcome_code CHAR(15) NOT NULL, PRIMARY KEY (candidate_id, qualification), FOREIGN KEY (candidate_id) REFERENCES Candidates (candidate_id) ); ",hard
807,3639,performance_attendance,"SELECT T2.Name ,  T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T2.Name ASC",Show the names of members and the location of performances they attended in ascending alphabetical order of their names.,"PRAGMA foreign_keys = ON;   CREATE TABLE ""member"" (     ""Member_ID"" text,     ""Name"" text,     ""Nationality"" text,     ""Role"" text,     PRIMARY KEY (""Member_ID"") );    CREATE TABLE ""performance"" (     ""Performance_ID"" real,     ""Date"" text,     ""Host"" text,     ""Location"" text,     ""Attendance"" int,     PRIMARY KEY (""Performance_ID"") );  CREATE TABLE ""member_attendance"" (     ""Member_ID"" int,     ""Performance_ID"" int,     ""Num_of_Pieces"" int,     PRIMARY KEY (""Member_ID"",""Performance_ID""),     FOREIGN KEY (""Member_ID"") REFERENCES `member`(""Member_ID""),     FOREIGN KEY (""Performance_ID"") REFERENCES `performance`(""Performance_ID"") );  ",hard
993,4540,movie_1,"SELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  ""Brittany Harris""",What are the ids of the movies that are not reviewed by Brittany Harris.,"-- dbext:type=SQLITE:dbname=movie_rating.db  /* Delete the tables if they already exist */ drop table if exists Movie; drop table if exists Reviewer; drop table if exists Rating;  /* Create the schema for our tables */ create table Movie( 	mID int primary key,  	title text,  	year int,  	director text ); create table Reviewer( 	rID int primary key,  	name text);  create table Rating( 	rID int,  	mID int,  	stars int,  	ratingDate date, 	FOREIGN KEY (mID) references Movie(mID), 	FOREIGN KEY (rID) references Reviewer(rID) );  /* Populate the tables with our data */ ",hard
1093,5040,loan_1,SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan),Find the average credit score of the customers who have some loan.,"CREATE TABLE bank ( branch_ID int PRIMARY KEY, bname varchar(20), no_of_customers int, city varchar(10), state varchar(20));   CREATE TABLE customer ( cust_ID varchar(3) PRIMARY KEY, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_ID int, state varchar(20), FOREIGN KEY(branch_ID) REFERENCES bank(branch_ID));   CREATE TABLE loan ( loan_ID varchar(3) PRIMARY KEY, loan_type varchar(15), cust_ID varchar(3), branch_ID varchar(3), amount int, FOREIGN KEY(branch_ID) REFERENCES bank(branch_ID), FOREIGN KEY(Cust_ID) REFERENCES customer(Cust_ID));  ",hard
1509,6838,device,SELECT LOCATION FROM shop WHERE Open_Year  >  2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year  <  2008,Show the locations shared by shops with open year later than 2012 and shops with open year before 2008.,"PRAGMA foreign_keys = ON;  CREATE TABLE ""device"" ( ""Device_ID"" int, ""Device"" text, ""Carrier"" text, ""Package_Version"" text, ""Applications"" text, ""Software_Platform"" text, PRIMARY KEY (""Device_ID"") );  CREATE TABLE ""shop"" ( ""Shop_ID"" int, ""Shop_Name"" text, ""Location"" text, ""Open_Date"" text, ""Open_Year"" int, PRIMARY KEY (""Shop_ID"") );  CREATE TABLE ""stock"" ( ""Shop_ID"" int, ""Device_ID"" int, ""Quantity"" int, PRIMARY KEY (""Shop_ID"",""Device_ID""), FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`), FOREIGN KEY (`Device_ID`) REFERENCES `device`(`Device_ID`) );  ",hard
1397,6406,entertainment_awards,"SELECT T1.Festival_ID ,  T3.Festival_Name ,  COUNT(*) FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID GROUP BY T1.Festival_ID","Show the id, name of each festival and the number of artworks it has nominated.","PRAGMA foreign_keys = ON;   CREATE TABLE ""festival_detail"" ( ""Festival_ID"" int, ""Festival_Name"" text, ""Chair_Name"" text, ""Location"" text, ""Year"" int, ""Num_of_Audience"" int, PRIMARY KEY (""Festival_ID"") );  CREATE TABLE artwork ( ""Artwork_ID"" int, ""Type"" text, ""Name"" text, PRIMARY KEY (""Artwork_ID"") );   CREATE TABLE nomination ( ""Artwork_ID"" int, ""Festival_ID"" int, ""Result"" text, PRIMARY KEY (""Artwork_ID"",""Festival_ID""), FOREIGN KEY (""Artwork_ID"") REFERENCES `artwork`(""Artwork_ID""), FOREIGN KEY (""Festival_ID"") REFERENCES `festival_detail`(""Festival_ID"") );  ",hard
1472,6675,store_product,"SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.store_name  =  ""Blackville""",What city is the headquarter of the store Blackville?," PRAGMA foreign_keys = ON;  CREATE TABLE ""product"" ( ""product_id"" int, ""product"" text, ""dimensions"" text, ""dpi"" real, ""pages_per_minute_color"" real, ""max_page_size"" text, ""interface"" text, PRIMARY KEY (""product_id"") );  CREATE TABLE ""store"" ( ""Store_ID"" int, ""Store_Name"" text, ""Type"" text, ""Area_size"" real, ""Number_of_product_category"" real, ""Ranking"" int, PRIMARY KEY (""Store_ID"") );  CREATE TABLE ""district"" ( ""District_ID"" int, ""District_name"" text, ""Headquartered_City"" text, ""City_Population"" real, ""City_Area"" real, PRIMARY KEY (""District_ID"") );   CREATE TABLE ""store_product"" ( ""Store_ID"" int, ""Product_ID"" int, PRIMARY KEY (""Store_ID"",""Product_ID""), FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`), FOREIGN KEY (`Product_ID`) REFERENCES `product`(`Product_ID`) );  CREATE TABLE ""store_district"" ( ""Store_ID"" int, ""District_ID"" int, PRIMARY KEY (""Store_ID""), FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`), FOREIGN KEY (`District_ID`) REFERENCES `district`(`District_ID`) );  ",hard
1245,5775,hospital_1,"SELECT name FROM procedures WHERE cost  >  1000 UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  ""John Wen""",What are the procedures that cost more than 1000 or are specialized in by physician John Wen?,"-- https://en.wikibooks.org/wiki/SQL_Exercises/The_Hospital  DROP TABLE IF EXISTS Physician; CREATE TABLE Physician (   EmployeeID INTEGER NOT NULL,   Name VARCHAR(30) NOT NULL,   Position VARCHAR(30) NOT NULL,   SSN INTEGER NOT NULL,   CONSTRAINT pk_physician PRIMARY KEY(EmployeeID) );   DROP TABLE IF EXISTS Department; CREATE TABLE Department (   DepartmentID INTEGER NOT NULL,   Name VARCHAR(30) NOT NULL,   Head INTEGER NOT NULL,   CONSTRAINT pk_Department PRIMARY KEY(DepartmentID),   CONSTRAINT fk_Department_Physician_EmployeeID FOREIGN KEY(Head) REFERENCES Physician(EmployeeID) );   DROP TABLE IF EXISTS Affiliated_With; CREATE TABLE Affiliated_With (   Physician INTEGER NOT NULL,   Department INTEGER NOT NULL,   PrimaryAffiliation BOOLEAN NOT NULL,   CONSTRAINT fk_Affiliated_With_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),   CONSTRAINT fk_Affiliated_With_Department_DepartmentID FOREIGN KEY(Department) REFERENCES Department(DepartmentID),   PRIMARY KEY(Physician, Department) );  DROP TABLE IF EXISTS Procedures; CREATE TABLE Procedures (   Code INTEGER PRIMARY KEY NOT NULL,   Name VARCHAR(30) NOT NULL,   Cost REAL NOT NULL );  DROP TABLE IF EXISTS Trained_In; CREATE TABLE Trained_In (   Physician INTEGER NOT NULL,   Treatment INTEGER NOT NULL,   CertificationDate DATETIME NOT NULL,   CertificationExpires DATETIME NOT NULL,   CONSTRAINT fk_Trained_In_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),   CONSTRAINT fk_Trained_In_Procedures_Code FOREIGN KEY(Treatment) REFERENCES Procedures(Code),   PRIMARY KEY(Physician, Treatment) );  DROP TABLE IF EXISTS Patient; CREATE TABLE Patient (   SSN INTEGER PRIMARY KEY NOT NULL,   Name VARCHAR(30) NOT NULL,   Address VARCHAR(30) NOT NULL,   Phone VARCHAR(30) NOT NULL,   InsuranceID INTEGER NOT NULL,   PCP INTEGER NOT NULL,   CONSTRAINT fk_Patient_Physician_EmployeeID FOREIGN KEY(PCP) REFERENCES Physician(EmployeeID) );  DROP TABLE IF EXISTS Nurse; CREATE TABLE Nurse (   EmployeeID INTEGER PRIMARY KEY NOT NULL,   Name VARCHAR(30) NOT NULL,   Position VARCHAR(30) NOT NULL,   Registered BOOLEAN NOT NULL,   SSN INTEGER NOT NULL );  DROP TABLE IF EXISTS Appointment; CREATE TABLE Appointment (   AppointmentID INTEGER PRIMARY KEY NOT NULL,   Patient INTEGER NOT NULL,       PrepNurse INTEGER,   Physician INTEGER NOT NULL,   Start DATETIME NOT NULL,   End DATETIME NOT NULL,   ExaminationRoom TEXT NOT NULL,   CONSTRAINT fk_Appointment_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),   CONSTRAINT fk_Appointment_Nurse_EmployeeID FOREIGN KEY(PrepNurse) REFERENCES Nurse(EmployeeID),   CONSTRAINT fk_Appointment_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID) );  DROP TABLE IF EXISTS Medication; CREATE TABLE Medication (   Code INTEGER PRIMARY KEY NOT NULL,   Name VARCHAR(30) NOT NULL,   Brand VARCHAR(30) NOT NULL,   Description VARCHAR(30) NOT NULL );   DROP TABLE IF EXISTS Prescribes; CREATE TABLE Prescribes (   Physician INTEGER NOT NULL,   Patient INTEGER NOT NULL,    Medication INTEGER NOT NULL,    Date DATETIME NOT NULL,   Appointment INTEGER,     Dose VARCHAR(30) NOT NULL,   PRIMARY KEY(Physician, Patient, Medication, Date),   CONSTRAINT fk_Prescribes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),   CONSTRAINT fk_Prescribes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),   CONSTRAINT fk_Prescribes_Medication_Code FOREIGN KEY(Medication) REFERENCES Medication(Code),   CONSTRAINT fk_Prescribes_Appointment_AppointmentID FOREIGN KEY(Appointment) REFERENCES Appointment(AppointmentID) );  DROP TABLE IF EXISTS Block; CREATE TABLE Block (   BlockFloor INTEGER NOT NULL,   BlockCode INTEGER NOT NULL,   PRIMARY KEY(BlockFloor, BlockCode) );   DROP TABLE IF EXISTS Room; CREATE TABLE Room (   RoomNumber INTEGER PRIMARY KEY NOT NULL,   RoomType VARCHAR(30) NOT NULL,   BlockFloor INTEGER NOT NULL,     BlockCode INTEGER NOT NULL,     Unavailable BOOLEAN NOT NULL,   CONSTRAINT fk_Room_Block_PK FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode) );  DROP TABLE IF EXISTS On_Call; CREATE TABLE On_Call (   Nurse INTEGER NOT NULL,   BlockFloor INTEGER NOT NULL,    BlockCode INTEGER NOT NULL,   OnCallStart DATETIME NOT NULL,   OnCallEnd DATETIME NOT NULL,   PRIMARY KEY(Nurse, BlockFloor, BlockCode, OnCallStart, OnCallEnd),   CONSTRAINT fk_OnCall_Nurse_EmployeeID FOREIGN KEY(Nurse) REFERENCES Nurse(EmployeeID),   CONSTRAINT fk_OnCall_Block_Floor FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode)  );  DROP TABLE IF EXISTS Stay; CREATE TABLE Stay (   StayID INTEGER PRIMARY KEY NOT NULL,   Patient INTEGER NOT NULL,   Room INTEGER NOT NULL,   StayStart DATETIME NOT NULL,   StayEnd DATETIME NOT NULL,   CONSTRAINT fk_Stay_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),   CONSTRAINT fk_Stay_Room_Number FOREIGN KEY(Room) REFERENCES Room(RoomNumber) );  DROP TABLE IF EXISTS Undergoes; CREATE TABLE Undergoes (   Patient INTEGER NOT NULL,   Procedures INTEGER NOT NULL,   Stay INTEGER NOT NULL,   DateUndergoes DATETIME NOT NULL,   Physician INTEGER NOT NULL,   AssistingNurse INTEGER,   PRIMARY KEY(Patient, Procedures, Stay, DateUndergoes),   CONSTRAINT fk_Undergoes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),   CONSTRAINT fk_Undergoes_Procedures_Code FOREIGN KEY(Procedures) REFERENCES Procedures(Code),   CONSTRAINT fk_Undergoes_Stay_StayID FOREIGN KEY(Stay) REFERENCES Stay(StayID),   CONSTRAINT fk_Undergoes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),   CONSTRAINT fk_Undergoes_Nurse_EmployeeID FOREIGN KEY(AssistingNurse) REFERENCES Nurse(EmployeeID) );   ",hard
703,3019,allergy_1,SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student),What student id corresponds to the oldest student?,"create table Allergy_Type (        Allergy 		  VARCHAR(20) PRIMARY KEY,        AllergyType 	  VARCHAR(20) );  create table Has_Allergy (        StuID 		 INTEGER,        Allergy 		 VARCHAR(20),        FOREIGN KEY(StuID) REFERENCES Student(StuID),        FOREIGN KEY(Allergy) REFERENCES Allergy_Type(Allergy) );  create table Student (         StuID        INTEGER PRIMARY KEY,         LName        VARCHAR(12),         Fname        VARCHAR(12),         Age      INTEGER,         Sex      VARCHAR(1),         Major        INTEGER,         Advisor      INTEGER,         city_code    VARCHAR(3)  );  ",hard
763,3324,university_basketball,SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1,What is the primary conference of the school that has the lowest acc percent score in the competition?,"CREATE TABLE ""basketball_match"" ( ""Team_ID"" int, ""School_ID"" int, ""Team_Name"" text, ""ACC_Regular_Season"" text, ""ACC_Percent"" text, ""ACC_Home"" text, ""ACC_Road"" text, ""All_Games"" text, ""All_Games_Percent"" int, ""All_Home"" text, ""All_Road"" text, ""All_Neutral"" text, PRIMARY KEY (""Team_ID""), FOREIGN KEY (`School_ID`) REFERENCES `university`(`School_ID`) );  CREATE TABLE ""university"" ( ""School_ID"" int, ""School"" text, ""Location"" text, ""Founded"" real, ""Affiliation"" text, ""Enrollment"" real, ""Nickname"" text, ""Primary_conference"" text, PRIMARY KEY (""School_ID"") );  ",hard
698,2988,allergy_1,SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1,Which allergy type has least number of allergies?,"create table Allergy_Type (        Allergy 		  VARCHAR(20) PRIMARY KEY,        AllergyType 	  VARCHAR(20) );  create table Has_Allergy (        StuID 		 INTEGER,        Allergy 		 VARCHAR(20),        FOREIGN KEY(StuID) REFERENCES Student(StuID),        FOREIGN KEY(Allergy) REFERENCES Allergy_Type(Allergy) );  create table Student (         StuID        INTEGER PRIMARY KEY,         LName        VARCHAR(12),         Fname        VARCHAR(12),         Age      INTEGER,         Sex      VARCHAR(1),         Major        INTEGER,         Advisor      INTEGER,         city_code    VARCHAR(3)  );  ",hard
282,1268,geo,SELECT state_name FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );,what is the state with the largest population density,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );",hard
1604,7311,products_gen_characteristics,"SELECT count(DISTINCT t3.characteristic_name) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  ""sesame""",Count the number of different characteristic names the product 'cumin' has.,"PRAGMA foreign_keys = ON; CREATE TABLE `Ref_Characteristic_Types` ( `characteristic_type_code` VARCHAR(15) PRIMARY KEY, `characteristic_type_description` VARCHAR(80) ); CREATE TABLE `Ref_Colors` ( `color_code` VARCHAR(15) PRIMARY KEY, `color_description` VARCHAR(80) ); CREATE TABLE `Ref_Product_Categories` ( `product_category_code` VARCHAR(15) PRIMARY KEY, `product_category_description` VARCHAR(80), `unit_of_measure` VARCHAR(20) ); CREATE TABLE `Characteristics` ( `characteristic_id` INTEGER PRIMARY KEY, `characteristic_type_code` VARCHAR(15) NOT NULL, `characteristic_data_type` VARCHAR(10), `characteristic_name` VARCHAR(80), `other_characteristic_details` VARCHAR(255), FOREIGN KEY (`characteristic_type_code` ) REFERENCES `Ref_Characteristic_Types`(`characteristic_type_code` ) ); CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `color_code` VARCHAR(15) NOT NULL, `product_category_code` VARCHAR(15) NOT NULL, `product_name` VARCHAR(80), `typical_buying_price` VARCHAR(20), `typical_selling_price` VARCHAR(20), `product_description` VARCHAR(255), `other_product_details` VARCHAR(255), FOREIGN KEY (`product_category_code` ) REFERENCES `Ref_Product_Categories`(`product_category_code` ),FOREIGN KEY (`color_code` ) REFERENCES `Ref_Colors`(`color_code` ) ); CREATE TABLE `Product_Characteristics` ( `product_id` INTEGER NOT NULL, `characteristic_id` INTEGER NOT NULL, `product_characteristic_value` VARCHAR(50), FOREIGN KEY (`characteristic_id` ) REFERENCES `Characteristics`(`characteristic_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) ); ",hard
330,1332,geo,SELECT city_name FROM city WHERE population  =  ( SELECT MIN ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name );,which state capital has the smallest population,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );",hard
660,2756,bike_1,SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103),What are the ids of all trips that had a duration as long as the average trip duration in the zip code 94103?,"PRAGMA foreign_keys=OFF; BEGIN TRANSACTION; CREATE TABLE station (     id INTEGER PRIMARY KEY,     name TEXT,     lat NUMERIC,     long NUMERIC,     dock_count INTEGER,     city TEXT,     installation_date TEXT); CREATE TABLE status (     station_id INTEGER,     bikes_available INTEGER,     docks_available INTEGER,     time TEXT,     FOREIGN KEY (station_id) REFERENCES station(id) ); CREATE TABLE trip (     id INTEGER PRIMARY KEY,     duration INTEGER,     start_date TEXT,     start_station_name TEXT, -- this should be removed     start_station_id INTEGER,     end_date TEXT,     end_station_name TEXT, -- this should be removed     end_station_id INTEGER,     bike_id INTEGER,     subscription_type TEXT,     zip_code INTEGER); CREATE TABLE weather (     date TEXT,     max_temperature_f INTEGER,     mean_temperature_f INTEGER,     min_temperature_f INTEGER,     max_dew_point_f INTEGER,     mean_dew_point_f INTEGER,     min_dew_point_f INTEGER,     max_humidity INTEGER,     mean_humidity INTEGER,     min_humidity INTEGER,     max_sea_level_pressure_inches NUMERIC,     mean_sea_level_pressure_inches NUMERIC,     min_sea_level_pressure_inches NUMERIC,     max_visibility_miles INTEGER,     mean_visibility_miles INTEGER,     min_visibility_miles INTEGER,     max_wind_Speed_mph INTEGER,     mean_wind_speed_mph INTEGER,     max_gust_speed_mph INTEGER,     precipitation_inches INTEGER,     cloud_cover INTEGER,     events TEXT,     wind_dir_degrees INTEGER,     zip_code INTEGER); COMMIT;",hard
804,3596,apartment_rentals,SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1,Which apartment type code appears the most often?,"PRAGMA foreign_keys = ON;  CREATE TABLE Apartment_Buildings ( building_id INTEGER NOT NULL, building_short_name CHAR(15), building_full_name VARCHAR(80), building_description VARCHAR(255), building_address VARCHAR(255), building_manager VARCHAR(50), building_phone VARCHAR(80), PRIMARY KEY (building_id), UNIQUE (building_id) );  INSERT INTO `Apartment_Buildings` (`building_id`, `building_short_name`, `building_full_name`, `building_description`, `building_address`, `building_manager`, `building_phone`) VALUES (133, 'Normandie Court', 'Normandie Court', 'Studio', '7950 Casper Vista Apt. 176 Marquiseberg, CA 70496', 'Emma', '(948)040-1064x387'); INSERT INTO `Apartment_Buildings` (`building_id`, `building_short_name`, `building_full_name`, `building_description`, `building_address`, `building_manager`, `building_phone`) VALUES (153, 'Mercedes House', 'Mercedes House', 'Studio', '354 Otto Villages Charliefort, VT 71664', 'Brenden', '915-617-2408x832'); INSERT INTO `Apartment_Buildings` (`building_id`, `building_short_name`, `building_full_name`, `building_description`, `building_address`, `building_manager`, `building_phone`) VALUES (191, 'The Eugene', 'The Eugene', 'Flat', '71537 Gorczany Inlet Wisozkburgh, AL 08256', 'Melyssa', '(609)946-0491'); INSERT INTO `Apartment_Buildings` (`building_id`, `building_short_name`, `building_full_name`, `building_description`, `building_address`, `building_manager`, `building_phone`) VALUES (196, 'VIA 57 WEST', 'VIA 57 WEST', 'Studio', '959 Ethel Viaduct West Efrainburgh, DE 40074', 'Kathlyn', '681.772.2454'); INSERT INTO `Apartment_Buildings` (`building_id`, `building_short_name`, `building_full_name`, `building_description`, `building_address`, `building_manager`, `building_phone`) VALUES (225, 'Columbus Square', 'Columbus Square', 'Studio', '0703 Danika Mountains Apt. 362 Mohrland, AL 56839-5028', 'Kyle', '1-724-982-9507x640'); INSERT INTO `Apartment_Buildings` (`building_id`, `building_short_name`, `building_full_name`, `building_description`, `building_address`, `building_manager`, `building_phone`) VALUES (532, 'Avalon Park', 'Avalon Park', 'Duplex', '6827 Kessler Parkway Suite 908 Ahmedberg, WI 48788', 'Albert', '376-017-3538'); INSERT INTO `Apartment_Buildings` (`building_id`, `building_short_name`, `building_full_name`, `building_description`, `building_address`, `building_manager`, `building_phone`) VALUES (556, 'Peter Cooper Village', 'Peter Cooper Village', 'Flat', '861 Narciso Glens Suite 392 East Ottis, ND 73970', 'Darlene', '1-224-619-0295x13195'); INSERT INTO `Apartment_Buildings` (`building_id`, `building_short_name`, `building_full_name`, `building_description`, `building_address`, `building_manager`, `building_phone`) VALUES (624, 'Stuyvesant Town', 'Stuyvesant Town', 'Studio', '101 Queenie Mountains Suite 619 New Korbinmouth, KS 88726-1376', 'Marie', '(145)411-6406'); INSERT INTO `Apartment_Buildings` (`building_id`, `building_short_name`, `building_full_name`, `building_description`, `building_address`, `building_manager`, `building_phone`) VALUES (644, 'The Anthem', 'The Anthem', 'Flat', '50804 Mason Isle Suite 844 West Whitney, ID 66511', 'Ewald', '(909)086-5221x3455'); INSERT INTO `Apartment_Buildings` (`building_id`, `building_short_name`, `building_full_name`, `building_description`, `building_address`, `building_manager`, `building_phone`) VALUES (673, 'Barclay Tower', 'Barclay Tower', 'Flat', '1579 Runte Forges Apt. 548 Leuschkeland, OK 12009-8683', 'Rogers', '1-326-267-3386x613'); INSERT INTO `Apartment_Buildings` (`building_id`, `building_short_name`, `building_full_name`, `building_description`, `building_address`, `building_manager`, `building_phone`) VALUES (734, 'Windsor Court', 'Windsor Court', 'Studio', '601 Graham Roads Port Luz, VA 29660-6703', 'Olaf', '(480)480-7401'); INSERT INTO `Apartment_Buildings` (`building_id`, `building_short_name`, `building_full_name`, `building_description`, `building_address`, `building_manager`, `building_phone`) VALUES (744, 'Silver Towers', 'Silver Towers', 'Flat', '1844 Armstrong Stravenue Suite 853 Myrnatown, CT 13528', 'Claude', '1-667-728-2287x3158'); INSERT INTO `Apartment_Buildings` (`building_id`, `building_short_name`, `building_full_name`, `building_description`, `building_address`, `building_manager`, `building_phone`) VALUES (790, 'Biltmore Plaza', 'Biltmore Plaza', 'Duplex', '489 Josh Orchard Apt. 998 Sipesview, DE 69053', 'Sydni', '544-148-5565x2847'); INSERT INTO `Apartment_Buildings` (`building_id`, `building_short_name`, `building_full_name`, `building_description`, `building_address`, `building_manager`, `building_phone`) VALUES (808, 'Petersfield', 'Petersfield', 'Studio', '54686 Christopher Circles Apt. 321 Daytonland, ID 88081-3991', 'Juvenal', '318-398-8140'); INSERT INTO `Apartment_Buildings` (`building_id`, `building_short_name`, `building_full_name`, `building_description`, `building_address`, `building_manager`, `building_phone`) VALUES (968, 'The Clinton', 'The Clinton', 'Flat', '012 Arnoldo Mountain Gerholdland, ID 23342', 'Holly', '1-605-511-1973x25011');  CREATE TABLE Apartments ( apt_id INTEGER NOT NULL , building_id INTEGER NOT NULL, apt_type_code CHAR(15), apt_number CHAR(10), bathroom_count INTEGER, bedroom_count INTEGER, room_count CHAR(5), PRIMARY KEY (apt_id), UNIQUE (apt_id), FOREIGN KEY (building_id) REFERENCES Apartment_Buildings (building_id) ); CREATE TABLE Apartment_Facilities ( apt_id INTEGER NOT NULL, facility_code CHAR(15) NOT NULL, PRIMARY KEY (apt_id, facility_code), FOREIGN KEY (apt_id) REFERENCES Apartments (apt_id) ); CREATE TABLE Guests ( guest_id INTEGER NOT NULL , gender_code CHAR(1), guest_first_name VARCHAR(80), guest_last_name VARCHAR(80), date_of_birth DATETIME, PRIMARY KEY (guest_id), UNIQUE (guest_id) );  CREATE TABLE Apartment_Bookings ( apt_booking_id INTEGER NOT NULL, apt_id INTEGER, guest_id INTEGER NOT NULL, booking_status_code CHAR(15) NOT NULL, booking_start_date DATETIME, booking_end_date DATETIME, PRIMARY KEY (apt_booking_id), UNIQUE (apt_booking_id), FOREIGN KEY (apt_id) REFERENCES Apartments (apt_id), FOREIGN KEY (guest_id) REFERENCES Guests (guest_id) ); CREATE TABLE View_Unit_Status ( apt_id INTEGER, apt_booking_id INTEGER, status_date DATETIME NOT NULL, available_yn BIT, PRIMARY KEY (status_date), FOREIGN KEY (apt_id) REFERENCES Apartments (apt_id), FOREIGN KEY (apt_booking_id) REFERENCES Apartment_Bookings (apt_booking_id) ); ",hard
1670,7589,workshop_paper,SELECT T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID ORDER BY T2.Scores DESC LIMIT 1,Which submission received the highest score in acceptance result. Show me the result.," PRAGMA foreign_keys = ON;  CREATE TABLE ""workshop"" ( ""Workshop_ID"" int, ""Date"" text, ""Venue"" text, ""Name"" text, PRIMARY KEY (""Workshop_ID"") );  CREATE TABLE ""submission"" ( ""Submission_ID"" int, ""Scores"" real, ""Author"" text, ""College"" text, PRIMARY KEY (""Submission_ID"") );  CREATE TABLE ""Acceptance"" ( ""Submission_ID"" int, ""Workshop_ID"" int, ""Result"" text, PRIMARY KEY (""Submission_ID"",""Workshop_ID""), FOREIGN KEY (""Submission_ID"") REFERENCES `submission`(""Submission_ID""), FOREIGN KEY (""Workshop_ID"") REFERENCES `workshop`(""Workshop_ID"") );  ",hard
108,666,poker_player,SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1,Return the birth date of the poker player with the lowest earnings.,"PRAGMA foreign_keys = ON;  CREATE TABLE ""poker_player"" ( ""Poker_Player_ID"" int, ""People_ID"" int, ""Final_Table_Made"" real, ""Best_Finish"" real, ""Money_Rank"" real, ""Earnings"" real, PRIMARY KEY (""Poker_Player_ID""), FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"") );  CREATE TABLE ""people"" ( ""People_ID"" int, ""Nationality"" text, ""Name"" text, ""Birth_Date"" text, ""Height"" real, PRIMARY KEY (""People_ID"") );  ",hard
1655,7538,customer_complaints,SELECT phone_number FROM customers UNION SELECT phone_number FROM staff,Find the phone number of all the customers and staff.,"PRAGMA foreign_keys = ON;   CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `gender` VARCHAR(1), `first_name` VARCHAR(80), `last_name` VARCHAR(80), `email_address` VARCHAR(255), `phone_number` VARCHAR(80) ); CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_type_code` VARCHAR(20) NOT NULL, `address_line_1` VARCHAR(80), `address_line_2` VARCHAR(80), `town_city` VARCHAR(80), `state` VARCHAR(80), `email_address` VARCHAR(255), `phone_number` VARCHAR(80) ); CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `parent_product_id` INTEGER, `product_category_code` VARCHAR(20) NOT NULL, `date_product_first_available` DATETIME, `date_product_discontinued` DATETIME, `product_name` VARCHAR(80), `product_description` VARCHAR(255), `product_price` DECIMAL(19,4) ); CREATE TABLE `Complaints` ( `complaint_id` INTEGER NOT NULL , `product_id` INTEGER NOT NULL, `customer_id` INTEGER NOT NULL, `complaint_outcome_code` VARCHAR(20) NOT NULL, `complaint_status_code` VARCHAR(20) NOT NULL, `complaint_type_code` VARCHAR(20) NOT NULL, `date_complaint_raised` DATETIME, `date_complaint_closed` DATETIME, `staff_id` INTEGER NOT NULL , FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) ); ",hard
1522,6913,cre_Drama_Workshop_Groups,SELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID  =  T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID  =  T2.Address_ID,Which cities have at least one customer but no performer?,"PRAGMA foreign_keys = ON;  CREATE TABLE Ref_Payment_Methods ( payment_method_code CHAR(10) NOT NULL, payment_method_description VARCHAR(80), PRIMARY KEY (payment_method_code), UNIQUE (payment_method_code) ); CREATE TABLE Ref_Service_Types ( Service_Type_Code CHAR(15) NOT NULL, Parent_Service_Type_Code CHAR(15), Service_Type_Description VARCHAR(255), PRIMARY KEY (Service_Type_Code), UNIQUE (Service_Type_Code) );  CREATE TABLE Addresses ( Address_ID VARCHAR(100) NOT NULL, Line_1 VARCHAR(255), Line_2 VARCHAR(255), City_Town VARCHAR(255), State_County VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Address_ID), UNIQUE (Address_ID) ); CREATE TABLE Products ( Product_ID VARCHAR(100) NOT NULL, Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Product_Description VARCHAR(255), Other_Product_Service_Details VARCHAR(255), PRIMARY KEY (Product_ID), UNIQUE (Product_ID) ); CREATE TABLE Marketing_Regions ( Marketing_Region_Code CHAR(15) NOT NULL, Marketing_Region_Name VARCHAR(255) NOT NULL, Marketing_Region_Descriptrion VARCHAR(255) NOT NULL, Other_Details VARCHAR(255), PRIMARY KEY (Marketing_Region_Code), UNIQUE (Marketing_Region_Code) );  CREATE TABLE Clients ( Client_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Customer_Email_Address VARCHAR(255), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Client_ID), UNIQUE (Client_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) ); CREATE TABLE Drama_Workshop_Groups ( Workshop_Group_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Currency_Code CHAR(15) NOT NULL, Marketing_Region_Code CHAR(15) NOT NULL, Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Workshop_Group_ID), UNIQUE (Workshop_Group_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) ); CREATE TABLE Performers ( Performer_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Performer_ID), UNIQUE (Performer_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) ); CREATE TABLE Customers ( Customer_ID VARCHAR(100) NOT NULL, Address_ID INTEGER NOT NULL, Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Customer_ID), UNIQUE (Customer_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) ); CREATE TABLE Stores ( Store_ID VARCHAR(100) NOT NULL, Address_ID INTEGER NOT NULL, Marketing_Region_Code CHAR(15) NOT NULL, Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Store_ID), UNIQUE (Store_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID), FOREIGN KEY (Marketing_Region_Code) REFERENCES Marketing_Regions (Marketing_Region_Code) ); CREATE TABLE Bookings ( Booking_ID INTEGER NOT NULL , Customer_ID INTEGER NOT NULL, Workshop_Group_ID VARCHAR(100) NOT NULL, Status_Code CHAR(15) NOT NULL, Store_ID INTEGER NOT NULL, Order_Date DATETIME NOT NULL, Planned_Delivery_Date DATETIME NOT NULL, Actual_Delivery_Date DATETIME NOT NULL, Other_Order_Details VARCHAR(255), PRIMARY KEY (Booking_ID), UNIQUE (Booking_ID), FOREIGN KEY (Customer_ID) REFERENCES Clients (Client_ID), FOREIGN KEY (Workshop_Group_ID) REFERENCES Drama_Workshop_Groups (Workshop_Group_ID) ); CREATE TABLE Performers_in_Bookings ( Order_ID INTEGER NOT NULL, Performer_ID INTEGER NOT NULL, PRIMARY KEY (Order_ID, Performer_ID), FOREIGN KEY (Performer_ID) REFERENCES Performers (Performer_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID) ); CREATE TABLE Customer_Orders ( Order_ID INTEGER NOT NULL , Customer_ID INTEGER NOT NULL, Store_ID INTEGER NOT NULL, Order_Date DATETIME NOT NULL, Planned_Delivery_Date DATETIME NOT NULL, Actual_Delivery_Date DATETIME NOT NULL, Other_Order_Details VARCHAR(255), PRIMARY KEY (Order_ID), UNIQUE (Order_ID), FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY (Store_ID) REFERENCES Stores (Store_ID) ); CREATE TABLE Order_Items ( Order_Item_ID INTEGER NOT NULL , Order_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), PRIMARY KEY (Order_Item_ID), FOREIGN KEY (Order_ID) REFERENCES Customer_Orders (Order_ID), FOREIGN KEY (Product_ID) REFERENCES Products (Product_ID) ); CREATE TABLE Invoices ( Invoice_ID INTEGER NOT NULL, Order_ID INTEGER NOT NULL, payment_method_code CHAR(15), Product_ID INTEGER NOT NULL, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), Order_Item_ID INTEGER NOT NULL, PRIMARY KEY (Invoice_ID), FOREIGN KEY (Order_ID) REFERENCES Customer_Orders (Order_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID), FOREIGN KEY (payment_method_code) REFERENCES Ref_Payment_Methods (payment_method_code) ); CREATE TABLE Services ( Service_ID INTEGER NOT NULL, Service_Type_Code CHAR(15), Workshop_Group_ID INTEGER NOT NULL, Product_Description VARCHAR(255), Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Other_Product_Service_Details VARCHAR(255), PRIMARY KEY (Service_ID), UNIQUE (Service_ID), FOREIGN KEY (Workshop_Group_ID) REFERENCES Drama_Workshop_Groups (Workshop_Group_ID), FOREIGN KEY (Service_Type_Code) REFERENCES Ref_Service_Types (Service_Type_Code) ); CREATE TABLE Bookings_Services ( Order_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, PRIMARY KEY (Order_ID, Product_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID), FOREIGN KEY (Product_ID) REFERENCES Services (Service_ID) );  CREATE TABLE Invoice_Items ( Invoice_Item_ID INTEGER NOT NULL , Invoice_ID INTEGER NOT NULL, Order_ID INTEGER NOT NULL, Order_Item_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, Order_Quantity INTEGER, Other_Item_Details VARCHAR(255), PRIMARY KEY (Invoice_Item_ID), FOREIGN KEY (Order_Item_ID) REFERENCES Order_Items (Order_Item_ID), FOREIGN KEY (Invoice_ID) REFERENCES Invoices (Invoice_ID), FOREIGN KEY (Order_ID, Product_ID) REFERENCES Bookings_Services (Order_ID,Product_ID) ); ",hard
824,3715,customers_and_invoices,SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Accounts,What are the customer ids for customers who do not have an account?,"PRAGMA foreign_keys = ON; CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_first_name` VARCHAR(50), `customer_middle_initial` VARCHAR(1), `customer_last_name` VARCHAR(50), `gender` VARCHAR(1), `email_address` VARCHAR(255), `login_name` VARCHAR(80), `login_password` VARCHAR(20), `phone_number` VARCHAR(255), `town_city` VARCHAR(50), `state_county_province` VARCHAR(50), `country` VARCHAR(50) );  CREATE TABLE `Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `date_order_placed` DATETIME NOT NULL, `order_details` VARCHAR(255), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) ); CREATE TABLE `Invoices` ( `invoice_number` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `invoice_date` DATETIME, FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ) ); CREATE TABLE `Accounts` ( `account_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `date_account_opened` DATETIME, `account_name` VARCHAR(50), `other_account_details` VARCHAR(255), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) );    CREATE TABLE `Product_Categories` ( `production_type_code` VARCHAR(15) PRIMARY KEY, `product_type_description` VARCHAR(80), `vat_rating` DECIMAL(19,4) ); CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `parent_product_id` INTEGER, `production_type_code` VARCHAR(15) NOT NULL, `unit_price` DECIMAL(19,4), `product_name` VARCHAR(80), `product_color` VARCHAR(20), `product_size` VARCHAR(20), FOREIGN KEY (`production_type_code` ) REFERENCES `Product_Categories`(`production_type_code` ) );  CREATE TABLE `Financial_Transactions` ( `transaction_id` INTEGER NOT NULL , `account_id` INTEGER NOT NULL, `invoice_number` INTEGER, `transaction_type` VARCHAR(15) NOT NULL, `transaction_date` DATETIME, `transaction_amount` DECIMAL(19,4), `transaction_comment` VARCHAR(255), `other_transaction_details` VARCHAR(255), FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ), FOREIGN KEY (`account_id` ) REFERENCES `Accounts`(`account_id` ) ); CREATE TABLE `Order_Items` ( `order_item_id` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, `product_quantity` VARCHAR(50), `other_order_item_details` VARCHAR(255), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ), FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ) );   CREATE TABLE `Invoice_Line_Items` ( `order_item_id` INTEGER NOT NULL, `invoice_number` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, `product_title` VARCHAR(80), `product_quantity` VARCHAR(50), `product_price` DECIMAL(19,4), `derived_product_cost` DECIMAL(19,4), `derived_vat_payable` DECIMAL(19,4), `derived_total_cost` DECIMAL(19,4), FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ), FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) ); ",hard
403,1622,scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""Question Answering"";",papers related to Question Answering,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); ",hard
1322,6100,club_1,"SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  ""HOU""","Find the names of the clubs that have at least a member from the city with city code ""HOU"".","create table Student (          StuID        INTEGER PRIMARY KEY,          LName        VARCHAR(12),          Fname        VARCHAR(12),          Age      INTEGER,          Sex      VARCHAR(1),          Major        INTEGER,          Advisor      INTEGER,          city_code    VARCHAR(3)   );   create table Club (        ClubID           INTEGER PRIMARY KEY,        ClubName         VARCHAR(40),        ClubDesc         VARCHAR(1024),        ClubLocation VARCHAR(40) );  create table Member_of_club (        StuID            INTEGER,        ClubID           INTEGER,        Position     VARCHAR(40),        FOREIGN KEY(StuID) REFERENCES Student(StuID),        FOREIGN KEY(ClubID) REFERENCES Club(ClubID) );   teach kids and adults about computer basics.', 'AKW'); ",hard
1665,7582,workshop_paper,SELECT College FROM submission GROUP BY College ORDER BY COUNT(*) DESC LIMIT 1,Show the most common college of authors of submissions.," PRAGMA foreign_keys = ON;  CREATE TABLE ""workshop"" ( ""Workshop_ID"" int, ""Date"" text, ""Venue"" text, ""Name"" text, PRIMARY KEY (""Workshop_ID"") );  CREATE TABLE ""submission"" ( ""Submission_ID"" int, ""Scores"" real, ""Author"" text, ""College"" text, PRIMARY KEY (""Submission_ID"") );  CREATE TABLE ""Acceptance"" ( ""Submission_ID"" int, ""Workshop_ID"" int, ""Result"" text, PRIMARY KEY (""Submission_ID"",""Workshop_ID""), FOREIGN KEY (""Submission_ID"") REFERENCES `submission`(""Submission_ID""), FOREIGN KEY (""Workshop_ID"") REFERENCES `workshop`(""Workshop_ID"") );  ",hard
111,675,poker_player,SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1,What is the most common nationality of people?,"PRAGMA foreign_keys = ON;  CREATE TABLE ""poker_player"" ( ""Poker_Player_ID"" int, ""People_ID"" int, ""Final_Table_Made"" real, ""Best_Finish"" real, ""Money_Rank"" real, ""Earnings"" real, PRIMARY KEY (""Poker_Player_ID""), FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"") );  CREATE TABLE ""people"" ( ""People_ID"" int, ""Nationality"" text, ""Name"" text, ""Birth_Date"" text, ""Height"" real, PRIMARY KEY (""People_ID"") );  ",hard
375,1451,geo,SELECT COUNT ( border ) FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );,how many states border the largest state,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );",hard
137,783,dog_kennels,SELECT state FROM Owners INTERSECT SELECT state FROM Professionals,Which states have both owners and professionals living there?,"PRAGMA foreign_keys = ON; CREATE TABLE `Breeds` ( `breed_code` VARCHAR(10) PRIMARY KEY , `breed_name` VARCHAR(80) ); CREATE TABLE `Charges` ( `charge_id` INTEGER PRIMARY KEY , `charge_type` VARCHAR(10), `charge_amount` DECIMAL(19,4) ); CREATE TABLE `Sizes` ( `size_code` VARCHAR(10) PRIMARY KEY , `size_description` VARCHAR(80) );  CREATE TABLE `Treatment_Types` ( `treatment_type_code` VARCHAR(10) PRIMARY KEY , `treatment_type_description` VARCHAR(80) ); CREATE TABLE `Owners` ( `owner_id` INTEGER PRIMARY KEY , `first_name` VARCHAR(50), `last_name` VARCHAR(50), `street` VARCHAR(50), `city` VARCHAR(50), `state` VARCHAR(20), `zip_code` VARCHAR(20), `email_address` VARCHAR(50), `home_phone` VARCHAR(20), `cell_number` VARCHAR(20) ); CREATE TABLE `Dogs` ( `dog_id` INTEGER PRIMARY KEY , `owner_id` INTEGER NOT NULL, `abandoned_yn` VARCHAR(1), `breed_code` VARCHAR(10) NOT NULL, `size_code` VARCHAR(10) NOT NULL, `name` VARCHAR(50), `age` VARCHAR(20), `date_of_birth` DATETIME, `gender` VARCHAR(1), `weight` VARCHAR(20), `date_arrived` DATETIME, `date_adopted` DATETIME, `date_departed` DATETIME, FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ), FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ), FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ), FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ) );  CREATE TABLE `Professionals` ( `professional_id` INTEGER PRIMARY KEY , `role_code` VARCHAR(10) NOT NULL, `first_name` VARCHAR(50), `street` VARCHAR(50), `city` VARCHAR(50), `state` VARCHAR(20), `zip_code` VARCHAR(20), `last_name` VARCHAR(50), `email_address` VARCHAR(50), `home_phone` VARCHAR(20), `cell_number` VARCHAR(20) );  CREATE TABLE `Treatments` ( `treatment_id` INTEGER PRIMARY KEY , `dog_id` INTEGER NOT NULL, `professional_id` INTEGER NOT NULL, `treatment_type_code` VARCHAR(10) NOT NULL, `date_of_treatment` DATETIME, `cost_of_treatment` DECIMAL(19,4), FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ), FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ), FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` ) );  INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491 Gleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904 Corneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (3, 'Employee', 'Olaf', '68589 Bradly Manor New Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (4, 'Veterenarian', 'Vernice', '72532 Hane Course Lake Berylland, ND 95283', 'Domenickton', 'Mississippi', '02281', 'Tillman', 'lourdes.lowe@example.net', '312.216.3352', '00230569697'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (5, 'Veterenarian', 'Danny', '188 VonRueden Tunnel Suite 630 North Macibury, NV ', 'New Laurytown', 'Hawaii', '84515', 'Considine', 'mekhi.little@example.org', '1-609-566-2752x25197', '011.193.9081x3186'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (6, 'Veterenarian', 'Ruben', '17286 Waters Green East Bernadinefort, CA 89573', 'Baileymouth', 'NewMexico', '52476', 'O''Reilly', 'jacynthe.mclaughlin@example.net', '+43(5)1132733868', '139-321-7313'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (7, 'Veterenarian', 'Velva', '44234 Marvin Shoals Suite 659 North Frances, AL 23', 'McLaughlinfort', 'NorthCarolina', '67980', 'Hayes', 'lambert62@example.org', '022.529.0550x1319', '499-434-0215x1628'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (8, 'Employee', 'Karley', '36895 Eli Ferry Port Marcelle, FL 45712', 'Kirastad', 'Indiana', '33020', 'Hyatt', 'goyette.roosevelt@example.net', '891.475.2256', '328.842.3792'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (9, 'Veterenarian', 'Monte', '07073 Brenna Ways Suite 089 Lowehaven, KY 93275-96', 'South Rockyport', 'SouthCarolina', '80775', 'Kshlerin', 'schneider.kathryne@example.org', '320-508-6023', '962-983-8109x3509'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (10, 'Employee', 'Domenica', '7284 Torphy Flats Apt. 610 Diannaburgh, SC 78560', 'New Maryjane', 'California', '54312', 'Jacobs', 'jerrod.bahringer@example.org', '(230)338-3342x585', '461-801-2600'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (11, 'Employee', 'Brady', '09615 McKenzie Stravenue Apt. 128 West Elliottview', 'Raynorfort', 'Alabama', '07412', 'Pouros', 'west.eula@example.net', '(920)304-4499x59146', '609-405-2990'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (12, 'Veterenarian', 'Winfield', '92912 Langworth Valleys Apt. 743 Thompsonborough, ', 'Juddton', 'Utah', '34041', 'Christiansen', 'marquardt.furman@example.org', '246-951-0080x76716', '1-181-670-9466'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (13, 'Veterenarian', 'Ericka', '7783 Abraham Alley Port Madelynhaven, KY 59172-273', 'Borisside', 'Wyoming', '17902', 'Murazik', 'delphine29@example.com', '346.594.3739', '880-659-7577x736'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (14, 'Employee', 'Sigurd', '390 Bryce Drive North Dock, LA 65357-7228', 'East Ila', 'Connecticut', '41215', 'Frami', 'cole.margarita@example.org', '971.048.3763x9404', '1-185-137-1945x409'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (15, 'Employee', 'Lesly', '63949 Keeling Landing Apt. 502 Johnsview, SD 06780', 'North Adelberttown', 'Montana', '98844', 'Walter', 'jeichmann@example.com', '1-138-287-3775', '1-258-285-4707x8020'); ",hard
414,1633,scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""Question Answering"";",Fetch me some papers on Question Answering,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); ",hard
976,4497,movie_1,"SELECT T3.name ,  T2.title ,  T1.stars ,  T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID ORDER BY T3.name ,  T2.title ,  T1.stars","What is the reviewer name, film title, movie rating, and rating date  for every movie ordered by reviewer name, movie title, then finally rating?","-- dbext:type=SQLITE:dbname=movie_rating.db  /* Delete the tables if they already exist */ drop table if exists Movie; drop table if exists Reviewer; drop table if exists Rating;  /* Create the schema for our tables */ create table Movie( 	mID int primary key,  	title text,  	year int,  	director text ); create table Reviewer( 	rID int primary key,  	name text);  create table Rating( 	rID int,  	mID int,  	stars int,  	ratingDate date, 	FOREIGN KEY (mID) references Movie(mID), 	FOREIGN KEY (rID) references Reviewer(rID) );  /* Populate the tables with our data */ ",hard
161,963,geo,SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state );,which state has the biggest population,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );",hard
1065,4902,sakila_1,SELECT payment_date FROM payment WHERE amount  >  10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.first_name  =  'Elsa',Find all the payment dates for the payments with an amount larger than 10 and the payments handled by a staff person with the first name Elsa.,"-- Sakila Sample Database Schema -- Version 0.8  -- Copyright (c) 2006, MySQL AB -- All rights reserved.  -- Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:  --  * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. --  * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. --  * Neither the name of MySQL AB nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.  -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  -- -- Table structure for table `actor` --  CREATE TABLE actor (   actor_id SMALLINT UNSIGNED NOT NULL,   first_name VARCHAR(45) NOT NULL,   last_name VARCHAR(45) NOT NULL,   last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,   PRIMARY KEY  (actor_id) );  -- -- Table structure for table `address` --  CREATE TABLE address (   address_id SMALLINT UNSIGNED NOT NULL,   address VARCHAR(50) NOT NULL,   address2 VARCHAR(50) DEFAULT NULL,   district VARCHAR(20) NOT NULL,   city_id SMALLINT UNSIGNED NOT NULL,   postal_code VARCHAR(10) DEFAULT NULL,   phone VARCHAR(20) NOT NULL,   last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,   PRIMARY KEY  (address_id),   FOREIGN KEY (city_id) REFERENCES city (city_id) );  -- -- Table structure for table `category` --  CREATE TABLE category (   category_id TINYINT UNSIGNED NOT NULL,   name VARCHAR(25) NOT NULL,   last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,   PRIMARY KEY  (category_id) );  -- -- Table structure for table `city` --  CREATE TABLE city (   city_id SMALLINT UNSIGNED NOT NULL,   city VARCHAR(50) NOT NULL,   country_id SMALLINT UNSIGNED NOT NULL,   last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,   PRIMARY KEY  (city_id),   FOREIGN KEY (country_id) REFERENCES country (country_id) );  -- -- Table structure for table `country` --  CREATE TABLE country (   country_id SMALLINT UNSIGNED NOT NULL,   country VARCHAR(50) NOT NULL,   last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,   PRIMARY KEY  (country_id) );  -- -- Table structure for table `customer` --  CREATE TABLE customer (   customer_id SMALLINT UNSIGNED NOT NULL,   store_id TINYINT UNSIGNED NOT NULL,   first_name VARCHAR(45) NOT NULL,   last_name VARCHAR(45) NOT NULL,   email VARCHAR(50) DEFAULT NULL,   address_id SMALLINT UNSIGNED NOT NULL,   active BOOLEAN NOT NULL DEFAULT TRUE,   create_date DATETIME NOT NULL,   last_update TIMESTAMP DEFAULT CURRENT_TIMESTAMP,   PRIMARY KEY  (customer_id),   FOREIGN KEY (address_id) REFERENCES address (address_id),   FOREIGN KEY (store_id) REFERENCES store (store_id) );  -- -- Table structure for table `film` --  CREATE TABLE film (   film_id SMALLINT UNSIGNED NOT NULL,   title VARCHAR(255) NOT NULL,   description TEXT DEFAULT NULL,   release_year YEAR DEFAULT NULL,   language_id TINYINT UNSIGNED NOT NULL,   original_language_id TINYINT UNSIGNED DEFAULT NULL,   rental_duration TINYINT UNSIGNED NOT NULL DEFAULT 3,   rental_rate DECIMAL(4,2) NOT NULL DEFAULT 4.99,   length SMALLINT UNSIGNED DEFAULT NULL,   replacement_cost DECIMAL(5,2) NOT NULL DEFAULT 19.99,   rating DEFAULT 'G',   special_features DEFAULT NULL,   last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,   PRIMARY KEY  (film_id),   FOREIGN KEY (language_id) REFERENCES language (language_id),   FOREIGN KEY (original_language_id) REFERENCES language (language_id) );  -- -- Table structure for table `film_actor` --  CREATE TABLE film_actor (   actor_id SMALLINT UNSIGNED NOT NULL,   film_id SMALLINT UNSIGNED NOT NULL,   last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,   PRIMARY KEY  (actor_id,film_id),  FOREIGN KEY (actor_id) REFERENCES actor (actor_id),   FOREIGN KEY (film_id) REFERENCES film (film_id) );  -- -- Table structure for table `film_category` --  CREATE TABLE film_category (   film_id SMALLINT UNSIGNED NOT NULL,   category_id TINYINT UNSIGNED NOT NULL,   last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,   PRIMARY KEY (film_id, category_id),   FOREIGN KEY (film_id) REFERENCES film (film_id),   FOREIGN KEY (category_id) REFERENCES category (category_id) );  -- -- Table structure for table `film_text` --  CREATE TABLE film_text (   film_id SMALLINT NOT NULL,   title VARCHAR(255) NOT NULL,   description TEXT,   PRIMARY KEY  (film_id) );  -- -- Table structure for table `inventory` --  CREATE TABLE inventory (   inventory_id MEDIUMINT UNSIGNED NOT NULL,   film_id SMALLINT UNSIGNED NOT NULL,   store_id TINYINT UNSIGNED NOT NULL,   last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,   PRIMARY KEY  (inventory_id),   FOREIGN KEY (store_id) REFERENCES store (store_id),   FOREIGN KEY (film_id) REFERENCES film (film_id) );  -- -- Table structure for table `language` --  CREATE TABLE language (   language_id TINYINT UNSIGNED NOT NULL,   name CHAR(20) NOT NULL,   last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,   PRIMARY KEY (language_id) );  -- -- Table structure for table `payment` --  CREATE TABLE payment (   payment_id SMALLINT UNSIGNED NOT NULL,   customer_id SMALLINT UNSIGNED NOT NULL,   staff_id TINYINT UNSIGNED NOT NULL,   rental_id INT DEFAULT NULL,   amount DECIMAL(5,2) NOT NULL,   payment_date DATETIME NOT NULL,   last_update TIMESTAMP DEFAULT CURRENT_TIMESTAMP,   PRIMARY KEY  (payment_id),   FOREIGN KEY (rental_id) REFERENCES rental (rental_id),   FOREIGN KEY (customer_id) REFERENCES customer (customer_id),   FOREIGN KEY (staff_id) REFERENCES staff (staff_id) );   -- -- Table structure for table `rental` --  CREATE TABLE rental (   rental_id INT NOT NULL,   rental_date DATETIME NOT NULL,   inventory_id MEDIUMINT UNSIGNED NOT NULL,   customer_id SMALLINT UNSIGNED NOT NULL,   return_date DATETIME DEFAULT NULL,   staff_id TINYINT UNSIGNED NOT NULL,   last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,   PRIMARY KEY (rental_id),   FOREIGN KEY (staff_id) REFERENCES staff (staff_id),   FOREIGN KEY (inventory_id) REFERENCES inventory (inventory_id),   FOREIGN KEY (customer_id) REFERENCES customer (customer_id) );  -- -- Table structure for table `staff` --  CREATE TABLE staff (   staff_id TINYINT UNSIGNED NOT NULL,   first_name VARCHAR(45) NOT NULL,   last_name VARCHAR(45) NOT NULL,   address_id SMALLINT UNSIGNED NOT NULL,   picture BLOB DEFAULT NULL,   email VARCHAR(50) DEFAULT NULL,   store_id TINYINT UNSIGNED NOT NULL,   active BOOLEAN NOT NULL DEFAULT TRUE,   username VARCHAR(16) NOT NULL,   password VARCHAR(40) DEFAULT NULL,   last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,   PRIMARY KEY  (staff_id),   --FOREIGN KEY (store_id) REFERENCES store (store_id),   FOREIGN KEY (address_id) REFERENCES address (address_id) );  -- -- Table structure for table `store` --  CREATE TABLE store (   store_id TINYINT UNSIGNED NOT NULL,   manager_staff_id TINYINT UNSIGNED NOT NULL,   address_id SMALLINT UNSIGNED NOT NULL,   last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,   PRIMARY KEY  (store_id),   FOREIGN KEY (manager_staff_id) REFERENCES staff (staff_id),   FOREIGN KEY (address_id) REFERENCES address (address_id) );   -- Sakila Sample Database Data -- Version 0.8  -- Copyright (c) 2006, MySQL AB -- All rights reserved.  -- Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:  --  * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. --  * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. --  * Neither the name of MySQL AB nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.  -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.   ",hard
1233,5737,hospital_1,"SELECT DISTINCT T1.name ,  T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand  =  ""X""",Which physicians prescribe a medication of brand X? Tell me the name and position of those physicians.,"-- https://en.wikibooks.org/wiki/SQL_Exercises/The_Hospital  DROP TABLE IF EXISTS Physician; CREATE TABLE Physician (   EmployeeID INTEGER NOT NULL,   Name VARCHAR(30) NOT NULL,   Position VARCHAR(30) NOT NULL,   SSN INTEGER NOT NULL,   CONSTRAINT pk_physician PRIMARY KEY(EmployeeID) );   DROP TABLE IF EXISTS Department; CREATE TABLE Department (   DepartmentID INTEGER NOT NULL,   Name VARCHAR(30) NOT NULL,   Head INTEGER NOT NULL,   CONSTRAINT pk_Department PRIMARY KEY(DepartmentID),   CONSTRAINT fk_Department_Physician_EmployeeID FOREIGN KEY(Head) REFERENCES Physician(EmployeeID) );   DROP TABLE IF EXISTS Affiliated_With; CREATE TABLE Affiliated_With (   Physician INTEGER NOT NULL,   Department INTEGER NOT NULL,   PrimaryAffiliation BOOLEAN NOT NULL,   CONSTRAINT fk_Affiliated_With_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),   CONSTRAINT fk_Affiliated_With_Department_DepartmentID FOREIGN KEY(Department) REFERENCES Department(DepartmentID),   PRIMARY KEY(Physician, Department) );  DROP TABLE IF EXISTS Procedures; CREATE TABLE Procedures (   Code INTEGER PRIMARY KEY NOT NULL,   Name VARCHAR(30) NOT NULL,   Cost REAL NOT NULL );  DROP TABLE IF EXISTS Trained_In; CREATE TABLE Trained_In (   Physician INTEGER NOT NULL,   Treatment INTEGER NOT NULL,   CertificationDate DATETIME NOT NULL,   CertificationExpires DATETIME NOT NULL,   CONSTRAINT fk_Trained_In_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),   CONSTRAINT fk_Trained_In_Procedures_Code FOREIGN KEY(Treatment) REFERENCES Procedures(Code),   PRIMARY KEY(Physician, Treatment) );  DROP TABLE IF EXISTS Patient; CREATE TABLE Patient (   SSN INTEGER PRIMARY KEY NOT NULL,   Name VARCHAR(30) NOT NULL,   Address VARCHAR(30) NOT NULL,   Phone VARCHAR(30) NOT NULL,   InsuranceID INTEGER NOT NULL,   PCP INTEGER NOT NULL,   CONSTRAINT fk_Patient_Physician_EmployeeID FOREIGN KEY(PCP) REFERENCES Physician(EmployeeID) );  DROP TABLE IF EXISTS Nurse; CREATE TABLE Nurse (   EmployeeID INTEGER PRIMARY KEY NOT NULL,   Name VARCHAR(30) NOT NULL,   Position VARCHAR(30) NOT NULL,   Registered BOOLEAN NOT NULL,   SSN INTEGER NOT NULL );  DROP TABLE IF EXISTS Appointment; CREATE TABLE Appointment (   AppointmentID INTEGER PRIMARY KEY NOT NULL,   Patient INTEGER NOT NULL,       PrepNurse INTEGER,   Physician INTEGER NOT NULL,   Start DATETIME NOT NULL,   End DATETIME NOT NULL,   ExaminationRoom TEXT NOT NULL,   CONSTRAINT fk_Appointment_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),   CONSTRAINT fk_Appointment_Nurse_EmployeeID FOREIGN KEY(PrepNurse) REFERENCES Nurse(EmployeeID),   CONSTRAINT fk_Appointment_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID) );  DROP TABLE IF EXISTS Medication; CREATE TABLE Medication (   Code INTEGER PRIMARY KEY NOT NULL,   Name VARCHAR(30) NOT NULL,   Brand VARCHAR(30) NOT NULL,   Description VARCHAR(30) NOT NULL );   DROP TABLE IF EXISTS Prescribes; CREATE TABLE Prescribes (   Physician INTEGER NOT NULL,   Patient INTEGER NOT NULL,    Medication INTEGER NOT NULL,    Date DATETIME NOT NULL,   Appointment INTEGER,     Dose VARCHAR(30) NOT NULL,   PRIMARY KEY(Physician, Patient, Medication, Date),   CONSTRAINT fk_Prescribes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),   CONSTRAINT fk_Prescribes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),   CONSTRAINT fk_Prescribes_Medication_Code FOREIGN KEY(Medication) REFERENCES Medication(Code),   CONSTRAINT fk_Prescribes_Appointment_AppointmentID FOREIGN KEY(Appointment) REFERENCES Appointment(AppointmentID) );  DROP TABLE IF EXISTS Block; CREATE TABLE Block (   BlockFloor INTEGER NOT NULL,   BlockCode INTEGER NOT NULL,   PRIMARY KEY(BlockFloor, BlockCode) );   DROP TABLE IF EXISTS Room; CREATE TABLE Room (   RoomNumber INTEGER PRIMARY KEY NOT NULL,   RoomType VARCHAR(30) NOT NULL,   BlockFloor INTEGER NOT NULL,     BlockCode INTEGER NOT NULL,     Unavailable BOOLEAN NOT NULL,   CONSTRAINT fk_Room_Block_PK FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode) );  DROP TABLE IF EXISTS On_Call; CREATE TABLE On_Call (   Nurse INTEGER NOT NULL,   BlockFloor INTEGER NOT NULL,    BlockCode INTEGER NOT NULL,   OnCallStart DATETIME NOT NULL,   OnCallEnd DATETIME NOT NULL,   PRIMARY KEY(Nurse, BlockFloor, BlockCode, OnCallStart, OnCallEnd),   CONSTRAINT fk_OnCall_Nurse_EmployeeID FOREIGN KEY(Nurse) REFERENCES Nurse(EmployeeID),   CONSTRAINT fk_OnCall_Block_Floor FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode)  );  DROP TABLE IF EXISTS Stay; CREATE TABLE Stay (   StayID INTEGER PRIMARY KEY NOT NULL,   Patient INTEGER NOT NULL,   Room INTEGER NOT NULL,   StayStart DATETIME NOT NULL,   StayEnd DATETIME NOT NULL,   CONSTRAINT fk_Stay_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),   CONSTRAINT fk_Stay_Room_Number FOREIGN KEY(Room) REFERENCES Room(RoomNumber) );  DROP TABLE IF EXISTS Undergoes; CREATE TABLE Undergoes (   Patient INTEGER NOT NULL,   Procedures INTEGER NOT NULL,   Stay INTEGER NOT NULL,   DateUndergoes DATETIME NOT NULL,   Physician INTEGER NOT NULL,   AssistingNurse INTEGER,   PRIMARY KEY(Patient, Procedures, Stay, DateUndergoes),   CONSTRAINT fk_Undergoes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),   CONSTRAINT fk_Undergoes_Procedures_Code FOREIGN KEY(Procedures) REFERENCES Procedures(Code),   CONSTRAINT fk_Undergoes_Stay_StayID FOREIGN KEY(Stay) REFERENCES Stay(StayID),   CONSTRAINT fk_Undergoes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),   CONSTRAINT fk_Undergoes_Nurse_EmployeeID FOREIGN KEY(AssistingNurse) REFERENCES Nurse(EmployeeID) );   ",hard
1201,5637,e_learning,SELECT personal_name FROM Students EXCEPT SELECT T1.personal_name FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id  =  T2.student_id,Which students not enrolled in any course? Find their personal names.,"PRAGMA foreign_keys = ON; CREATE TABLE `Course_Authors_and_Tutors` ( `author_id` INTEGER PRIMARY KEY, `author_tutor_ATB` VARCHAR(3), `login_name` VARCHAR(40), `password` VARCHAR(40), `personal_name` VARCHAR(80), `middle_name` VARCHAR(80), `family_name` VARCHAR(80), `gender_mf` VARCHAR(1), `address_line_1` VARCHAR(80) ); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (1, '331', 'jmckenzie', 'c40fa148bdd0d2d45cd6e9ec1e685750fe07f81b', 'Cathrine', 'Ruthie', 'Grant', '0', '756 Monahan Mews Spinkashire, NJ 64230-5098'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (2, '975', 'heidenreich.ara', '24b0ee84063c3b017ab1839e01b7280f47f7c7c2', 'Retha', 'Corene', 'Armstrong', '0', '98623 Huels Manor Jasttown, DE 31611'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (3, '349', 'clementina29', 'cdaf6c3483f19e2253659a40a3aab786a3390f78', 'Darius', 'Ethyl', 'Reichel', '0', '99296 Keeling Courts North Audreanne, IL 28272'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (4, '782', 'wlehner', 'd34378200c9b5f72d3039fa640e7920aaec0fdf2', 'Julio', 'Aniyah', 'Nader', '1', '644 Montana Hill Suite 489 Daijamouth, CA 19587-4254'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (5, '388', 'nyundt', '2c196efe8aee23a1b9a7e752fe63029c5879af6f', 'Yessenia', 'Zena', 'Barrows', '1', '5284 Champlin Roads Cassinport, WY 54636'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (6, '817', 'al75', 'e96c0bcbbbb14747747a56ff4c17354f343a5b4f', 'Adolf', 'Keira', 'Rohan', '1', '92220 Hellen Skyway Apt. 635 Rennerview, MS 81036'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (7, '869', 'marty.bergnaum', '3e2f7bf1e6acf0d616a8703ee0050fba13bc007f', 'Logan', 'Ethelyn', 'Treutel', '1', '67541 Osborne Creek Suite 532 Bernhardview, WV 30288-1050'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (8, '557', 'medhurst.alvah', '02d64f11de97436343a0beba41bfcf69af61be1e', 'Kelsie', 'Kennith', 'Rowe', '0', '0256 Walter Meadows Suite 523 Norbertoborough, AZ 49193'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (9, '505', 'antonetta19', '4d8e909ae9b8888c93a2c5f1eccbd0c4ac6a01c3', 'Georgiana', 'Mathew', 'Zboncak', '0', '445 Quigley Fall Port Antonette, IN 81992-1255'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (10, '159', 'adam.rippin', 'b517a107b5f08fafe9628e88e7263a6f3a4a55c0', 'Deja', 'Joyce', 'Champlin', '1', '22575 Effertz Neck Apt. 046 Port Scotty, NY 67108-9197'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (11, '229', 'dschaefer', '4f149f75ecd84afcdf27343509cdd03d81edb119', 'Ciara', 'Alejandra', 'Greenholt', '0', '425 White Brooks Emmaleefort, IN 97850-2510'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (12, '847', 'nellie.mosciski', 'a48e25a58b3088e9cfdaca61130555ed2c772452', 'Sheldon', 'Jayce', 'Kreiger', '1', '513 Collins Plain Apt. 829 Clementinaville, VT 59908-2793'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (13, '613', 'qking', '6b9979a83b4a9e03ead034c8de47f1b013a3d3af', 'Madonna', 'Jaclyn', 'Effertz', '1', '139 O''Conner Circles Virginieland, KS 23365'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (14, '833', 'fiona77', '120ac8a5744f5b710ecaebbd8dd1633e3e33886e', 'Dusty', 'Amani', 'Crist', '1', '3602 Boehm Forest Zulaufton, DC 35229-0366'); INSERT INTO Course_Authors_and_Tutors (`author_id`, `author_tutor_ATB`, `login_name`, `password`, `personal_name`, `middle_name`, `family_name`, `gender_mf`, `address_line_1`) VALUES (15, '974', 'ekshlerin', '6d587cec8006e3a40565e1dad2c5b5b12b475b8f', 'Shakira', 'Fritz', 'Haley', '0', '8928 Kunze Valley Apt. 747 South Jedidiahmouth, DE 28167');   CREATE TABLE `Students` ( `student_id` INTEGER PRIMARY KEY, `date_of_registration` DATETIME, `date_of_latest_logon` DATETIME, `login_name` VARCHAR(40), `password` VARCHAR(10), `personal_name` VARCHAR(40), `middle_name` VARCHAR(40), `family_name` VARCHAR(40) ); CREATE TABLE `Subjects` ( `subject_id` INTEGER PRIMARY KEY, `subject_name` VARCHAR(120) ); CREATE TABLE `Courses` ( `course_id` INTEGER PRIMARY KEY, `author_id` INTEGER NOT NULL, `subject_id` INTEGER NOT NULL, `course_name` VARCHAR(120), `course_description` VARCHAR(255), FOREIGN KEY (`author_id` ) REFERENCES `Course_Authors_and_Tutors`(`author_id` ), FOREIGN KEY (`subject_id` ) REFERENCES `Subjects`(`subject_id` ) ); CREATE TABLE `Student_Course_Enrolment` ( `registration_id` INTEGER PRIMARY KEY, `student_id` INTEGER NOT NULL, `course_id` INTEGER NOT NULL, `date_of_enrolment` DATETIME NOT NULL, `date_of_completion` DATETIME NOT NULL, FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ), FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ) );  CREATE TABLE `Student_Tests_Taken` ( `registration_id` INTEGER NOT NULL, `date_test_taken` DATETIME NOT NULL, `test_result` VARCHAR(255), FOREIGN KEY (`registration_id` ) REFERENCES `Student_Course_Enrolment`(`registration_id` ) );  ",hard
1452,6589,department_store,SELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price DESC LIMIT 1,Find the name of the most expensive hardware product.,"PRAGMA foreign_keys = ON; CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `address_details` VARCHAR(255) );   INSERT INTO Addresses (`address_id`, `address_details`) VALUES (1, '28481 Crist Circle East Burdettestad, IA 21232'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (2, '0292 Mitchel Pike Port Abefurt, IA 84402-4249'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (3, '4062 Mante Place West Lindsey, DE 76199-8015'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (4, '99666 Julie Junction Marvinburgh, OH 16085-1623'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (5, '195 Mara Rue Jenkinsmouth, OK 22345'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (6, '11784 Stehr Road Port Isaac, NV 61159'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (7, '69482 Renner Ville Suite 653 Langworthborough, OH 95195'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (8, '36594 O''Keefe Lock New Cali, RI 42319'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (9, '7181 Wuckert Port Apt. 571 Lake Zariaburgh, IL 98085'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (10, '92594 Marvin Trafficway Pourosfurt, IA 98649'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (11, '0258 Kessler Mountains Suite 688 Mooreside, ME 41586-5022'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (12, '69275 Mose Drive Wilkinsonstad, CO 79055-7622'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (13, '8207 Morissette Lakes East Rheaview, ID 47493'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (14, '145 Alice Corners Willmsport, NV 36680'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (15, '521 Molly Harbors Apt. 567 Reingerland, HI 97099-1005');  CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `staff_gender` VARCHAR(1), `staff_name` VARCHAR(80) );  CREATE TABLE `Suppliers` ( `supplier_id` INTEGER PRIMARY KEY, `supplier_name` VARCHAR(80), `supplier_phone` VARCHAR(80) );  CREATE TABLE `Department_Store_Chain` ( `dept_store_chain_id` INTEGER PRIMARY KEY, `dept_store_chain_name` VARCHAR(80) );  CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `payment_method_code` VARCHAR(10) NOT NULL, `customer_code` VARCHAR(20), `customer_name` VARCHAR(80), `customer_address` VARCHAR(255), `customer_phone` VARCHAR(80), `customer_email` VARCHAR(80) ); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (1, 'Credit Card', '401', 'Ahmed', '75099 Tremblay Port Apt. 163 South Norrisland, SC 80546', '254-072-4068x33935', 'margarett.vonrueden@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (2, 'Credit Card', '665', 'Chauncey', '8408 Lindsay Court East Dasiabury, IL 72656-3552', '+41(8)1897032009', 'stiedemann.sigrid@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (3, 'Direct Debit', '844', 'Lukas', '7162 Rodolfo Knoll Apt. 502 Lake Annalise, TN 35791-8871', '197-417-3557', 'joelle.monahan@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (4, 'Direct Debit', '662', 'Lexus', '9581 Will Flat Suite 272 East Cathryn, WY 30751-4404', '+08(3)8056580281', 'gbrekke@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (5, 'Credit Card', '848', 'Tara', '5065 Mraz Fields Apt. 041 East Chris, NH 41624', '1-064-498-6609x051', 'nicholas44@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (6, 'Credit Card', '916', 'Jon', '841 Goyette Unions South Dionbury, NC 62021', '(443)013-3112x528', 'cconroy@example.net'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (7, 'Credit Card', '172', 'Cristobal', '8327 Christiansen Lakes Suite 409 Schneiderland, IA 93624', '877-150-8674x63517', 'shawna.cummerata@example.net'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (8, 'Direct Debit', '927', 'Adah', '5049 Hand Land Coymouth, IL 97300-7731', '1-695-364-7586x59256', 'kathlyn24@example.org'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (9, 'Credit Card', '808', 'Yasmeen', '3558 Witting Meadow Apt. 483 Lake Moriahbury, OH 91556-2122', '587.398.2400x31176', 'ludwig54@example.net'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (10, 'Credit Card', '887', 'Karson', '7308 Joan Lake Suite 346 Lizethtown, DE 56522', '857-844-9339x40140', 'moriah91@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (11, 'Direct Debit', '611', 'Cordell', '362 Fisher Forge Apt. 900 New Mckenna, CA 98525-5674', '(730)934-8249', 'qstokes@example.org'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (12, 'Credit Card', '182', 'Darron', '84445 Elinor Glens Port Zita, SD 39410', '117.822.3577', 'gwisozk@example.net'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (13, 'Credit Card', '589', 'Kenya', '338 Floy Mountains Suite 589 Yesseniaville, TN 60847', '08023680831', 'maxime86@example.net'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (14, 'Direct Debit', '240', 'Abbie', '983 Elinore Passage Darrionborough, SC 53915-0479', '07594320656', 'celine.bogan@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (15, 'Credit Card', '980', 'Lyric', '649 Ocie Lights Wyatttown, UT 12697', '1-472-036-0434', 'schultz.arnoldo@example.net');   CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_type_code` VARCHAR(10) NOT NULL, `product_name` VARCHAR(80), `product_price` DECIMAL(19,4) ); CREATE TABLE `Supplier_Addresses` ( `supplier_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_from` DATETIME NOT NULL, `date_to` DATETIME, PRIMARY KEY (`supplier_id`, `address_id`), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`supplier_id` ) REFERENCES `Suppliers`(`supplier_id` ) );  CREATE TABLE `Customer_Addresses` ( `customer_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_from` DATETIME NOT NULL, `date_to` DATETIME, PRIMARY KEY (`customer_id`, `address_id`), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) );   CREATE TABLE `Customer_Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `order_status_code` VARCHAR(10) NOT NULL, `order_date` DATETIME NOT NULL, FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) );  CREATE TABLE `Department_Stores` ( `dept_store_id` INTEGER PRIMARY KEY, `dept_store_chain_id` INTEGER, `store_name` VARCHAR(80), `store_address` VARCHAR(255), `store_phone` VARCHAR(80), `store_email` VARCHAR(80), FOREIGN KEY (`dept_store_chain_id` ) REFERENCES `Department_Store_Chain`(`dept_store_chain_id` ) );   INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (1, 1, 'store_name', '01290 Jeremie Parkway Suite 753 North Arielle, MS 51249', '(948)944-5099x2027', 'bmaggio@example.com'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (2, 3, 'store_name', '082 Purdy Expressway O''Connellshire, IL 31732', '877-917-5029', 'larissa10@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (3, 4, 'store_name', '994 Travis Plains North Wadeton, WV 27575-3951', '1-216-312-0375', 'alexandro.mcclure@example.net'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (4, 2, 'store_name', '93472 Mayert Shore Apt. 360 Mitchellton, TN 84209', '670-466-6367', 'bryon24@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (5, 3, 'store_name', '88112 Parisian Lights Sporermouth, MN 25962', '01399327266', 'creola23@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (6, 4, 'store_name', '49708 Marcella Valleys Suite 181 Ninamouth, WA 86667', '1-859-843-1957', 'jerod.reynolds@example.net'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (7, 4, 'store_name', '41924 Alfredo Cliff New Eviestad, NY 17573', '1-109-872-9142x77078', 'ihamill@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (8, 4, 'store_name', '7081 Shanna Cape West Zacheryshire, NC 17408', '+67(5)4983519062', 'casper.adolfo@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (9, 4, 'store_name', '5288 Kaia Street Devonton, NJ 61782-9006', '(723)503-7086x356', 'selmer.stiedemann@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (10, 3, 'store_name', '00578 Lisa Gateway Suite 476 Strosinville, VA 03998-3292', '07126036440', 'luisa57@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (11, 2, 'store_name', '34894 Everett Road South Jeremiehaven, GA 08730', '611-037-9309', 'vonrueden.vern@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (12, 4, 'store_name', '2676 Cruickshank Gardens North Ginahaven, CT 85046', '(626)763-7031', 'freda.toy@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (13, 2, 'store_name', '29297 West Road Suite 210 West Dulceside, UT 58085-8998', '1-764-126-7567x0795', 'katlynn62@example.com'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (14, 1, 'store_name', '16650 Lysanne River Apt. 281 North Garettton, AL 84756-4375', '319.331.3397', 'mohr.elwin@example.net'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (15, 3, 'store_name', '82470 Hansen Squares Suite 190 Wehnermouth, NC 76791', '(587)993-3604x3077', 'kelly30@example.com');   CREATE TABLE `Departments` ( `department_id` INTEGER PRIMARY KEY, `dept_store_id` INTEGER NOT NULL, `department_name` VARCHAR(80), FOREIGN KEY (`dept_store_id` ) REFERENCES `Department_Stores`(`dept_store_id` ) ); CREATE TABLE `Order_Items` ( `order_item_id` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) ); CREATE TABLE `Product_Suppliers` ( `product_id` INTEGER NOT NULL, `supplier_id` INTEGER NOT NULL, `date_supplied_from` DATETIME NOT NULL, `date_supplied_to` DATETIME, `total_amount_purchased` VARCHAR(80), `total_value_purchased` DECIMAL(19,4), PRIMARY KEY (`product_id`, `supplier_id`), FOREIGN KEY (`supplier_id` ) REFERENCES `Suppliers`(`supplier_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) );   CREATE TABLE `Staff_Department_Assignments` ( `staff_id` INTEGER NOT NULL, `department_id` INTEGER NOT NULL, `date_assigned_from` DATETIME NOT NULL, `job_title_code` VARCHAR(10) NOT NULL, `date_assigned_to` DATETIME, PRIMARY KEY (`staff_id`, `department_id`), FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` ), FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ) );  ",hard
1458,6613,aircraft,"SELECT avg(T3.Total_Passengers) FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T1.Aircraft  =  ""Robinson R-22""","What is the average total number of passengers of airports that are associated with aircraft ""Robinson R-22""?"," PRAGMA foreign_keys = ON;   CREATE TABLE `pilot` (   `Pilot_Id` int(11) NOT NULL,   `Name` varchar(50) NOT NULL,   `Age` int(11) NOT NULL,   PRIMARY KEY (`Pilot_Id`) );  CREATE TABLE `aircraft` (   ""Aircraft_ID"" int(11) NOT NULL,   ""Aircraft"" varchar(50) NOT NULL,   ""Description"" varchar(50) NOT NULL,   ""Max_Gross_Weight"" varchar(50) NOT NULL,   ""Total_disk_area"" varchar(50) NOT NULL,   ""Max_disk_Loading"" varchar(50) NOT NULL,   PRIMARY KEY (`Aircraft_ID`) );   CREATE TABLE `match` ( ""Round"" real, ""Location"" text, ""Country"" text, ""Date"" text, ""Fastest_Qualifying"" text, ""Winning_Pilot"" text, ""Winning_Aircraft"" text, PRIMARY KEY (""Round""), FOREIGN KEY (`Winning_Aircraft`) REFERENCES `aircraft`(`Aircraft_ID`), FOREIGN KEY (`Winning_Pilot`) REFERENCES `pilot`(`Pilot_Id`) );  CREATE TABLE `airport` ( ""Airport_ID"" int, ""Airport_Name"" text, ""Total_Passengers"" real, ""%_Change_2007"" text, ""International_Passengers"" real, ""Domestic_Passengers"" real, ""Transit_Passengers"" real, ""Aircraft_Movements"" real, ""Freight_Metric_Tonnes"" real, PRIMARY KEY (""Airport_ID"") );  CREATE TABLE `airport_aircraft` ( ""ID"" int, ""Airport_ID"" int, ""Aircraft_ID"" int, PRIMARY KEY (""Airport_ID"",""Aircraft_ID""), FOREIGN KEY (""Airport_ID"") REFERENCES `airport`(`Airport_ID`), FOREIGN KEY (""Aircraft_ID"") REFERENCES `aircraft`(`Aircraft_ID`) );    ",hard
1686,7700,cre_Theme_park,SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1,Which transportation method is used the most often to get to tourist attractions?,"PRAGMA foreign_keys = ON; CREATE TABLE Ref_Hotel_Star_Ratings ( star_rating_code CHAR(15) NOT NULL, star_rating_description VARCHAR(80), PRIMARY KEY (star_rating_code), UNIQUE (star_rating_code) );   CREATE TABLE Locations ( Location_ID INTEGER NOT NULL, Location_Name VARCHAR(255), Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Location_ID) ); CREATE TABLE Ref_Attraction_Types ( Attraction_Type_Code CHAR(15) NOT NULL, Attraction_Type_Description VARCHAR(255), PRIMARY KEY (Attraction_Type_Code), UNIQUE (Attraction_Type_Code) );  CREATE TABLE Visitors ( Tourist_ID INTEGER NOT NULL, Tourist_Details VARCHAR(255), PRIMARY KEY (Tourist_ID), UNIQUE (Tourist_ID) ); CREATE TABLE Features ( Feature_ID INTEGER NOT NULL, Feature_Details VARCHAR(255), PRIMARY KEY (Feature_ID) );  CREATE TABLE Hotels ( hotel_id INTEGER NOT NULL, star_rating_code CHAR(15) NOT NULL, pets_allowed_yn CHAR(1), price_range real, other_hotel_details VARCHAR(255), PRIMARY KEY (hotel_id), FOREIGN KEY (star_rating_code) REFERENCES Ref_Hotel_Star_Ratings (star_rating_code) );  CREATE TABLE Tourist_Attractions ( Tourist_Attraction_ID INTEGER NOT NULL, Attraction_Type_Code CHAR(15) NOT NULL, Location_ID INTEGER NOT NULL, How_to_Get_There VARCHAR(255), Name VARCHAR(255), Description VARCHAR(255), Opening_Hours VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Tourist_Attraction_ID), FOREIGN KEY (Location_ID) REFERENCES Locations (Location_ID), FOREIGN KEY (Attraction_Type_Code) REFERENCES Ref_Attraction_Types (Attraction_Type_Code) );  CREATE TABLE Street_Markets ( Market_ID INTEGER NOT NULL, Market_Details VARCHAR(255), PRIMARY KEY (Market_ID), FOREIGN KEY (Market_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Shops ( Shop_ID INTEGER NOT NULL, Shop_Details VARCHAR(255), PRIMARY KEY (Shop_ID), FOREIGN KEY (Shop_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Museums ( Museum_ID INTEGER NOT NULL, Museum_Details VARCHAR(255), PRIMARY KEY (Museum_ID), FOREIGN KEY (Museum_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Royal_Family ( Royal_Family_ID INTEGER NOT NULL, Royal_Family_Details VARCHAR(255), PRIMARY KEY (Royal_Family_ID), FOREIGN KEY (Royal_Family_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Theme_Parks ( Theme_Park_ID INTEGER NOT NULL, Theme_Park_Details VARCHAR(255), PRIMARY KEY (Theme_Park_ID), FOREIGN KEY (Theme_Park_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) );   CREATE TABLE Visits ( Visit_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Tourist_ID INTEGER NOT NULL, Visit_Date DATETIME NOT NULL, Visit_Details VARCHAR(40) NOT NULL, PRIMARY KEY (Visit_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID), FOREIGN KEY (Tourist_ID) REFERENCES Visitors (Tourist_ID) );   CREATE TABLE Photos ( Photo_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Name VARCHAR(255), Description VARCHAR(255), Filename VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Photo_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Staff ( Staff_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Name VARCHAR(40), Other_Details VARCHAR(255), PRIMARY KEY (Staff_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) );   CREATE TABLE Tourist_Attraction_Features ( Tourist_Attraction_ID INTEGER NOT NULL, Feature_ID INTEGER NOT NULL, PRIMARY KEY (Tourist_Attraction_ID, Feature_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID), FOREIGN KEY (Feature_ID) REFERENCES Features (Feature_ID) ); ",hard
1289,6035,cre_Doc_Tracking_DB,SELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed,Which employees do not authorize destruction for any document? Give me their employee ids.,"PRAGMA foreign_keys = ON; CREATE TABLE Ref_Document_Types ( Document_Type_Code CHAR(15) NOT NULL, Document_Type_Name VARCHAR(255) NOT NULL, Document_Type_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Document_Type_Code) );  CREATE TABLE Ref_Calendar ( Calendar_Date DATETIME NOT NULL, Day_Number INTEGER, PRIMARY KEY (Calendar_Date) ); CREATE TABLE Ref_Locations ( Location_Code CHAR(15) NOT NULL, Location_Name VARCHAR(255) NOT NULL, Location_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Location_Code) );  CREATE TABLE Roles ( Role_Code CHAR(15) NOT NULL, Role_Name VARCHAR(255), Role_Description VARCHAR(255), PRIMARY KEY (Role_Code) );  CREATE TABLE All_Documents ( Document_ID INTEGER NOT NULL, Date_Stored DATETIME, Document_Type_Code CHAR(15) NOT NULL, Document_Name CHAR(255), Document_Description CHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Document_ID), FOREIGN KEY (Document_Type_Code) REFERENCES Ref_Document_Types (Document_Type_Code), FOREIGN KEY (Date_Stored) REFERENCES Ref_Calendar (Calendar_Date) );  CREATE TABLE Employees ( Employee_ID INTEGER NOT NULL, Role_Code CHAR(15) NOT NULL, Employee_Name VARCHAR(255), Gender_MFU CHAR(1) NOT NULL, Date_of_Birth DATETIME NOT NULL, Other_Details VARCHAR(255), PRIMARY KEY (Employee_ID), FOREIGN KEY (Role_Code) REFERENCES Roles (Role_Code) );  CREATE TABLE Document_Locations ( Document_ID INTEGER NOT NULL, Location_Code CHAR(15) NOT NULL, Date_in_Location_From DATETIME NOT NULL, Date_in_Locaton_To DATETIME, PRIMARY KEY (Document_ID, Location_Code, Date_in_Location_From), FOREIGN KEY (Location_Code) REFERENCES Ref_Locations (Location_Code), FOREIGN KEY (Date_in_Location_From) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Date_in_Locaton_To) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Document_ID) REFERENCES All_Documents (Document_ID) );  CREATE TABLE Documents_to_be_Destroyed ( Document_ID INTEGER NOT NULL, Destruction_Authorised_by_Employee_ID INTEGER, Destroyed_by_Employee_ID INTEGER, Planned_Destruction_Date DATETIME, Actual_Destruction_Date DATETIME, Other_Details VARCHAR(255), PRIMARY KEY (Document_ID), FOREIGN KEY (Destroyed_by_Employee_ID) REFERENCES Employees (Employee_ID), FOREIGN KEY (Destruction_Authorised_by_Employee_ID) REFERENCES Employees (Employee_ID), FOREIGN KEY (Planned_Destruction_Date) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Actual_Destruction_Date) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Document_ID) REFERENCES All_Documents (Document_ID) ); ",hard
1367,6300,document_management,SELECT sum(access_count) FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1,What is the total access count of documents that are of the most common document type?,"PRAGMA foreign_keys = ON;  CREATE TABLE `Roles` ( `role_code` VARCHAR(15) PRIMARY KEY, `role_description` VARCHAR(80) );  CREATE TABLE `Users` ( `user_id` INTEGER PRIMARY KEY, `role_code` VARCHAR(15) NOT NULL, `user_name` VARCHAR(40), `user_login` VARCHAR(40), `password` VARCHAR(40), FOREIGN KEY (`role_code` ) REFERENCES `Roles`(`role_code` ) ); CREATE TABLE `Document_Structures` ( `document_structure_code` VARCHAR(15) PRIMARY KEY, `parent_document_structure_code` VARCHAR(15), `document_structure_description` VARCHAR(80) ); CREATE TABLE `Functional_Areas` ( `functional_area_code` VARCHAR(15) PRIMARY KEY, `parent_functional_area_code` VARCHAR(15), `functional_area_description` VARCHAR(80) NOT NULL );  CREATE TABLE `Images` ( `image_id` INTEGER PRIMARY KEY, `image_alt_text` VARCHAR(80), `image_name` VARCHAR(40), `image_url` VARCHAR(255) ); CREATE TABLE `Documents` ( `document_code` VARCHAR(15) PRIMARY KEY, `document_structure_code` VARCHAR(15) NOT NULL, `document_type_code` VARCHAR(15) NOT NULL, `access_count` INTEGER, `document_name` VARCHAR(80), FOREIGN KEY (`document_structure_code` ) REFERENCES `Document_Structures`(`document_structure_code` ) );  CREATE TABLE `Document_Functional_Areas` ( `document_code` VARCHAR(15) NOT NULL, `functional_area_code` VARCHAR(15) NOT NULL, FOREIGN KEY (`document_code` ) REFERENCES `Documents`(`document_code` ), FOREIGN KEY (`functional_area_code` ) REFERENCES `Functional_Areas`(`functional_area_code` ) ); CREATE TABLE `Document_Sections` ( `section_id` INTEGER PRIMARY KEY, `document_code` VARCHAR(15) NOT NULL, `section_sequence` INTEGER, `section_code` VARCHAR(20), `section_title` VARCHAR(80), FOREIGN KEY (`document_code` ) REFERENCES `Documents`(`document_code` ) ); CREATE TABLE `Document_Sections_Images` ( `section_id` INTEGER NOT NULL, `image_id` INTEGER NOT NULL, PRIMARY KEY (`section_id`,`image_id`), FOREIGN KEY (`section_id` ) REFERENCES `Document_Sections`(`section_id` ), FOREIGN KEY (`image_id` ) REFERENCES `Images`(`image_id` ) );  ",hard
737,3207,race_track,SELECT LOCATION FROM track WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM track WHERE seating  <  70000,"What are the locations that have both tracks with more than 90000 seats, and tracks with fewer than 70000 seats?","PRAGMA foreign_keys = ON;  CREATE TABLE ""race"" ( ""Race_ID"" int, ""Name"" text, ""Class"" text, ""Date"" text, ""Track_ID"" text, PRIMARY KEY (""Race_ID""), FOREIGN KEY (""Track_ID"") REFERENCES ""track""(""Track_ID"") );  CREATE TABLE ""track"" ( ""Track_ID"" int, ""Name"" text, ""Location"" text, ""Seating"" real, ""Year_Opened"" real, PRIMARY KEY (""Track_ID"") );  ",hard
1700,7780,game_1,"SELECT StuID FROM Student WHERE sex  =  'F' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname  =  ""Football""",What are the ids of all female students who play football?,"create table Student (         StuID        INTEGER PRIMARY KEY,         LName        VARCHAR(12),         Fname        VARCHAR(12),         Age      INTEGER,         Sex      VARCHAR(1),         Major        INTEGER,         Advisor      INTEGER,         city_code    VARCHAR(3)  );  create table Video_Games (        GameID           INTEGER PRIMARY KEY,        GName            VARCHAR(40),        GType            VARCHAR(40) );  create table Plays_Games (        StuID                INTEGER,        GameID            INTEGER,        Hours_Played      INTEGER,        FOREIGN KEY(GameID) REFERENCES Video_Games(GameID),        FOREIGN KEY(StuID) REFERENCES Student(StuID) );  create table SportsInfo (   StuID INTEGER,   SportName VARCHAR(32),   HoursPerWeek INTEGER,   GamesPlayed INTEGER,   OnScholarship VARCHAR(1),   FOREIGN KEY(StuID) REFERENCES Student(StuID) );   ",hard
647,2697,bike_1,"SELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1","What is the latitude, longitude, city of the station from which the shortest trip started?","PRAGMA foreign_keys=OFF; BEGIN TRANSACTION; CREATE TABLE station (     id INTEGER PRIMARY KEY,     name TEXT,     lat NUMERIC,     long NUMERIC,     dock_count INTEGER,     city TEXT,     installation_date TEXT); CREATE TABLE status (     station_id INTEGER,     bikes_available INTEGER,     docks_available INTEGER,     time TEXT,     FOREIGN KEY (station_id) REFERENCES station(id) ); CREATE TABLE trip (     id INTEGER PRIMARY KEY,     duration INTEGER,     start_date TEXT,     start_station_name TEXT, -- this should be removed     start_station_id INTEGER,     end_date TEXT,     end_station_name TEXT, -- this should be removed     end_station_id INTEGER,     bike_id INTEGER,     subscription_type TEXT,     zip_code INTEGER); CREATE TABLE weather (     date TEXT,     max_temperature_f INTEGER,     mean_temperature_f INTEGER,     min_temperature_f INTEGER,     max_dew_point_f INTEGER,     mean_dew_point_f INTEGER,     min_dew_point_f INTEGER,     max_humidity INTEGER,     mean_humidity INTEGER,     min_humidity INTEGER,     max_sea_level_pressure_inches NUMERIC,     mean_sea_level_pressure_inches NUMERIC,     min_sea_level_pressure_inches NUMERIC,     max_visibility_miles INTEGER,     mean_visibility_miles INTEGER,     min_visibility_miles INTEGER,     max_wind_Speed_mph INTEGER,     mean_wind_speed_mph INTEGER,     max_gust_speed_mph INTEGER,     precipitation_inches INTEGER,     cloud_cover INTEGER,     events TEXT,     wind_dir_degrees INTEGER,     zip_code INTEGER); COMMIT;",hard
190,1068,geo,SELECT state_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );,what state has the city with the largest population,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );",hard
348,1363,geo,SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MIN ( LENGTH ) FROM river );,which is the shortest river,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );",hard
672,2826,musical,SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor),List the name of musicals that do not have actors.,"PRAGMA foreign_keys = ON;  CREATE TABLE ""musical"" ( ""Musical_ID"" int, ""Name"" text, ""Year"" int, ""Award"" text, ""Category"" text, ""Nominee"" text, ""Result"" text, PRIMARY KEY (""Musical_ID"") );  CREATE TABLE ""actor"" ( ""Actor_ID"" int, ""Name"" text, ""Musical_ID"" int, ""Character"" text, ""Duration"" text, ""age"" int, PRIMARY KEY (""Actor_ID""), FOREIGN KEY (""Musical_ID"") REFERENCES ""actor""(""Actor_ID"") );  ",hard
297,1290,geo,SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );,what state has the smallest area,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );",hard
1631,7402,railway,SELECT ObjectNumber FROM railway WHERE Railway_ID NOT IN (SELECT Railway_ID FROM train),List the object number of railways that do not have any trains.," PRAGMA foreign_keys = ON;  CREATE TABLE ""railway"" ( ""Railway_ID"" int, ""Railway"" text, ""Builder"" text, ""Built"" text, ""Wheels"" text, ""Location"" text, ""ObjectNumber"" text, PRIMARY KEY (""Railway_ID"") );    CREATE TABLE ""train"" ( ""Train_ID"" int, ""Train_Num"" text, ""Name"" text, ""From"" text, ""Arrival"" text, ""Railway_ID"" int, PRIMARY KEY (""Train_ID""), FOREIGN KEY (""Railway_ID"") REFERENCES `railway`(""Railway_ID"") );  CREATE TABLE ""manager"" ( ""Manager_ID"" int, ""Name"" text, ""Country"" text, ""Working_year_starts"" text, ""Age"" int, ""Level"" int, PRIMARY KEY (""Manager_ID"") );  CREATE TABLE ""railway_manage"" ( ""Railway_ID"" int, ""Manager_ID"" int, ""From_Year"" text, PRIMARY KEY (""Railway_ID"",""Manager_ID""), FOREIGN KEY (""Manager_ID"") REFERENCES ""manager""(""Manager_ID""), FOREIGN KEY (""Railway_ID"") REFERENCES ""railway""(""Railway_ID"") );  ",hard
887,4059,gas_company,SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.company  =  'ExxonMobil',What are the names of the managers for gas stations that are operated by the ExxonMobil company?," PRAGMA foreign_keys = ON;   CREATE TABLE ""company"" ( ""Company_ID"" int, ""Rank"" int, ""Company"" text, ""Headquarters"" text, ""Main_Industry"" text, ""Sales_billion"" real, ""Profits_billion"" real, ""Assets_billion"" real, ""Market_Value"" real, PRIMARY KEY (""Company_ID"") );  CREATE TABLE ""gas_station"" ( ""Station_ID"" int, ""Open_Year"" int, ""Location"" text, ""Manager_Name"" text, ""Vice_Manager_Name"" text, ""Representative_Name"" text, PRIMARY KEY (""Station_ID"") );  CREATE TABLE ""station_company"" ( ""Station_ID"" int, ""Company_ID"" int, ""Rank_of_the_Year"" int, PRIMARY KEY (""Station_ID"",""Company_ID""), FOREIGN KEY (`Station_ID`) REFERENCES `gas_station`(`Station_ID`), FOREIGN KEY (`Company_ID`) REFERENCES `company`(`Company_ID`) );  ",hard
1432,6543,department_store,"SELECT T1.staff_id ,  T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1",Find the id and name of the staff who has been assigned for the shortest period.,"PRAGMA foreign_keys = ON; CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `address_details` VARCHAR(255) );   INSERT INTO Addresses (`address_id`, `address_details`) VALUES (1, '28481 Crist Circle East Burdettestad, IA 21232'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (2, '0292 Mitchel Pike Port Abefurt, IA 84402-4249'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (3, '4062 Mante Place West Lindsey, DE 76199-8015'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (4, '99666 Julie Junction Marvinburgh, OH 16085-1623'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (5, '195 Mara Rue Jenkinsmouth, OK 22345'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (6, '11784 Stehr Road Port Isaac, NV 61159'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (7, '69482 Renner Ville Suite 653 Langworthborough, OH 95195'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (8, '36594 O''Keefe Lock New Cali, RI 42319'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (9, '7181 Wuckert Port Apt. 571 Lake Zariaburgh, IL 98085'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (10, '92594 Marvin Trafficway Pourosfurt, IA 98649'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (11, '0258 Kessler Mountains Suite 688 Mooreside, ME 41586-5022'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (12, '69275 Mose Drive Wilkinsonstad, CO 79055-7622'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (13, '8207 Morissette Lakes East Rheaview, ID 47493'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (14, '145 Alice Corners Willmsport, NV 36680'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (15, '521 Molly Harbors Apt. 567 Reingerland, HI 97099-1005');  CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `staff_gender` VARCHAR(1), `staff_name` VARCHAR(80) );  CREATE TABLE `Suppliers` ( `supplier_id` INTEGER PRIMARY KEY, `supplier_name` VARCHAR(80), `supplier_phone` VARCHAR(80) );  CREATE TABLE `Department_Store_Chain` ( `dept_store_chain_id` INTEGER PRIMARY KEY, `dept_store_chain_name` VARCHAR(80) );  CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `payment_method_code` VARCHAR(10) NOT NULL, `customer_code` VARCHAR(20), `customer_name` VARCHAR(80), `customer_address` VARCHAR(255), `customer_phone` VARCHAR(80), `customer_email` VARCHAR(80) ); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (1, 'Credit Card', '401', 'Ahmed', '75099 Tremblay Port Apt. 163 South Norrisland, SC 80546', '254-072-4068x33935', 'margarett.vonrueden@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (2, 'Credit Card', '665', 'Chauncey', '8408 Lindsay Court East Dasiabury, IL 72656-3552', '+41(8)1897032009', 'stiedemann.sigrid@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (3, 'Direct Debit', '844', 'Lukas', '7162 Rodolfo Knoll Apt. 502 Lake Annalise, TN 35791-8871', '197-417-3557', 'joelle.monahan@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (4, 'Direct Debit', '662', 'Lexus', '9581 Will Flat Suite 272 East Cathryn, WY 30751-4404', '+08(3)8056580281', 'gbrekke@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (5, 'Credit Card', '848', 'Tara', '5065 Mraz Fields Apt. 041 East Chris, NH 41624', '1-064-498-6609x051', 'nicholas44@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (6, 'Credit Card', '916', 'Jon', '841 Goyette Unions South Dionbury, NC 62021', '(443)013-3112x528', 'cconroy@example.net'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (7, 'Credit Card', '172', 'Cristobal', '8327 Christiansen Lakes Suite 409 Schneiderland, IA 93624', '877-150-8674x63517', 'shawna.cummerata@example.net'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (8, 'Direct Debit', '927', 'Adah', '5049 Hand Land Coymouth, IL 97300-7731', '1-695-364-7586x59256', 'kathlyn24@example.org'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (9, 'Credit Card', '808', 'Yasmeen', '3558 Witting Meadow Apt. 483 Lake Moriahbury, OH 91556-2122', '587.398.2400x31176', 'ludwig54@example.net'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (10, 'Credit Card', '887', 'Karson', '7308 Joan Lake Suite 346 Lizethtown, DE 56522', '857-844-9339x40140', 'moriah91@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (11, 'Direct Debit', '611', 'Cordell', '362 Fisher Forge Apt. 900 New Mckenna, CA 98525-5674', '(730)934-8249', 'qstokes@example.org'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (12, 'Credit Card', '182', 'Darron', '84445 Elinor Glens Port Zita, SD 39410', '117.822.3577', 'gwisozk@example.net'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (13, 'Credit Card', '589', 'Kenya', '338 Floy Mountains Suite 589 Yesseniaville, TN 60847', '08023680831', 'maxime86@example.net'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (14, 'Direct Debit', '240', 'Abbie', '983 Elinore Passage Darrionborough, SC 53915-0479', '07594320656', 'celine.bogan@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (15, 'Credit Card', '980', 'Lyric', '649 Ocie Lights Wyatttown, UT 12697', '1-472-036-0434', 'schultz.arnoldo@example.net');   CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_type_code` VARCHAR(10) NOT NULL, `product_name` VARCHAR(80), `product_price` DECIMAL(19,4) ); CREATE TABLE `Supplier_Addresses` ( `supplier_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_from` DATETIME NOT NULL, `date_to` DATETIME, PRIMARY KEY (`supplier_id`, `address_id`), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`supplier_id` ) REFERENCES `Suppliers`(`supplier_id` ) );  CREATE TABLE `Customer_Addresses` ( `customer_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_from` DATETIME NOT NULL, `date_to` DATETIME, PRIMARY KEY (`customer_id`, `address_id`), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) );   CREATE TABLE `Customer_Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `order_status_code` VARCHAR(10) NOT NULL, `order_date` DATETIME NOT NULL, FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) );  CREATE TABLE `Department_Stores` ( `dept_store_id` INTEGER PRIMARY KEY, `dept_store_chain_id` INTEGER, `store_name` VARCHAR(80), `store_address` VARCHAR(255), `store_phone` VARCHAR(80), `store_email` VARCHAR(80), FOREIGN KEY (`dept_store_chain_id` ) REFERENCES `Department_Store_Chain`(`dept_store_chain_id` ) );   INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (1, 1, 'store_name', '01290 Jeremie Parkway Suite 753 North Arielle, MS 51249', '(948)944-5099x2027', 'bmaggio@example.com'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (2, 3, 'store_name', '082 Purdy Expressway O''Connellshire, IL 31732', '877-917-5029', 'larissa10@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (3, 4, 'store_name', '994 Travis Plains North Wadeton, WV 27575-3951', '1-216-312-0375', 'alexandro.mcclure@example.net'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (4, 2, 'store_name', '93472 Mayert Shore Apt. 360 Mitchellton, TN 84209', '670-466-6367', 'bryon24@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (5, 3, 'store_name', '88112 Parisian Lights Sporermouth, MN 25962', '01399327266', 'creola23@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (6, 4, 'store_name', '49708 Marcella Valleys Suite 181 Ninamouth, WA 86667', '1-859-843-1957', 'jerod.reynolds@example.net'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (7, 4, 'store_name', '41924 Alfredo Cliff New Eviestad, NY 17573', '1-109-872-9142x77078', 'ihamill@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (8, 4, 'store_name', '7081 Shanna Cape West Zacheryshire, NC 17408', '+67(5)4983519062', 'casper.adolfo@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (9, 4, 'store_name', '5288 Kaia Street Devonton, NJ 61782-9006', '(723)503-7086x356', 'selmer.stiedemann@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (10, 3, 'store_name', '00578 Lisa Gateway Suite 476 Strosinville, VA 03998-3292', '07126036440', 'luisa57@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (11, 2, 'store_name', '34894 Everett Road South Jeremiehaven, GA 08730', '611-037-9309', 'vonrueden.vern@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (12, 4, 'store_name', '2676 Cruickshank Gardens North Ginahaven, CT 85046', '(626)763-7031', 'freda.toy@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (13, 2, 'store_name', '29297 West Road Suite 210 West Dulceside, UT 58085-8998', '1-764-126-7567x0795', 'katlynn62@example.com'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (14, 1, 'store_name', '16650 Lysanne River Apt. 281 North Garettton, AL 84756-4375', '319.331.3397', 'mohr.elwin@example.net'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (15, 3, 'store_name', '82470 Hansen Squares Suite 190 Wehnermouth, NC 76791', '(587)993-3604x3077', 'kelly30@example.com');   CREATE TABLE `Departments` ( `department_id` INTEGER PRIMARY KEY, `dept_store_id` INTEGER NOT NULL, `department_name` VARCHAR(80), FOREIGN KEY (`dept_store_id` ) REFERENCES `Department_Stores`(`dept_store_id` ) ); CREATE TABLE `Order_Items` ( `order_item_id` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) ); CREATE TABLE `Product_Suppliers` ( `product_id` INTEGER NOT NULL, `supplier_id` INTEGER NOT NULL, `date_supplied_from` DATETIME NOT NULL, `date_supplied_to` DATETIME, `total_amount_purchased` VARCHAR(80), `total_value_purchased` DECIMAL(19,4), PRIMARY KEY (`product_id`, `supplier_id`), FOREIGN KEY (`supplier_id` ) REFERENCES `Suppliers`(`supplier_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) );   CREATE TABLE `Staff_Department_Assignments` ( `staff_id` INTEGER NOT NULL, `department_id` INTEGER NOT NULL, `date_assigned_from` DATETIME NOT NULL, `job_title_code` VARCHAR(10) NOT NULL, `date_assigned_to` DATETIME, PRIMARY KEY (`staff_id`, `department_id`), FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` ), FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ) );  ",hard
1699,7779,game_1,"SELECT StuID FROM Student WHERE sex  =  'F' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname  =  ""Football""",Show student ids who are female and play football.,"create table Student (         StuID        INTEGER PRIMARY KEY,         LName        VARCHAR(12),         Fname        VARCHAR(12),         Age      INTEGER,         Sex      VARCHAR(1),         Major        INTEGER,         Advisor      INTEGER,         city_code    VARCHAR(3)  );  create table Video_Games (        GameID           INTEGER PRIMARY KEY,        GName            VARCHAR(40),        GType            VARCHAR(40) );  create table Plays_Games (        StuID                INTEGER,        GameID            INTEGER,        Hours_Played      INTEGER,        FOREIGN KEY(GameID) REFERENCES Video_Games(GameID),        FOREIGN KEY(StuID) REFERENCES Student(StuID) );  create table SportsInfo (   StuID INTEGER,   SportName VARCHAR(32),   HoursPerWeek INTEGER,   GamesPlayed INTEGER,   OnScholarship VARCHAR(1),   FOREIGN KEY(StuID) REFERENCES Student(StuID) );   ",hard
231,1186,geo,"SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  ""mississippi"" );",what are the populations of the states through which the mississippi runs,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );",hard
579,2379,imdb,"SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN tv_series AS t2 ON t2.sid  =  t3.msid WHERE t1.name  =  ""Scott Foley"";","What are the series featuring "" Scott Foley "" ?","PRAGMA foreign_keys = ON; CREATE TABLE ""actor"" ( ""aid"" int, ""gender"" text, ""name"" text, ""nationality"" text, ""birth_city"" text, ""birth_year"" int, primary key(""aid"") );   CREATE TABLE ""copyright"" ( ""id"" int, ""msid"" int, ""cid"" int, primary key(""id"") ); CREATE TABLE ""cast"" ( ""id"" int, ""msid"" int, ""aid"" int, ""role"" int, primary key(""id""), foreign key(""aid"") references `actor`(""aid""), foreign key(""msid"") references `copyright`(""msid"") );  CREATE TABLE ""genre"" ( ""gid"" int, ""genre"" text, primary key(""gid"") );  CREATE TABLE ""classification"" ( ""id"" int, ""msid"" int, ""gid"" int, primary key(""id""), foreign key(""gid"") references `genre`(""gid""), foreign key(""msid"") references `copyright`(""msid"") );  CREATE TABLE ""company"" ( ""id"" int, ""name"" text, ""country_code"" text, primary key(""id"") );   CREATE TABLE ""director"" ( ""did"" int, ""gender"" text, ""name"" text, ""nationality"" text, ""birth_city"" text, ""birth_year"" int, primary key(""did"") );  CREATE TABLE ""producer"" ( ""pid"" int, ""gender"" text, ""name"" text, ""nationality"" text, ""birth_city"" text, ""birth_year"" int, primary key(""pid"") );  CREATE TABLE ""directed_by"" ( ""id"" int, ""msid"" int, ""did"" int, primary key(""id""), foreign key(""msid"") references `copyright`(""msid""), foreign key(""did"") references `director`(""did"") );  CREATE TABLE ""keyword"" ( ""id"" int, ""keyword"" text, primary key(""id"") );  CREATE TABLE ""made_by"" ( ""id"" int, ""msid"" int, ""pid"" int, primary key(""id""), foreign key(""msid"") references `copyright`(""msid""), foreign key(""pid"") references `producer`(""pid"") );  CREATE TABLE ""movie"" ( ""mid"" int, ""title"" text, ""release_year"" int, ""title_aka"" text, ""budget"" text, primary key(""mid"") ); CREATE TABLE ""tags"" ( ""id"" int, ""msid"" int, ""kid"" int, primary key(""id""), foreign key(""msid"") references `copyright`(""msid""), foreign key(""kid"") references `keyword`(""kid"") ); CREATE TABLE ""tv_series"" ( ""sid"" int, ""title"" text, ""release_year"" int, ""num_of_seasons"" int, ""num_of_episodes"" int, ""title_aka"" text, ""budget"" text, primary key(""sid"") ); CREATE TABLE ""writer"" ( ""wid"" int, ""gender"" text, ""name"" int, ""nationality"" int, ""num_of_episodes"" int, ""birth_city"" text, ""birth_year"" int, primary key(""wid"") ); CREATE TABLE ""written_by"" ( ""id"" int, ""msid"" int, ""wid"" int, foreign key(""msid"") references `copyright`(""msid""), foreign key(""wid"") references `writer`(""wid"") );",hard
1220,5706,hospital_1,SELECT name FROM physician EXCEPT SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID,List the name of physicians who never took any appointment.,"-- https://en.wikibooks.org/wiki/SQL_Exercises/The_Hospital  DROP TABLE IF EXISTS Physician; CREATE TABLE Physician (   EmployeeID INTEGER NOT NULL,   Name VARCHAR(30) NOT NULL,   Position VARCHAR(30) NOT NULL,   SSN INTEGER NOT NULL,   CONSTRAINT pk_physician PRIMARY KEY(EmployeeID) );   DROP TABLE IF EXISTS Department; CREATE TABLE Department (   DepartmentID INTEGER NOT NULL,   Name VARCHAR(30) NOT NULL,   Head INTEGER NOT NULL,   CONSTRAINT pk_Department PRIMARY KEY(DepartmentID),   CONSTRAINT fk_Department_Physician_EmployeeID FOREIGN KEY(Head) REFERENCES Physician(EmployeeID) );   DROP TABLE IF EXISTS Affiliated_With; CREATE TABLE Affiliated_With (   Physician INTEGER NOT NULL,   Department INTEGER NOT NULL,   PrimaryAffiliation BOOLEAN NOT NULL,   CONSTRAINT fk_Affiliated_With_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),   CONSTRAINT fk_Affiliated_With_Department_DepartmentID FOREIGN KEY(Department) REFERENCES Department(DepartmentID),   PRIMARY KEY(Physician, Department) );  DROP TABLE IF EXISTS Procedures; CREATE TABLE Procedures (   Code INTEGER PRIMARY KEY NOT NULL,   Name VARCHAR(30) NOT NULL,   Cost REAL NOT NULL );  DROP TABLE IF EXISTS Trained_In; CREATE TABLE Trained_In (   Physician INTEGER NOT NULL,   Treatment INTEGER NOT NULL,   CertificationDate DATETIME NOT NULL,   CertificationExpires DATETIME NOT NULL,   CONSTRAINT fk_Trained_In_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),   CONSTRAINT fk_Trained_In_Procedures_Code FOREIGN KEY(Treatment) REFERENCES Procedures(Code),   PRIMARY KEY(Physician, Treatment) );  DROP TABLE IF EXISTS Patient; CREATE TABLE Patient (   SSN INTEGER PRIMARY KEY NOT NULL,   Name VARCHAR(30) NOT NULL,   Address VARCHAR(30) NOT NULL,   Phone VARCHAR(30) NOT NULL,   InsuranceID INTEGER NOT NULL,   PCP INTEGER NOT NULL,   CONSTRAINT fk_Patient_Physician_EmployeeID FOREIGN KEY(PCP) REFERENCES Physician(EmployeeID) );  DROP TABLE IF EXISTS Nurse; CREATE TABLE Nurse (   EmployeeID INTEGER PRIMARY KEY NOT NULL,   Name VARCHAR(30) NOT NULL,   Position VARCHAR(30) NOT NULL,   Registered BOOLEAN NOT NULL,   SSN INTEGER NOT NULL );  DROP TABLE IF EXISTS Appointment; CREATE TABLE Appointment (   AppointmentID INTEGER PRIMARY KEY NOT NULL,   Patient INTEGER NOT NULL,       PrepNurse INTEGER,   Physician INTEGER NOT NULL,   Start DATETIME NOT NULL,   End DATETIME NOT NULL,   ExaminationRoom TEXT NOT NULL,   CONSTRAINT fk_Appointment_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),   CONSTRAINT fk_Appointment_Nurse_EmployeeID FOREIGN KEY(PrepNurse) REFERENCES Nurse(EmployeeID),   CONSTRAINT fk_Appointment_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID) );  DROP TABLE IF EXISTS Medication; CREATE TABLE Medication (   Code INTEGER PRIMARY KEY NOT NULL,   Name VARCHAR(30) NOT NULL,   Brand VARCHAR(30) NOT NULL,   Description VARCHAR(30) NOT NULL );   DROP TABLE IF EXISTS Prescribes; CREATE TABLE Prescribes (   Physician INTEGER NOT NULL,   Patient INTEGER NOT NULL,    Medication INTEGER NOT NULL,    Date DATETIME NOT NULL,   Appointment INTEGER,     Dose VARCHAR(30) NOT NULL,   PRIMARY KEY(Physician, Patient, Medication, Date),   CONSTRAINT fk_Prescribes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),   CONSTRAINT fk_Prescribes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),   CONSTRAINT fk_Prescribes_Medication_Code FOREIGN KEY(Medication) REFERENCES Medication(Code),   CONSTRAINT fk_Prescribes_Appointment_AppointmentID FOREIGN KEY(Appointment) REFERENCES Appointment(AppointmentID) );  DROP TABLE IF EXISTS Block; CREATE TABLE Block (   BlockFloor INTEGER NOT NULL,   BlockCode INTEGER NOT NULL,   PRIMARY KEY(BlockFloor, BlockCode) );   DROP TABLE IF EXISTS Room; CREATE TABLE Room (   RoomNumber INTEGER PRIMARY KEY NOT NULL,   RoomType VARCHAR(30) NOT NULL,   BlockFloor INTEGER NOT NULL,     BlockCode INTEGER NOT NULL,     Unavailable BOOLEAN NOT NULL,   CONSTRAINT fk_Room_Block_PK FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode) );  DROP TABLE IF EXISTS On_Call; CREATE TABLE On_Call (   Nurse INTEGER NOT NULL,   BlockFloor INTEGER NOT NULL,    BlockCode INTEGER NOT NULL,   OnCallStart DATETIME NOT NULL,   OnCallEnd DATETIME NOT NULL,   PRIMARY KEY(Nurse, BlockFloor, BlockCode, OnCallStart, OnCallEnd),   CONSTRAINT fk_OnCall_Nurse_EmployeeID FOREIGN KEY(Nurse) REFERENCES Nurse(EmployeeID),   CONSTRAINT fk_OnCall_Block_Floor FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode)  );  DROP TABLE IF EXISTS Stay; CREATE TABLE Stay (   StayID INTEGER PRIMARY KEY NOT NULL,   Patient INTEGER NOT NULL,   Room INTEGER NOT NULL,   StayStart DATETIME NOT NULL,   StayEnd DATETIME NOT NULL,   CONSTRAINT fk_Stay_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),   CONSTRAINT fk_Stay_Room_Number FOREIGN KEY(Room) REFERENCES Room(RoomNumber) );  DROP TABLE IF EXISTS Undergoes; CREATE TABLE Undergoes (   Patient INTEGER NOT NULL,   Procedures INTEGER NOT NULL,   Stay INTEGER NOT NULL,   DateUndergoes DATETIME NOT NULL,   Physician INTEGER NOT NULL,   AssistingNurse INTEGER,   PRIMARY KEY(Patient, Procedures, Stay, DateUndergoes),   CONSTRAINT fk_Undergoes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),   CONSTRAINT fk_Undergoes_Procedures_Code FOREIGN KEY(Procedures) REFERENCES Procedures(Code),   CONSTRAINT fk_Undergoes_Stay_StayID FOREIGN KEY(Stay) REFERENCES Stay(StayID),   CONSTRAINT fk_Undergoes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),   CONSTRAINT fk_Undergoes_Nurse_EmployeeID FOREIGN KEY(AssistingNurse) REFERENCES Nurse(EmployeeID) );   ",hard
6,10,concert_singer,"SELECT country ,  count(*) FROM singer GROUP BY country",Show all countries and the number of singers in each country.,"PRAGMA foreign_keys = ON;   CREATE TABLE ""stadium"" ( ""Stadium_ID"" int, ""Location"" text, ""Name"" text, ""Capacity"" int, ""Highest"" int, ""Lowest"" int, ""Average"" int, PRIMARY KEY (""Stadium_ID"") );   CREATE TABLE ""singer"" ( ""Singer_ID"" int, ""Name"" text, ""Country"" text, ""Song_Name"" text, ""Song_release_year"" text, ""Age"" int, ""Is_male"" bool, PRIMARY KEY (""Singer_ID"") );    CREATE TABLE ""concert"" ( ""concert_ID"" int, ""concert_Name"" text, ""Theme"" text, ""Stadium_ID"" text, ""Year"" text, PRIMARY KEY (""concert_ID""), FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"") );    CREATE TABLE ""singer_in_concert"" ( ""concert_ID"" int, ""Singer_ID"" text, PRIMARY KEY (""concert_ID"",""Singer_ID""), FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""), FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"") );  ",medium
1403,4400,csu_1,"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2004 AND T2.campus  =  ""San Francisco State University""","How many faculty lines are there in ""San Francisco State University"" in year 2004?","CREATE TABLE ""Campuses"" ( 	""Id"" INTEGER PRIMARY KEY,  	""Campus"" TEXT,  	""Location"" TEXT,  	""County"" TEXT,  	""Year"" INTEGER  );  CREATE TABLE ""csu_fees"" (  	""Campus"" INTEGER PRIMARY KEY,  	""Year"" INTEGER,  	""CampusFee"" INTEGER, 	FOREIGN KEY (Campus) REFERENCES Campuses(Id) );  CREATE TABLE ""degrees"" (  	""Year"" INTEGER, 	""Campus"" INTEGER,  	""Degrees"" INTEGER, 	PRIMARY KEY (Year, Campus), 	FOREIGN KEY (Campus) REFERENCES Campuses(Id) );    CREATE TABLE ""discipline_enrollments"" (  	""Campus"" INTEGER,  	""Discipline"" INTEGER,  	""Year"" INTEGER,  	""Undergraduate"" INTEGER,  	""Graduate"" INTEGER, 	PRIMARY KEY (Campus, Discipline), 	FOREIGN KEY (Campus) REFERENCES Campuses(Id) );    CREATE TABLE ""enrollments"" (  	""Campus"" INTEGER,  	""Year"" INTEGER,  	""TotalEnrollment_AY"" INTEGER,  	""FTE_AY"" INTEGER, 	PRIMARY KEY(Campus, Year), 	FOREIGN KEY (Campus) REFERENCES Campuses(Id) );  CREATE TABLE ""faculty"" (  	""Campus"" INTEGER,  	""Year"" INTEGER,  	""Faculty"" REAL, 	FOREIGN KEY (Campus) REFERENCES Campuses(Id)  );  ",medium
1330,4201,formula_1,"SELECT forename ,  surname FROM drivers WHERE nationality = ""German""",Find the forename and surname of drivers whose nationality is German?,"BEGIN TRANSACTION; CREATE TABLE IF NOT EXISTS ""circuits"" ( ""circuitId"" INTEGER PRIMARY KEY,   ""circuitRef"" TEXT,   ""name"" TEXT,   ""location"" TEXT,   ""country"" TEXT,   ""lat"" REAL,   ""lng"" REAL,   ""alt"" INTEGER,   ""url"" TEXT ); CREATE TABLE IF NOT EXISTS ""races"" ( ""raceId"" INTEGER PRIMARY KEY,   ""year"" INTEGER,   ""round"" INTEGER,   ""circuitId"" INTEGER,   ""name"" TEXT,   ""date"" TEXT,   ""time"" TEXT,   ""url"" TEXT,   FOREIGN KEY (""circuitId"") REFERENCES ""circuits""(""circuitId"") );  CREATE TABLE IF NOT EXISTS ""drivers"" ( ""driverId"" INTEGER PRIMARY KEY,   ""driverRef"" TEXT,   ""number"" INTEGER,   ""code"" TEXT,   ""forename"" TEXT,   ""surname"" TEXT,   ""dob"" TEXT,   ""nationality"" TEXT,   ""url"" TEXT ); CREATE TABLE IF NOT EXISTS ""status"" ( ""statusId"" INTEGER PRIMARY KEY,   ""status"" TEXT ); CREATE TABLE IF NOT EXISTS ""seasons"" ( ""year"" INTEGER PRIMARY KEY,   ""url"" TEXT ); CREATE TABLE IF NOT EXISTS ""constructors"" ( 	""constructorId"" INTEGER PRIMARY KEY,   ""constructorRef"" TEXT,   ""name"" TEXT,   ""nationality"" TEXT,   ""url"" TEXT ); CREATE TABLE IF NOT EXISTS ""constructorStandings"" ( 	""constructorStandingsId"" INTEGER PRIMARY KEY,   ""raceId"" INTEGER,   ""constructorId"" INTEGER,   ""points"" REAL,   ""position"" INTEGER,   ""positionText"" TEXT,   ""wins"" INTEGER,   FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),   FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId"") ); CREATE TABLE IF NOT EXISTS ""results"" ( ""resultId"" INTEGER PRIMARY KEY,   ""raceId"" INTEGER,   ""driverId"" INTEGER,   ""constructorId"" INTEGER,   ""number"" INTEGER,   ""grid"" INTEGER,   ""position"" INTEGER,   ""positionText"" TEXT,   ""positionOrder"" INTEGER,   ""points"" REAL,   ""laps"" INTEGER,   ""time"" TEXT,   ""milliseconds"" INTEGER,   ""fastestLap"" INTEGER,   ""rank"" INTEGER,   ""fastestLapTime"" TEXT,   ""fastestLapSpeed"" TEXT,   ""statusId"" INTEGER,   FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),   FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),   FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId"") ); CREATE TABLE IF NOT EXISTS ""driverStandings"" ( ""driverStandingsId"" INTEGER PRIMARY KEY,   ""raceId"" INTEGER,   ""driverId"" INTEGER,   ""points"" REAL,   ""position"" INTEGER,   ""positionText"" TEXT,   ""wins"" INTEGER,   FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),   FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId"") ); CREATE TABLE IF NOT EXISTS ""constructorResults"" ( ""constructorResultsId"" INTEGER PRIMARY KEY,   ""raceId"" INTEGER,   ""constructorId"" INTEGER,   ""points"" REAL,   ""status"" REAL,   FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),   FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId"") ); CREATE TABLE IF NOT EXISTS ""qualifying"" ( ""qualifyId"" INTEGER PRIMARY KEY,   ""raceId"" INTEGER,   ""driverId"" INTEGER,   ""constructorId"" INTEGER,   ""number"" INTEGER,   ""position"" INTEGER,   ""q1"" TEXT,   ""q2"" TEXT,   ""q3"" TEXT,   FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),   FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),   FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId"") ); CREATE TABLE IF NOT EXISTS ""pitStops"" ( ""raceId"" INTEGER,   ""driverId"" INTEGER,   ""stop"" INTEGER,   ""lap"" INTEGER,   ""time"" TEXT,   ""duration"" TEXT,   ""milliseconds"" INTEGER,   PRIMARY KEY (""raceId"", ""driverId"", ""stop""),   FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),   FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId"") ); CREATE TABLE IF NOT EXISTS ""lapTimes"" ( ""raceId"" INTEGER,   ""driverId"" INTEGER,   ""lap"" INTEGER,   ""position"" INTEGER,   ""time"" TEXT,   ""milliseconds"" INTEGER,   PRIMARY KEY(""raceId"", ""driverId"", ""lap""),   FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),   FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId"") );COMMIT;",medium
2968,8453,activity_1,"SELECT building FROM Faculty WHERE rank  =  ""Professor"" GROUP BY building HAVING count(*)  >=  10",Show all the buildings that have at least 10 professors.,"create table Activity (   actid INTEGER PRIMARY KEY,   activity_name varchar(25) );  create table Participates_in (   stuid INTEGER,   actid INTEGER,   FOREIGN KEY(stuid) REFERENCES Student(StuID),   FOREIGN KEY(actid) REFERENCES Activity(actid) );  create table Faculty_Participates_in (   FacID INTEGER,   actid INTEGER,   FOREIGN KEY(FacID) REFERENCES Faculty(FacID),   FOREIGN KEY(actid) REFERENCES Activity(actid) );  create table Student (         StuID        INTEGER PRIMARY KEY,         LName        VARCHAR(12),         Fname        VARCHAR(12),         Age      INTEGER,         Sex      VARCHAR(1),         Major        INTEGER,         Advisor      INTEGER,         city_code    VARCHAR(3)  );  create table Faculty (        FacID 	       INTEGER PRIMARY KEY,        Lname		VARCHAR(15),        Fname		VARCHAR(15),        Rank		VARCHAR(15),        Sex		VARCHAR(1),        Phone		INTEGER,        Room		VARCHAR(5),        Building		VARCHAR(13) );   ",medium
2274,6646,local_govt_and_lot,SELECT count(DISTINCT T2.Location_Code) FROM Things AS T1 JOIN Timed_Locations_of_Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.service_details  =  'Unsatisfied',How many distinct locations have the things with service detail 'Unsatisfied' been located in?,"PRAGMA foreign_keys = ON;  CREATE TABLE Customers ( customer_id INTEGER NOT NULL, customer_details VARCHAR(255), PRIMARY KEY (customer_id) ); CREATE TABLE Properties ( property_id INTEGER NOT NULL, property_type_code CHAR(15) NOT NULL, property_address VARCHAR(255), other_details VARCHAR(255), PRIMARY KEY (property_id) ); CREATE TABLE Residents ( resident_id INTEGER NOT NULL, property_id INTEGER NOT NULL, date_moved_in DATETIME NOT NULL, date_moved_out DATETIME NOT NULL, other_details VARCHAR(255), PRIMARY KEY (resident_id, property_id, date_moved_in), FOREIGN KEY (property_id) REFERENCES Properties (property_id) );  CREATE TABLE Organizations ( organization_id INTEGER NOT NULL, parent_organization_id INTEGER, organization_details VARCHAR(255), PRIMARY KEY (organization_id) );  CREATE TABLE Services ( service_id INTEGER NOT NULL, organization_id INTEGER NOT NULL, service_type_code CHAR(15) NOT NULL, service_details VARCHAR(255), PRIMARY KEY (service_id), FOREIGN KEY (organization_id) REFERENCES Organizations (organization_id) ); CREATE TABLE Residents_Services ( resident_id INTEGER NOT NULL, service_id INTEGER NOT NULL, date_moved_in DATETIME, property_id INTEGER, date_requested DATETIME, date_provided DATETIME, other_details VARCHAR(255), PRIMARY KEY (resident_id, service_id), FOREIGN KEY (service_id) REFERENCES Services (service_id), FOREIGN KEY (resident_id, property_id, date_moved_in) REFERENCES Residents (resident_id,property_id,date_moved_in) );  CREATE TABLE Things ( thing_id INTEGER NOT NULL, organization_id INTEGER NOT NULL, Type_of_Thing_Code CHAR(15) NOT NULL, service_type_code CHAR(10) NOT NULL, service_details VARCHAR(255), PRIMARY KEY (thing_id), FOREIGN KEY (organization_id) REFERENCES Organizations (organization_id) ); CREATE TABLE Customer_Events ( Customer_Event_ID INTEGER NOT NULL, customer_id INTEGER, date_moved_in DATETIME, property_id INTEGER, resident_id INTEGER, thing_id INTEGER NOT NULL, PRIMARY KEY (Customer_Event_ID), FOREIGN KEY (thing_id) REFERENCES Things (thing_id), FOREIGN KEY (customer_id) REFERENCES Customers (customer_id), FOREIGN KEY (resident_id, property_id, date_moved_in) REFERENCES Residents (resident_id,property_id,date_moved_in) ); CREATE TABLE Customer_Event_Notes ( Customer_Event_Note_ID INTEGER NOT NULL, Customer_Event_ID INTEGER NOT NULL, service_type_code CHAR(15) NOT NULL, resident_id INTEGER NOT NULL, property_id INTEGER NOT NULL, date_moved_in DATETIME NOT NULL, PRIMARY KEY (Customer_Event_Note_ID), FOREIGN KEY (Customer_Event_ID) REFERENCES Customer_Events (Customer_Event_ID) );  CREATE TABLE Timed_Status_of_Things ( thing_id INTEGER NOT NULL, Date_and_Date DATETIME NOT NULL, Status_of_Thing_Code CHAR(15) NOT NULL, PRIMARY KEY (thing_id, Date_and_Date, Status_of_Thing_Code), FOREIGN KEY (thing_id) REFERENCES Things (thing_id) ); CREATE TABLE Timed_Locations_of_Things ( thing_id INTEGER NOT NULL, Date_and_Time DATETIME NOT NULL, Location_Code CHAR(15) NOT NULL, PRIMARY KEY (thing_id, Date_and_Time, Location_Code), FOREIGN KEY (thing_id) REFERENCES Things (thing_id));   ",medium
297,698,orchestra,"SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != ""Live final""","Return the maximum and minimum shares for performances that do not have the type ""Live final""."," PRAGMA foreign_keys = ON;    CREATE TABLE ""conductor"" ( ""Conductor_ID"" int, ""Name"" text, ""Age"" int, ""Nationality"" text, ""Year_of_Work"" int, PRIMARY KEY (""Conductor_ID"") );  CREATE TABLE ""orchestra"" ( ""Orchestra_ID"" int, ""Orchestra"" text, ""Conductor_ID"" int, ""Record_Company"" text, ""Year_of_Founded"" real, ""Major_Record_Format"" text, PRIMARY KEY (""Orchestra_ID""), FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`) );  CREATE TABLE ""performance"" ( ""Performance_ID"" int, ""Orchestra_ID"" int, ""Type"" text, ""Date"" text, ""Official_ratings_(millions)"" real, ""Weekly_rank"" text, ""Share"" text, PRIMARY KEY (""Performance_ID""), FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`) );  CREATE TABLE ""show"" ( ""Show_ID"" int, ""Performance_ID"" int, ""If_first_show"" bool, ""Result"" text, ""Attendance"" real, FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`) );    ",medium
2142,6285,decoration_competition,"SELECT Leader_Name ,  College_Location FROM college",Show the leader names and locations of colleges.,"PRAGMA foreign_keys = ON;  CREATE TABLE ""college"" ( ""College_ID"" int, ""Name"" text, ""Leader_Name"" text, ""College_Location"" text, PRIMARY KEY (""College_ID"") );    CREATE TABLE ""member"" ( ""Member_ID"" int, ""Name"" text, ""Country"" text, ""College_ID"" int, PRIMARY KEY (""Member_ID""), FOREIGN KEY (""College_ID"") REFERENCES `college`(""College_ID"") );   CREATE TABLE ""round"" ( ""Round_ID"" int, ""Member_ID"" int, ""Decoration_Theme"" text, ""Rank_in_Round"" int, PRIMARY KEY (""Member_ID"",""Round_ID""), FOREIGN KEY (""Member_ID"") REFERENCES ""member""(""Member_ID"") );   ",medium
1649,5004,loan_1,SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1,Find the branch name of the bank that has the most number of customers.,"CREATE TABLE bank ( branch_ID int PRIMARY KEY, bname varchar(20), no_of_customers int, city varchar(10), state varchar(20));   CREATE TABLE customer ( cust_ID varchar(3) PRIMARY KEY, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_ID int, state varchar(20), FOREIGN KEY(branch_ID) REFERENCES bank(branch_ID));   CREATE TABLE loan ( loan_ID varchar(3) PRIMARY KEY, loan_type varchar(15), cust_ID varchar(3), branch_ID varchar(3), amount int, FOREIGN KEY(branch_ID) REFERENCES bank(branch_ID), FOREIGN KEY(Cust_ID) REFERENCES customer(Cust_ID));  ",medium
783,2931,flight_1,SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3,What are the numbers of the shortest flights?,"-- drop table flight cascade constraints; -- drop table aircraft cascade constraints; -- drop table employee cascade constraints; -- drop table certificate cascade constraints;  create table flight( 	flno number(4,0) primary key, 	origin varchar2(20), 	destination varchar2(20), 	distance number(6,0), 	departure_date date, 	arrival_date date, 	price number(7,2),     aid number(9,0),     foreign key(""aid"") references `aircraft`(""aid""));  create table aircraft( 	aid number(9,0) primary key, 	name varchar2(30), 	distance number(6,0));  create table employee( 	eid number(9,0) primary key, 	name varchar2(30), 	salary number(10,2));  create table certificate( 	eid number(9,0), 	aid number(9,0), 	primary key(eid,aid), 	foreign key(""eid"") references `employee`(""eid""), 	foreign key(""aid"") references `aircraft`(""aid""));   ",medium
2683,7737,game_1,"SELECT gtype ,  count(*) FROM Video_games GROUP BY gtype",Show all video game types and the number of video games in each type.,"create table Student (         StuID        INTEGER PRIMARY KEY,         LName        VARCHAR(12),         Fname        VARCHAR(12),         Age      INTEGER,         Sex      VARCHAR(1),         Major        INTEGER,         Advisor      INTEGER,         city_code    VARCHAR(3)  );  create table Video_Games (        GameID           INTEGER PRIMARY KEY,        GName            VARCHAR(40),        GType            VARCHAR(40) );  create table Plays_Games (        StuID                INTEGER,        GameID            INTEGER,        Hours_Played      INTEGER,        FOREIGN KEY(GameID) REFERENCES Video_Games(GameID),        FOREIGN KEY(StuID) REFERENCES Student(StuID) );  create table SportsInfo (   StuID INTEGER,   SportName VARCHAR(32),   HoursPerWeek INTEGER,   GamesPlayed INTEGER,   OnScholarship VARCHAR(1),   FOREIGN KEY(StuID) REFERENCES Student(StuID) );   ",medium
1457,4528,movie_1,"SELECT T2.title ,  T1.rID ,  T1.stars ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.rID",Find the title and star rating of the movie that got the least rating star for each reviewer.,"-- dbext:type=SQLITE:dbname=movie_rating.db  /* Delete the tables if they already exist */ drop table if exists Movie; drop table if exists Reviewer; drop table if exists Rating;  /* Create the schema for our tables */ create table Movie( 	mID int primary key,  	title text,  	year int,  	director text ); create table Reviewer( 	rID int primary key,  	name text);  create table Rating( 	rID int,  	mID int,  	stars int,  	ratingDate date, 	FOREIGN KEY (mID) references Movie(mID), 	FOREIGN KEY (rID) references Reviewer(rID) );  /* Populate the tables with our data */ ",medium
957,3375,phone_1,"SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE t2.Company_name  =  ""Nokia Corporation"" AND T1.Type != ""Text"";","List the hardware model name for the phons that were produced by ""Nokia Corporation"" but whose screen mode type is not Text.","PRAGMA foreign_keys=ON; BEGIN TRANSACTION; CREATE TABLE IF NOT EXISTS ""chip_model"" ( ""Model_name"" text, ""Launch_year"" real, ""RAM_MiB"" real, ""ROM_MiB"" real, ""Slots"" text, ""WiFi"" text, ""Bluetooth"" text, PRIMARY KEY (""Model_name"") ); CREATE TABLE IF NOT EXISTS ""screen_mode"" ( ""Graphics_mode"" real, ""Char_cells"" text, ""Pixels"" text, ""Hardware_colours"" real, ""used_kb"" real, ""map"" text, ""Type"" text, PRIMARY KEY (""Graphics_mode"") ); CREATE TABLE IF NOT EXISTS ""phone"" ( ""Company_name"" text, ""Hardware_Model_name"" text, ""Accreditation_type"" text, ""Accreditation_level"" text, ""Date"" text, ""chip_model"" text, ""screen_mode"" text, PRIMARY KEY(""Hardware_Model_name""), FOREIGN KEY (`screen_mode`) REFERENCES `screen_mode`(`Graphics_mode`), FOREIGN KEY (`chip_model`) REFERENCES `chip_model`(`Model_name`) ); COMMIT;",medium
2436,7069,manufactory_1,"SELECT count(DISTINCT T1.name) ,  T2.Headquarter FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.Headquarter",How many different products are produced in each headquarter city?,"-- LINK: https://en.wikibooks.org/wiki/SQL_Exercises/The_computer_store  CREATE TABLE Manufacturers (   Code INTEGER,   Name VARCHAR(255) NOT NULL,   Headquarter VARCHAR(255) NOT NULL,   Founder VARCHAR(255) NOT NULL,   Revenue REAL,   PRIMARY KEY (Code)    );  CREATE TABLE Products (   Code INTEGER,   Name VARCHAR(255) NOT NULL ,   Price DECIMAL NOT NULL ,   Manufacturer INTEGER NOT NULL,   PRIMARY KEY (Code),    FOREIGN KEY (Manufacturer) REFERENCES Manufacturers(Code) );  ",medium
558,2174,academic,"SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  ""PVLDB"";",return me the papers on PVLDB .,"PRAGMA foreign_keys = ON; CREATE TABLE ""author"" ( ""aid"" int, ""homepage"" text, ""name"" text, ""oid"" int, primary key(""aid"") ); CREATE TABLE ""conference"" ( ""cid"" int, ""homepage"" text, ""name"" text, primary key (""cid"") ); CREATE TABLE ""domain"" ( ""did"" int, ""name"" text, primary key (""did"") ); CREATE TABLE ""domain_author"" ( ""aid"" int,  ""did"" int, primary key (""did"", ""aid""), foreign key(""aid"") references `author`(""aid""), foreign key(""did"") references `domain`(""did"") );  CREATE TABLE ""domain_conference"" ( ""cid"" int, ""did"" int, primary key (""did"", ""cid""), foreign key(""cid"") references `conference`(""cid""), foreign key(""did"") references `domain`(""did"") ); CREATE TABLE ""journal"" ( ""homepage"" text, ""jid"" int, ""name"" text, primary key(""jid"") ); CREATE TABLE ""domain_journal"" ( ""did"" int, ""jid"" int, primary key (""did"", ""jid""), foreign key(""jid"") references ""journal""(""jid""), foreign key(""did"") references ""domain""(""did"") ); CREATE TABLE ""keyword"" ( ""keyword"" text, ""kid"" int, primary key(""kid"") ); CREATE TABLE ""domain_keyword"" ( ""did"" int, ""kid"" int, primary key (""did"", ""kid""), foreign key(""kid"") references ""keyword""(""kid""), foreign key(""did"") references ""domain""(""did"") ); CREATE TABLE ""publication"" ( ""abstract"" text, ""cid"" text, ""citation_num"" int, ""jid"" int, ""pid"" int, ""reference_num"" int, ""title"" text, ""year"" int, primary key(""pid""), foreign key(""jid"") references ""journal""(""jid""), foreign key(""cid"") references ""conference""(""cid"") ); CREATE TABLE ""domain_publication"" ( ""did"" int, ""pid"" int, primary key (""did"", ""pid""), foreign key(""pid"") references ""publication""(""pid""), foreign key(""did"") references ""domain""(""did"") );  CREATE TABLE ""organization"" ( ""continent"" text, ""homepage"" text, ""name"" text, ""oid"" int, primary key(""oid"") );  CREATE TABLE ""publication_keyword"" ( ""pid"" int, ""kid"" int, primary key (""kid"", ""pid""), foreign key(""pid"") references ""publication""(""pid""), foreign key(""kid"") references ""keyword""(""kid"") ); CREATE TABLE ""writes"" ( ""aid"" int, ""pid"" int, primary key (""aid"", ""pid""), foreign key(""pid"") references ""publication""(""pid""), foreign key(""aid"") references ""author""(""aid"") ); CREATE TABLE ""cite"" ( ""cited"" int, ""citing""  int, foreign key(""cited"") references ""publication""(""pid""), foreign key(""citing"") references ""publication""(""pid"") );",medium
705,2780,book_2,"SELECT T1.Title ,  T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID",Show the title and publication dates of books.,"PRAGMA foreign_keys = ON;  CREATE TABLE ""publication"" ( ""Publication_ID"" int, ""Book_ID"" int, ""Publisher"" text, ""Publication_Date"" text, ""Price"" real, PRIMARY KEY (""Publication_ID""), FOREIGN KEY (""Book_ID"") REFERENCES ""book""(""Book_ID"") );  CREATE TABLE ""book"" ( ""Book_ID"" int, ""Title"" text, ""Issues"" real, ""Writer"" text, PRIMARY KEY (""Book_ID"") );   ",medium
2798,8096,flight_company,"SELECT count(*) ,  country FROM airport GROUP BY country",how many airports are there in each country?,"PRAGMA foreign_keys = ON;  CREATE TABLE ""airport"" ( ""id"" int, ""City"" text, ""Country"" text, ""IATA"" text, ""ICAO"" text, ""name"" text, primary key(""id"") );   CREATE TABLE ""operate_company"" ( ""id"" int, ""name"" text, ""Type"" text, ""Principal_activities"" text, ""Incorporated_in"" text, ""Group_Equity_Shareholding"" real, primary key (""id"") );  CREATE TABLE ""flight"" ( ""id"" int, ""Vehicle_Flight_number"" text, ""Date"" text, ""Pilot"" text, ""Velocity"" real, ""Altitude"" real, ""airport_id"" int, ""company_id"" int, primary key (""id""), foreign key (""airport_id"") references `airport`(""id""), foreign key (""company_id"") references `operate_company`(""id"") );    ",medium
1537,4688,party_host,"SELECT Party_Theme ,  LOCATION FROM party",What are the themes and locations of parties?," PRAGMA foreign_keys = ON;  CREATE TABLE ""party"" ( ""Party_ID"" int, ""Party_Theme"" text, ""Location"" text, ""First_year"" text, ""Last_year"" text, ""Number_of_hosts"" int, PRIMARY KEY (""Party_ID"") );  CREATE TABLE ""host"" ( ""Host_ID"" int, ""Name"" text, ""Nationality"" text, ""Age"" text, PRIMARY KEY (""Host_ID"") );  CREATE TABLE ""party_host"" ( ""Party_ID"" int, ""Host_ID"" int, ""Is_Main_in_Charge"" bool, PRIMARY KEY (""Party_ID"",""Host_ID""), FOREIGN KEY (""Host_ID"") REFERENCES `host`(""Host_ID""), FOREIGN KEY (""Party_ID"") REFERENCES `party`(""Party_ID"") );  ",medium
2819,8137,cre_Docs_and_Epenses,"SELECT T1.statement_details ,  T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id  =  T2.document_id WHERE T1.statement_details  =  'Private Project'",Show the statement detail and the corresponding document name for the statement with detail 'Private Project'.,"PRAGMA foreign_keys = ON;  CREATE TABLE Ref_Document_Types ( Document_Type_Code CHAR(15) NOT NULL, Document_Type_Name VARCHAR(255) NOT NULL, Document_Type_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Document_Type_Code) ); CREATE TABLE Ref_Budget_Codes ( Budget_Type_Code CHAR(15) NOT NULL, Budget_Type_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Budget_Type_Code) ); CREATE TABLE Projects ( Project_ID INTEGER NOT NULL, Project_Details VARCHAR(255), PRIMARY KEY (Project_ID) ); CREATE TABLE Documents ( Document_ID INTEGER NOT NULL, Document_Type_Code CHAR(15) NOT NULL, Project_ID INTEGER NOT NULL, Document_Date DATETIME, Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Document_ID), FOREIGN KEY (Document_Type_Code) REFERENCES Ref_Document_Types (Document_Type_Code), FOREIGN KEY (Project_ID) REFERENCES Projects (Project_ID) ); CREATE TABLE Statements ( Statement_ID INTEGER NOT NULL, Statement_Details VARCHAR(255), PRIMARY KEY (Statement_ID), FOREIGN KEY (Statement_ID) REFERENCES Documents (Document_ID) ); CREATE TABLE Documents_with_Expenses ( Document_ID INTEGER NOT NULL, Budget_Type_Code CHAR(15) NOT NULL, Document_Details VARCHAR(255), PRIMARY KEY (Document_ID), FOREIGN KEY (Budget_Type_Code) REFERENCES Ref_Budget_Codes (Budget_Type_Code), FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID) ); CREATE TABLE Accounts ( Account_ID INTEGER NOT NULL, Statement_ID INTEGER NOT NULL, Account_Details VARCHAR(255), PRIMARY KEY (Account_ID), FOREIGN KEY (Statement_ID) REFERENCES Statements (Statement_ID) ); ",medium
1993,5849,student_1,"SELECT DISTINCT firstname ,  lastname FROM teachers",What are the first name and last name of all the teachers?,"CREATE TABLE ""list"" (  	""LastName"" TEXT,  	""FirstName"" TEXT,  	""Grade"" INTEGER,  	""Classroom"" INTEGER, 	PRIMARY KEY(LastName, FirstName) ); CREATE TABLE ""teachers"" (  	""LastName"" TEXT,  	""FirstName"" TEXT,  	""Classroom"" INTEGER, 	PRIMARY KEY(LastName, FirstName) );",medium
927,3313,university_basketball,"SELECT school ,  nickname FROM university ORDER BY founded","What are the different schools and their nicknames, ordered by their founding years?","CREATE TABLE ""basketball_match"" ( ""Team_ID"" int, ""School_ID"" int, ""Team_Name"" text, ""ACC_Regular_Season"" text, ""ACC_Percent"" text, ""ACC_Home"" text, ""ACC_Road"" text, ""All_Games"" text, ""All_Games_Percent"" int, ""All_Home"" text, ""All_Road"" text, ""All_Neutral"" text, PRIMARY KEY (""Team_ID""), FOREIGN KEY (`School_ID`) REFERENCES `university`(`School_ID`) );  CREATE TABLE ""university"" ( ""School_ID"" int, ""School"" text, ""Location"" text, ""Founded"" real, ""Affiliation"" text, ""Enrollment"" real, ""Nickname"" text, ""Primary_conference"" text, PRIMARY KEY (""School_ID"") );  ",medium
1126,3738,customers_and_invoices,"SELECT transaction_type ,  sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type",Show the transaction types and the total amount of transactions.,"PRAGMA foreign_keys = ON; CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_first_name` VARCHAR(50), `customer_middle_initial` VARCHAR(1), `customer_last_name` VARCHAR(50), `gender` VARCHAR(1), `email_address` VARCHAR(255), `login_name` VARCHAR(80), `login_password` VARCHAR(20), `phone_number` VARCHAR(255), `town_city` VARCHAR(50), `state_county_province` VARCHAR(50), `country` VARCHAR(50) );  CREATE TABLE `Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `date_order_placed` DATETIME NOT NULL, `order_details` VARCHAR(255), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) ); CREATE TABLE `Invoices` ( `invoice_number` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `invoice_date` DATETIME, FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ) ); CREATE TABLE `Accounts` ( `account_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `date_account_opened` DATETIME, `account_name` VARCHAR(50), `other_account_details` VARCHAR(255), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) );    CREATE TABLE `Product_Categories` ( `production_type_code` VARCHAR(15) PRIMARY KEY, `product_type_description` VARCHAR(80), `vat_rating` DECIMAL(19,4) ); CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `parent_product_id` INTEGER, `production_type_code` VARCHAR(15) NOT NULL, `unit_price` DECIMAL(19,4), `product_name` VARCHAR(80), `product_color` VARCHAR(20), `product_size` VARCHAR(20), FOREIGN KEY (`production_type_code` ) REFERENCES `Product_Categories`(`production_type_code` ) );  CREATE TABLE `Financial_Transactions` ( `transaction_id` INTEGER NOT NULL , `account_id` INTEGER NOT NULL, `invoice_number` INTEGER, `transaction_type` VARCHAR(15) NOT NULL, `transaction_date` DATETIME, `transaction_amount` DECIMAL(19,4), `transaction_comment` VARCHAR(255), `other_transaction_details` VARCHAR(255), FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ), FOREIGN KEY (`account_id` ) REFERENCES `Accounts`(`account_id` ) ); CREATE TABLE `Order_Items` ( `order_item_id` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, `product_quantity` VARCHAR(50), `other_order_item_details` VARCHAR(255), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ), FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ) );   CREATE TABLE `Invoice_Line_Items` ( `order_item_id` INTEGER NOT NULL, `invoice_number` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, `product_title` VARCHAR(80), `product_quantity` VARCHAR(50), `product_price` DECIMAL(19,4), `derived_product_cost` DECIMAL(19,4), `derived_vat_payable` DECIMAL(19,4), `derived_total_cost` DECIMAL(19,4), FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ), FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) ); ",medium
2031,5916,film_rank,"SELECT max(Number_cities) ,  min(Number_cities) FROM market",What are the maximum and minimum number of cities in all markets.," PRAGMA foreign_keys = ON;    CREATE TABLE ""film"" ( ""Film_ID"" int, ""Title"" text, ""Studio"" text, ""Director"" text, ""Gross_in_dollar"" int, PRIMARY KEY (""Film_ID"") );   CREATE TABLE ""market"" ( ""Market_ID"" int, ""Country"" text, ""Number_cities"" int, PRIMARY KEY (""Market_ID"") );  CREATE TABLE ""film_market_estimation"" ( ""Estimation_ID"" int, ""Low_Estimate"" real, ""High_Estimate"" real, ""Film_ID"" int, ""Type"" text, ""Market_ID"" int, ""Year"" int, PRIMARY KEY (""Estimation_ID""), FOREIGN KEY (""Film_ID"") REFERENCES film(""Film_ID""), FOREIGN KEY (""Market_ID"") REFERENCES market(""Market_ID"") );   ",medium
1488,4603,inn_1,"SELECT kids FROM Reservations WHERE FirstName = ""ROY"" AND LastName  =  ""SWEAZY"";",Find the number of kids staying in the rooms reserved by a person called ROY SWEAZ.,"CREATE TABLE ""Rooms"" (  	""RoomId"" TEXT PRIMARY KEY, 	""roomName"" TEXT,  	""beds"" INTEGER,  	""bedType"" TEXT,  	""maxOccupancy"" INTEGER,  	""basePrice"" INTEGER,  	""decor"" TEXT  );  CREATE TABLE ""Reservations"" (  	""Code"" INTEGER PRIMARY KEY,  	""Room"" TEXT,  	""CheckIn"" TEXT,  	""CheckOut"" TEXT,  	""Rate"" REAL,  	""LastName"" TEXT,  	""FirstName"" TEXT,  	""Adults"" INTEGER,  	""Kids"" INTEGER, 	FOREIGN KEY (Room) REFERENCES Rooms(RoomId) ); ",medium
2032,5917,film_rank,"SELECT max(Number_cities) ,  min(Number_cities) FROM market",Return the maximum and minimum number of cities across all markets.," PRAGMA foreign_keys = ON;    CREATE TABLE ""film"" ( ""Film_ID"" int, ""Title"" text, ""Studio"" text, ""Director"" text, ""Gross_in_dollar"" int, PRIMARY KEY (""Film_ID"") );   CREATE TABLE ""market"" ( ""Market_ID"" int, ""Country"" text, ""Number_cities"" int, PRIMARY KEY (""Market_ID"") );  CREATE TABLE ""film_market_estimation"" ( ""Estimation_ID"" int, ""Low_Estimate"" real, ""High_Estimate"" real, ""Film_ID"" int, ""Type"" text, ""Market_ID"" int, ""Year"" int, PRIMARY KEY (""Estimation_ID""), FOREIGN KEY (""Film_ID"") REFERENCES film(""Film_ID""), FOREIGN KEY (""Market_ID"") REFERENCES market(""Market_ID"") );   ",medium
602,2439,restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t1.name  =  ""jamerican cuisine"";",where is jamerican cuisine ?,"PRAGMA foreign_keys = ON; CREATE TABLE ""GEOGRAPHIC"" ( ""CITY_NAME"" text, ""COUNTY"" text, ""REGION"" text, primary key(""CITY_NAME"") ); CREATE TABLE ""RESTAURANT"" ( ""ID"" int, ""NAME"" text, ""FOOD_TYPE"" text, ""CITY_NAME"" text, ""RATING"" real, primary key(""ID""), foreign key (""CITY_NAME"") references `GEOGRAPHIC`(""CITY_NAME"") ); CREATE TABLE ""LOCATION"" ( ""RESTAURANT_ID"" int, ""HOUSE_NUMBER"" int, ""STREET_NAME"" text, ""CITY_NAME"" text, primary key(""RESTAURANT_ID""), foreign key (""CITY_NAME"") references `GEOGRAPHIC`(""CITY_NAME"") foreign key (""RESTAURANT_ID"") references `RESTAURANT`(""RESTAURANT_ID"") );",medium
959,3377,phone_1,"SELECT Accreditation_type ,  count(*) FROM phone GROUP BY Accreditation_type",Find the number of phones for each accreditation type.,"PRAGMA foreign_keys=ON; BEGIN TRANSACTION; CREATE TABLE IF NOT EXISTS ""chip_model"" ( ""Model_name"" text, ""Launch_year"" real, ""RAM_MiB"" real, ""ROM_MiB"" real, ""Slots"" text, ""WiFi"" text, ""Bluetooth"" text, PRIMARY KEY (""Model_name"") ); CREATE TABLE IF NOT EXISTS ""screen_mode"" ( ""Graphics_mode"" real, ""Char_cells"" text, ""Pixels"" text, ""Hardware_colours"" real, ""used_kb"" real, ""map"" text, ""Type"" text, PRIMARY KEY (""Graphics_mode"") ); CREATE TABLE IF NOT EXISTS ""phone"" ( ""Company_name"" text, ""Hardware_Model_name"" text, ""Accreditation_type"" text, ""Accreditation_level"" text, ""Date"" text, ""chip_model"" text, ""screen_mode"" text, PRIMARY KEY(""Hardware_Model_name""), FOREIGN KEY (`screen_mode`) REFERENCES `screen_mode`(`Graphics_mode`), FOREIGN KEY (`chip_model`) REFERENCES `chip_model`(`Model_name`) ); COMMIT;",medium
1853,5484,baseball_1,SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 1907 AND T2.park_name = 'Columbia Park';,"Count the number of games taken place in park ""Columbia Park"" in 1907.","PRAGMA foreign_keys=OFF; BEGIN TRANSACTION; CREATE TABLE all_star (     player_id TEXT,     year INTEGER,     game_num INTEGER,     game_id TEXT,     team_id TEXT,     league_id TEXT,     gp NUMERIC,     starting_pos NUMERIC,     foreign key (player_id) references player(player_id) ); CREATE TABLE appearances (     year INTEGER,     team_id TEXT,     league_id TEXT,     player_id TEXT,     g_all NUMERIC,     gs NUMERIC,     g_batting INTEGER,     g_defense NUMERIC,     g_p INTEGER,     g_c INTEGER,     g_1b INTEGER,     g_2b INTEGER,     g_3b INTEGER,     g_ss INTEGER,     g_lf INTEGER,     g_cf INTEGER,     g_rf INTEGER,     g_of INTEGER,     g_dh NUMERIC,     g_ph NUMERIC,     g_pr NUMERIC,     foreign key (team_id) references team(team_id),     foreign key (player_id) references player(player_id) ); CREATE TABLE manager_award (     player_id TEXT,     award_id TEXT,     year INTEGER,     league_id TEXT,     tie TEXT,     notes NUMERIC,     foreign key (player_id) references player(player_id) ); CREATE TABLE player_award (  	player_id TEXT,  	award_id TEXT,  	year INTEGER,  	league_id TEXT,     	tie TEXT,     	notes TEXT, 	foreign key (player_id) references player(player_id) ); CREATE TABLE manager_award_vote (     award_id TEXT,     year INTEGER,     league_id TEXT,     player_id TEXT,     points_won INTEGER,     points_max INTEGER,     votes_first INTEGER); CREATE TABLE player_award_vote (     award_id TEXT,     year INTEGER,     league_id TEXT,     player_id TEXT,     points_won NUMERIC,     points_max INTEGER,     votes_first NUMERIC,    foreign key (player_id) references player(player_id) ); CREATE TABLE batting ( player_id TEXT, year INTEGER, stint INTEGER, team_id TEXT, league_id TEXT, g INTEGER, ab NUMERIC,     r NUMERIC,     h NUMERIC,     double NUMERIC,     triple NUMERIC,     hr NUMERIC,     rbi NUMERIC,     sb NUMERIC,     cs NUMERIC,     bb NUMERIC,     so NUMERIC,     ibb NUMERIC,     hbp NUMERIC,     sh NUMERIC,     sf NUMERIC,     g_idp NUMERIC, foreign key (player_id) references player(player_id) ); CREATE TABLE batting_postseason (     year INTEGER,     round TEXT,     player_id TEXT,     team_id TEXT,     league_id TEXT,     g INTEGER,     ab INTEGER,     r INTEGER,     h INTEGER,     double INTEGER,     triple INTEGER,     hr INTEGER,     rbi INTEGER,     sb INTEGER,     cs NUMERIC,     bb INTEGER,     so INTEGER,     ibb NUMERIC,     hbp NUMERIC,     sh NUMERIC,     sf NUMERIC,     g_idp NUMERIC, 	foreign key (player_id) references player(player_id), 	foreign key (team_id) references team(team_id) ); CREATE TABLE player_college ( player_id TEXT,     college_id TEXT,     year INTEGER, 	foreign key (player_id) references player(player_id), 	foreign key (college_id) references college(college_id) ); CREATE TABLE fielding (     player_id TEXT,     year INTEGER,     stint INTEGER,     team_id TEXT,     league_id TEXT,     pos TEXT,     g INTEGER,     gs NUMERIC,     inn_outs NUMERIC,     po NUMERIC,     a NUMERIC,     e NUMERIC,     dp NUMERIC,     pb NUMERIC,     wp NUMERIC,     sb NUMERIC,     cs NUMERIC,     zr NUMERIC, 	foreign key (player_id) references player(player_id) ); CREATE TABLE fielding_outfield (     player_id TEXT,     year INTEGER,     stint INTEGER,     glf NUMERIC,     gcf NUMERIC,     grf NUMERIC, 	foreign key (player_id) references player(player_id) ); CREATE TABLE fielding_postseason (     player_id TEXT,     year INTEGER,     team_id TEXT,     league_id TEXT,     round TEXT,     pos TEXT,     g INTEGER,     gs NUMERIC,     inn_outs NUMERIC,     po INTEGER,     a INTEGER,     e INTEGER,     dp INTEGER,     tp INTEGER,     pb NUMERIC,     sb NUMERIC,     cs NUMERIC, 	foreign key (player_id) references player(player_id), 	foreign key (team_id) references player(team_id) ); CREATE TABLE hall_of_fame (     player_id TEXT,     yearid INTEGER,     votedby TEXT,     ballots NUMERIC,     needed NUMERIC,     votes NUMERIC,     inducted TEXT,     category TEXT,     needed_note TEXT, 	foreign key (player_id) references player(player_id) ); CREATE TABLE home_game (     year INTEGER,     league_id TEXT,     team_id TEXT,     park_id TEXT,     span_first TEXT,     span_last TEXT,     games INTEGER,     openings INTEGER,     attendance INTEGER, 	foreign key (team_id) references team(team_id), 	foreign key (park_id) references park(park_id) ); CREATE TABLE manager (     player_id TEXT,     year INTEGER,     team_id TEXT,     league_id TEXT,     inseason INTEGER,     g INTEGER,     w INTEGER,     l INTEGER,     rank NUMERIC,     plyr_mgr TEXT, 	foreign key (team_id) references team(team_id) ); CREATE TABLE manager_half (     player_id TEXT,     year INTEGER,     team_id TEXT,     league_id TEXT,     inseason INTEGER,     half INTEGER,     g INTEGER,     w INTEGER,     l INTEGER,     rank INTEGER, 	foreign key (team_id) references team(team_id) ); CREATE TABLE player (     player_id TEXT,     birth_year NUMERIC,     birth_month NUMERIC,     birth_day NUMERIC,     birth_country TEXT,     birth_state TEXT,     birth_city TEXT,     death_year NUMERIC,     death_month NUMERIC,     death_day NUMERIC,     death_country TEXT,     death_state TEXT,     death_city TEXT,     name_first TEXT,     name_last TEXT,     name_given TEXT,     weight NUMERIC,     height NUMERIC,     bats TEXT,     throws TEXT,     debut TEXT,     final_game TEXT,     retro_id TEXT,     bbref_id TEXT); Macomb County','Steve','Gromek','Stephen Joseph',180,74,'B','R','1941-08-18','1957-07-25','groms101','gromest01'); Calhoun Cty','Charlie','Grover','Charles Byrd',185,73,'L','R','1913-09-09','1913-09-12','grovc101','grovech01'); CREATE TABLE park (     park_id TEXT,     park_name TEXT,     park_alias TEXT,     city TEXT,     state TEXT,     country TEXT); Anaheim Stadium','Anaheim','CA','US'); Ameriquest Field','Arlington','TX','US'); Union Grounds','Chicago','IL','US'); Cubs Park','Chicago','IL','US'); Comiskey Park II','Chicago','IL','US'); Briggs Stadium','Detroit','MI','US'); Astros Field','Houston','TX','US'); Pro Player Stadium; Dolphin Stadium; LandShark Stadium','Miami','FL','US'); SBC Park','San Francisco','CA','US'); CREATE TABLE pitching (     player_id TEXT,     year INTEGER,     stint INTEGER,     team_id TEXT,     league_id TEXT,     w INTEGER,     l INTEGER,     g INTEGER,     gs INTEGER,     cg INTEGER,     sho INTEGER,     sv INTEGER,     ipouts NUMERIC,     h INTEGER,     er INTEGER,     hr INTEGER,     bb INTEGER,     so INTEGER,     baopp NUMERIC,     era NUMERIC,     ibb NUMERIC,     wp NUMERIC,     hbp NUMERIC,     bk INTEGER,     bfp NUMERIC,     gf NUMERIC,     r INTEGER,     sh NUMERIC,     sf NUMERIC,     g_idp NUMERIC); CREATE TABLE pitching_postseason (     player_id TEXT,     year INTEGER,     round TEXT,     team_id TEXT,     league_id TEXT,     w INTEGER,     l INTEGER,     g INTEGER,     gs INTEGER,     cg INTEGER,     sho INTEGER,     sv INTEGER,     ipouts INTEGER,     h INTEGER,     er INTEGER,     hr INTEGER,     bb INTEGER,     so INTEGER,     baopp TEXT,     era NUMERIC,     ibb NUMERIC,     wp NUMERIC,     hbp NUMERIC,     bk NUMERIC,     bfp NUMERIC,     gf INTEGER,     r INTEGER,     sh NUMERIC,     sf NUMERIC,     g_idp NUMERIC); CREATE TABLE salary (     year INTEGER,     team_id TEXT,     league_id TEXT,     player_id TEXT,     salary INTEGER); CREATE TABLE college (     college_id TEXT,     name_full TEXT,     city TEXT,     state TEXT,     country TEXT); CREATE TABLE postseason (     year INTEGER,     round TEXT,     team_id_winner TEXT,     league_id_winner TEXT,     team_id_loser TEXT,     league_id_loser TEXT,     wins INTEGER,     losses INTEGER,     ties INTEGER); CREATE TABLE team (     year INTEGER,     league_id TEXT,     team_id TEXT,     franchise_id TEXT,     div_id TEXT,     rank INTEGER,     g INTEGER,     ghome NUMERIC,     w INTEGER,     l INTEGER,     div_win TEXT,     wc_win TEXT,     lg_win TEXT,     ws_win TEXT,     r INTEGER,     ab INTEGER,     h INTEGER,     double INTEGER,     triple INTEGER,     hr INTEGER,     bb INTEGER,     so NUMERIC,     sb NUMERIC,     cs NUMERIC,     hbp NUMERIC,     sf NUMERIC,     ra INTEGER,     er INTEGER,     era NUMERIC,     cg INTEGER,     sho INTEGER,     sv INTEGER,     ipouts INTEGER,     ha INTEGER,     hra INTEGER,     bba INTEGER,     soa INTEGER,     e INTEGER,     dp NUMERIC,     fp NUMERIC,     name TEXT,     park TEXT,     attendance NUMERIC,     bpf INTEGER,     ppf INTEGER,     team_id_br TEXT,     team_id_lahman45 TEXT,     team_id_retro TEXT); CREATE TABLE team_franchise (     franchise_id TEXT,     franchise_name TEXT,     active TEXT,     na_assoc TEXT); CREATE TABLE team_half (     year INTEGER,     league_id TEXT,     team_id TEXT,     half INTEGER,     div_id TEXT,     div_win TEXT,     rank INTEGER,     g INTEGER,     w INTEGER,     l INTEGER); COMMIT;",medium
1004,3472,climbing,"SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  ""Uganda""",What are the times used by climbers who climbed mountains in the country of Uganda?,"PRAGMA foreign_keys = ON;  CREATE TABLE ""mountain"" ( ""Mountain_ID"" int, ""Name"" text, ""Height"" real, ""Prominence"" real, ""Range"" text, ""Country"" text, PRIMARY KEY (""Mountain_ID"") );  CREATE TABLE ""climber"" ( ""Climber_ID"" int, ""Name"" text, ""Country"" text, ""Time"" text, ""Points"" real, ""Mountain_ID"" int, PRIMARY KEY (""Climber_ID""), FOREIGN KEY (""Mountain_ID"") REFERENCES ""mountain""(""Mountain_ID"") );  ",medium
1452,4513,movie_1,"SELECT T1.title ,  T1.year FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title","For each director who directed more than one movie, what are the titles and dates of release for all those movies?","-- dbext:type=SQLITE:dbname=movie_rating.db  /* Delete the tables if they already exist */ drop table if exists Movie; drop table if exists Reviewer; drop table if exists Rating;  /* Create the schema for our tables */ create table Movie( 	mID int primary key,  	title text,  	year int,  	director text ); create table Reviewer( 	rID int primary key,  	name text);  create table Rating( 	rID int,  	mID int,  	stars int,  	ratingDate date, 	FOREIGN KEY (mID) references Movie(mID), 	FOREIGN KEY (rID) references Reviewer(rID) );  /* Populate the tables with our data */ ",medium
2239,6540,department_store,"SELECT product_type_code ,  max(product_price) ,  min(product_price) FROM products GROUP BY product_type_code",What are the maximum and minimum product prices for each product type?,"PRAGMA foreign_keys = ON; CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `address_details` VARCHAR(255) );   INSERT INTO Addresses (`address_id`, `address_details`) VALUES (1, '28481 Crist Circle East Burdettestad, IA 21232'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (2, '0292 Mitchel Pike Port Abefurt, IA 84402-4249'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (3, '4062 Mante Place West Lindsey, DE 76199-8015'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (4, '99666 Julie Junction Marvinburgh, OH 16085-1623'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (5, '195 Mara Rue Jenkinsmouth, OK 22345'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (6, '11784 Stehr Road Port Isaac, NV 61159'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (7, '69482 Renner Ville Suite 653 Langworthborough, OH 95195'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (8, '36594 O''Keefe Lock New Cali, RI 42319'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (9, '7181 Wuckert Port Apt. 571 Lake Zariaburgh, IL 98085'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (10, '92594 Marvin Trafficway Pourosfurt, IA 98649'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (11, '0258 Kessler Mountains Suite 688 Mooreside, ME 41586-5022'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (12, '69275 Mose Drive Wilkinsonstad, CO 79055-7622'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (13, '8207 Morissette Lakes East Rheaview, ID 47493'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (14, '145 Alice Corners Willmsport, NV 36680'); INSERT INTO Addresses (`address_id`, `address_details`) VALUES (15, '521 Molly Harbors Apt. 567 Reingerland, HI 97099-1005');  CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `staff_gender` VARCHAR(1), `staff_name` VARCHAR(80) );  CREATE TABLE `Suppliers` ( `supplier_id` INTEGER PRIMARY KEY, `supplier_name` VARCHAR(80), `supplier_phone` VARCHAR(80) );  CREATE TABLE `Department_Store_Chain` ( `dept_store_chain_id` INTEGER PRIMARY KEY, `dept_store_chain_name` VARCHAR(80) );  CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `payment_method_code` VARCHAR(10) NOT NULL, `customer_code` VARCHAR(20), `customer_name` VARCHAR(80), `customer_address` VARCHAR(255), `customer_phone` VARCHAR(80), `customer_email` VARCHAR(80) ); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (1, 'Credit Card', '401', 'Ahmed', '75099 Tremblay Port Apt. 163 South Norrisland, SC 80546', '254-072-4068x33935', 'margarett.vonrueden@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (2, 'Credit Card', '665', 'Chauncey', '8408 Lindsay Court East Dasiabury, IL 72656-3552', '+41(8)1897032009', 'stiedemann.sigrid@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (3, 'Direct Debit', '844', 'Lukas', '7162 Rodolfo Knoll Apt. 502 Lake Annalise, TN 35791-8871', '197-417-3557', 'joelle.monahan@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (4, 'Direct Debit', '662', 'Lexus', '9581 Will Flat Suite 272 East Cathryn, WY 30751-4404', '+08(3)8056580281', 'gbrekke@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (5, 'Credit Card', '848', 'Tara', '5065 Mraz Fields Apt. 041 East Chris, NH 41624', '1-064-498-6609x051', 'nicholas44@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (6, 'Credit Card', '916', 'Jon', '841 Goyette Unions South Dionbury, NC 62021', '(443)013-3112x528', 'cconroy@example.net'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (7, 'Credit Card', '172', 'Cristobal', '8327 Christiansen Lakes Suite 409 Schneiderland, IA 93624', '877-150-8674x63517', 'shawna.cummerata@example.net'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (8, 'Direct Debit', '927', 'Adah', '5049 Hand Land Coymouth, IL 97300-7731', '1-695-364-7586x59256', 'kathlyn24@example.org'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (9, 'Credit Card', '808', 'Yasmeen', '3558 Witting Meadow Apt. 483 Lake Moriahbury, OH 91556-2122', '587.398.2400x31176', 'ludwig54@example.net'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (10, 'Credit Card', '887', 'Karson', '7308 Joan Lake Suite 346 Lizethtown, DE 56522', '857-844-9339x40140', 'moriah91@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (11, 'Direct Debit', '611', 'Cordell', '362 Fisher Forge Apt. 900 New Mckenna, CA 98525-5674', '(730)934-8249', 'qstokes@example.org'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (12, 'Credit Card', '182', 'Darron', '84445 Elinor Glens Port Zita, SD 39410', '117.822.3577', 'gwisozk@example.net'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (13, 'Credit Card', '589', 'Kenya', '338 Floy Mountains Suite 589 Yesseniaville, TN 60847', '08023680831', 'maxime86@example.net'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (14, 'Direct Debit', '240', 'Abbie', '983 Elinore Passage Darrionborough, SC 53915-0479', '07594320656', 'celine.bogan@example.com'); INSERT INTO Customers (`customer_id`, `payment_method_code`, `customer_code`, `customer_name`, `customer_address`, `customer_phone`, `customer_email`) VALUES (15, 'Credit Card', '980', 'Lyric', '649 Ocie Lights Wyatttown, UT 12697', '1-472-036-0434', 'schultz.arnoldo@example.net');   CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_type_code` VARCHAR(10) NOT NULL, `product_name` VARCHAR(80), `product_price` DECIMAL(19,4) ); CREATE TABLE `Supplier_Addresses` ( `supplier_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_from` DATETIME NOT NULL, `date_to` DATETIME, PRIMARY KEY (`supplier_id`, `address_id`), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`supplier_id` ) REFERENCES `Suppliers`(`supplier_id` ) );  CREATE TABLE `Customer_Addresses` ( `customer_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_from` DATETIME NOT NULL, `date_to` DATETIME, PRIMARY KEY (`customer_id`, `address_id`), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) );   CREATE TABLE `Customer_Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `order_status_code` VARCHAR(10) NOT NULL, `order_date` DATETIME NOT NULL, FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) );  CREATE TABLE `Department_Stores` ( `dept_store_id` INTEGER PRIMARY KEY, `dept_store_chain_id` INTEGER, `store_name` VARCHAR(80), `store_address` VARCHAR(255), `store_phone` VARCHAR(80), `store_email` VARCHAR(80), FOREIGN KEY (`dept_store_chain_id` ) REFERENCES `Department_Store_Chain`(`dept_store_chain_id` ) );   INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (1, 1, 'store_name', '01290 Jeremie Parkway Suite 753 North Arielle, MS 51249', '(948)944-5099x2027', 'bmaggio@example.com'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (2, 3, 'store_name', '082 Purdy Expressway O''Connellshire, IL 31732', '877-917-5029', 'larissa10@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (3, 4, 'store_name', '994 Travis Plains North Wadeton, WV 27575-3951', '1-216-312-0375', 'alexandro.mcclure@example.net'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (4, 2, 'store_name', '93472 Mayert Shore Apt. 360 Mitchellton, TN 84209', '670-466-6367', 'bryon24@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (5, 3, 'store_name', '88112 Parisian Lights Sporermouth, MN 25962', '01399327266', 'creola23@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (6, 4, 'store_name', '49708 Marcella Valleys Suite 181 Ninamouth, WA 86667', '1-859-843-1957', 'jerod.reynolds@example.net'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (7, 4, 'store_name', '41924 Alfredo Cliff New Eviestad, NY 17573', '1-109-872-9142x77078', 'ihamill@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (8, 4, 'store_name', '7081 Shanna Cape West Zacheryshire, NC 17408', '+67(5)4983519062', 'casper.adolfo@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (9, 4, 'store_name', '5288 Kaia Street Devonton, NJ 61782-9006', '(723)503-7086x356', 'selmer.stiedemann@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (10, 3, 'store_name', '00578 Lisa Gateway Suite 476 Strosinville, VA 03998-3292', '07126036440', 'luisa57@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (11, 2, 'store_name', '34894 Everett Road South Jeremiehaven, GA 08730', '611-037-9309', 'vonrueden.vern@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (12, 4, 'store_name', '2676 Cruickshank Gardens North Ginahaven, CT 85046', '(626)763-7031', 'freda.toy@example.org'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (13, 2, 'store_name', '29297 West Road Suite 210 West Dulceside, UT 58085-8998', '1-764-126-7567x0795', 'katlynn62@example.com'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (14, 1, 'store_name', '16650 Lysanne River Apt. 281 North Garettton, AL 84756-4375', '319.331.3397', 'mohr.elwin@example.net'); INSERT INTO Department_Stores (`dept_store_id`, `dept_store_chain_id`, `store_name`, `store_address`, `store_phone`, `store_email`) VALUES (15, 3, 'store_name', '82470 Hansen Squares Suite 190 Wehnermouth, NC 76791', '(587)993-3604x3077', 'kelly30@example.com');   CREATE TABLE `Departments` ( `department_id` INTEGER PRIMARY KEY, `dept_store_id` INTEGER NOT NULL, `department_name` VARCHAR(80), FOREIGN KEY (`dept_store_id` ) REFERENCES `Department_Stores`(`dept_store_id` ) ); CREATE TABLE `Order_Items` ( `order_item_id` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) ); CREATE TABLE `Product_Suppliers` ( `product_id` INTEGER NOT NULL, `supplier_id` INTEGER NOT NULL, `date_supplied_from` DATETIME NOT NULL, `date_supplied_to` DATETIME, `total_amount_purchased` VARCHAR(80), `total_value_purchased` DECIMAL(19,4), PRIMARY KEY (`product_id`, `supplier_id`), FOREIGN KEY (`supplier_id` ) REFERENCES `Suppliers`(`supplier_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) );   CREATE TABLE `Staff_Department_Assignments` ( `staff_id` INTEGER NOT NULL, `department_id` INTEGER NOT NULL, `date_assigned_from` DATETIME NOT NULL, `job_title_code` VARCHAR(10) NOT NULL, `date_assigned_to` DATETIME, PRIMARY KEY (`staff_id`, `department_id`), FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` ), FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ) );  ",medium
4,6,concert_singer,"SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",Show the name and the release year of the song by the youngest singer.,"PRAGMA foreign_keys = ON;   CREATE TABLE ""stadium"" ( ""Stadium_ID"" int, ""Location"" text, ""Name"" text, ""Capacity"" int, ""Highest"" int, ""Lowest"" int, ""Average"" int, PRIMARY KEY (""Stadium_ID"") );   CREATE TABLE ""singer"" ( ""Singer_ID"" int, ""Name"" text, ""Country"" text, ""Song_Name"" text, ""Song_release_year"" text, ""Age"" int, ""Is_male"" bool, PRIMARY KEY (""Singer_ID"") );    CREATE TABLE ""concert"" ( ""concert_ID"" int, ""concert_Name"" text, ""Theme"" text, ""Stadium_ID"" text, ""Year"" text, PRIMARY KEY (""concert_ID""), FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"") );    CREATE TABLE ""singer_in_concert"" ( ""concert_ID"" int, ""Singer_ID"" text, PRIMARY KEY (""concert_ID"",""Singer_ID""), FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""), FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"") );  ",medium
1012,3495,body_builder,SELECT T2.Height FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  <  315,What are the heights of body builders with total score smaller than 315?,"PRAGMA foreign_keys = ON;  CREATE TABLE ""body_builder"" ( ""Body_Builder_ID"" int, ""People_ID"" int, ""Snatch"" real, ""Clean_Jerk"" real, ""Total"" real, PRIMARY KEY (""Body_Builder_ID""), FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"") );  CREATE TABLE ""people"" ( ""People_ID"" int, ""Name"" text, ""Height"" real, ""Weight"" real, ""Birth_Date"" text, ""Birth_Place"" text, PRIMARY KEY (""People_ID"") );  ",medium
1573,4786,election,SELECT count(DISTINCT T2.Delegate) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  >  50000,How many distinct delegates are from counties with population larger than 50000?,"PRAGMA foreign_keys = ON;  CREATE TABLE ""county"" ( ""County_Id"" int, ""County_name"" text, ""Population"" real, ""Zip_code"" text, PRIMARY KEY (""County_Id"") );  CREATE TABLE ""party"" ( ""Party_ID"" int, ""Year"" real, ""Party"" text, ""Governor"" text, ""Lieutenant_Governor"" text, ""Comptroller"" text, ""Attorney_General"" text, ""US_Senate"" text, PRIMARY KEY (""Party_ID"") );   CREATE TABLE ""election"" ( ""Election_ID"" int, ""Counties_Represented"" text, ""District"" int, ""Delegate"" text, ""Party"" int, ""First_Elected"" real, ""Committee"" text, PRIMARY KEY (""Election_ID""), FOREIGN KEY (`Party`) REFERENCES `party`(`Party_ID`), FOREIGN KEY (`District`) REFERENCES `county`(`County_Id`) );  ",medium
958,3376,phone_1,"SELECT DISTINCT T2.Hardware_Model_name , T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.used_kb BETWEEN 10 AND 15;",List the phone hardware model and company name for the phones whose screen usage in kb is between 10 and 15.,"PRAGMA foreign_keys=ON; BEGIN TRANSACTION; CREATE TABLE IF NOT EXISTS ""chip_model"" ( ""Model_name"" text, ""Launch_year"" real, ""RAM_MiB"" real, ""ROM_MiB"" real, ""Slots"" text, ""WiFi"" text, ""Bluetooth"" text, PRIMARY KEY (""Model_name"") ); CREATE TABLE IF NOT EXISTS ""screen_mode"" ( ""Graphics_mode"" real, ""Char_cells"" text, ""Pixels"" text, ""Hardware_colours"" real, ""used_kb"" real, ""map"" text, ""Type"" text, PRIMARY KEY (""Graphics_mode"") ); CREATE TABLE IF NOT EXISTS ""phone"" ( ""Company_name"" text, ""Hardware_Model_name"" text, ""Accreditation_type"" text, ""Accreditation_level"" text, ""Date"" text, ""chip_model"" text, ""screen_mode"" text, PRIMARY KEY(""Hardware_Model_name""), FOREIGN KEY (`screen_mode`) REFERENCES `screen_mode`(`Graphics_mode`), FOREIGN KEY (`chip_model`) REFERENCES `chip_model`(`Model_name`) ); COMMIT;",medium
1336,4211,formula_1,"SELECT count(*) ,  nationality FROM constructors GROUP BY nationality",What are the numbers of constructors for different nationalities?,"BEGIN TRANSACTION; CREATE TABLE IF NOT EXISTS ""circuits"" ( ""circuitId"" INTEGER PRIMARY KEY,   ""circuitRef"" TEXT,   ""name"" TEXT,   ""location"" TEXT,   ""country"" TEXT,   ""lat"" REAL,   ""lng"" REAL,   ""alt"" INTEGER,   ""url"" TEXT ); CREATE TABLE IF NOT EXISTS ""races"" ( ""raceId"" INTEGER PRIMARY KEY,   ""year"" INTEGER,   ""round"" INTEGER,   ""circuitId"" INTEGER,   ""name"" TEXT,   ""date"" TEXT,   ""time"" TEXT,   ""url"" TEXT,   FOREIGN KEY (""circuitId"") REFERENCES ""circuits""(""circuitId"") );  CREATE TABLE IF NOT EXISTS ""drivers"" ( ""driverId"" INTEGER PRIMARY KEY,   ""driverRef"" TEXT,   ""number"" INTEGER,   ""code"" TEXT,   ""forename"" TEXT,   ""surname"" TEXT,   ""dob"" TEXT,   ""nationality"" TEXT,   ""url"" TEXT ); CREATE TABLE IF NOT EXISTS ""status"" ( ""statusId"" INTEGER PRIMARY KEY,   ""status"" TEXT ); CREATE TABLE IF NOT EXISTS ""seasons"" ( ""year"" INTEGER PRIMARY KEY,   ""url"" TEXT ); CREATE TABLE IF NOT EXISTS ""constructors"" ( 	""constructorId"" INTEGER PRIMARY KEY,   ""constructorRef"" TEXT,   ""name"" TEXT,   ""nationality"" TEXT,   ""url"" TEXT ); CREATE TABLE IF NOT EXISTS ""constructorStandings"" ( 	""constructorStandingsId"" INTEGER PRIMARY KEY,   ""raceId"" INTEGER,   ""constructorId"" INTEGER,   ""points"" REAL,   ""position"" INTEGER,   ""positionText"" TEXT,   ""wins"" INTEGER,   FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),   FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId"") ); CREATE TABLE IF NOT EXISTS ""results"" ( ""resultId"" INTEGER PRIMARY KEY,   ""raceId"" INTEGER,   ""driverId"" INTEGER,   ""constructorId"" INTEGER,   ""number"" INTEGER,   ""grid"" INTEGER,   ""position"" INTEGER,   ""positionText"" TEXT,   ""positionOrder"" INTEGER,   ""points"" REAL,   ""laps"" INTEGER,   ""time"" TEXT,   ""milliseconds"" INTEGER,   ""fastestLap"" INTEGER,   ""rank"" INTEGER,   ""fastestLapTime"" TEXT,   ""fastestLapSpeed"" TEXT,   ""statusId"" INTEGER,   FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),   FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),   FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId"") ); CREATE TABLE IF NOT EXISTS ""driverStandings"" ( ""driverStandingsId"" INTEGER PRIMARY KEY,   ""raceId"" INTEGER,   ""driverId"" INTEGER,   ""points"" REAL,   ""position"" INTEGER,   ""positionText"" TEXT,   ""wins"" INTEGER,   FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),   FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId"") ); CREATE TABLE IF NOT EXISTS ""constructorResults"" ( ""constructorResultsId"" INTEGER PRIMARY KEY,   ""raceId"" INTEGER,   ""constructorId"" INTEGER,   ""points"" REAL,   ""status"" REAL,   FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),   FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId"") ); CREATE TABLE IF NOT EXISTS ""qualifying"" ( ""qualifyId"" INTEGER PRIMARY KEY,   ""raceId"" INTEGER,   ""driverId"" INTEGER,   ""constructorId"" INTEGER,   ""number"" INTEGER,   ""position"" INTEGER,   ""q1"" TEXT,   ""q2"" TEXT,   ""q3"" TEXT,   FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),   FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),   FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId"") ); CREATE TABLE IF NOT EXISTS ""pitStops"" ( ""raceId"" INTEGER,   ""driverId"" INTEGER,   ""stop"" INTEGER,   ""lap"" INTEGER,   ""time"" TEXT,   ""duration"" TEXT,   ""milliseconds"" INTEGER,   PRIMARY KEY (""raceId"", ""driverId"", ""stop""),   FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),   FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId"") ); CREATE TABLE IF NOT EXISTS ""lapTimes"" ( ""raceId"" INTEGER,   ""driverId"" INTEGER,   ""lap"" INTEGER,   ""position"" INTEGER,   ""time"" TEXT,   ""milliseconds"" INTEGER,   PRIMARY KEY(""raceId"", ""driverId"", ""lap""),   FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),   FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId"") );COMMIT;",medium
1193,3879,wrestler,SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1,What is the name of the wrestler with the fewest days held?,"PRAGMA foreign_keys = ON;  CREATE TABLE ""wrestler"" ( ""Wrestler_ID"" int, ""Name"" text, ""Reign"" text, ""Days_held"" text, ""Location"" text, ""Event"" text, PRIMARY KEY (""Wrestler_ID"") );  CREATE TABLE ""Elimination"" ( ""Elimination_ID"" text, ""Wrestler_ID"" text, ""Team"" text, ""Eliminated_By"" text, ""Elimination_Move"" text, ""Time"" text, PRIMARY KEY (""Elimination_ID""), FOREIGN KEY (""Wrestler_ID"") REFERENCES ""wrestler""(""Wrestler_ID"") );  ",medium
248,569,student_transcripts_tracking,SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1,What is the last transcript release date?,"PRAGMA foreign_keys = ON; CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `line_1` VARCHAR(255), `line_2` VARCHAR(255), `line_3` VARCHAR(255), `city` VARCHAR(255), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(255), `country` VARCHAR(255), `other_address_details` VARCHAR(255) ); CREATE TABLE `Courses` ( `course_id` INTEGER PRIMARY KEY, `course_name` VARCHAR(255), `course_description` VARCHAR(255), `other_details` VARCHAR(255) );  CREATE TABLE `Departments` ( `department_id` INTEGER PRIMARY KEY, `department_name` VARCHAR(255), `department_description` VARCHAR(255), `other_details` VARCHAR(255) ); CREATE TABLE `Degree_Programs` ( `degree_program_id` INTEGER PRIMARY KEY, `department_id` INTEGER NOT NULL, `degree_summary_name` VARCHAR(255), `degree_summary_description` VARCHAR(255), `other_details` VARCHAR(255), FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` ) );  CREATE TABLE `Sections` ( `section_id` INTEGER PRIMARY KEY, `course_id` INTEGER NOT NULL, `section_name` VARCHAR(255), `section_description` VARCHAR(255), `other_details` VARCHAR(255), FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ) ); CREATE TABLE `Semesters` ( `semester_id` INTEGER PRIMARY KEY, `semester_name` VARCHAR(255), `semester_description` VARCHAR(255), `other_details` VARCHAR(255) ); CREATE TABLE `Students` ( `student_id` INTEGER PRIMARY KEY, `current_address_id` INTEGER NOT NULL, `permanent_address_id` INTEGER NOT NULL, `first_name` VARCHAR(80), `middle_name` VARCHAR(40), `last_name` VARCHAR(40), `cell_mobile_number` VARCHAR(40), `email_address` VARCHAR(40), `ssn` VARCHAR(40), `date_first_registered` DATETIME, `date_left` DATETIME, `other_student_details` VARCHAR(255), FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` ) );  CREATE TABLE `Student_Enrolment` ( `student_enrolment_id` INTEGER PRIMARY KEY, `degree_program_id` INTEGER NOT NULL, `semester_id` INTEGER NOT NULL, `student_id` INTEGER NOT NULL, `other_details` VARCHAR(255), FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ), FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ), FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ) ); CREATE TABLE `Student_Enrolment_Courses` ( `student_course_id` INTEGER PRIMARY KEY, `course_id` INTEGER NOT NULL, `student_enrolment_id` INTEGER NOT NULL, FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ), FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` ) );  CREATE TABLE `Transcripts` ( `transcript_id` INTEGER PRIMARY KEY, `transcript_date` DATETIME, `other_details` VARCHAR(255) );  CREATE TABLE `Transcript_Contents` ( `student_course_id` INTEGER NOT NULL, `transcript_id` INTEGER NOT NULL, FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ), FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` ) );  ",medium
2104,6185,tracking_grants_for_research,"SELECT count(*) ,  T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id","For each project id, how many tasks are there?","PRAGMA foreign_keys = ON; CREATE TABLE `Document_Types` ( `document_type_code` VARCHAR(10) PRIMARY KEY, `document_description` VARCHAR(255) NOT NULL ); CREATE TABLE `Documents` ( `document_id` INTEGER PRIMARY KEY, `document_type_code` VARCHAR(10), `grant_id` INTEGER NOT NULL, `sent_date` DATETIME NOT NULL, `response_received_date` DATETIME NOT NULL, `other_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`document_type_code` ) REFERENCES `Document_Types`(`document_type_code` ), FOREIGN KEY (`grant_id` ) REFERENCES `Grants`(`grant_id` ) ); CREATE TABLE `Grants` ( `grant_id` INTEGER PRIMARY KEY, `organisation_id` INTEGER NOT NULL, `grant_amount` DECIMAL(19,4) NOT NULL DEFAULT 0, `grant_start_date` DATETIME NOT NULL, `grant_end_date` DATETIME NOT NULL, `other_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`organisation_id` ) REFERENCES `Organisations`(`organisation_id` ) ); CREATE TABLE `Organisation_Types` ( `organisation_type` VARCHAR(10) PRIMARY KEY, `organisation_type_description` VARCHAR(255) NOT NULL ); CREATE TABLE `Organisations` ( `organisation_id` INTEGER PRIMARY KEY, `organisation_type` VARCHAR(10) NOT NULL, `organisation_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`organisation_type` ) REFERENCES `Organisation_Types`(`organisation_type` ) ); CREATE TABLE `Project_Outcomes` ( `project_id` INTEGER NOT NULL, `outcome_code` VARCHAR(10) NOT NULL, `outcome_details` VARCHAR(255), FOREIGN KEY (`project_id` ) REFERENCES `Projects`(`project_id` ),FOREIGN KEY (`outcome_code` ) REFERENCES `Research_Outcomes`(`outcome_code` ) ); CREATE TABLE `Project_Staff` ( `staff_id` DOUBLE PRIMARY KEY, `project_id` INTEGER NOT NULL, `role_code` VARCHAR(10) NOT NULL, `date_from` DATETIME, `date_to` DATETIME, `other_details` VARCHAR(255), FOREIGN KEY (`project_id` ) REFERENCES `Projects`(`project_id` ),FOREIGN KEY (`role_code` ) REFERENCES `Staff_Roles`(`role_code` ) ); CREATE TABLE `Projects` ( `project_id` INTEGER PRIMARY KEY, `organisation_id` INTEGER NOT NULL, `project_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`organisation_id` ) REFERENCES `Organisations`(`organisation_id` ) ); CREATE TABLE `Research_Outcomes` ( `outcome_code` VARCHAR(10) PRIMARY KEY, `outcome_description` VARCHAR(255) NOT NULL ); CREATE TABLE `Research_Staff` ( `staff_id` INTEGER PRIMARY KEY, `employer_organisation_id` INTEGER NOT NULL, `staff_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`employer_organisation_id` ) REFERENCES `Organisations`(`organisation_id` ) ); CREATE TABLE `Staff_Roles` ( `role_code` VARCHAR(10) PRIMARY KEY, `role_description` VARCHAR(255) NOT NULL ); CREATE TABLE `Tasks` ( `task_id` INTEGER PRIMARY KEY, `project_id` INTEGER NOT NULL, `task_details` VARCHAR(255) NOT NULL, `eg Agree Objectives` VARCHAR(1), FOREIGN KEY (`project_id` ) REFERENCES `Projects`(`project_id` ) ); ",medium
2898,8330,train_station,SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id HAVING count(*)  >=  2,Show the station name with at least two trains.,"PRAGMA foreign_keys = ON;  CREATE TABLE ""station"" ( ""Station_ID"" int, ""Name"" text, ""Annual_entry_exit"" real, ""Annual_interchanges"" real, ""Total_Passengers"" real, ""Location"" text, ""Main_Services"" text, ""Number_of_Platforms"" int, PRIMARY KEY (""Station_ID"") );  CREATE TABLE ""train"" ( ""Train_ID"" int, ""Name"" text, ""Time"" text, ""Service"" text, PRIMARY KEY (""Train_ID"") );  CREATE TABLE ""train_station"" ( ""Train_ID"" int, ""Station_ID"" int,	 PRIMARY KEY (""Train_ID"",""Station_ID""), FOREIGN KEY (""Train_ID"") REFERENCES ""train""(""Train_ID""), FOREIGN KEY (""Station_ID"") REFERENCES ""station""(""Station_ID"") );  ",medium
678,2731,bike_1,"SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1","What are the name, latitude, and city of the station with the lowest latitude?","PRAGMA foreign_keys=OFF; BEGIN TRANSACTION; CREATE TABLE station (     id INTEGER PRIMARY KEY,     name TEXT,     lat NUMERIC,     long NUMERIC,     dock_count INTEGER,     city TEXT,     installation_date TEXT); CREATE TABLE status (     station_id INTEGER,     bikes_available INTEGER,     docks_available INTEGER,     time TEXT,     FOREIGN KEY (station_id) REFERENCES station(id) ); CREATE TABLE trip (     id INTEGER PRIMARY KEY,     duration INTEGER,     start_date TEXT,     start_station_name TEXT, -- this should be removed     start_station_id INTEGER,     end_date TEXT,     end_station_name TEXT, -- this should be removed     end_station_id INTEGER,     bike_id INTEGER,     subscription_type TEXT,     zip_code INTEGER); CREATE TABLE weather (     date TEXT,     max_temperature_f INTEGER,     mean_temperature_f INTEGER,     min_temperature_f INTEGER,     max_dew_point_f INTEGER,     mean_dew_point_f INTEGER,     min_dew_point_f INTEGER,     max_humidity INTEGER,     mean_humidity INTEGER,     min_humidity INTEGER,     max_sea_level_pressure_inches NUMERIC,     mean_sea_level_pressure_inches NUMERIC,     min_sea_level_pressure_inches NUMERIC,     max_visibility_miles INTEGER,     mean_visibility_miles INTEGER,     min_visibility_miles INTEGER,     max_wind_Speed_mph INTEGER,     mean_wind_speed_mph INTEGER,     max_gust_speed_mph INTEGER,     precipitation_inches INTEGER,     cloud_cover INTEGER,     events TEXT,     wind_dir_degrees INTEGER,     zip_code INTEGER); COMMIT;",medium
688,2743,bike_1,"SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5",What are the dates that had the top 5 cloud cover rates? Also tell me the cloud cover rate.,"PRAGMA foreign_keys=OFF; BEGIN TRANSACTION; CREATE TABLE station (     id INTEGER PRIMARY KEY,     name TEXT,     lat NUMERIC,     long NUMERIC,     dock_count INTEGER,     city TEXT,     installation_date TEXT); CREATE TABLE status (     station_id INTEGER,     bikes_available INTEGER,     docks_available INTEGER,     time TEXT,     FOREIGN KEY (station_id) REFERENCES station(id) ); CREATE TABLE trip (     id INTEGER PRIMARY KEY,     duration INTEGER,     start_date TEXT,     start_station_name TEXT, -- this should be removed     start_station_id INTEGER,     end_date TEXT,     end_station_name TEXT, -- this should be removed     end_station_id INTEGER,     bike_id INTEGER,     subscription_type TEXT,     zip_code INTEGER); CREATE TABLE weather (     date TEXT,     max_temperature_f INTEGER,     mean_temperature_f INTEGER,     min_temperature_f INTEGER,     max_dew_point_f INTEGER,     mean_dew_point_f INTEGER,     min_dew_point_f INTEGER,     max_humidity INTEGER,     mean_humidity INTEGER,     min_humidity INTEGER,     max_sea_level_pressure_inches NUMERIC,     mean_sea_level_pressure_inches NUMERIC,     min_sea_level_pressure_inches NUMERIC,     max_visibility_miles INTEGER,     mean_visibility_miles INTEGER,     min_visibility_miles INTEGER,     max_wind_Speed_mph INTEGER,     mean_wind_speed_mph INTEGER,     max_gust_speed_mph INTEGER,     precipitation_inches INTEGER,     cloud_cover INTEGER,     events TEXT,     wind_dir_degrees INTEGER,     zip_code INTEGER); COMMIT;",medium
2572,7441,dorm_1,"SELECT avg(age) ,  city_code FROM student GROUP BY city_code",What is the average age for each city and what are those cities?," create table Student (         StuID        INTEGER PRIMARY KEY,         LName        VARCHAR(12),         Fname        VARCHAR(12),         Age      INTEGER,         Sex      VARCHAR(1),         Major        INTEGER,         Advisor      INTEGER,         city_code    VARCHAR(3)  );    create table Dorm (        dormid		INTEGER,        dorm_name	VARCHAR(20),        student_capacity	INTEGER,        gender			VARCHAR(1) ) ;  create table Dorm_amenity (        amenid			INTEGER,        amenity_name		VARCHAR(25) ) ;  create table Has_amenity (        dormid			INTEGER,        amenid				INTEGER, 	FOREIGN KEY (dormid) REFERENCES `Dorm`(dormid), 	FOREIGN KEY (amenid) REFERENCES `Dorm_amenity`(amenid) );  create table Lives_in (        stuid 	      INTEGER,        dormid		INTEGER,        room_number	INTEGER, 	FOREIGN KEY (stuid) REFERENCES `Student`(StuID),         FOREIGN KEY (dormid) REFERENCES `Dorm`(dormid) );  ",medium
442,1522,scholar,"SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""sharon goldwater"";",which papers has sharon goldwater written ?,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); ",medium
2351,6856,cre_Drama_Workshop_Groups,"SELECT min(Order_Quantity) ,  avg(Order_Quantity) ,  max(Order_Quantity) FROM INVOICES","Show the minimum, average, maximum order quantity of all invoices.","PRAGMA foreign_keys = ON;  CREATE TABLE Ref_Payment_Methods ( payment_method_code CHAR(10) NOT NULL, payment_method_description VARCHAR(80), PRIMARY KEY (payment_method_code), UNIQUE (payment_method_code) ); CREATE TABLE Ref_Service_Types ( Service_Type_Code CHAR(15) NOT NULL, Parent_Service_Type_Code CHAR(15), Service_Type_Description VARCHAR(255), PRIMARY KEY (Service_Type_Code), UNIQUE (Service_Type_Code) );  CREATE TABLE Addresses ( Address_ID VARCHAR(100) NOT NULL, Line_1 VARCHAR(255), Line_2 VARCHAR(255), City_Town VARCHAR(255), State_County VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Address_ID), UNIQUE (Address_ID) ); CREATE TABLE Products ( Product_ID VARCHAR(100) NOT NULL, Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Product_Description VARCHAR(255), Other_Product_Service_Details VARCHAR(255), PRIMARY KEY (Product_ID), UNIQUE (Product_ID) ); CREATE TABLE Marketing_Regions ( Marketing_Region_Code CHAR(15) NOT NULL, Marketing_Region_Name VARCHAR(255) NOT NULL, Marketing_Region_Descriptrion VARCHAR(255) NOT NULL, Other_Details VARCHAR(255), PRIMARY KEY (Marketing_Region_Code), UNIQUE (Marketing_Region_Code) );  CREATE TABLE Clients ( Client_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Customer_Email_Address VARCHAR(255), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Client_ID), UNIQUE (Client_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) ); CREATE TABLE Drama_Workshop_Groups ( Workshop_Group_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Currency_Code CHAR(15) NOT NULL, Marketing_Region_Code CHAR(15) NOT NULL, Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Workshop_Group_ID), UNIQUE (Workshop_Group_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) ); CREATE TABLE Performers ( Performer_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Performer_ID), UNIQUE (Performer_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) ); CREATE TABLE Customers ( Customer_ID VARCHAR(100) NOT NULL, Address_ID INTEGER NOT NULL, Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Customer_ID), UNIQUE (Customer_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) ); CREATE TABLE Stores ( Store_ID VARCHAR(100) NOT NULL, Address_ID INTEGER NOT NULL, Marketing_Region_Code CHAR(15) NOT NULL, Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Store_ID), UNIQUE (Store_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID), FOREIGN KEY (Marketing_Region_Code) REFERENCES Marketing_Regions (Marketing_Region_Code) ); CREATE TABLE Bookings ( Booking_ID INTEGER NOT NULL , Customer_ID INTEGER NOT NULL, Workshop_Group_ID VARCHAR(100) NOT NULL, Status_Code CHAR(15) NOT NULL, Store_ID INTEGER NOT NULL, Order_Date DATETIME NOT NULL, Planned_Delivery_Date DATETIME NOT NULL, Actual_Delivery_Date DATETIME NOT NULL, Other_Order_Details VARCHAR(255), PRIMARY KEY (Booking_ID), UNIQUE (Booking_ID), FOREIGN KEY (Customer_ID) REFERENCES Clients (Client_ID), FOREIGN KEY (Workshop_Group_ID) REFERENCES Drama_Workshop_Groups (Workshop_Group_ID) ); CREATE TABLE Performers_in_Bookings ( Order_ID INTEGER NOT NULL, Performer_ID INTEGER NOT NULL, PRIMARY KEY (Order_ID, Performer_ID), FOREIGN KEY (Performer_ID) REFERENCES Performers (Performer_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID) ); CREATE TABLE Customer_Orders ( Order_ID INTEGER NOT NULL , Customer_ID INTEGER NOT NULL, Store_ID INTEGER NOT NULL, Order_Date DATETIME NOT NULL, Planned_Delivery_Date DATETIME NOT NULL, Actual_Delivery_Date DATETIME NOT NULL, Other_Order_Details VARCHAR(255), PRIMARY KEY (Order_ID), UNIQUE (Order_ID), FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY (Store_ID) REFERENCES Stores (Store_ID) ); CREATE TABLE Order_Items ( Order_Item_ID INTEGER NOT NULL , Order_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), PRIMARY KEY (Order_Item_ID), FOREIGN KEY (Order_ID) REFERENCES Customer_Orders (Order_ID), FOREIGN KEY (Product_ID) REFERENCES Products (Product_ID) ); CREATE TABLE Invoices ( Invoice_ID INTEGER NOT NULL, Order_ID INTEGER NOT NULL, payment_method_code CHAR(15), Product_ID INTEGER NOT NULL, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), Order_Item_ID INTEGER NOT NULL, PRIMARY KEY (Invoice_ID), FOREIGN KEY (Order_ID) REFERENCES Customer_Orders (Order_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID), FOREIGN KEY (payment_method_code) REFERENCES Ref_Payment_Methods (payment_method_code) ); CREATE TABLE Services ( Service_ID INTEGER NOT NULL, Service_Type_Code CHAR(15), Workshop_Group_ID INTEGER NOT NULL, Product_Description VARCHAR(255), Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Other_Product_Service_Details VARCHAR(255), PRIMARY KEY (Service_ID), UNIQUE (Service_ID), FOREIGN KEY (Workshop_Group_ID) REFERENCES Drama_Workshop_Groups (Workshop_Group_ID), FOREIGN KEY (Service_Type_Code) REFERENCES Ref_Service_Types (Service_Type_Code) ); CREATE TABLE Bookings_Services ( Order_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, PRIMARY KEY (Order_ID, Product_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID), FOREIGN KEY (Product_ID) REFERENCES Services (Service_ID) );  CREATE TABLE Invoice_Items ( Invoice_Item_ID INTEGER NOT NULL , Invoice_ID INTEGER NOT NULL, Order_ID INTEGER NOT NULL, Order_Item_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, Order_Quantity INTEGER, Other_Item_Details VARCHAR(255), PRIMARY KEY (Invoice_Item_ID), FOREIGN KEY (Order_Item_ID) REFERENCES Order_Items (Order_Item_ID), FOREIGN KEY (Invoice_ID) REFERENCES Invoices (Invoice_ID), FOREIGN KEY (Order_ID, Product_ID) REFERENCES Bookings_Services (Order_ID,Product_ID) ); ",medium
1513,4642,inn_1,"SELECT decor ,  count(*) FROM Rooms WHERE bedType = ""King"" GROUP BY decor;",Find the number of rooms with king bed for each decor type.,"CREATE TABLE ""Rooms"" (  	""RoomId"" TEXT PRIMARY KEY, 	""roomName"" TEXT,  	""beds"" INTEGER,  	""bedType"" TEXT,  	""maxOccupancy"" INTEGER,  	""basePrice"" INTEGER,  	""decor"" TEXT  );  CREATE TABLE ""Reservations"" (  	""Code"" INTEGER PRIMARY KEY,  	""Room"" TEXT,  	""CheckIn"" TEXT,  	""CheckOut"" TEXT,  	""Rate"" REAL,  	""LastName"" TEXT,  	""FirstName"" TEXT,  	""Adults"" INTEGER,  	""Kids"" INTEGER, 	FOREIGN KEY (Room) REFERENCES Rooms(RoomId) ); ",medium
2256,6601,aircraft,"SELECT max(Transit_Passengers) ,  min(Transit_Passengers) FROM airport",What are the maximum and minimum number of transit passengers of all aiports.," PRAGMA foreign_keys = ON;   CREATE TABLE `pilot` (   `Pilot_Id` int(11) NOT NULL,   `Name` varchar(50) NOT NULL,   `Age` int(11) NOT NULL,   PRIMARY KEY (`Pilot_Id`) );  CREATE TABLE `aircraft` (   ""Aircraft_ID"" int(11) NOT NULL,   ""Aircraft"" varchar(50) NOT NULL,   ""Description"" varchar(50) NOT NULL,   ""Max_Gross_Weight"" varchar(50) NOT NULL,   ""Total_disk_area"" varchar(50) NOT NULL,   ""Max_disk_Loading"" varchar(50) NOT NULL,   PRIMARY KEY (`Aircraft_ID`) );   CREATE TABLE `match` ( ""Round"" real, ""Location"" text, ""Country"" text, ""Date"" text, ""Fastest_Qualifying"" text, ""Winning_Pilot"" text, ""Winning_Aircraft"" text, PRIMARY KEY (""Round""), FOREIGN KEY (`Winning_Aircraft`) REFERENCES `aircraft`(`Aircraft_ID`), FOREIGN KEY (`Winning_Pilot`) REFERENCES `pilot`(`Pilot_Id`) );  CREATE TABLE `airport` ( ""Airport_ID"" int, ""Airport_Name"" text, ""Total_Passengers"" real, ""%_Change_2007"" text, ""International_Passengers"" real, ""Domestic_Passengers"" real, ""Transit_Passengers"" real, ""Aircraft_Movements"" real, ""Freight_Metric_Tonnes"" real, PRIMARY KEY (""Airport_ID"") );  CREATE TABLE `airport_aircraft` ( ""ID"" int, ""Airport_ID"" int, ""Aircraft_ID"" int, PRIMARY KEY (""Airport_ID"",""Aircraft_ID""), FOREIGN KEY (""Airport_ID"") REFERENCES `airport`(`Airport_ID`), FOREIGN KEY (""Aircraft_ID"") REFERENCES `aircraft`(`Aircraft_ID`) );    ",medium
45,82,pets_1,"SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",What is the first name and gender of the all the students who have more than one pet?,"create table Student (        StuID    	INTEGER PRIMARY KEY,        LName		VARCHAR(12),        Fname		VARCHAR(12),        Age		INTEGER,        Sex		VARCHAR(1),        Major		INTEGER,        Advisor		INTEGER,        city_code	VARCHAR(3) );  create table Has_Pet (        StuID		INTEGER,        PetID		INTEGER,        FOREIGN KEY(PetID) REFERENCES Pets(PetID),        FOREIGN KEY(StuID) REFERENCES Student(StuID) );  create table Pets (        PetID		INTEGER PRIMARY KEY,        PetType		VARCHAR(20),        pet_age INTEGER,        weight REAL );  ",medium
2564,7415,customers_and_products_contacts,"SELECT T1.product_name ,  sum(T2.order_quantity) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id",Show the product name and total order quantity for each product.,"PRAGMA foreign_keys = ON; CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `line_1_number_building` VARCHAR(80), `city` VARCHAR(50), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(50), `country` VARCHAR(50) );  CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_type_code` VARCHAR(15), `product_name` VARCHAR(80), `product_price` DOUBLE NULL ); CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `payment_method_code` VARCHAR(15), `customer_number` VARCHAR(20), `customer_name` VARCHAR(80), `customer_address` VARCHAR(255), `customer_phone` VARCHAR(80), `customer_email` VARCHAR(80) ); CREATE TABLE `Contacts` ( `contact_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `gender` VARCHAR(1), `first_name` VARCHAR(80), `last_name` VARCHAR(50), `contact_phone` VARCHAR(80) );  CREATE TABLE `Customer_Address_History` ( `customer_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_from` DATETIME NOT NULL, `date_to` DATETIME, FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ) ); CREATE TABLE `Customer_Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `order_date` DATETIME NOT NULL, `order_status_code` VARCHAR(15), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) );  CREATE TABLE `Order_Items` ( `order_item_id` INTEGER NOT NULL , `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, `order_quantity` VARCHAR(80), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ), FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ) ); ",medium
1450,4499,movie_1,SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  3,What are the names of all reviewers that have rated 3 or more movies?,"-- dbext:type=SQLITE:dbname=movie_rating.db  /* Delete the tables if they already exist */ drop table if exists Movie; drop table if exists Reviewer; drop table if exists Rating;  /* Create the schema for our tables */ create table Movie( 	mID int primary key,  	title text,  	year int,  	director text ); create table Reviewer( 	rID int primary key,  	name text);  create table Rating( 	rID int,  	mID int,  	stars int,  	ratingDate date, 	FOREIGN KEY (mID) references Movie(mID), 	FOREIGN KEY (rID) references Reviewer(rID) );  /* Populate the tables with our data */ ",medium
1369,4300,entrepreneur,"SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != ""Rachel Elnaugh""",Return the names of entrepreneurs do no not have the investor Rachel Elnaugh.,"PRAGMA foreign_keys = ON;  CREATE TABLE ""entrepreneur"" ( ""Entrepreneur_ID"" int, ""People_ID"" int, ""Company"" text, ""Money_Requested"" real, ""Investor"" text, PRIMARY KEY (""Entrepreneur_ID""), FOREIGN KEY (""People_ID"") REFERENCES ""people""(""People_ID"") );  CREATE TABLE ""people"" ( ""People_ID"" int, ""Name"" text, ""Height"" real, ""Weight"" real, ""Date_of_Birth"" text, PRIMARY KEY (""People_ID"") );   ",medium
1391,4362,csu_1,"SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  ""San Francisco State University"" AND T2.year  =  1996","What is the campus fee of ""San Francisco State University"" in year 1996?","CREATE TABLE ""Campuses"" ( 	""Id"" INTEGER PRIMARY KEY,  	""Campus"" TEXT,  	""Location"" TEXT,  	""County"" TEXT,  	""Year"" INTEGER  );  CREATE TABLE ""csu_fees"" (  	""Campus"" INTEGER PRIMARY KEY,  	""Year"" INTEGER,  	""CampusFee"" INTEGER, 	FOREIGN KEY (Campus) REFERENCES Campuses(Id) );  CREATE TABLE ""degrees"" (  	""Year"" INTEGER, 	""Campus"" INTEGER,  	""Degrees"" INTEGER, 	PRIMARY KEY (Year, Campus), 	FOREIGN KEY (Campus) REFERENCES Campuses(Id) );    CREATE TABLE ""discipline_enrollments"" (  	""Campus"" INTEGER,  	""Discipline"" INTEGER,  	""Year"" INTEGER,  	""Undergraduate"" INTEGER,  	""Graduate"" INTEGER, 	PRIMARY KEY (Campus, Discipline), 	FOREIGN KEY (Campus) REFERENCES Campuses(Id) );    CREATE TABLE ""enrollments"" (  	""Campus"" INTEGER,  	""Year"" INTEGER,  	""TotalEnrollment_AY"" INTEGER,  	""FTE_AY"" INTEGER, 	PRIMARY KEY(Campus, Year), 	FOREIGN KEY (Campus) REFERENCES Campuses(Id) );  CREATE TABLE ""faculty"" (  	""Campus"" INTEGER,  	""Year"" INTEGER,  	""Faculty"" REAL, 	FOREIGN KEY (Campus) REFERENCES Campuses(Id)  );  ",medium
2873,8269,wine_1,"SELECT avg(Price) ,  YEAR FROM WINE GROUP BY YEAR",What are the average prices of wines for different years?,"CREATE TABLE ""grapes"" (  	""ID"" INTEGER PRIMARY KEY,  	""Grape"" TEXT UNIQUE,  	""Color"" TEXT  );  CREATE TABLE ""appellations"" (  	""No"" INTEGER PRIMARY KEY,  	""Appelation"" TEXT UNIQUE,  	""County"" TEXT,  	""State"" TEXT,  	""Area"" TEXT,  	""isAVA"" TEXT );  CREATE TABLE ""wine"" (  	""No"" INTEGER,  	""Grape"" TEXT,  	""Winery"" TEXT,  	""Appelation"" TEXT,  	""State"" TEXT,  	""Name"" TEXT,  	""Year"" INTEGER,  	""Price"" INTEGER,  	""Score"" INTEGER,  	""Cases"" INTEGER,  	""Drink"" TEXT, 	FOREIGN KEY (Grape) REFERENCES grapes(Grape), 	FOREIGN KEY (Appelation) REFERENCES appellations(Appelation) );",medium
2696,7794,game_1,"SELECT gameid ,  sum(hours_played) FROM Plays_games GROUP BY gameid",What are ids and total number of hours played for each game?,"create table Student (         StuID        INTEGER PRIMARY KEY,         LName        VARCHAR(12),         Fname        VARCHAR(12),         Age      INTEGER,         Sex      VARCHAR(1),         Major        INTEGER,         Advisor      INTEGER,         city_code    VARCHAR(3)  );  create table Video_Games (        GameID           INTEGER PRIMARY KEY,        GName            VARCHAR(40),        GType            VARCHAR(40) );  create table Plays_Games (        StuID                INTEGER,        GameID            INTEGER,        Hours_Played      INTEGER,        FOREIGN KEY(GameID) REFERENCES Video_Games(GameID),        FOREIGN KEY(StuID) REFERENCES Student(StuID) );  create table SportsInfo (   StuID INTEGER,   SportName VARCHAR(32),   HoursPerWeek INTEGER,   GamesPlayed INTEGER,   OnScholarship VARCHAR(1),   FOREIGN KEY(StuID) REFERENCES Student(StuID) );   ",medium
724,2818,musical,"SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",Show different nominees and the number of musicals they have been nominated.,"PRAGMA foreign_keys = ON;  CREATE TABLE ""musical"" ( ""Musical_ID"" int, ""Name"" text, ""Year"" int, ""Award"" text, ""Category"" text, ""Nominee"" text, ""Result"" text, PRIMARY KEY (""Musical_ID"") );  CREATE TABLE ""actor"" ( ""Actor_ID"" int, ""Name"" text, ""Musical_ID"" int, ""Character"" text, ""Duration"" text, ""age"" int, PRIMARY KEY (""Actor_ID""), FOREIGN KEY (""Musical_ID"") REFERENCES ""actor""(""Actor_ID"") );  ",medium
1859,5490,baseball_1,SELECT sum(T1.salary) FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T2.name_first  =  'Len' AND T2.name_last = 'Barker' AND T1.year BETWEEN 1985 AND 1990;,Compute the total salary that the player with first name Len and last name Barker received between 1985 to 1990.,"PRAGMA foreign_keys=OFF; BEGIN TRANSACTION; CREATE TABLE all_star (     player_id TEXT,     year INTEGER,     game_num INTEGER,     game_id TEXT,     team_id TEXT,     league_id TEXT,     gp NUMERIC,     starting_pos NUMERIC,     foreign key (player_id) references player(player_id) ); CREATE TABLE appearances (     year INTEGER,     team_id TEXT,     league_id TEXT,     player_id TEXT,     g_all NUMERIC,     gs NUMERIC,     g_batting INTEGER,     g_defense NUMERIC,     g_p INTEGER,     g_c INTEGER,     g_1b INTEGER,     g_2b INTEGER,     g_3b INTEGER,     g_ss INTEGER,     g_lf INTEGER,     g_cf INTEGER,     g_rf INTEGER,     g_of INTEGER,     g_dh NUMERIC,     g_ph NUMERIC,     g_pr NUMERIC,     foreign key (team_id) references team(team_id),     foreign key (player_id) references player(player_id) ); CREATE TABLE manager_award (     player_id TEXT,     award_id TEXT,     year INTEGER,     league_id TEXT,     tie TEXT,     notes NUMERIC,     foreign key (player_id) references player(player_id) ); CREATE TABLE player_award (  	player_id TEXT,  	award_id TEXT,  	year INTEGER,  	league_id TEXT,     	tie TEXT,     	notes TEXT, 	foreign key (player_id) references player(player_id) ); CREATE TABLE manager_award_vote (     award_id TEXT,     year INTEGER,     league_id TEXT,     player_id TEXT,     points_won INTEGER,     points_max INTEGER,     votes_first INTEGER); CREATE TABLE player_award_vote (     award_id TEXT,     year INTEGER,     league_id TEXT,     player_id TEXT,     points_won NUMERIC,     points_max INTEGER,     votes_first NUMERIC,    foreign key (player_id) references player(player_id) ); CREATE TABLE batting ( player_id TEXT, year INTEGER, stint INTEGER, team_id TEXT, league_id TEXT, g INTEGER, ab NUMERIC,     r NUMERIC,     h NUMERIC,     double NUMERIC,     triple NUMERIC,     hr NUMERIC,     rbi NUMERIC,     sb NUMERIC,     cs NUMERIC,     bb NUMERIC,     so NUMERIC,     ibb NUMERIC,     hbp NUMERIC,     sh NUMERIC,     sf NUMERIC,     g_idp NUMERIC, foreign key (player_id) references player(player_id) ); CREATE TABLE batting_postseason (     year INTEGER,     round TEXT,     player_id TEXT,     team_id TEXT,     league_id TEXT,     g INTEGER,     ab INTEGER,     r INTEGER,     h INTEGER,     double INTEGER,     triple INTEGER,     hr INTEGER,     rbi INTEGER,     sb INTEGER,     cs NUMERIC,     bb INTEGER,     so INTEGER,     ibb NUMERIC,     hbp NUMERIC,     sh NUMERIC,     sf NUMERIC,     g_idp NUMERIC, 	foreign key (player_id) references player(player_id), 	foreign key (team_id) references team(team_id) ); CREATE TABLE player_college ( player_id TEXT,     college_id TEXT,     year INTEGER, 	foreign key (player_id) references player(player_id), 	foreign key (college_id) references college(college_id) ); CREATE TABLE fielding (     player_id TEXT,     year INTEGER,     stint INTEGER,     team_id TEXT,     league_id TEXT,     pos TEXT,     g INTEGER,     gs NUMERIC,     inn_outs NUMERIC,     po NUMERIC,     a NUMERIC,     e NUMERIC,     dp NUMERIC,     pb NUMERIC,     wp NUMERIC,     sb NUMERIC,     cs NUMERIC,     zr NUMERIC, 	foreign key (player_id) references player(player_id) ); CREATE TABLE fielding_outfield (     player_id TEXT,     year INTEGER,     stint INTEGER,     glf NUMERIC,     gcf NUMERIC,     grf NUMERIC, 	foreign key (player_id) references player(player_id) ); CREATE TABLE fielding_postseason (     player_id TEXT,     year INTEGER,     team_id TEXT,     league_id TEXT,     round TEXT,     pos TEXT,     g INTEGER,     gs NUMERIC,     inn_outs NUMERIC,     po INTEGER,     a INTEGER,     e INTEGER,     dp INTEGER,     tp INTEGER,     pb NUMERIC,     sb NUMERIC,     cs NUMERIC, 	foreign key (player_id) references player(player_id), 	foreign key (team_id) references player(team_id) ); CREATE TABLE hall_of_fame (     player_id TEXT,     yearid INTEGER,     votedby TEXT,     ballots NUMERIC,     needed NUMERIC,     votes NUMERIC,     inducted TEXT,     category TEXT,     needed_note TEXT, 	foreign key (player_id) references player(player_id) ); CREATE TABLE home_game (     year INTEGER,     league_id TEXT,     team_id TEXT,     park_id TEXT,     span_first TEXT,     span_last TEXT,     games INTEGER,     openings INTEGER,     attendance INTEGER, 	foreign key (team_id) references team(team_id), 	foreign key (park_id) references park(park_id) ); CREATE TABLE manager (     player_id TEXT,     year INTEGER,     team_id TEXT,     league_id TEXT,     inseason INTEGER,     g INTEGER,     w INTEGER,     l INTEGER,     rank NUMERIC,     plyr_mgr TEXT, 	foreign key (team_id) references team(team_id) ); CREATE TABLE manager_half (     player_id TEXT,     year INTEGER,     team_id TEXT,     league_id TEXT,     inseason INTEGER,     half INTEGER,     g INTEGER,     w INTEGER,     l INTEGER,     rank INTEGER, 	foreign key (team_id) references team(team_id) ); CREATE TABLE player (     player_id TEXT,     birth_year NUMERIC,     birth_month NUMERIC,     birth_day NUMERIC,     birth_country TEXT,     birth_state TEXT,     birth_city TEXT,     death_year NUMERIC,     death_month NUMERIC,     death_day NUMERIC,     death_country TEXT,     death_state TEXT,     death_city TEXT,     name_first TEXT,     name_last TEXT,     name_given TEXT,     weight NUMERIC,     height NUMERIC,     bats TEXT,     throws TEXT,     debut TEXT,     final_game TEXT,     retro_id TEXT,     bbref_id TEXT); Macomb County','Steve','Gromek','Stephen Joseph',180,74,'B','R','1941-08-18','1957-07-25','groms101','gromest01'); Calhoun Cty','Charlie','Grover','Charles Byrd',185,73,'L','R','1913-09-09','1913-09-12','grovc101','grovech01'); CREATE TABLE park (     park_id TEXT,     park_name TEXT,     park_alias TEXT,     city TEXT,     state TEXT,     country TEXT); Anaheim Stadium','Anaheim','CA','US'); Ameriquest Field','Arlington','TX','US'); Union Grounds','Chicago','IL','US'); Cubs Park','Chicago','IL','US'); Comiskey Park II','Chicago','IL','US'); Briggs Stadium','Detroit','MI','US'); Astros Field','Houston','TX','US'); Pro Player Stadium; Dolphin Stadium; LandShark Stadium','Miami','FL','US'); SBC Park','San Francisco','CA','US'); CREATE TABLE pitching (     player_id TEXT,     year INTEGER,     stint INTEGER,     team_id TEXT,     league_id TEXT,     w INTEGER,     l INTEGER,     g INTEGER,     gs INTEGER,     cg INTEGER,     sho INTEGER,     sv INTEGER,     ipouts NUMERIC,     h INTEGER,     er INTEGER,     hr INTEGER,     bb INTEGER,     so INTEGER,     baopp NUMERIC,     era NUMERIC,     ibb NUMERIC,     wp NUMERIC,     hbp NUMERIC,     bk INTEGER,     bfp NUMERIC,     gf NUMERIC,     r INTEGER,     sh NUMERIC,     sf NUMERIC,     g_idp NUMERIC); CREATE TABLE pitching_postseason (     player_id TEXT,     year INTEGER,     round TEXT,     team_id TEXT,     league_id TEXT,     w INTEGER,     l INTEGER,     g INTEGER,     gs INTEGER,     cg INTEGER,     sho INTEGER,     sv INTEGER,     ipouts INTEGER,     h INTEGER,     er INTEGER,     hr INTEGER,     bb INTEGER,     so INTEGER,     baopp TEXT,     era NUMERIC,     ibb NUMERIC,     wp NUMERIC,     hbp NUMERIC,     bk NUMERIC,     bfp NUMERIC,     gf INTEGER,     r INTEGER,     sh NUMERIC,     sf NUMERIC,     g_idp NUMERIC); CREATE TABLE salary (     year INTEGER,     team_id TEXT,     league_id TEXT,     player_id TEXT,     salary INTEGER); CREATE TABLE college (     college_id TEXT,     name_full TEXT,     city TEXT,     state TEXT,     country TEXT); CREATE TABLE postseason (     year INTEGER,     round TEXT,     team_id_winner TEXT,     league_id_winner TEXT,     team_id_loser TEXT,     league_id_loser TEXT,     wins INTEGER,     losses INTEGER,     ties INTEGER); CREATE TABLE team (     year INTEGER,     league_id TEXT,     team_id TEXT,     franchise_id TEXT,     div_id TEXT,     rank INTEGER,     g INTEGER,     ghome NUMERIC,     w INTEGER,     l INTEGER,     div_win TEXT,     wc_win TEXT,     lg_win TEXT,     ws_win TEXT,     r INTEGER,     ab INTEGER,     h INTEGER,     double INTEGER,     triple INTEGER,     hr INTEGER,     bb INTEGER,     so NUMERIC,     sb NUMERIC,     cs NUMERIC,     hbp NUMERIC,     sf NUMERIC,     ra INTEGER,     er INTEGER,     era NUMERIC,     cg INTEGER,     sho INTEGER,     sv INTEGER,     ipouts INTEGER,     ha INTEGER,     hra INTEGER,     bba INTEGER,     soa INTEGER,     e INTEGER,     dp NUMERIC,     fp NUMERIC,     name TEXT,     park TEXT,     attendance NUMERIC,     bpf INTEGER,     ppf INTEGER,     team_id_br TEXT,     team_id_lahman45 TEXT,     team_id_retro TEXT); CREATE TABLE team_franchise (     franchise_id TEXT,     franchise_name TEXT,     active TEXT,     na_assoc TEXT); CREATE TABLE team_half (     year INTEGER,     league_id TEXT,     team_id TEXT,     half INTEGER,     div_id TEXT,     div_win TEXT,     rank INTEGER,     g INTEGER,     w INTEGER,     l INTEGER); COMMIT;",medium
1864,5508,mountain_photos,"SELECT max(height) ,  avg(height) FROM mountain",What are the maximum and average height of the mountains?,"PRAGMA foreign_keys=ON; BEGIN TRANSACTION; CREATE TABLE IF NOT EXISTS ""mountain"" ( ""id"" int, ""name"" text, ""Height"" real, ""Prominence"" real, ""Range"" text, ""Country"" text, primary key(""id"") ); CREATE TABLE IF NOT EXISTS ""camera_lens"" ( ""id"" int, ""brand"" text, ""name"" text, ""focal_length_mm"" real, ""max_aperture"" real, primary key(""id"") ); CREATE TABLE IF NOT EXISTS ""photos"" ( ""id"" int,  ""camera_lens_id"" int, ""mountain_id"" int, ""color"" text,  ""name"" text, primary key(""id""), foreign key(""camera_lens_id"") references `camera_lens`(""id""), foreign key(""mountain_id"") references `mountain`(""id"") ); COMMIT; ",medium
28,51,pets_1,SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20,Find number of pets owned by students who are older than 20.,"create table Student (        StuID    	INTEGER PRIMARY KEY,        LName		VARCHAR(12),        Fname		VARCHAR(12),        Age		INTEGER,        Sex		VARCHAR(1),        Major		INTEGER,        Advisor		INTEGER,        city_code	VARCHAR(3) );  create table Has_Pet (        StuID		INTEGER,        PetID		INTEGER,        FOREIGN KEY(PetID) REFERENCES Pets(PetID),        FOREIGN KEY(StuID) REFERENCES Student(StuID) );  create table Pets (        PetID		INTEGER PRIMARY KEY,        PetType		VARCHAR(20),        pet_age INTEGER,        weight REAL );  ",medium
1043,3559,apartment_rentals,"SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  2",What are the booking start and end dates of the apartments with more than 2 bedrooms?,"PRAGMA foreign_keys = ON;  CREATE TABLE Apartment_Buildings ( building_id INTEGER NOT NULL, building_short_name CHAR(15), building_full_name VARCHAR(80), building_description VARCHAR(255), building_address VARCHAR(255), building_manager VARCHAR(50), building_phone VARCHAR(80), PRIMARY KEY (building_id), UNIQUE (building_id) );  INSERT INTO `Apartment_Buildings` (`building_id`, `building_short_name`, `building_full_name`, `building_description`, `building_address`, `building_manager`, `building_phone`) VALUES (133, 'Normandie Court', 'Normandie Court', 'Studio', '7950 Casper Vista Apt. 176 Marquiseberg, CA 70496', 'Emma', '(948)040-1064x387'); INSERT INTO `Apartment_Buildings` (`building_id`, `building_short_name`, `building_full_name`, `building_description`, `building_address`, `building_manager`, `building_phone`) VALUES (153, 'Mercedes House', 'Mercedes House', 'Studio', '354 Otto Villages Charliefort, VT 71664', 'Brenden', '915-617-2408x832'); INSERT INTO `Apartment_Buildings` (`building_id`, `building_short_name`, `building_full_name`, `building_description`, `building_address`, `building_manager`, `building_phone`) VALUES (191, 'The Eugene', 'The Eugene', 'Flat', '71537 Gorczany Inlet Wisozkburgh, AL 08256', 'Melyssa', '(609)946-0491'); INSERT INTO `Apartment_Buildings` (`building_id`, `building_short_name`, `building_full_name`, `building_description`, `building_address`, `building_manager`, `building_phone`) VALUES (196, 'VIA 57 WEST', 'VIA 57 WEST', 'Studio', '959 Ethel Viaduct West Efrainburgh, DE 40074', 'Kathlyn', '681.772.2454'); INSERT INTO `Apartment_Buildings` (`building_id`, `building_short_name`, `building_full_name`, `building_description`, `building_address`, `building_manager`, `building_phone`) VALUES (225, 'Columbus Square', 'Columbus Square', 'Studio', '0703 Danika Mountains Apt. 362 Mohrland, AL 56839-5028', 'Kyle', '1-724-982-9507x640'); INSERT INTO `Apartment_Buildings` (`building_id`, `building_short_name`, `building_full_name`, `building_description`, `building_address`, `building_manager`, `building_phone`) VALUES (532, 'Avalon Park', 'Avalon Park', 'Duplex', '6827 Kessler Parkway Suite 908 Ahmedberg, WI 48788', 'Albert', '376-017-3538'); INSERT INTO `Apartment_Buildings` (`building_id`, `building_short_name`, `building_full_name`, `building_description`, `building_address`, `building_manager`, `building_phone`) VALUES (556, 'Peter Cooper Village', 'Peter Cooper Village', 'Flat', '861 Narciso Glens Suite 392 East Ottis, ND 73970', 'Darlene', '1-224-619-0295x13195'); INSERT INTO `Apartment_Buildings` (`building_id`, `building_short_name`, `building_full_name`, `building_description`, `building_address`, `building_manager`, `building_phone`) VALUES (624, 'Stuyvesant Town', 'Stuyvesant Town', 'Studio', '101 Queenie Mountains Suite 619 New Korbinmouth, KS 88726-1376', 'Marie', '(145)411-6406'); INSERT INTO `Apartment_Buildings` (`building_id`, `building_short_name`, `building_full_name`, `building_description`, `building_address`, `building_manager`, `building_phone`) VALUES (644, 'The Anthem', 'The Anthem', 'Flat', '50804 Mason Isle Suite 844 West Whitney, ID 66511', 'Ewald', '(909)086-5221x3455'); INSERT INTO `Apartment_Buildings` (`building_id`, `building_short_name`, `building_full_name`, `building_description`, `building_address`, `building_manager`, `building_phone`) VALUES (673, 'Barclay Tower', 'Barclay Tower', 'Flat', '1579 Runte Forges Apt. 548 Leuschkeland, OK 12009-8683', 'Rogers', '1-326-267-3386x613'); INSERT INTO `Apartment_Buildings` (`building_id`, `building_short_name`, `building_full_name`, `building_description`, `building_address`, `building_manager`, `building_phone`) VALUES (734, 'Windsor Court', 'Windsor Court', 'Studio', '601 Graham Roads Port Luz, VA 29660-6703', 'Olaf', '(480)480-7401'); INSERT INTO `Apartment_Buildings` (`building_id`, `building_short_name`, `building_full_name`, `building_description`, `building_address`, `building_manager`, `building_phone`) VALUES (744, 'Silver Towers', 'Silver Towers', 'Flat', '1844 Armstrong Stravenue Suite 853 Myrnatown, CT 13528', 'Claude', '1-667-728-2287x3158'); INSERT INTO `Apartment_Buildings` (`building_id`, `building_short_name`, `building_full_name`, `building_description`, `building_address`, `building_manager`, `building_phone`) VALUES (790, 'Biltmore Plaza', 'Biltmore Plaza', 'Duplex', '489 Josh Orchard Apt. 998 Sipesview, DE 69053', 'Sydni', '544-148-5565x2847'); INSERT INTO `Apartment_Buildings` (`building_id`, `building_short_name`, `building_full_name`, `building_description`, `building_address`, `building_manager`, `building_phone`) VALUES (808, 'Petersfield', 'Petersfield', 'Studio', '54686 Christopher Circles Apt. 321 Daytonland, ID 88081-3991', 'Juvenal', '318-398-8140'); INSERT INTO `Apartment_Buildings` (`building_id`, `building_short_name`, `building_full_name`, `building_description`, `building_address`, `building_manager`, `building_phone`) VALUES (968, 'The Clinton', 'The Clinton', 'Flat', '012 Arnoldo Mountain Gerholdland, ID 23342', 'Holly', '1-605-511-1973x25011');  CREATE TABLE Apartments ( apt_id INTEGER NOT NULL , building_id INTEGER NOT NULL, apt_type_code CHAR(15), apt_number CHAR(10), bathroom_count INTEGER, bedroom_count INTEGER, room_count CHAR(5), PRIMARY KEY (apt_id), UNIQUE (apt_id), FOREIGN KEY (building_id) REFERENCES Apartment_Buildings (building_id) ); CREATE TABLE Apartment_Facilities ( apt_id INTEGER NOT NULL, facility_code CHAR(15) NOT NULL, PRIMARY KEY (apt_id, facility_code), FOREIGN KEY (apt_id) REFERENCES Apartments (apt_id) ); CREATE TABLE Guests ( guest_id INTEGER NOT NULL , gender_code CHAR(1), guest_first_name VARCHAR(80), guest_last_name VARCHAR(80), date_of_birth DATETIME, PRIMARY KEY (guest_id), UNIQUE (guest_id) );  CREATE TABLE Apartment_Bookings ( apt_booking_id INTEGER NOT NULL, apt_id INTEGER, guest_id INTEGER NOT NULL, booking_status_code CHAR(15) NOT NULL, booking_start_date DATETIME, booking_end_date DATETIME, PRIMARY KEY (apt_booking_id), UNIQUE (apt_booking_id), FOREIGN KEY (apt_id) REFERENCES Apartments (apt_id), FOREIGN KEY (guest_id) REFERENCES Guests (guest_id) ); CREATE TABLE View_Unit_Status ( apt_id INTEGER, apt_booking_id INTEGER, status_date DATETIME NOT NULL, available_yn BIT, PRIMARY KEY (status_date), FOREIGN KEY (apt_id) REFERENCES Apartments (apt_id), FOREIGN KEY (apt_booking_id) REFERENCES Apartment_Bookings (apt_booking_id) ); ",medium
965,3397,match_season,"SELECT DISTINCT POSITION FROM match_season WHERE College  =  ""UCLA"" OR College  =  ""Duke""",Show the distinct position of players from college UCLA or Duke.,"PRAGMA foreign_keys = ON;   CREATE TABLE ""country"" (     ""Country_id"" int,     ""Country_name"" text,     ""Capital"" text,     ""Official_native_language"" text,     PRIMARY KEY (""Country_id"") );   CREATE TABLE `team` (       `Team_id` int,       `Name` text,       PRIMARY KEY (`Team_id`) ) ;  CREATE TABLE ""match_season"" (     ""Season"" real,     ""Player"" text,     ""Position"" text,     ""Country"" int,     ""Team"" int,     ""Draft_Pick_Number"" int,     ""Draft_Class"" text,     ""College"" text,     PRIMARY KEY (""Season""),     FOREIGN KEY (`Country`) REFERENCES `country`(`Country_id`),     FOREIGN KEY (`Team`) REFERENCES `team`(`Team_id`) );   CREATE TABLE ""player"" (     ""Player_ID"" int,     ""Player"" text,     ""Years_Played"" text,     ""Total_WL"" text,     ""Singles_WL"" text,     ""Doubles_WL"" text,     ""Team"" int,     PRIMARY KEY (""Player_ID""),     FOREIGN KEY (`Team`) REFERENCES `team`(`Team_id`) );    ",medium
1131,3745,customers_and_invoices,"SELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  4",What are the ids and names of accounts with 4 or more transactions?,"PRAGMA foreign_keys = ON; CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_first_name` VARCHAR(50), `customer_middle_initial` VARCHAR(1), `customer_last_name` VARCHAR(50), `gender` VARCHAR(1), `email_address` VARCHAR(255), `login_name` VARCHAR(80), `login_password` VARCHAR(20), `phone_number` VARCHAR(255), `town_city` VARCHAR(50), `state_county_province` VARCHAR(50), `country` VARCHAR(50) );  CREATE TABLE `Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `date_order_placed` DATETIME NOT NULL, `order_details` VARCHAR(255), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) ); CREATE TABLE `Invoices` ( `invoice_number` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `invoice_date` DATETIME, FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ) ); CREATE TABLE `Accounts` ( `account_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `date_account_opened` DATETIME, `account_name` VARCHAR(50), `other_account_details` VARCHAR(255), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) );    CREATE TABLE `Product_Categories` ( `production_type_code` VARCHAR(15) PRIMARY KEY, `product_type_description` VARCHAR(80), `vat_rating` DECIMAL(19,4) ); CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `parent_product_id` INTEGER, `production_type_code` VARCHAR(15) NOT NULL, `unit_price` DECIMAL(19,4), `product_name` VARCHAR(80), `product_color` VARCHAR(20), `product_size` VARCHAR(20), FOREIGN KEY (`production_type_code` ) REFERENCES `Product_Categories`(`production_type_code` ) );  CREATE TABLE `Financial_Transactions` ( `transaction_id` INTEGER NOT NULL , `account_id` INTEGER NOT NULL, `invoice_number` INTEGER, `transaction_type` VARCHAR(15) NOT NULL, `transaction_date` DATETIME, `transaction_amount` DECIMAL(19,4), `transaction_comment` VARCHAR(255), `other_transaction_details` VARCHAR(255), FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ), FOREIGN KEY (`account_id` ) REFERENCES `Accounts`(`account_id` ) ); CREATE TABLE `Order_Items` ( `order_item_id` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, `product_quantity` VARCHAR(50), `other_order_item_details` VARCHAR(255), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ), FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ) );   CREATE TABLE `Invoice_Line_Items` ( `order_item_id` INTEGER NOT NULL, `invoice_number` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, `product_title` VARCHAR(80), `product_quantity` VARCHAR(50), `product_price` DECIMAL(19,4), `derived_product_cost` DECIMAL(19,4), `derived_vat_payable` DECIMAL(19,4), `derived_total_cost` DECIMAL(19,4), FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ), FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) ); ",medium
366,859,dog_kennels,"SELECT email_address ,  cell_number ,  home_phone FROM professionals","List the email, cell phone and home phone of all the professionals.","PRAGMA foreign_keys = ON; CREATE TABLE `Breeds` ( `breed_code` VARCHAR(10) PRIMARY KEY , `breed_name` VARCHAR(80) ); CREATE TABLE `Charges` ( `charge_id` INTEGER PRIMARY KEY , `charge_type` VARCHAR(10), `charge_amount` DECIMAL(19,4) ); CREATE TABLE `Sizes` ( `size_code` VARCHAR(10) PRIMARY KEY , `size_description` VARCHAR(80) );  CREATE TABLE `Treatment_Types` ( `treatment_type_code` VARCHAR(10) PRIMARY KEY , `treatment_type_description` VARCHAR(80) ); CREATE TABLE `Owners` ( `owner_id` INTEGER PRIMARY KEY , `first_name` VARCHAR(50), `last_name` VARCHAR(50), `street` VARCHAR(50), `city` VARCHAR(50), `state` VARCHAR(20), `zip_code` VARCHAR(20), `email_address` VARCHAR(50), `home_phone` VARCHAR(20), `cell_number` VARCHAR(20) ); CREATE TABLE `Dogs` ( `dog_id` INTEGER PRIMARY KEY , `owner_id` INTEGER NOT NULL, `abandoned_yn` VARCHAR(1), `breed_code` VARCHAR(10) NOT NULL, `size_code` VARCHAR(10) NOT NULL, `name` VARCHAR(50), `age` VARCHAR(20), `date_of_birth` DATETIME, `gender` VARCHAR(1), `weight` VARCHAR(20), `date_arrived` DATETIME, `date_adopted` DATETIME, `date_departed` DATETIME, FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ), FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ), FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ), FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ) );  CREATE TABLE `Professionals` ( `professional_id` INTEGER PRIMARY KEY , `role_code` VARCHAR(10) NOT NULL, `first_name` VARCHAR(50), `street` VARCHAR(50), `city` VARCHAR(50), `state` VARCHAR(20), `zip_code` VARCHAR(20), `last_name` VARCHAR(50), `email_address` VARCHAR(50), `home_phone` VARCHAR(20), `cell_number` VARCHAR(20) );  CREATE TABLE `Treatments` ( `treatment_id` INTEGER PRIMARY KEY , `dog_id` INTEGER NOT NULL, `professional_id` INTEGER NOT NULL, `treatment_type_code` VARCHAR(10) NOT NULL, `date_of_treatment` DATETIME, `cost_of_treatment` DECIMAL(19,4), FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ), FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ), FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` ) );  INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491 Gleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904 Corneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (3, 'Employee', 'Olaf', '68589 Bradly Manor New Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (4, 'Veterenarian', 'Vernice', '72532 Hane Course Lake Berylland, ND 95283', 'Domenickton', 'Mississippi', '02281', 'Tillman', 'lourdes.lowe@example.net', '312.216.3352', '00230569697'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (5, 'Veterenarian', 'Danny', '188 VonRueden Tunnel Suite 630 North Macibury, NV ', 'New Laurytown', 'Hawaii', '84515', 'Considine', 'mekhi.little@example.org', '1-609-566-2752x25197', '011.193.9081x3186'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (6, 'Veterenarian', 'Ruben', '17286 Waters Green East Bernadinefort, CA 89573', 'Baileymouth', 'NewMexico', '52476', 'O''Reilly', 'jacynthe.mclaughlin@example.net', '+43(5)1132733868', '139-321-7313'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (7, 'Veterenarian', 'Velva', '44234 Marvin Shoals Suite 659 North Frances, AL 23', 'McLaughlinfort', 'NorthCarolina', '67980', 'Hayes', 'lambert62@example.org', '022.529.0550x1319', '499-434-0215x1628'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (8, 'Employee', 'Karley', '36895 Eli Ferry Port Marcelle, FL 45712', 'Kirastad', 'Indiana', '33020', 'Hyatt', 'goyette.roosevelt@example.net', '891.475.2256', '328.842.3792'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (9, 'Veterenarian', 'Monte', '07073 Brenna Ways Suite 089 Lowehaven, KY 93275-96', 'South Rockyport', 'SouthCarolina', '80775', 'Kshlerin', 'schneider.kathryne@example.org', '320-508-6023', '962-983-8109x3509'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (10, 'Employee', 'Domenica', '7284 Torphy Flats Apt. 610 Diannaburgh, SC 78560', 'New Maryjane', 'California', '54312', 'Jacobs', 'jerrod.bahringer@example.org', '(230)338-3342x585', '461-801-2600'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (11, 'Employee', 'Brady', '09615 McKenzie Stravenue Apt. 128 West Elliottview', 'Raynorfort', 'Alabama', '07412', 'Pouros', 'west.eula@example.net', '(920)304-4499x59146', '609-405-2990'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (12, 'Veterenarian', 'Winfield', '92912 Langworth Valleys Apt. 743 Thompsonborough, ', 'Juddton', 'Utah', '34041', 'Christiansen', 'marquardt.furman@example.org', '246-951-0080x76716', '1-181-670-9466'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (13, 'Veterenarian', 'Ericka', '7783 Abraham Alley Port Madelynhaven, KY 59172-273', 'Borisside', 'Wyoming', '17902', 'Murazik', 'delphine29@example.com', '346.594.3739', '880-659-7577x736'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (14, 'Employee', 'Sigurd', '390 Bryce Drive North Dock, LA 65357-7228', 'East Ila', 'Connecticut', '41215', 'Frami', 'cole.margarita@example.org', '971.048.3763x9404', '1-185-137-1945x409'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (15, 'Employee', 'Lesly', '63949 Keeling Landing Apt. 502 Johnsview, SD 06780', 'North Adelberttown', 'Montana', '98844', 'Walter', 'jeichmann@example.com', '1-138-287-3775', '1-258-285-4707x8020'); ",medium
2117,6218,network_2,"SELECT avg(age) ,  job FROM Person WHERE gender  =  'male' GROUP BY job",What is average age of male for different job title?,"CREATE TABLE Person (   name varchar(20) PRIMARY KEY,   age INTEGER,   city TEXT,   gender TEXT,   job TEXT );  CREATE TABLE PersonFriend (   name varchar(20),   friend varchar(20),   year INTEGER,   FOREIGN KEY (name) REFERENCES Person(name),   FOREIGN KEY (friend) REFERENCES Person(name) );  ",medium
1825,5392,music_1,"SELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  ""bangla""",What is the average rating and resolution of all bangla songs?," --data definition  create table genre( 	g_name varchar2(20) not null, 	rating varchar2(10), 	most_popular_in varchar2(50), 	primary key(g_name) );  create table artist( 	artist_name varchar2(50) not null, 	country varchar2(20), 	gender varchar2(20), 	preferred_genre varchar2(50), 	constraint a_name primary key(artist_name), 	foreign key(preferred_genre) references genre(g_name) ON DELETE CASCADE );  create table files( 	f_id number(10) not null, 	artist_name varchar2(50), 	file_size varchar2(20), 	duration varchar2(20), 	formats varchar2(20), 	primary key(f_id), 	foreign key(artist_name) references artist(artist_name) ON DELETE CASCADE );   create table song( 	song_name varchar2(50), 	artist_name varchar2(50), 	country varchar2(20), 	f_id number(10),     	genre_is varchar2(20), 	rating number(10) check(rating>0 and rating<11), 	languages varchar2(20), 	releasedate Date,  	resolution number(10) not null, 	constraint s_name primary key(song_name), 	foreign key(artist_name) references artist(artist_name) ON DELETE CASCADE, 	foreign key(f_id) references files(f_id) ON DELETE CASCADE, 	foreign key(genre_is) references genre(g_name) ON DELETE CASCADE );   --insertion of attributes in the table   ",medium
761,2895,flight_1,"SELECT name ,  salary FROM Employee ORDER BY salary",What is the name and salary of all employees in order of salary?,"-- drop table flight cascade constraints; -- drop table aircraft cascade constraints; -- drop table employee cascade constraints; -- drop table certificate cascade constraints;  create table flight( 	flno number(4,0) primary key, 	origin varchar2(20), 	destination varchar2(20), 	distance number(6,0), 	departure_date date, 	arrival_date date, 	price number(7,2),     aid number(9,0),     foreign key(""aid"") references `aircraft`(""aid""));  create table aircraft( 	aid number(9,0) primary key, 	name varchar2(30), 	distance number(6,0));  create table employee( 	eid number(9,0) primary key, 	name varchar2(30), 	salary number(10,2));  create table certificate( 	eid number(9,0), 	aid number(9,0), 	primary key(eid,aid), 	foreign key(""eid"") references `employee`(""eid""), 	foreign key(""aid"") references `aircraft`(""aid""));   ",medium
1255,4004,products_for_hire,SELECT daily_hire_cost FROM Products_for_hire WHERE product_name LIKE '%Book%',What are the daily hire costs for the products with substring 'Book' in its name?,"PRAGMA foreign_keys = ON;  CREATE TABLE `Discount_Coupons` ( `coupon_id` INTEGER PRIMARY KEY, `date_issued` DATETIME, `coupon_amount` DECIMAL(19,4) ); CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `coupon_id` INTEGER NOT NULL, `good_or_bad_customer` VARCHAR(4), `first_name` VARCHAR(80), `last_name` VARCHAR(80), `gender_mf` VARCHAR(1), `date_became_customer` DATETIME, `date_last_hire` DATETIME, FOREIGN KEY (`coupon_id` ) REFERENCES `Discount_Coupons`(`coupon_id` ) ); CREATE TABLE `Bookings` ( `booking_id` INTEGER PRIMARY KEY , `customer_id` INTEGER NOT NULL, `booking_status_code` VARCHAR(10) NOT NULL, `returned_damaged_yn` VARCHAR(40), `booking_start_date` DATETIME, `booking_end_date` DATETIME, `count_hired` VARCHAR(40), `amount_payable` DECIMAL(19,4), `amount_of_discount` DECIMAL(19,4), `amount_outstanding` DECIMAL(19,4), `amount_of_refund` DECIMAL(19,4), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) );  CREATE TABLE `Products_for_Hire` ( `product_id` INTEGER PRIMARY KEY, `product_type_code` VARCHAR(15) NOT NULL, `daily_hire_cost` DECIMAL(19,4), `product_name` VARCHAR(80), `product_description` VARCHAR(255) );  CREATE TABLE `Payments` ( `payment_id` INTEGER PRIMARY KEY, `booking_id` INTEGER, `customer_id` INTEGER NOT NULL, `payment_type_code` VARCHAR(15) NOT NULL, `amount_paid_in_full_yn` VARCHAR(1), `payment_date` DATETIME, `amount_due` DECIMAL(19,4), `amount_paid` DECIMAL(19,4), FOREIGN KEY (`booking_id` ) REFERENCES `Bookings`(`booking_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) );  CREATE TABLE `Products_Booked` ( `booking_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, `returned_yn` VARCHAR(1), `returned_late_yn` VARCHAR(1), `booked_count` INTEGER, `booked_amount` FLOAT NULL, PRIMARY KEY (`booking_id`, `product_id`) FOREIGN KEY (`booking_id` ) REFERENCES `Bookings`(`booking_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products_for_Hire`(`product_id` ) );  CREATE TABLE `View_Product_Availability` ( `product_id` INTEGER NOT NULL, `booking_id` INTEGER NOT NULL, `status_date` DATETIME PRIMARY KEY, `available_yn` VARCHAR(1), FOREIGN KEY (`booking_id` ) REFERENCES `Bookings`(`booking_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products_for_Hire`(`product_id` ) ); ",medium
681,2734,bike_1,"SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3","What is the date, average temperature and mean humidity for the days with the 3 largest maximum gust speeds?","PRAGMA foreign_keys=OFF; BEGIN TRANSACTION; CREATE TABLE station (     id INTEGER PRIMARY KEY,     name TEXT,     lat NUMERIC,     long NUMERIC,     dock_count INTEGER,     city TEXT,     installation_date TEXT); CREATE TABLE status (     station_id INTEGER,     bikes_available INTEGER,     docks_available INTEGER,     time TEXT,     FOREIGN KEY (station_id) REFERENCES station(id) ); CREATE TABLE trip (     id INTEGER PRIMARY KEY,     duration INTEGER,     start_date TEXT,     start_station_name TEXT, -- this should be removed     start_station_id INTEGER,     end_date TEXT,     end_station_name TEXT, -- this should be removed     end_station_id INTEGER,     bike_id INTEGER,     subscription_type TEXT,     zip_code INTEGER); CREATE TABLE weather (     date TEXT,     max_temperature_f INTEGER,     mean_temperature_f INTEGER,     min_temperature_f INTEGER,     max_dew_point_f INTEGER,     mean_dew_point_f INTEGER,     min_dew_point_f INTEGER,     max_humidity INTEGER,     mean_humidity INTEGER,     min_humidity INTEGER,     max_sea_level_pressure_inches NUMERIC,     mean_sea_level_pressure_inches NUMERIC,     min_sea_level_pressure_inches NUMERIC,     max_visibility_miles INTEGER,     mean_visibility_miles INTEGER,     min_visibility_miles INTEGER,     max_wind_Speed_mph INTEGER,     mean_wind_speed_mph INTEGER,     max_gust_speed_mph INTEGER,     precipitation_inches INTEGER,     cloud_cover INTEGER,     events TEXT,     wind_dir_degrees INTEGER,     zip_code INTEGER); COMMIT;",medium
829,3074,journal_committee,"SELECT Age ,  COUNT(*) FROM editor GROUP BY Age",What are the different ages of editors? Show each age along with the number of editors of that age.,"CREATE TABLE IF NOT EXISTS ""journal"" ( ""Journal_ID"" int, ""Date"" text, ""Theme"" text, ""Sales"" int, PRIMARY KEY (""Journal_ID"") ); CREATE TABLE IF NOT EXISTS ""editor"" ( ""Editor_ID"" int, ""Name"" text, ""Age"" real, PRIMARY KEY (""Editor_ID"") ); CREATE TABLE IF NOT EXISTS ""journal_committee"" ( ""Editor_ID"" int, ""Journal_ID"" int, ""Work_Type"" text, PRIMARY KEY (""Editor_ID"",""Journal_ID""), FOREIGN KEY (""Editor_ID"") REFERENCES `editor`(""Editor_ID""), FOREIGN KEY (""Journal_ID"") REFERENCES `journal`(""Journal_ID"") ); ",medium
171,392,course_teach,SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1,Where is the youngest teacher from?," PRAGMA foreign_keys = ON;  CREATE TABLE ""course"" ( ""Course_ID"" int, ""Staring_Date"" text, ""Course"" text, PRIMARY KEY (""Course_ID"") );  CREATE TABLE ""teacher"" ( ""Teacher_ID"" int, ""Name"" text, ""Age"" text, ""Hometown"" text, PRIMARY KEY (""Teacher_ID"") );  CREATE TABLE ""course_arrange"" ( ""Course_ID"" int, ""Teacher_ID"" int, ""Grade"" int, PRIMARY KEY (""Course_ID"",""Teacher_ID"",""Grade""), FOREIGN KEY (""Course_ID"") REFERENCES `course`(""Course_ID""), FOREIGN KEY (""Teacher_ID"") REFERENCES `teacher`(""Teacher_ID"") ); ",medium
2967,8450,activity_1,"SELECT building ,  count(*) FROM Faculty GROUP BY building",How many faculty members does each building have? List the result with the name of the building.,"create table Activity (   actid INTEGER PRIMARY KEY,   activity_name varchar(25) );  create table Participates_in (   stuid INTEGER,   actid INTEGER,   FOREIGN KEY(stuid) REFERENCES Student(StuID),   FOREIGN KEY(actid) REFERENCES Activity(actid) );  create table Faculty_Participates_in (   FacID INTEGER,   actid INTEGER,   FOREIGN KEY(FacID) REFERENCES Faculty(FacID),   FOREIGN KEY(actid) REFERENCES Activity(actid) );  create table Student (         StuID        INTEGER PRIMARY KEY,         LName        VARCHAR(12),         Fname        VARCHAR(12),         Age      INTEGER,         Sex      VARCHAR(1),         Major        INTEGER,         Advisor      INTEGER,         city_code    VARCHAR(3)  );  create table Faculty (        FacID 	       INTEGER PRIMARY KEY,        Lname		VARCHAR(15),        Fname		VARCHAR(15),        Rank		VARCHAR(15),        Sex		VARCHAR(1),        Phone		INTEGER,        Room		VARCHAR(5),        Building		VARCHAR(13) );   ",medium
396,1154,geo,"SELECT river_name FROM river WHERE LENGTH  >  750 AND traverse  =  ""illinois"";",name the major rivers in illinois,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );",medium
351,824,dog_kennels,"SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",Find the arriving date and the departing date of the dogs that received a treatment.,"PRAGMA foreign_keys = ON; CREATE TABLE `Breeds` ( `breed_code` VARCHAR(10) PRIMARY KEY , `breed_name` VARCHAR(80) ); CREATE TABLE `Charges` ( `charge_id` INTEGER PRIMARY KEY , `charge_type` VARCHAR(10), `charge_amount` DECIMAL(19,4) ); CREATE TABLE `Sizes` ( `size_code` VARCHAR(10) PRIMARY KEY , `size_description` VARCHAR(80) );  CREATE TABLE `Treatment_Types` ( `treatment_type_code` VARCHAR(10) PRIMARY KEY , `treatment_type_description` VARCHAR(80) ); CREATE TABLE `Owners` ( `owner_id` INTEGER PRIMARY KEY , `first_name` VARCHAR(50), `last_name` VARCHAR(50), `street` VARCHAR(50), `city` VARCHAR(50), `state` VARCHAR(20), `zip_code` VARCHAR(20), `email_address` VARCHAR(50), `home_phone` VARCHAR(20), `cell_number` VARCHAR(20) ); CREATE TABLE `Dogs` ( `dog_id` INTEGER PRIMARY KEY , `owner_id` INTEGER NOT NULL, `abandoned_yn` VARCHAR(1), `breed_code` VARCHAR(10) NOT NULL, `size_code` VARCHAR(10) NOT NULL, `name` VARCHAR(50), `age` VARCHAR(20), `date_of_birth` DATETIME, `gender` VARCHAR(1), `weight` VARCHAR(20), `date_arrived` DATETIME, `date_adopted` DATETIME, `date_departed` DATETIME, FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ), FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ), FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ), FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ) );  CREATE TABLE `Professionals` ( `professional_id` INTEGER PRIMARY KEY , `role_code` VARCHAR(10) NOT NULL, `first_name` VARCHAR(50), `street` VARCHAR(50), `city` VARCHAR(50), `state` VARCHAR(20), `zip_code` VARCHAR(20), `last_name` VARCHAR(50), `email_address` VARCHAR(50), `home_phone` VARCHAR(20), `cell_number` VARCHAR(20) );  CREATE TABLE `Treatments` ( `treatment_id` INTEGER PRIMARY KEY , `dog_id` INTEGER NOT NULL, `professional_id` INTEGER NOT NULL, `treatment_type_code` VARCHAR(10) NOT NULL, `date_of_treatment` DATETIME, `cost_of_treatment` DECIMAL(19,4), FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ), FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ), FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` ) );  INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (1, 'Employee', 'Taryn', '6915 Oberbrunner Point Suite 491 Gleasonville, LA ', 'West Heidi', 'Indiana', '06646', 'Braun', 'deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (2, 'Employee', 'Jayson', '88665 Terence Lodge Apt. 904 Corneliusfort, NC 194', 'North Odellfurt', 'Connecticut', '43129', 'Ullrich', 'lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (3, 'Employee', 'Olaf', '68589 Bradly Manor New Audrey, IN 91497', 'Jaceton', 'Wisconsin', '77129', 'Watsica', 'uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (4, 'Veterenarian', 'Vernice', '72532 Hane Course Lake Berylland, ND 95283', 'Domenickton', 'Mississippi', '02281', 'Tillman', 'lourdes.lowe@example.net', '312.216.3352', '00230569697'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (5, 'Veterenarian', 'Danny', '188 VonRueden Tunnel Suite 630 North Macibury, NV ', 'New Laurytown', 'Hawaii', '84515', 'Considine', 'mekhi.little@example.org', '1-609-566-2752x25197', '011.193.9081x3186'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (6, 'Veterenarian', 'Ruben', '17286 Waters Green East Bernadinefort, CA 89573', 'Baileymouth', 'NewMexico', '52476', 'O''Reilly', 'jacynthe.mclaughlin@example.net', '+43(5)1132733868', '139-321-7313'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (7, 'Veterenarian', 'Velva', '44234 Marvin Shoals Suite 659 North Frances, AL 23', 'McLaughlinfort', 'NorthCarolina', '67980', 'Hayes', 'lambert62@example.org', '022.529.0550x1319', '499-434-0215x1628'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (8, 'Employee', 'Karley', '36895 Eli Ferry Port Marcelle, FL 45712', 'Kirastad', 'Indiana', '33020', 'Hyatt', 'goyette.roosevelt@example.net', '891.475.2256', '328.842.3792'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (9, 'Veterenarian', 'Monte', '07073 Brenna Ways Suite 089 Lowehaven, KY 93275-96', 'South Rockyport', 'SouthCarolina', '80775', 'Kshlerin', 'schneider.kathryne@example.org', '320-508-6023', '962-983-8109x3509'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (10, 'Employee', 'Domenica', '7284 Torphy Flats Apt. 610 Diannaburgh, SC 78560', 'New Maryjane', 'California', '54312', 'Jacobs', 'jerrod.bahringer@example.org', '(230)338-3342x585', '461-801-2600'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (11, 'Employee', 'Brady', '09615 McKenzie Stravenue Apt. 128 West Elliottview', 'Raynorfort', 'Alabama', '07412', 'Pouros', 'west.eula@example.net', '(920)304-4499x59146', '609-405-2990'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (12, 'Veterenarian', 'Winfield', '92912 Langworth Valleys Apt. 743 Thompsonborough, ', 'Juddton', 'Utah', '34041', 'Christiansen', 'marquardt.furman@example.org', '246-951-0080x76716', '1-181-670-9466'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (13, 'Veterenarian', 'Ericka', '7783 Abraham Alley Port Madelynhaven, KY 59172-273', 'Borisside', 'Wyoming', '17902', 'Murazik', 'delphine29@example.com', '346.594.3739', '880-659-7577x736'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (14, 'Employee', 'Sigurd', '390 Bryce Drive North Dock, LA 65357-7228', 'East Ila', 'Connecticut', '41215', 'Frami', 'cole.margarita@example.org', '971.048.3763x9404', '1-185-137-1945x409'); INSERT INTO Professionals (`professional_id`, `role_code`, `first_name`, `street`, `city`, `state`, `zip_code`, `last_name`, `email_address`, `home_phone`, `cell_number`) VALUES (15, 'Employee', 'Lesly', '63949 Keeling Landing Apt. 502 Johnsview, SD 06780', 'North Adelberttown', 'Montana', '98844', 'Walter', 'jeichmann@example.com', '1-138-287-3775', '1-258-285-4707x8020'); ",medium
473,1749,scholar,"SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  ""nature communications"";",How many papers was published in nature communications in 2015,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); ",medium
2667,7693,cre_Theme_park,"SELECT hotel_id ,  star_rating_code FROM HOTELS ORDER BY price_range ASC","Show the id and star rating of each hotel, ordered by its price from low to high.","PRAGMA foreign_keys = ON; CREATE TABLE Ref_Hotel_Star_Ratings ( star_rating_code CHAR(15) NOT NULL, star_rating_description VARCHAR(80), PRIMARY KEY (star_rating_code), UNIQUE (star_rating_code) );   CREATE TABLE Locations ( Location_ID INTEGER NOT NULL, Location_Name VARCHAR(255), Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Location_ID) ); CREATE TABLE Ref_Attraction_Types ( Attraction_Type_Code CHAR(15) NOT NULL, Attraction_Type_Description VARCHAR(255), PRIMARY KEY (Attraction_Type_Code), UNIQUE (Attraction_Type_Code) );  CREATE TABLE Visitors ( Tourist_ID INTEGER NOT NULL, Tourist_Details VARCHAR(255), PRIMARY KEY (Tourist_ID), UNIQUE (Tourist_ID) ); CREATE TABLE Features ( Feature_ID INTEGER NOT NULL, Feature_Details VARCHAR(255), PRIMARY KEY (Feature_ID) );  CREATE TABLE Hotels ( hotel_id INTEGER NOT NULL, star_rating_code CHAR(15) NOT NULL, pets_allowed_yn CHAR(1), price_range real, other_hotel_details VARCHAR(255), PRIMARY KEY (hotel_id), FOREIGN KEY (star_rating_code) REFERENCES Ref_Hotel_Star_Ratings (star_rating_code) );  CREATE TABLE Tourist_Attractions ( Tourist_Attraction_ID INTEGER NOT NULL, Attraction_Type_Code CHAR(15) NOT NULL, Location_ID INTEGER NOT NULL, How_to_Get_There VARCHAR(255), Name VARCHAR(255), Description VARCHAR(255), Opening_Hours VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Tourist_Attraction_ID), FOREIGN KEY (Location_ID) REFERENCES Locations (Location_ID), FOREIGN KEY (Attraction_Type_Code) REFERENCES Ref_Attraction_Types (Attraction_Type_Code) );  CREATE TABLE Street_Markets ( Market_ID INTEGER NOT NULL, Market_Details VARCHAR(255), PRIMARY KEY (Market_ID), FOREIGN KEY (Market_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Shops ( Shop_ID INTEGER NOT NULL, Shop_Details VARCHAR(255), PRIMARY KEY (Shop_ID), FOREIGN KEY (Shop_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Museums ( Museum_ID INTEGER NOT NULL, Museum_Details VARCHAR(255), PRIMARY KEY (Museum_ID), FOREIGN KEY (Museum_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Royal_Family ( Royal_Family_ID INTEGER NOT NULL, Royal_Family_Details VARCHAR(255), PRIMARY KEY (Royal_Family_ID), FOREIGN KEY (Royal_Family_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Theme_Parks ( Theme_Park_ID INTEGER NOT NULL, Theme_Park_Details VARCHAR(255), PRIMARY KEY (Theme_Park_ID), FOREIGN KEY (Theme_Park_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) );   CREATE TABLE Visits ( Visit_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Tourist_ID INTEGER NOT NULL, Visit_Date DATETIME NOT NULL, Visit_Details VARCHAR(40) NOT NULL, PRIMARY KEY (Visit_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID), FOREIGN KEY (Tourist_ID) REFERENCES Visitors (Tourist_ID) );   CREATE TABLE Photos ( Photo_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Name VARCHAR(255), Description VARCHAR(255), Filename VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Photo_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Staff ( Staff_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Name VARCHAR(40), Other_Details VARCHAR(255), PRIMARY KEY (Staff_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) );   CREATE TABLE Tourist_Attraction_Features ( Tourist_Attraction_ID INTEGER NOT NULL, Feature_ID INTEGER NOT NULL, PRIMARY KEY (Tourist_Attraction_ID, Feature_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID), FOREIGN KEY (Feature_ID) REFERENCES Features (Feature_ID) ); ",medium
99,242,flight_2,SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10,Which airlines have at least 10 flights?,"CREATE TABLE 'airlines' ( 	uid INTEGER PRIMARY KEY,  	Airline TEXT,  	Abbreviation TEXT,  	Country TEXT ); CREATE TABLE 'airports' ( 	City TEXT,  	AirportCode TEXT PRIMARY KEY,  	AirportName TEXT,  	Country TEXT,  	CountryAbbrev TEXT ); CREATE TABLE 'flights' ( 	Airline INTEGER,  	FlightNo INTEGER,  	SourceAirport TEXT,  	DestAirport TEXT,  	PRIMARY KEY(Airline, FlightNo), 	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode), 	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode) );",medium
1163,3808,theme_gallery,SELECT count(*) FROM artist WHERE age  >  46 AND year_join  >  1990,How many artists are above age 46 and joined after 1990?," PRAGMA foreign_keys = ON;  CREATE TABLE ""artist"" ( ""Artist_ID"" int, ""Name"" text, ""Country"" text, ""Year_Join"" int, ""Age"" int, PRIMARY KEY (""Artist_ID"") );  CREATE TABLE ""exhibition"" ( ""Exhibition_ID"" int, ""Year"" int, ""Theme"" text, ""Artist_ID"" int, ""Ticket_Price"" real, PRIMARY KEY (""Exhibition_ID""), FOREIGN KEY (`Artist_ID`) REFERENCES `artist`(`Artist_ID`) );  CREATE TABLE ""exhibition_record"" ( ""Exhibition_ID"" int, ""Date"" text, ""Attendance"" int, PRIMARY KEY (""Exhibition_ID"",""Date""), FOREIGN KEY (`Exhibition_ID`) REFERENCES `exhibition`(`Exhibition_ID`) );    ",medium
2768,8001,ship_1,"SELECT name ,  TYPE ,  flag FROM ship ORDER BY built_year DESC LIMIT 1","What is the name, type, and flag of the ship that was built in the most recent year?","PRAGMA foreign_keys = ON;  CREATE TABLE ""captain"" ( ""Captain_ID"" int, ""Name"" text, ""Ship_ID"" int, ""age"" text, ""Class"" text, ""Rank"" text, PRIMARY KEY (""Captain_ID""), FOREIGN KEY (""Ship_ID"") REFERENCES ""Ship""(""Ship_ID"") );  CREATE TABLE ""Ship"" ( ""Ship_ID"" int, ""Name"" text, ""Type"" text, ""Built_Year"" real, ""Class"" text, ""Flag"" text, PRIMARY KEY (""Ship_ID"") );  ",medium
916,3284,medicine_enzyme_interaction,"SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",What are the ids and names of the medicine that can interact with two or more enzymes?,"PRAGMA foreign_keys = ON; CREATE TABLE ""medicine"" ( ""id"" int, ""name"" text, ""Trade_Name"" text, ""FDA_approved"" text, primary key (""id"") );  CREATE TABLE ""enzyme"" ( ""id"" int, ""name"" text, ""Location"" text, ""Product"" text, ""Chromosome"" text, ""OMIM"" int, ""Porphyria"" text, primary key (""id"") );   CREATE TABLE ""medicine_enzyme_interaction"" ( ""enzyme_id"" int, ""medicine_id"" int, ""interaction_type"" text, primary key (""enzyme_id"", ""medicine_id""), foreign key (""enzyme_id"") references `enzyme`(""id""), foreign key (""medicine_id"") references `medicine`(""id"") );     ",medium
2322,6759,soccer_2,SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'striker',What are the states of the colleges where students who tried out for the striker position attend?,"/*   * SQL scripts for CS61 Intro to SQL lectures  * FILENAME SOCCER2.SQL  */  DROP TABLE  IF EXISTS Player; DROP TABLE  IF EXISTS Tryout; DROP TABLE  IF EXISTS College;  CREATE TABLE 	College    ( cName   	varchar(20) NOT NULL,     state   	varchar(2),     enr     	numeric(5,0),     PRIMARY KEY (cName)   );  CREATE TABLE 	Player   ( pID			numeric(5,0) NOT NULL,   	pName   	varchar(20),     yCard   	varchar(3),     HS      	numeric(5,0),     PRIMARY KEY (pID)   );  CREATE TABLE 	Tryout   ( pID			numeric(5,0),   	cName   	varchar(20),     pPos    	varchar(8),     decision    varchar(3),     PRIMARY KEY (pID, cName),     FOREIGN KEY (pID) REFERENCES Player(pID),     FOREIGN KEY (cName) REFERENCES College(cName)   );  /* note that ""left"" and ""right"" are reserved words in SQL */  ",medium
2978,8469,activity_1,"SELECT T1.FacID ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID","Show the faculty id of each faculty member, along with the number of students he or she advises.","create table Activity (   actid INTEGER PRIMARY KEY,   activity_name varchar(25) );  create table Participates_in (   stuid INTEGER,   actid INTEGER,   FOREIGN KEY(stuid) REFERENCES Student(StuID),   FOREIGN KEY(actid) REFERENCES Activity(actid) );  create table Faculty_Participates_in (   FacID INTEGER,   actid INTEGER,   FOREIGN KEY(FacID) REFERENCES Faculty(FacID),   FOREIGN KEY(actid) REFERENCES Activity(actid) );  create table Student (         StuID        INTEGER PRIMARY KEY,         LName        VARCHAR(12),         Fname        VARCHAR(12),         Age      INTEGER,         Sex      VARCHAR(1),         Major        INTEGER,         Advisor      INTEGER,         city_code    VARCHAR(3)  );  create table Faculty (        FacID 	       INTEGER PRIMARY KEY,        Lname		VARCHAR(15),        Fname		VARCHAR(15),        Rank		VARCHAR(15),        Sex		VARCHAR(1),        Phone		INTEGER,        Room		VARCHAR(5),        Building		VARCHAR(13) );   ",medium
3010,8565,tracking_orders,"SELECT invoice_number FROM invoices WHERE invoice_date < ""1989-09-03"" OR invoice_date > ""2007-12-25""",Find the invoice numbers which are created before 1989-09-03 or after 2007-12-25.,"PRAGMA foreign_keys = ON; CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_name` VARCHAR(80), `customer_details` VARCHAR(255) ); CREATE TABLE `Invoices` ( `invoice_number` INTEGER PRIMARY KEY, `invoice_date` DATETIME, `invoice_details` VARCHAR(255) );  CREATE TABLE `Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `order_status` VARCHAR(10) NOT NULL, `date_order_placed` DATETIME NOT NULL, `order_details` VARCHAR(255), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) );  CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_name` VARCHAR(80), `product_details` VARCHAR(255) );  CREATE TABLE `Order_Items` ( `order_item_id` INTEGER PRIMARY KEY, `product_id` INTEGER NOT NULL, `order_id` INTEGER NOT NULL, `order_item_status` VARCHAR(10) NOT NULL, `order_item_details` VARCHAR(255), FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) );  CREATE TABLE `Shipments` ( `shipment_id` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `invoice_number` INTEGER NOT NULL, `shipment_tracking_number` VARCHAR(80), `shipment_date` DATETIME, `other_shipment_details` VARCHAR(255), FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ), FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ) );  CREATE TABLE `Shipment_Items` ( `shipment_id` INTEGER NOT NULL, `order_item_id` INTEGER NOT NULL, FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ), FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ) );  ",medium
2384,6909,cre_Drama_Workshop_Groups,"SELECT T1.City_Town ,  count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID GROUP BY T1.City_Town",How many drama workshop groups are there in each city? Return both the city and the count.,"PRAGMA foreign_keys = ON;  CREATE TABLE Ref_Payment_Methods ( payment_method_code CHAR(10) NOT NULL, payment_method_description VARCHAR(80), PRIMARY KEY (payment_method_code), UNIQUE (payment_method_code) ); CREATE TABLE Ref_Service_Types ( Service_Type_Code CHAR(15) NOT NULL, Parent_Service_Type_Code CHAR(15), Service_Type_Description VARCHAR(255), PRIMARY KEY (Service_Type_Code), UNIQUE (Service_Type_Code) );  CREATE TABLE Addresses ( Address_ID VARCHAR(100) NOT NULL, Line_1 VARCHAR(255), Line_2 VARCHAR(255), City_Town VARCHAR(255), State_County VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Address_ID), UNIQUE (Address_ID) ); CREATE TABLE Products ( Product_ID VARCHAR(100) NOT NULL, Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Product_Description VARCHAR(255), Other_Product_Service_Details VARCHAR(255), PRIMARY KEY (Product_ID), UNIQUE (Product_ID) ); CREATE TABLE Marketing_Regions ( Marketing_Region_Code CHAR(15) NOT NULL, Marketing_Region_Name VARCHAR(255) NOT NULL, Marketing_Region_Descriptrion VARCHAR(255) NOT NULL, Other_Details VARCHAR(255), PRIMARY KEY (Marketing_Region_Code), UNIQUE (Marketing_Region_Code) );  CREATE TABLE Clients ( Client_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Customer_Email_Address VARCHAR(255), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Client_ID), UNIQUE (Client_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) ); CREATE TABLE Drama_Workshop_Groups ( Workshop_Group_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Currency_Code CHAR(15) NOT NULL, Marketing_Region_Code CHAR(15) NOT NULL, Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Workshop_Group_ID), UNIQUE (Workshop_Group_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) ); CREATE TABLE Performers ( Performer_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Performer_ID), UNIQUE (Performer_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) ); CREATE TABLE Customers ( Customer_ID VARCHAR(100) NOT NULL, Address_ID INTEGER NOT NULL, Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Customer_ID), UNIQUE (Customer_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) ); CREATE TABLE Stores ( Store_ID VARCHAR(100) NOT NULL, Address_ID INTEGER NOT NULL, Marketing_Region_Code CHAR(15) NOT NULL, Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Store_ID), UNIQUE (Store_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID), FOREIGN KEY (Marketing_Region_Code) REFERENCES Marketing_Regions (Marketing_Region_Code) ); CREATE TABLE Bookings ( Booking_ID INTEGER NOT NULL , Customer_ID INTEGER NOT NULL, Workshop_Group_ID VARCHAR(100) NOT NULL, Status_Code CHAR(15) NOT NULL, Store_ID INTEGER NOT NULL, Order_Date DATETIME NOT NULL, Planned_Delivery_Date DATETIME NOT NULL, Actual_Delivery_Date DATETIME NOT NULL, Other_Order_Details VARCHAR(255), PRIMARY KEY (Booking_ID), UNIQUE (Booking_ID), FOREIGN KEY (Customer_ID) REFERENCES Clients (Client_ID), FOREIGN KEY (Workshop_Group_ID) REFERENCES Drama_Workshop_Groups (Workshop_Group_ID) ); CREATE TABLE Performers_in_Bookings ( Order_ID INTEGER NOT NULL, Performer_ID INTEGER NOT NULL, PRIMARY KEY (Order_ID, Performer_ID), FOREIGN KEY (Performer_ID) REFERENCES Performers (Performer_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID) ); CREATE TABLE Customer_Orders ( Order_ID INTEGER NOT NULL , Customer_ID INTEGER NOT NULL, Store_ID INTEGER NOT NULL, Order_Date DATETIME NOT NULL, Planned_Delivery_Date DATETIME NOT NULL, Actual_Delivery_Date DATETIME NOT NULL, Other_Order_Details VARCHAR(255), PRIMARY KEY (Order_ID), UNIQUE (Order_ID), FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY (Store_ID) REFERENCES Stores (Store_ID) ); CREATE TABLE Order_Items ( Order_Item_ID INTEGER NOT NULL , Order_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), PRIMARY KEY (Order_Item_ID), FOREIGN KEY (Order_ID) REFERENCES Customer_Orders (Order_ID), FOREIGN KEY (Product_ID) REFERENCES Products (Product_ID) ); CREATE TABLE Invoices ( Invoice_ID INTEGER NOT NULL, Order_ID INTEGER NOT NULL, payment_method_code CHAR(15), Product_ID INTEGER NOT NULL, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), Order_Item_ID INTEGER NOT NULL, PRIMARY KEY (Invoice_ID), FOREIGN KEY (Order_ID) REFERENCES Customer_Orders (Order_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID), FOREIGN KEY (payment_method_code) REFERENCES Ref_Payment_Methods (payment_method_code) ); CREATE TABLE Services ( Service_ID INTEGER NOT NULL, Service_Type_Code CHAR(15), Workshop_Group_ID INTEGER NOT NULL, Product_Description VARCHAR(255), Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Other_Product_Service_Details VARCHAR(255), PRIMARY KEY (Service_ID), UNIQUE (Service_ID), FOREIGN KEY (Workshop_Group_ID) REFERENCES Drama_Workshop_Groups (Workshop_Group_ID), FOREIGN KEY (Service_Type_Code) REFERENCES Ref_Service_Types (Service_Type_Code) ); CREATE TABLE Bookings_Services ( Order_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, PRIMARY KEY (Order_ID, Product_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID), FOREIGN KEY (Product_ID) REFERENCES Services (Service_ID) );  CREATE TABLE Invoice_Items ( Invoice_Item_ID INTEGER NOT NULL , Invoice_ID INTEGER NOT NULL, Order_ID INTEGER NOT NULL, Order_Item_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, Order_Quantity INTEGER, Other_Item_Details VARCHAR(255), PRIMARY KEY (Invoice_Item_ID), FOREIGN KEY (Order_Item_ID) REFERENCES Order_Items (Order_Item_ID), FOREIGN KEY (Invoice_ID) REFERENCES Invoices (Invoice_ID), FOREIGN KEY (Order_ID, Product_ID) REFERENCES Bookings_Services (Order_ID,Product_ID) ); ",medium
2017,5883,student_1,"SELECT classroom ,  count(*) FROM list WHERE grade  =  ""0"" GROUP BY classroom","For each grade 0 classroom, return the classroom number and the count of students.","CREATE TABLE ""list"" (  	""LastName"" TEXT,  	""FirstName"" TEXT,  	""Grade"" INTEGER,  	""Classroom"" INTEGER, 	PRIMARY KEY(LastName, FirstName) ); CREATE TABLE ""teachers"" (  	""LastName"" TEXT,  	""FirstName"" TEXT,  	""Classroom"" INTEGER, 	PRIMARY KEY(LastName, FirstName) );",medium
2881,8291,wine_1,"SELECT avg(Price) ,  avg(Score) ,  Appelation FROM WINE GROUP BY Appelation",What are the average price and score of wines grouped by appelation?,"CREATE TABLE ""grapes"" (  	""ID"" INTEGER PRIMARY KEY,  	""Grape"" TEXT UNIQUE,  	""Color"" TEXT  );  CREATE TABLE ""appellations"" (  	""No"" INTEGER PRIMARY KEY,  	""Appelation"" TEXT UNIQUE,  	""County"" TEXT,  	""State"" TEXT,  	""Area"" TEXT,  	""isAVA"" TEXT );  CREATE TABLE ""wine"" (  	""No"" INTEGER,  	""Grape"" TEXT,  	""Winery"" TEXT,  	""Appelation"" TEXT,  	""State"" TEXT,  	""Name"" TEXT,  	""Year"" INTEGER,  	""Price"" INTEGER,  	""Score"" INTEGER,  	""Cases"" INTEGER,  	""Drink"" TEXT, 	FOREIGN KEY (Grape) REFERENCES grapes(Grape), 	FOREIGN KEY (Appelation) REFERENCES appellations(Appelation) );",medium
934,3328,university_basketball,"SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",Find the location and all games score of the school that has Clemson as its team name.,"CREATE TABLE ""basketball_match"" ( ""Team_ID"" int, ""School_ID"" int, ""Team_Name"" text, ""ACC_Regular_Season"" text, ""ACC_Percent"" text, ""ACC_Home"" text, ""ACC_Road"" text, ""All_Games"" text, ""All_Games_Percent"" int, ""All_Home"" text, ""All_Road"" text, ""All_Neutral"" text, PRIMARY KEY (""Team_ID""), FOREIGN KEY (`School_ID`) REFERENCES `university`(`School_ID`) );  CREATE TABLE ""university"" ( ""School_ID"" int, ""School"" text, ""Location"" text, ""Founded"" real, ""Affiliation"" text, ""Enrollment"" real, ""Nickname"" text, ""Primary_conference"" text, PRIMARY KEY (""School_ID"") );  ",medium
857,3128,customers_card_transactions,"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  ""Blanche"" AND T2.customer_last_name  =  ""Huels"" AND T1.card_type_code  =  ""Credit""",How many credit cards does customer Blanche Huels have?,"PRAGMA foreign_keys = ON;  CREATE TABLE `Accounts` ( `account_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `account_name` VARCHAR(50), `other_account_details` VARCHAR(255) ); CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_first_name` VARCHAR(20), `customer_last_name` VARCHAR(20), `customer_address` VARCHAR(255), `customer_phone` VARCHAR(255), `customer_email` VARCHAR(255), `other_customer_details` VARCHAR(255) ); CREATE TABLE `Customers_Cards` ( `card_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `card_type_code` VARCHAR(15) NOT NULL, `card_number` VARCHAR(80), `date_valid_from` DATETIME, `date_valid_to` DATETIME, `other_card_details` VARCHAR(255) ); CREATE TABLE `Financial_Transactions` ( `transaction_id` INTEGER NOT NULL , `previous_transaction_id` INTEGER, `account_id` INTEGER NOT NULL, `card_id` INTEGER NOT NULL, `transaction_type` VARCHAR(15) NOT NULL, `transaction_date` DATETIME, `transaction_amount` DOUBLE NULL, `transaction_comment` VARCHAR(255), `other_transaction_details` VARCHAR(255), FOREIGN KEY (`card_id` ) REFERENCES `Customers_Cards`(`card_id` ), FOREIGN KEY (`account_id` ) REFERENCES `Accounts`(`account_id` ) );  INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (1, 'Aniyah', 'Feest', '55975 Theodore Estates Lake Brody, VT 57078', '(673)872-5338', 'fahey.dorian@example.com', NULL); INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (2, 'Susie', 'Wiza', '6478 Moen Isle Suite 910 Schimmelmouth, VT 96364-4898', '679-845-8645x94312', 'idickinson@example.com', NULL); INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (3, 'Marcel', 'Brekke', '1965 Abernathy Plains Port Lilla, LA 44867', '1-511-656-6664', 'nichole.rodriguez@example.com', NULL); INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (4, 'Art', 'Turcotte', '6862 Domenic Port New Elbert, DE 86980-8517', '941-213-6716x675', 'enrique59@example.com', NULL); INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (5, 'Armani', 'Farrell', '3031 Ludwig Square Unaview, SC 86336-3287', '224-123-1012', 'dauer@example.net', NULL); INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (6, 'Kiel', 'Schinner', '19935 Allie Bypass Apt. 409 Coleberg, FL 69194-5357', '1-564-044-3909', 'ebert.omer@example.net', NULL); INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (7, 'Izabella', 'Erdman', '23793 Athena Inlet Apt. 455 Schmidtmouth, NH 15794', '751.049.9948', 'kling.catalina@example.com', NULL); INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (8, 'Elyssa', 'Lind', '094 Julianne Mill Webstertown, KY 91980-4004', '+12(6)9024410984', 'dell13@example.com', NULL); INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (9, 'Faustino', 'Langworth', '0748 Lola Union Apt. 874 Reynoldsfurt, NM 94584-3767', '284.749.0453', 'ahomenick@example.org', NULL); INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (10, 'Axel', 'Effertz', '936 Lula Overpass East Alisonville, NH 14890', '+90(8)1290735932', 'kyra.murazik@example.org', NULL); INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (11, 'Frederic', 'Swift', '7127 Hilpert Parks South Johnfort, SD 67577-9504', '1-207-977-5182', 'keegan16@example.com', NULL); INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (12, 'Bryce', 'Rath', '74962 Hugh Mills North Laurenland, KY 46376', '(415)237-0701x3115', 'grady.general@example.org', NULL); INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (13, 'Serenity', 'Effertz', '71560 Eulah Squares Torphyberg, OK 34312-0380', '1-894-567-2283', 'schaden.katrina@example.net', NULL); INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (14, 'Blanche', 'Huels', '47286 Mraz Park Apt. 424 Jocelynfurt, OH 59023-2787', '(703)950-4708x8972', 'huels.antonina@example.com', NULL); INSERT INTO Customers (`customer_id`, `customer_first_name`, `customer_last_name`, `customer_address`, `customer_phone`, `customer_email`, `other_customer_details`) VALUES (15, 'Nat', 'Davis', '163 Collier Square New Ceciltown, AL 64723-5646', '246-469-4472x359', 'earlene.carroll@example.net', NULL); ",medium
2961,8444,activity_1,"SELECT phone ,  room ,  building FROM Faculty WHERE Fname  =  ""Jerry"" AND Lname  =  ""Prince""","What are the phone, room, and building of the faculty member called Jerry Prince?","create table Activity (   actid INTEGER PRIMARY KEY,   activity_name varchar(25) );  create table Participates_in (   stuid INTEGER,   actid INTEGER,   FOREIGN KEY(stuid) REFERENCES Student(StuID),   FOREIGN KEY(actid) REFERENCES Activity(actid) );  create table Faculty_Participates_in (   FacID INTEGER,   actid INTEGER,   FOREIGN KEY(FacID) REFERENCES Faculty(FacID),   FOREIGN KEY(actid) REFERENCES Activity(actid) );  create table Student (         StuID        INTEGER PRIMARY KEY,         LName        VARCHAR(12),         Fname        VARCHAR(12),         Age      INTEGER,         Sex      VARCHAR(1),         Major        INTEGER,         Advisor      INTEGER,         city_code    VARCHAR(3)  );  create table Faculty (        FacID 	       INTEGER PRIMARY KEY,        Lname		VARCHAR(15),        Fname		VARCHAR(15),        Rank		VARCHAR(15),        Sex		VARCHAR(1),        Phone		INTEGER,        Room		VARCHAR(5),        Building		VARCHAR(13) );   ",medium
487,1913,scholar,"SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  ""pldi"";",papers in pldi 2015,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); ",medium
2393,6966,music_2,"SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  ""Le Pop""","How many instruments does the song ""Le Pop"" use?","  CREATE TABLE ""Songs"" (  	""SongId"" INTEGER PRIMARY KEY,  	""Title"" TEXT  ); CREATE TABLE ""Albums"" (  	""AId"" INTEGER PRIMARY KEY,  	""Title"" TEXT,  	""Year"" INTEGER,  	""Label"" TEXT,  	""Type"" TEXT ); CREATE TABLE ""Band"" (  	""Id"" INTEGER PRIMARY KEY,  	""Firstname"" TEXT,  	""Lastname"" TEXT ); CREATE TABLE ""Instruments"" (  	""SongId"" INTEGER,  	""BandmateId"" INTEGER,  	""Instrument"" TEXT , 	PRIMARY KEY(SongId, BandmateId, Instrument), 	FOREIGN KEY (SongId) REFERENCES Songs(SongId), 	FOREIGN KEY (BandmateId) REFERENCES Band(Id) ); CREATE TABLE ""Performance"" (  	""SongId"" INTEGER,  	""Bandmate"" INTEGER,  	""StagePosition"" TEXT, 	PRIMARY KEY(SongId, Bandmate), 	FOREIGN KEY (SongId) REFERENCES Songs(SongId), 	FOREIGN KEY (Bandmate) REFERENCES Band(Id) ); CREATE TABLE ""Tracklists"" (  	""AlbumId"" INTEGER,  	""Position"" INTEGER,  	""SongId"" INTEGER , 	PRIMARY KEY(AlbumId, Position), 	FOREIGN KEY (SongId) REFERENCES Songs(SongId), 	FOREIGN KEY (AlbumId) REFERENCES Albums(AId) ); CREATE TABLE ""Vocals"" (  	""SongId"" INTEGER,  	""Bandmate"" INTEGER,  	""Type"" TEXT, 	PRIMARY KEY(SongId, Bandmate), 	FOREIGN KEY (SongId) REFERENCES Songs(SongId), 	FOREIGN KEY (Bandmate) REFERENCES Band(Id) ); ",medium
1266,4028,gas_company,"SELECT company ,  main_industry FROM company WHERE headquarters != 'USA'",Show the company name and the main industry for all companies whose headquarters are not from USA.," PRAGMA foreign_keys = ON;   CREATE TABLE ""company"" ( ""Company_ID"" int, ""Rank"" int, ""Company"" text, ""Headquarters"" text, ""Main_Industry"" text, ""Sales_billion"" real, ""Profits_billion"" real, ""Assets_billion"" real, ""Market_Value"" real, PRIMARY KEY (""Company_ID"") );  CREATE TABLE ""gas_station"" ( ""Station_ID"" int, ""Open_Year"" int, ""Location"" text, ""Manager_Name"" text, ""Vice_Manager_Name"" text, ""Representative_Name"" text, PRIMARY KEY (""Station_ID"") );  CREATE TABLE ""station_company"" ( ""Station_ID"" int, ""Company_ID"" int, ""Rank_of_the_Year"" int, PRIMARY KEY (""Station_ID"",""Company_ID""), FOREIGN KEY (`Station_ID`) REFERENCES `gas_station`(`Station_ID`), FOREIGN KEY (`Company_ID`) REFERENCES `company`(`Company_ID`) );  ",medium
1726,5176,sports_competition,"SELECT count(*) ,  POSITION FROM player WHERE points  <  30 GROUP BY POSITION",What is the number of players who have points less than 30 for each position?," PRAGMA foreign_keys = ON;  CREATE TABLE ""club"" ( ""Club_ID"" int, ""name"" text, ""Region"" text, ""Start_year"" text, PRIMARY KEY (""Club_ID"") );  CREATE TABLE ""club_rank"" ( ""Rank"" real, ""Club_ID"" int, ""Gold"" real, ""Silver"" real, ""Bronze"" real, ""Total"" real, PRIMARY KEY (""Rank"",""Club_ID"") FOREIGN KEY (`Club_ID`) REFERENCES `club`(`Club_ID`) );  CREATE TABLE ""player"" ( ""Player_ID"" int, ""name"" text, ""Position"" text, ""Club_ID"" int, ""Apps"" real, ""Tries"" real, ""Goals"" text, ""Points"" real, PRIMARY KEY (""Player_ID""), FOREIGN KEY (`Club_ID`) REFERENCES `club`(`Club_ID`) );  CREATE TABLE ""competition"" ( ""Competition_ID"" int, ""Year"" real, ""Competition_type"" text, ""Country"" text, PRIMARY KEY (""Competition_ID"") );  CREATE TABLE ""competition_result"" ( ""Competition_ID"" int, ""Club_ID_1"" int, ""Club_ID_2"" int, ""Score"" text, PRIMARY KEY (""Competition_ID"",""Club_ID_1"",""Club_ID_2""), FOREIGN KEY (`Club_ID_1`) REFERENCES `club`(`Club_ID`), FOREIGN KEY (`Club_ID_2`) REFERENCES `club`(`Club_ID`), FOREIGN KEY (`Competition_ID`) REFERENCES `competition`(`Competition_ID`) );   ",medium
1597,4835,news_report,"SELECT Date ,  Name ,  venue FROM event ORDER BY Event_Attendance DESC","Show the dates, places, and names of events in descending order of the attendance.","PRAGMA foreign_keys = ON;   CREATE TABLE ""event"" (     ""Event_ID"" int,     ""Date"" text,     ""Venue"" text,     ""Name"" text,     ""Event_Attendance"" int,     PRIMARY KEY (""Event_ID"") );  CREATE TABLE ""journalist"" (     ""journalist_ID"" int,     ""Name"" text,     ""Nationality"" text,     ""Age"" text,     ""Years_working"" int,     PRIMARY KEY (""journalist_ID"") );  CREATE TABLE ""news_report"" (     ""journalist_ID"" int,     ""Event_ID"" int,     ""Work_Type"" text,     PRIMARY KEY (""journalist_ID"",""Event_ID""),     FOREIGN KEY (""journalist_ID"") REFERENCES `journalist`(""journalist_ID""),     FOREIGN KEY (""Event_ID"") REFERENCES `event`(""Event_ID"") );  ",medium
2958,8441,activity_1,"SELECT count(*) FROM Faculty WHERE Sex  =  'F' AND Rank  =  ""Professor""",How many female Professors do we have?,"create table Activity (   actid INTEGER PRIMARY KEY,   activity_name varchar(25) );  create table Participates_in (   stuid INTEGER,   actid INTEGER,   FOREIGN KEY(stuid) REFERENCES Student(StuID),   FOREIGN KEY(actid) REFERENCES Activity(actid) );  create table Faculty_Participates_in (   FacID INTEGER,   actid INTEGER,   FOREIGN KEY(FacID) REFERENCES Faculty(FacID),   FOREIGN KEY(actid) REFERENCES Activity(actid) );  create table Student (         StuID        INTEGER PRIMARY KEY,         LName        VARCHAR(12),         Fname        VARCHAR(12),         Age      INTEGER,         Sex      VARCHAR(1),         Major        INTEGER,         Advisor      INTEGER,         city_code    VARCHAR(3)  );  create table Faculty (        FacID 	       INTEGER PRIMARY KEY,        Lname		VARCHAR(15),        Fname		VARCHAR(15),        Rank		VARCHAR(15),        Sex		VARCHAR(1),        Phone		INTEGER,        Room		VARCHAR(5),        Building		VARCHAR(13) );   ",medium
2478,7159,shop_membership,SELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3,What are the names for the 3 branches that have the most memberships?,"PRAGMA foreign_keys = ON;  CREATE TABLE ""member"" ( ""Member_ID"" int, ""Card_Number"" text, ""Name"" text, ""Hometown"" text, ""Level"" int, PRIMARY KEY (""Member_ID"") );   CREATE TABLE ""branch"" ( ""Branch_ID"" int, ""Name"" text, ""Open_year"" text, ""Address_road"" text, ""City"" text, ""membership_amount"" text, PRIMARY KEY (""Branch_ID"") );   CREATE TABLE ""membership_register_branch"" ( ""Member_ID"" int, ""Branch_ID"" text, ""Register_Year"" text, PRIMARY KEY (""Member_ID""), FOREIGN KEY (""Member_ID"") REFERENCES ""member""(""Member_ID""), FOREIGN KEY (""Branch_ID"") REFERENCES ""branch""(""Branch_ID"") );  CREATE TABLE ""purchase"" ( ""Member_ID"" int, ""Branch_ID"" text, ""Year"" text, ""Total_pounds"" real, PRIMARY KEY (""Member_ID"",""Branch_ID"",""Year""), FOREIGN KEY (""Member_ID"") REFERENCES ""member""(""Member_ID""), FOREIGN KEY (""Branch_ID"") REFERENCES ""branch""(""Branch_ID"") );  ",medium
577,2263,academic,"SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  ""PVLDB"" AND t2.year  =  2005;",return me the total citations of papers in PVLDB in 2005 .,"PRAGMA foreign_keys = ON; CREATE TABLE ""author"" ( ""aid"" int, ""homepage"" text, ""name"" text, ""oid"" int, primary key(""aid"") ); CREATE TABLE ""conference"" ( ""cid"" int, ""homepage"" text, ""name"" text, primary key (""cid"") ); CREATE TABLE ""domain"" ( ""did"" int, ""name"" text, primary key (""did"") ); CREATE TABLE ""domain_author"" ( ""aid"" int,  ""did"" int, primary key (""did"", ""aid""), foreign key(""aid"") references `author`(""aid""), foreign key(""did"") references `domain`(""did"") );  CREATE TABLE ""domain_conference"" ( ""cid"" int, ""did"" int, primary key (""did"", ""cid""), foreign key(""cid"") references `conference`(""cid""), foreign key(""did"") references `domain`(""did"") ); CREATE TABLE ""journal"" ( ""homepage"" text, ""jid"" int, ""name"" text, primary key(""jid"") ); CREATE TABLE ""domain_journal"" ( ""did"" int, ""jid"" int, primary key (""did"", ""jid""), foreign key(""jid"") references ""journal""(""jid""), foreign key(""did"") references ""domain""(""did"") ); CREATE TABLE ""keyword"" ( ""keyword"" text, ""kid"" int, primary key(""kid"") ); CREATE TABLE ""domain_keyword"" ( ""did"" int, ""kid"" int, primary key (""did"", ""kid""), foreign key(""kid"") references ""keyword""(""kid""), foreign key(""did"") references ""domain""(""did"") ); CREATE TABLE ""publication"" ( ""abstract"" text, ""cid"" text, ""citation_num"" int, ""jid"" int, ""pid"" int, ""reference_num"" int, ""title"" text, ""year"" int, primary key(""pid""), foreign key(""jid"") references ""journal""(""jid""), foreign key(""cid"") references ""conference""(""cid"") ); CREATE TABLE ""domain_publication"" ( ""did"" int, ""pid"" int, primary key (""did"", ""pid""), foreign key(""pid"") references ""publication""(""pid""), foreign key(""did"") references ""domain""(""did"") );  CREATE TABLE ""organization"" ( ""continent"" text, ""homepage"" text, ""name"" text, ""oid"" int, primary key(""oid"") );  CREATE TABLE ""publication_keyword"" ( ""pid"" int, ""kid"" int, primary key (""kid"", ""pid""), foreign key(""pid"") references ""publication""(""pid""), foreign key(""kid"") references ""keyword""(""kid"") ); CREATE TABLE ""writes"" ( ""aid"" int, ""pid"" int, primary key (""aid"", ""pid""), foreign key(""pid"") references ""publication""(""pid""), foreign key(""aid"") references ""author""(""aid"") ); CREATE TABLE ""cite"" ( ""cited"" int, ""citing""  int, foreign key(""cited"") references ""publication""(""pid""), foreign key(""citing"") references ""publication""(""pid"") );",medium
1352,4245,formula_1,"SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = ""Monaco Grand Prix""",What is the maximum fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?,"BEGIN TRANSACTION; CREATE TABLE IF NOT EXISTS ""circuits"" ( ""circuitId"" INTEGER PRIMARY KEY,   ""circuitRef"" TEXT,   ""name"" TEXT,   ""location"" TEXT,   ""country"" TEXT,   ""lat"" REAL,   ""lng"" REAL,   ""alt"" INTEGER,   ""url"" TEXT ); CREATE TABLE IF NOT EXISTS ""races"" ( ""raceId"" INTEGER PRIMARY KEY,   ""year"" INTEGER,   ""round"" INTEGER,   ""circuitId"" INTEGER,   ""name"" TEXT,   ""date"" TEXT,   ""time"" TEXT,   ""url"" TEXT,   FOREIGN KEY (""circuitId"") REFERENCES ""circuits""(""circuitId"") );  CREATE TABLE IF NOT EXISTS ""drivers"" ( ""driverId"" INTEGER PRIMARY KEY,   ""driverRef"" TEXT,   ""number"" INTEGER,   ""code"" TEXT,   ""forename"" TEXT,   ""surname"" TEXT,   ""dob"" TEXT,   ""nationality"" TEXT,   ""url"" TEXT ); CREATE TABLE IF NOT EXISTS ""status"" ( ""statusId"" INTEGER PRIMARY KEY,   ""status"" TEXT ); CREATE TABLE IF NOT EXISTS ""seasons"" ( ""year"" INTEGER PRIMARY KEY,   ""url"" TEXT ); CREATE TABLE IF NOT EXISTS ""constructors"" ( 	""constructorId"" INTEGER PRIMARY KEY,   ""constructorRef"" TEXT,   ""name"" TEXT,   ""nationality"" TEXT,   ""url"" TEXT ); CREATE TABLE IF NOT EXISTS ""constructorStandings"" ( 	""constructorStandingsId"" INTEGER PRIMARY KEY,   ""raceId"" INTEGER,   ""constructorId"" INTEGER,   ""points"" REAL,   ""position"" INTEGER,   ""positionText"" TEXT,   ""wins"" INTEGER,   FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),   FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId"") ); CREATE TABLE IF NOT EXISTS ""results"" ( ""resultId"" INTEGER PRIMARY KEY,   ""raceId"" INTEGER,   ""driverId"" INTEGER,   ""constructorId"" INTEGER,   ""number"" INTEGER,   ""grid"" INTEGER,   ""position"" INTEGER,   ""positionText"" TEXT,   ""positionOrder"" INTEGER,   ""points"" REAL,   ""laps"" INTEGER,   ""time"" TEXT,   ""milliseconds"" INTEGER,   ""fastestLap"" INTEGER,   ""rank"" INTEGER,   ""fastestLapTime"" TEXT,   ""fastestLapSpeed"" TEXT,   ""statusId"" INTEGER,   FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),   FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),   FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId"") ); CREATE TABLE IF NOT EXISTS ""driverStandings"" ( ""driverStandingsId"" INTEGER PRIMARY KEY,   ""raceId"" INTEGER,   ""driverId"" INTEGER,   ""points"" REAL,   ""position"" INTEGER,   ""positionText"" TEXT,   ""wins"" INTEGER,   FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),   FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId"") ); CREATE TABLE IF NOT EXISTS ""constructorResults"" ( ""constructorResultsId"" INTEGER PRIMARY KEY,   ""raceId"" INTEGER,   ""constructorId"" INTEGER,   ""points"" REAL,   ""status"" REAL,   FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),   FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId"") ); CREATE TABLE IF NOT EXISTS ""qualifying"" ( ""qualifyId"" INTEGER PRIMARY KEY,   ""raceId"" INTEGER,   ""driverId"" INTEGER,   ""constructorId"" INTEGER,   ""number"" INTEGER,   ""position"" INTEGER,   ""q1"" TEXT,   ""q2"" TEXT,   ""q3"" TEXT,   FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),   FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),   FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId"") ); CREATE TABLE IF NOT EXISTS ""pitStops"" ( ""raceId"" INTEGER,   ""driverId"" INTEGER,   ""stop"" INTEGER,   ""lap"" INTEGER,   ""time"" TEXT,   ""duration"" TEXT,   ""milliseconds"" INTEGER,   PRIMARY KEY (""raceId"", ""driverId"", ""stop""),   FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),   FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId"") ); CREATE TABLE IF NOT EXISTS ""lapTimes"" ( ""raceId"" INTEGER,   ""driverId"" INTEGER,   ""lap"" INTEGER,   ""position"" INTEGER,   ""time"" TEXT,   ""milliseconds"" INTEGER,   PRIMARY KEY(""raceId"", ""driverId"", ""lap""),   FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),   FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId"") );COMMIT;",medium
98,241,flight_2,SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10,Find all airlines that have at least 10 flights.,"CREATE TABLE 'airlines' ( 	uid INTEGER PRIMARY KEY,  	Airline TEXT,  	Abbreviation TEXT,  	Country TEXT ); CREATE TABLE 'airports' ( 	City TEXT,  	AirportCode TEXT PRIMARY KEY,  	AirportName TEXT,  	Country TEXT,  	CountryAbbrev TEXT ); CREATE TABLE 'flights' ( 	Airline INTEGER,  	FlightNo INTEGER,  	SourceAirport TEXT,  	DestAirport TEXT,  	PRIMARY KEY(Airline, FlightNo), 	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode), 	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode) );",medium
2106,6187,tracking_grants_for_research,SELECT role_code FROM Project_Staff WHERE date_from  >  '2003-04-19 15:06:20' AND date_to  <  '2016-03-15 00:33:18',What roles did staff members play between '2003-04-19 15:06:20' and '2016-03-15 00:33:18'?,"PRAGMA foreign_keys = ON; CREATE TABLE `Document_Types` ( `document_type_code` VARCHAR(10) PRIMARY KEY, `document_description` VARCHAR(255) NOT NULL ); CREATE TABLE `Documents` ( `document_id` INTEGER PRIMARY KEY, `document_type_code` VARCHAR(10), `grant_id` INTEGER NOT NULL, `sent_date` DATETIME NOT NULL, `response_received_date` DATETIME NOT NULL, `other_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`document_type_code` ) REFERENCES `Document_Types`(`document_type_code` ), FOREIGN KEY (`grant_id` ) REFERENCES `Grants`(`grant_id` ) ); CREATE TABLE `Grants` ( `grant_id` INTEGER PRIMARY KEY, `organisation_id` INTEGER NOT NULL, `grant_amount` DECIMAL(19,4) NOT NULL DEFAULT 0, `grant_start_date` DATETIME NOT NULL, `grant_end_date` DATETIME NOT NULL, `other_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`organisation_id` ) REFERENCES `Organisations`(`organisation_id` ) ); CREATE TABLE `Organisation_Types` ( `organisation_type` VARCHAR(10) PRIMARY KEY, `organisation_type_description` VARCHAR(255) NOT NULL ); CREATE TABLE `Organisations` ( `organisation_id` INTEGER PRIMARY KEY, `organisation_type` VARCHAR(10) NOT NULL, `organisation_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`organisation_type` ) REFERENCES `Organisation_Types`(`organisation_type` ) ); CREATE TABLE `Project_Outcomes` ( `project_id` INTEGER NOT NULL, `outcome_code` VARCHAR(10) NOT NULL, `outcome_details` VARCHAR(255), FOREIGN KEY (`project_id` ) REFERENCES `Projects`(`project_id` ),FOREIGN KEY (`outcome_code` ) REFERENCES `Research_Outcomes`(`outcome_code` ) ); CREATE TABLE `Project_Staff` ( `staff_id` DOUBLE PRIMARY KEY, `project_id` INTEGER NOT NULL, `role_code` VARCHAR(10) NOT NULL, `date_from` DATETIME, `date_to` DATETIME, `other_details` VARCHAR(255), FOREIGN KEY (`project_id` ) REFERENCES `Projects`(`project_id` ),FOREIGN KEY (`role_code` ) REFERENCES `Staff_Roles`(`role_code` ) ); CREATE TABLE `Projects` ( `project_id` INTEGER PRIMARY KEY, `organisation_id` INTEGER NOT NULL, `project_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`organisation_id` ) REFERENCES `Organisations`(`organisation_id` ) ); CREATE TABLE `Research_Outcomes` ( `outcome_code` VARCHAR(10) PRIMARY KEY, `outcome_description` VARCHAR(255) NOT NULL ); CREATE TABLE `Research_Staff` ( `staff_id` INTEGER PRIMARY KEY, `employer_organisation_id` INTEGER NOT NULL, `staff_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`employer_organisation_id` ) REFERENCES `Organisations`(`organisation_id` ) ); CREATE TABLE `Staff_Roles` ( `role_code` VARCHAR(10) PRIMARY KEY, `role_description` VARCHAR(255) NOT NULL ); CREATE TABLE `Tasks` ( `task_id` INTEGER PRIMARY KEY, `project_id` INTEGER NOT NULL, `task_details` VARCHAR(255) NOT NULL, `eg Agree Objectives` VARCHAR(1), FOREIGN KEY (`project_id` ) REFERENCES `Projects`(`project_id` ) ); ",medium
2509,7242,voter_2,"SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.city_code  =  ""NYC"" AND T2.Election_Cycle  =  ""Spring""",Find the number of students whose city code is NYC and who have class senator votes in the spring election cycle.,"create table Student (         StuID        INTEGER PRIMARY KEY,         LName        VARCHAR(12),         Fname        VARCHAR(12),         Age      INTEGER,         Sex      VARCHAR(1),         Major        INTEGER,         Advisor      INTEGER,         city_code    VARCHAR(3)  );  create table Voting_record (        StuID    	INTEGER,        Registration_Date		VARCHAR(12),        Election_Cycle		VARCHAR(12),        President_Vote		INTEGER,        Vice_President_Vote		INTEGER,        Secretary_Vote		INTEGER,        Treasurer_Vote		INTEGER,        Class_President_Vote		INTEGER,        Class_Senator_Vote		INTEGER,        FOREIGN KEY(StuID) REFERENCES Student(StuID),         FOREIGN KEY(President_Vote) REFERENCES Student(StuID),        FOREIGN KEY(Vice_President_Vote) REFERENCES Student(StuID),        FOREIGN KEY(Secretary_Vote) REFERENCES Student(StuID),        FOREIGN KEY(Treasurer_Vote) REFERENCES Student(StuID),        FOREIGN KEY(Class_President_Vote) REFERENCES Student(StuID),        FOREIGN KEY(Class_Senator_Vote) REFERENCES Student(StuID) );  ",medium
2602,7553,customer_complaints,"SELECT last_name FROM staff WHERE email_address LIKE ""%wrau%""","What are the last names of staff with email addressed containing the substring ""wrau""?","PRAGMA foreign_keys = ON;   CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `gender` VARCHAR(1), `first_name` VARCHAR(80), `last_name` VARCHAR(80), `email_address` VARCHAR(255), `phone_number` VARCHAR(80) ); CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_type_code` VARCHAR(20) NOT NULL, `address_line_1` VARCHAR(80), `address_line_2` VARCHAR(80), `town_city` VARCHAR(80), `state` VARCHAR(80), `email_address` VARCHAR(255), `phone_number` VARCHAR(80) ); CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `parent_product_id` INTEGER, `product_category_code` VARCHAR(20) NOT NULL, `date_product_first_available` DATETIME, `date_product_discontinued` DATETIME, `product_name` VARCHAR(80), `product_description` VARCHAR(255), `product_price` DECIMAL(19,4) ); CREATE TABLE `Complaints` ( `complaint_id` INTEGER NOT NULL , `product_id` INTEGER NOT NULL, `customer_id` INTEGER NOT NULL, `complaint_outcome_code` VARCHAR(20) NOT NULL, `complaint_status_code` VARCHAR(20) NOT NULL, `complaint_type_code` VARCHAR(20) NOT NULL, `date_complaint_raised` DATETIME, `date_complaint_closed` DATETIME, `staff_id` INTEGER NOT NULL , FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) ); ",medium
2716,7880,customers_and_addresses,"SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_date  <  ""2018-03-17 07:13:53""",What is the total amount of products purchased before 2018-03-17 07:13:53?,"PRAGMA foreign_keys = ON;  CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `address_content` VARCHAR(80), `city` VARCHAR(50), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(50), `country` VARCHAR(50), `other_address_details` VARCHAR(255) );  CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_details` VARCHAR(255) ); CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `payment_method` VARCHAR(15) NOT NULL, `customer_name` VARCHAR(80), `date_became_customer` DATETIME, `other_customer_details` VARCHAR(255) ); CREATE TABLE `Customer_Addresses` ( `customer_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_address_from` DATETIME NOT NULL, `address_type` VARCHAR(15) NOT NULL, `date_address_to` DATETIME, FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) ); CREATE TABLE `Customer_Contact_Channels` ( `customer_id` INTEGER NOT NULL, `channel_code` VARCHAR(15) NOT NULL, `active_from_date` DATETIME NOT NULL, `active_to_date` DATETIME, `contact_number` VARCHAR(50) NOT NULL, FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) ); CREATE TABLE `Customer_Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `order_status` VARCHAR(15) NOT NULL, `order_date` DATETIME, `order_details` VARCHAR(255), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) );  CREATE TABLE `Order_Items` ( `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, `order_quantity` VARCHAR(15), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ), FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ) ); ",medium
