{'geo': [{'question': 'give me the longest river that passes through the us', 'sql_query': 'SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );', 'db_id': 'geo', 'hardness': 'hard'}, {'question': 'what is the population of the major cities in wisconsin', 'sql_query': 'SELECT population FROM city WHERE population  >  150000 AND state_name  =  "wisconsin";', 'db_id': 'geo', 'hardness': 'medium'}, {'question': 'how many major cities are in states bordering nebraska', 'sql_query': 'SELECT COUNT ( city_name ) FROM city WHERE population  >  150000 AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  "nebraska" );', 'db_id': 'geo', 'hardness': 'extra'}], 'cre_Doc_Control_Systems': [{'question': "List the employees who have not showed up in any circulation history of documents. List the employee's name.", 'sql_query': 'SELECT employee_name FROM Employees EXCEPT SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id', 'db_id': 'cre_Doc_Control_Systems', 'hardness': 'hard'}, {'question': 'What is the name of the shipping agent of the document with id 2?', 'sql_query': 'SELECT Ref_Shipping_Agents.shipping_agent_name FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Documents.document_id = 2;', 'db_id': 'cre_Doc_Control_Systems', 'hardness': 'medium'}, {'question': 'List document id of documents status is done and document type is Paper and the document is shipped by shipping agent named USPS.', 'sql_query': 'SELECT document_id FROM Documents WHERE document_status_code  =  "done" AND document_type_code = "Paper" INTERSECT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = "USPS";', 'db_id': 'cre_Doc_Control_Systems', 'hardness': 'extra'}], 'student_transcripts_tracking': [{'question': 'How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.', 'sql_query': 'SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1', 'db_id': 'student_transcripts_tracking', 'hardness': 'hard'}, {'question': 'What is the earliest date of a transcript release, and what details can you tell me?', 'sql_query': 'SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1', 'db_id': 'student_transcripts_tracking', 'hardness': 'medium'}, {'question': "What's the name of the course with most number of enrollments?", 'sql_query': 'SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1', 'db_id': 'student_transcripts_tracking', 'hardness': 'extra'}], 'product_catalog': [{'question': 'Find the level name of the catalog with the lowest price (in USD).', 'sql_query': 'SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1', 'db_id': 'product_catalog', 'hardness': 'hard'}, {'question': 'Find the name and capacity of products with price greater than 700 (in USD).', 'sql_query': 'SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700', 'db_id': 'product_catalog', 'hardness': 'medium'}, {'question': 'Find the names of the products with length smaller than 3 or height greater than 5.', 'sql_query': 'SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5', 'db_id': 'product_catalog', 'hardness': 'medium'}], 'wta_1': [{'question': 'What is the name of the winner who has won the most matches, and how many rank points does this player have?', 'sql_query': 'SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1', 'db_id': 'wta_1', 'hardness': 'hard'}, {'question': 'How many matches were played in each year?', 'sql_query': 'SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR', 'db_id': 'wta_1', 'hardness': 'medium'}, {'question': 'What are the first names and country codes for players who won both the WTA Championships and the Australian Open?', 'sql_query': "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'", 'db_id': 'wta_1', 'hardness': 'extra'}], 'insurance_and_eClaims': [{'question': 'What are the names of the customers and staff members?', 'sql_query': 'SELECT customer_details FROM customers UNION SELECT staff_details FROM staff', 'db_id': 'insurance_and_eClaims', 'hardness': 'hard'}, {'question': 'Find the number of records of each policy type and its type code.', 'sql_query': 'SELECT policy_type_code ,  count(*) FROM policies GROUP BY policy_type_code', 'db_id': 'insurance_and_eClaims', 'hardness': 'medium'}, {'question': 'Which customer made the largest amount of claim in a single claim? Return the customer details.', 'sql_query': 'SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)', 'db_id': 'insurance_and_eClaims', 'hardness': 'extra'}], 'document_management': [{'question': 'Find all the name of documents without any sections.', 'sql_query': 'SELECT document_name FROM documents WHERE document_code NOT IN (SELECT document_code FROM document_sections)', 'db_id': 'document_management', 'hardness': 'hard'}, {'question': 'What are the names of all the documents, as well as the access counts of each, ordered alphabetically?', 'sql_query': 'SELECT document_name ,  access_count FROM documents ORDER BY document_name', 'db_id': 'document_management', 'hardness': 'medium'}, {'question': 'Return the structure description of the document that has been accessed the fewest number of times.', 'sql_query': 'SELECT t2.document_structure_description FROM documents AS t1 JOIN document_structures AS t2 ON t1.document_structure_code  =  t2.document_structure_code GROUP BY t1.document_structure_code ORDER BY count(*) DESC LIMIT 1', 'db_id': 'document_management', 'hardness': 'extra'}], 'club_1': [{'question': 'Which members of "Bootup Baltimore" major in "600"? Give me their first names and last names.', 'sql_query': 'SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  "Bootup Baltimore" AND t3.major  =  "600"', 'db_id': 'club_1', 'hardness': 'hard'}, {'question': 'Count the number of different positions in the club "Bootup Baltimore".', 'sql_query': 'SELECT count(DISTINCT t2.position) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid WHERE t1.clubname  =  "Bootup Baltimore"', 'db_id': 'club_1', 'hardness': 'medium'}, {'question': 'Which club has the most female students as their members? Give me the name of the club.', 'sql_query': 'SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.sex  =  "F" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1', 'db_id': 'club_1', 'hardness': 'extra'}], 'phone_1': [{'question': 'Find the name of the company that has the least number of phone models. List the company name and the number of phone model produced by that company.', 'sql_query': 'SELECT Company_name ,  count(*) FROM phone GROUP BY Company_name ORDER BY count(*) ASC LIMIT 1;', 'db_id': 'phone_1', 'hardness': 'hard'}, {'question': 'List the maximum, minimum and average number of used kb in screen mode.', 'sql_query': 'SELECT max(used_kb) , min(used_kb) , avg(used_kb) FROM screen_mode;', 'db_id': 'phone_1', 'hardness': 'medium'}, {'question': 'Find the pixels of the screen modes that are used by both phones with full accreditation types and phones with Provisional accreditation types.', 'sql_query': "SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Provisional' INTERSECT SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Full'", 'db_id': 'phone_1', 'hardness': 'extra'}], 'soccer_2': [{'question': 'How many states have a college with more students than average?', 'sql_query': 'SELECT count(DISTINCT state) FROM college WHERE enr  >  (SELECT avg(enr) FROM college)', 'db_id': 'soccer_2', 'hardness': 'hard'}, {'question': 'Find the states where have some college students in tryout and their decisions are yes.', 'sql_query': "SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'", 'db_id': 'soccer_2', 'hardness': 'medium'}, {'question': 'What are the names of all the states with college students playing in the mid position but no goalies?', 'sql_query': "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie'", 'db_id': 'soccer_2', 'hardness': 'extra'}], 'wrestler': [{'question': 'List the names of wrestlers that have not been eliminated.', 'sql_query': 'SELECT Name FROM wrestler WHERE Wrestler_ID NOT IN (SELECT Wrestler_ID FROM elimination)', 'db_id': 'wrestler', 'hardness': 'hard'}, {'question': 'List the names of wrestlers and the teams in elimination in descending order of days held.', 'sql_query': 'SELECT T2.Name ,  T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC', 'db_id': 'wrestler', 'hardness': 'medium'}, {'question': 'What are the names of wrestlers and their teams in elimination, ordered descending by days held?', 'sql_query': 'SELECT T2.Name ,  T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC', 'db_id': 'wrestler', 'hardness': 'medium'}], 'race_track': [{'question': 'What is the race class with most number of races.', 'sql_query': 'SELECT CLASS FROM race GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1', 'db_id': 'race_track', 'hardness': 'hard'}, {'question': 'What are the names and locations of tracks that have had exactly 1 race?', 'sql_query': 'SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1', 'db_id': 'race_track', 'hardness': 'medium'}, {'question': 'What is the name of the track that has had the greatest number of races?', 'sql_query': 'SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1', 'db_id': 'race_track', 'hardness': 'extra'}], 'match_season': [{'question': 'Return the names of teams that have no match season record.', 'sql_query': 'SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)', 'db_id': 'match_season', 'hardness': 'hard'}, {'question': 'Show the country names and the corresponding number of players.', 'sql_query': 'SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name', 'db_id': 'match_season', 'hardness': 'medium'}, {'question': 'What are the names of countries that have both players with position forward and players with position defender?', 'sql_query': 'SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  "Forward" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  "Defender"', 'db_id': 'match_season', 'hardness': 'extra'}], 'dorm_1': [{'question': 'What are the names of the amenities that Smith Hall has?', 'sql_query': "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall'", 'db_id': 'dorm_1', 'hardness': 'hard'}, {'question': 'What is the student capacity and type of gender for the dorm whose name as the phrase Donor in it?', 'sql_query': "SELECT student_capacity ,  gender FROM dorm WHERE dorm_name LIKE '%Donor%'", 'db_id': 'dorm_1', 'hardness': 'medium'}, {'question': 'Find the first and last name of students who are not in the largest major.', 'sql_query': 'SELECT fname ,  lname FROM student WHERE major != (SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1)', 'db_id': 'dorm_1', 'hardness': 'extra'}], 'department_management': [{'question': 'In which year were most departments established?', 'sql_query': 'SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1', 'db_id': 'department_management', 'hardness': 'hard'}, {'question': 'What are the maximum and minimum budget of the departments?', 'sql_query': 'SELECT max(budget_in_billions) ,  min(budget_in_billions) FROM department', 'db_id': 'department_management', 'hardness': 'medium'}, {'question': "List the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born.", 'sql_query': "SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Homeland Security'", 'db_id': 'department_management', 'hardness': 'extra'}], 'cre_Doc_Tracking_DB': [{'question': 'What is the role with the smallest number of employees? Find the role codes.', 'sql_query': 'SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) ASC LIMIT 1', 'db_id': 'cre_Doc_Tracking_DB', 'hardness': 'hard'}, {'question': 'What are all the calendar dates and day Numbers?', 'sql_query': 'SELECT calendar_date ,  day_Number FROM Ref_calendar', 'db_id': 'cre_Doc_Tracking_DB', 'hardness': 'medium'}, {'question': 'What are the name and code of the location with the smallest number of documents?', 'sql_query': 'SELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1', 'db_id': 'cre_Doc_Tracking_DB', 'hardness': 'extra'}], 'inn_1': [{'question': 'Find the name of rooms whose price is higher than the average price.', 'sql_query': 'SELECT roomName FROM Rooms WHERE basePrice  >  ( SELECT avg(basePrice) FROM Rooms );', 'db_id': 'inn_1', 'hardness': 'hard'}, {'question': 'Return the name and number of reservations made for each of the rooms.', 'sql_query': 'SELECT T2.roomName ,  count(*) ,  T1.Room FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room', 'db_id': 'inn_1', 'hardness': 'medium'}, {'question': "Which room has the highest rate? List the room's full name, rate, check in and check out date.", 'sql_query': 'SELECT T2.roomName ,  T1.Rate ,  T1.CheckIn ,  T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT 1;', 'db_id': 'inn_1', 'hardness': 'extra'}], 'customers_and_addresses': [{'question': 'What are the names of customers using the most popular payment method?', 'sql_query': 'SELECT customer_name FROM customers WHERE payment_method  =  (SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1)', 'db_id': 'customers_and_addresses', 'hardness': 'hard'}, {'question': 'What are the name and active date of the customers whose contact channel code is email?', 'sql_query': "SELECT t1.customer_name ,  t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.channel_code  =  'Email'", 'db_id': 'customers_and_addresses', 'hardness': 'medium'}, {'question': 'What is the name of the customer that made the order with the largest quantity?', 'sql_query': 'SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t3.order_quantity  =  ( SELECT max(order_quantity) FROM order_items)', 'db_id': 'customers_and_addresses', 'hardness': 'extra'}], 'customers_card_transactions': [{'question': 'What is the customer id with most number of cards, and how many does he have?', 'sql_query': 'SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1', 'db_id': 'customers_card_transactions', 'hardness': 'hard'}, {'question': "Show the date valid from and the date valid to for the card with card number '4560596484842'.", 'sql_query': 'SELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  "4560596484842"', 'db_id': 'customers_card_transactions', 'hardness': 'medium'}, {'question': 'Show the number of all customers without an account.', 'sql_query': 'SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)', 'db_id': 'customers_card_transactions', 'hardness': 'extra'}], 'cre_Drama_Workshop_Groups': [{'question': 'Which marketing region has the most drama workshop groups? Give me the region code.', 'sql_query': 'SELECT Marketing_Region_Code FROM Drama_Workshop_Groups GROUP BY Marketing_Region_Code ORDER BY count(*) DESC LIMIT 1', 'db_id': 'cre_Drama_Workshop_Groups', 'hardness': 'hard'}, {'question': 'Which city is the address of the store named "FJA Filming" located in?', 'sql_query': 'SELECT T1.City_Town FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Store_Name  =  "FJA Filming"', 'db_id': 'cre_Drama_Workshop_Groups', 'hardness': 'medium'}, {'question': 'Give me the description of the service type that offers not only the photo product but also the film product.', 'sql_query': "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  'photo' INTERSECT SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  'film'", 'db_id': 'cre_Drama_Workshop_Groups', 'hardness': 'extra'}], 'baseball_1': [{'question': 'How much salary did the top 3 well-paid players get in 2001?', 'sql_query': 'SELECT salary FROM salary WHERE YEAR  =  2001 ORDER BY salary DESC LIMIT 3;', 'db_id': 'baseball_1', 'hardness': 'hard'}, {'question': 'What is the total salary expenses of team Boston Red Stockings in 2010?', 'sql_query': "SELECT sum(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2010", 'db_id': 'baseball_1', 'hardness': 'medium'}, {'question': 'Find the name and id of the team that won the most times in 2008 postseason.', 'sql_query': 'SELECT T2.name ,  T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T1.year  =  2008 GROUP BY T1.team_id_winner ORDER BY count(*) DESC LIMIT 1;', 'db_id': 'baseball_1', 'hardness': 'extra'}], 'cre_Theme_park': [{'question': 'Find the names of the tourist attractions that is either accessible by bus or at address 254 Ottilie Junction.', 'sql_query': 'SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  "254 Ottilie Junction" OR T2.How_to_Get_There  =  "bus"', 'db_id': 'cre_Theme_park', 'hardness': 'hard'}, {'question': "Find the visit date and details of the tourist whose detail is 'Vincent'", 'sql_query': 'SELECT T2.Visit_Date ,  T2.Visit_Details FROM VISITORS AS T1 JOIN VISITS AS T2 ON T1.Tourist_ID  =  T2.Tourist_ID WHERE T1.Tourist_Details  =  "Vincent"', 'db_id': 'cre_Theme_park', 'hardness': 'medium'}, {'question': 'Find the tourist attractions that have parking or shopping as their feature details. What are the names of the attractions?', 'sql_query': "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping'", 'db_id': 'cre_Theme_park', 'hardness': 'extra'}], 'cinema': [{'question': 'Show all the locations where some cinemas were opened in both year 2010 and year 2011.', 'sql_query': 'SELECT LOCATION FROM cinema WHERE openning_year  =  2010 INTERSECT SELECT LOCATION FROM cinema WHERE openning_year  =  2011', 'db_id': 'cinema', 'hardness': 'hard'}, {'question': "Count the number of films whose title contains the word 'Dummy'.", 'sql_query': 'SELECT count(*) FROM film WHERE title LIKE "%Dummy%"', 'db_id': 'cinema', 'hardness': 'medium'}, {'question': 'Show the cinema name and location for cinemas with capacity above average.', 'sql_query': 'SELECT name ,  LOCATION FROM cinema WHERE capacity  >  (SELECT avg(capacity) FROM cinema)', 'db_id': 'cinema', 'hardness': 'extra'}], 'apartment_rentals': [{'question': 'Which apartment type has the largest number of total rooms? Return the apartment type code, its number of bathrooms and number of bedrooms.', 'sql_query': 'SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1', 'db_id': 'apartment_rentals', 'hardness': 'hard'}, {'question': 'Show the apartment numbers, start dates, and end dates of all the apartment bookings.', 'sql_query': 'SELECT T2.apt_number ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id', 'db_id': 'apartment_rentals', 'hardness': 'medium'}, {'question': 'How many apartments do not have any facility?', 'sql_query': 'SELECT count(*) FROM Apartments WHERE apt_id NOT IN (SELECT apt_id FROM Apartment_Facilities)', 'db_id': 'apartment_rentals', 'hardness': 'extra'}], 'station_weather': [{'question': 'Find names and times of trains that run through stations for the local authority Chiltern.', 'sql_query': 'SELECT t3.name ,  t3.time FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id JOIN train AS t3 ON t2.train_id  =  t3.id WHERE t1.local_authority  =  "Chiltern"', 'db_id': 'station_weather', 'hardness': 'hard'}, {'question': 'Find the number of trains starting from each origin.', 'sql_query': 'SELECT origin ,  count(*) FROM train GROUP BY origin', 'db_id': 'station_weather', 'hardness': 'medium'}, {'question': 'Find the id and local authority of the station with has the highest average high temperature.', 'sql_query': 'SELECT t2.id ,  t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id GROUP BY t1.station_id ORDER BY avg(high_temperature) DESC LIMIT 1', 'db_id': 'station_weather', 'hardness': 'extra'}], 'local_govt_in_alabama': [{'question': "Which events id does not have any participant with detail 'Kenyatta Kuhn'?", 'sql_query': "SELECT event_id FROM EVENTS EXCEPT SELECT T1.event_id FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE Participant_Details  =  'Kenyatta Kuhn'", 'db_id': 'local_govt_in_alabama', 'hardness': 'hard'}, {'question': 'What are all the the participant ids, type code and details?', 'sql_query': 'SELECT Participant_ID ,  Participant_Type_Code ,  Participant_Details FROM  Participants', 'db_id': 'local_govt_in_alabama', 'hardness': 'medium'}, {'question': 'Which services type had both successful and failure event details?', 'sql_query': "SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id  =  T2.service_id WHERE T2.event_details  =  'Success' INTERSECT SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id  =  T2.service_id WHERE T2.event_details  =  'Fail'", 'db_id': 'local_govt_in_alabama', 'hardness': 'extra'}], 'game_1': [{'question': 'Find the last and first name of students who are playing Football or Lacrosse.', 'sql_query': 'SELECT T2.lname ,  T2.fname FROM SportsInfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.SportName  =  "Football" OR T1.SportName  =  "Lacrosse"', 'db_id': 'game_1', 'hardness': 'hard'}, {'question': 'What are the names of all the video games and their types in alphabetical order?', 'sql_query': 'SELECT gname ,  gtype FROM Video_games ORDER BY gname', 'db_id': 'game_1', 'hardness': 'medium'}, {'question': 'Which sport has most number of students on scholarship?', 'sql_query': "SELECT sportname FROM Sportsinfo WHERE onscholarship  =  'Y' GROUP BY sportname ORDER BY count(*) DESC LIMIT 1", 'db_id': 'game_1', 'hardness': 'extra'}], 'employee_hire_evaluation': [{'question': 'Find the name of the shops that do not hire any employee.', 'sql_query': 'SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)', 'db_id': 'employee_hire_evaluation', 'hardness': 'hard'}, {'question': 'What are the minimum and maximum number of products across all the shops?', 'sql_query': 'SELECT min(Number_products) ,  max(Number_products) FROM shop', 'db_id': 'employee_hire_evaluation', 'hardness': 'medium'}, {'question': 'What is the name of the shop that is hiring the largest number of employees?', 'sql_query': 'SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1', 'db_id': 'employee_hire_evaluation', 'hardness': 'extra'}], 'train_station': [{'question': 'Show station names without any trains.', 'sql_query': 'SELECT name FROM station WHERE station_id NOT IN (SELECT station_id FROM train_station)', 'db_id': 'train_station', 'hardness': 'hard'}, {'question': 'List the names and locations of all stations ordered by their yearly entry exit and interchange amounts.', 'sql_query': 'SELECT name ,  LOCATION FROM station ORDER BY Annual_entry_exit ,  Annual_interchanges', 'db_id': 'train_station', 'hardness': 'medium'}, {'question': 'Show all train names and times in stations in London in descending order by train time.', 'sql_query': "SELECT T3.name ,  T3.time FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T2.location  =  'London' ORDER BY T3.time DESC", 'db_id': 'train_station', 'hardness': 'extra'}], 'musical': [{'question': 'Please show the nominee who has been nominated the greatest number of times.', 'sql_query': 'SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'musical', 'hardness': 'hard'}, {'question': 'Who are the nominees who were nominated for either of the Bob Fosse or Cleavant Derricks awards?', 'sql_query': 'SELECT Nominee FROM musical WHERE Award  =  "Tony Award" OR Award  =  "Cleavant Derricks"', 'db_id': 'musical', 'hardness': 'medium'}, {'question': 'Show names of actors and names of musicals they are in.', 'sql_query': 'SELECT T1.Name ,  T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID', 'db_id': 'musical', 'hardness': 'medium'}], 'flight_2': [{'question': 'Find the name of airports which do not have any flight in and out.', 'sql_query': 'SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)', 'db_id': 'flight_2', 'hardness': 'hard'}, {'question': "What are airlines that have flights arriving at airport 'AHD'?", 'sql_query': 'SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  "AHD"', 'db_id': 'flight_2', 'hardness': 'medium'}, {'question': 'Which city has most number of departing flights?', 'sql_query': 'SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1', 'db_id': 'flight_2', 'hardness': 'extra'}], 'e_learning': [{'question': 'What are the addresses of the course authors who teach either "operating system" or "data structure" course.', 'sql_query': 'SELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  "operating system" OR T2.course_name  =  "data structure"', 'db_id': 'e_learning', 'hardness': 'hard'}, {'question': 'Return the completion date for all the tests that have "Fail" result.', 'sql_query': 'SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  "Fail"', 'db_id': 'e_learning', 'hardness': 'medium'}, {'question': 'List each test result and its count in descending order of count.', 'sql_query': 'SELECT test_result ,  COUNT(*) FROM Student_Tests_Taken GROUP BY test_result ORDER BY COUNT(*) DESC', 'db_id': 'e_learning', 'hardness': 'extra'}], 'behavior_monitoring': [{'question': 'What are the line 1 of addresses shared by some students and some teachers?', 'sql_query': 'SELECT T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.address_id INTERSECT SELECT T1.line_1 FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id', 'db_id': 'behavior_monitoring', 'hardness': 'hard'}, {'question': 'What are the line 1 and average monthly rentals of all student addresses?', 'sql_query': 'SELECT T1.line_1 ,  avg(T2.monthly_rental) FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id GROUP BY T2.address_id', 'db_id': 'behavior_monitoring', 'hardness': 'medium'}, {'question': 'Find the id and last name of the teacher that has the most detentions with detention type code "AFTER"?', 'sql_query': 'SELECT T1.teacher_id ,  T2.last_name FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T1.detention_type_code  =  "AFTER" GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1', 'db_id': 'behavior_monitoring', 'hardness': 'extra'}], 'flight_1': [{'question': 'Show names for all aircrafts with distances more than the average.', 'sql_query': 'SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)', 'db_id': 'flight_1', 'hardness': 'hard'}, {'question': 'What are the names and distances for all airplanes?', 'sql_query': 'SELECT name ,  distance FROM Aircraft', 'db_id': 'flight_1', 'hardness': 'medium'}, {'question': 'Show the name and distance of the aircrafts with more than 5000 distance and which at least 5 people have its certificate.', 'sql_query': 'SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5', 'db_id': 'flight_1', 'hardness': 'extra'}], 'orchestra': [{'question': 'List the names of orchestras that have no performance.', 'sql_query': 'SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)', 'db_id': 'orchestra', 'hardness': 'hard'}, {'question': 'What are the names of conductors who have conducted orchestras founded after the year 2008?', 'sql_query': 'SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008', 'db_id': 'orchestra', 'hardness': 'medium'}, {'question': 'What is the name of the conductor who has conducted the most orchestras?', 'sql_query': 'SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'orchestra', 'hardness': 'extra'}], 'hospital_1': [{'question': 'Find all procedures which cost more than 1000 or which physician John Wen was trained in.', 'sql_query': 'SELECT name FROM procedures WHERE cost  >  1000 UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  "John Wen"', 'db_id': 'hospital_1', 'hardness': 'hard'}, {'question': 'Find the name of physicians who are in charge of more than one patient.', 'sql_query': 'SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid HAVING count(*)  >  1', 'db_id': 'hospital_1', 'hardness': 'medium'}, {'question': 'Find the physician who was trained in the most expensive procedure?', 'sql_query': 'SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment ORDER BY T3.cost DESC LIMIT 1', 'db_id': 'hospital_1', 'hardness': 'extra'}], 'gas_company': [{'question': 'Show all headquarters without a company in banking industry.', 'sql_query': "SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking'", 'db_id': 'gas_company', 'hardness': 'hard'}, {'question': 'What are the gas station ids, locations, and manager names for the gas stations ordered by opening year?', 'sql_query': 'SELECT station_id ,  LOCATION ,  manager_name FROM gas_station ORDER BY open_year', 'db_id': 'gas_company', 'hardness': 'medium'}, {'question': 'For each location, how many gas stations are there in order?', 'sql_query': 'SELECT LOCATION ,  count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)', 'db_id': 'gas_company', 'hardness': 'extra'}], 'game_injury': [{'question': 'Show all headquarters without a company in banking industry.', 'sql_query': "SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking'", 'db_id': 'gas_company', 'hardness': 'hard'}, {'question': 'For each injury accident, find the date of the game and the name of the injured player in the game, and sort the results in descending order of game season.', 'sql_query': 'SELECT T1.date ,  T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id ORDER BY T1.season DESC', 'db_id': 'game_injury', 'hardness': 'medium'}, {'question': "List the name of the stadium where both the player 'Walter Samuel' and the player 'Thiago Motta' got injured.", 'sql_query': "SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Walter Samuel' INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Thiago Motta'", 'db_id': 'game_injury', 'hardness': 'extra'}], 'hr_1': [{'question': 'What the full names, ids of each employee and the name of the country they are in?', 'sql_query': 'SELECT T1.first_name ,  T1.last_name , T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id', 'db_id': 'hr_1', 'hardness': 'hard'}, {'question': 'On what dates were employees without the letter M in their first names hired?', 'sql_query': "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'", 'db_id': 'hr_1', 'hardness': 'medium'}, {'question': 'What is all the information about employees with D or S in their first name, ordered by salary descending?', 'sql_query': "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC", 'db_id': 'hr_1', 'hardness': 'extra'}], 'performance_attendance': [{'question': 'Show the dates of performances with attending members whose roles are "Violin".', 'sql_query': 'SELECT T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID WHERE T2.Role  =  "Violin"', 'db_id': 'performance_attendance', 'hardness': 'hard'}, {'question': 'What is the date of the performance with the highest number of attendees?', 'sql_query': 'SELECT Date FROM performance ORDER BY Attendance DESC LIMIT 1', 'db_id': 'performance_attendance', 'hardness': 'medium'}, {'question': 'Show different locations and the number of performances at each location.', 'sql_query': 'SELECT LOCATION ,  COUNT(*) FROM performance GROUP BY LOCATION', 'db_id': 'performance_attendance', 'hardness': 'medium'}], 'body_builder': [{'question': 'What are the birth date and birth place of the body builder with the highest total points?', 'sql_query': 'SELECT T2.Birth_Date ,  T2.Birth_Place FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC LIMIT 1', 'db_id': 'body_builder', 'hardness': 'hard'}, {'question': 'List the height and weight of people in descending order of height.', 'sql_query': 'SELECT Height ,  Weight FROM people ORDER BY Height DESC', 'db_id': 'body_builder', 'hardness': 'medium'}, {'question': 'How many persons are not body builders?', 'sql_query': 'SELECT count(*) FROM people WHERE people_id NOT IN (SELECT People_ID FROM body_builder)', 'db_id': 'body_builder', 'hardness': 'extra'}], 'student_assessment': [{'question': 'What are all info of students who registered courses but not attended courses?', 'sql_query': 'SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)', 'db_id': 'student_assessment', 'hardness': 'hard'}, {'question': 'what are the first name and last name of all candidates?', 'sql_query': 'SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id', 'db_id': 'student_assessment', 'hardness': 'medium'}, {'question': 'What are the details of the student who registered for the most number of courses?', 'sql_query': 'SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1', 'db_id': 'student_assessment', 'hardness': 'extra'}], 'company_office': [{'question': 'Show the names of the buildings that have more than one company offices.', 'sql_query': 'SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id HAVING COUNT(*)  >  1', 'db_id': 'company_office', 'hardness': 'hard'}, {'question': 'Please show the names of the buildings whose status is "on-hold", in ascending order of stories.', 'sql_query': 'SELECT name FROM buildings WHERE Status  =  "on-hold" ORDER BY Stories ASC', 'db_id': 'company_office', 'hardness': 'medium'}, {'question': 'Show the name of the building that has the most company offices.', 'sql_query': 'SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'company_office', 'hardness': 'extra'}], 'network_2': [{'question': 'What are the names of all people who do not have friends?', 'sql_query': 'SELECT name FROM person EXCEPT SELECT name FROM PersonFriend', 'db_id': 'network_2', 'hardness': 'hard'}, {'question': 'Who are the friends of Alice that are doctors?', 'sql_query': "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'male' AND T1.job  =  'doctor'", 'db_id': 'network_2', 'hardness': 'medium'}, {'question': 'Find the name of the person who has friends with age above 40 and under age 30?', 'sql_query': 'SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) INTERSECT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)', 'db_id': 'network_2', 'hardness': 'extra'}], 'ship_mission': [{'question': 'What is the most common type of ships?', 'sql_query': 'SELECT TYPE FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'ship_mission', 'hardness': 'hard'}, {'question': 'What are the different fates of the mission that involved ships from the United States?', 'sql_query': 'SELECT DISTINCT T1.Fate FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T2.Nationality  =  "United States"', 'db_id': 'ship_mission', 'hardness': 'medium'}, {'question': 'Show the distinct fate of missions that involve ships with nationality "United States"', 'sql_query': 'SELECT DISTINCT T1.Fate FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T2.Nationality  =  "United States"', 'db_id': 'ship_mission', 'hardness': 'medium'}], 'allergy_1': [{'question': 'Which allergy type has most number of allergies?', 'sql_query': 'SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1', 'db_id': 'allergy_1', 'hardness': 'hard'}, {'question': 'How many students are there for each major?', 'sql_query': 'SELECT major ,  count(*) FROM Student GROUP BY major', 'db_id': 'allergy_1', 'hardness': 'medium'}, {'question': "Find the number of male (sex is 'M') students who have some food type allery.", 'sql_query': 'SELECT count(*) FROM Student WHERE sex  =  "M" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  "food")', 'db_id': 'allergy_1', 'hardness': 'extra'}], 'party_people': [{'question': 'Show names of parties that does not have any members.', 'sql_query': 'SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM Member)', 'db_id': 'party_people', 'hardness': 'hard'}, {'question': 'Show party names and the number of events for each party.', 'sql_query': 'SELECT T2.party_name ,  count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id', 'db_id': 'party_people', 'hardness': 'medium'}, {'question': 'Return the name of the party with the most members.', 'sql_query': 'SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1', 'db_id': 'party_people', 'hardness': 'extra'}], 'csu_1': [{'question': 'In what year was the most degrees conferred?', 'sql_query': 'SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1', 'db_id': 'csu_1', 'hardness': 'hard'}, {'question': 'What campus started in year 1956, has more than 200 full time students, and more than 400 students enrolled?', 'sql_query': 'SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id  =  t2.campus WHERE t2.year  =  1956 AND totalenrollment_ay  >  400 AND FTE_AY  >  200', 'db_id': 'csu_1', 'hardness': 'medium'}, {'question': 'How many faculty members are at the university that gave the least number of degrees in 2001?', 'sql_query': 'SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1', 'db_id': 'csu_1', 'hardness': 'extra'}], 'school_bus': [{'question': 'Show the names of the drivers without a school bus.', 'sql_query': 'SELECT name FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM school_bus)', 'db_id': 'school_bus', 'hardness': 'hard'}, {'question': 'Show the type of school and the number of buses for each type.', 'sql_query': 'SELECT T2.type ,  count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T2.type', 'db_id': 'school_bus', 'hardness': 'medium'}, {'question': 'Show the school name and type for schools without a school bus.', 'sql_query': 'SELECT school ,  TYPE FROM school WHERE school_id NOT IN (SELECT school_id FROM school_bus)', 'db_id': 'school_bus', 'hardness': 'extra'}], 'insurance_fnol': [{'question': 'What are the open and close dates of all the policies used by the customer who have "Diana" in part of their names?', 'sql_query': 'SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE "%Diana%"', 'db_id': 'insurance_fnol', 'hardness': 'hard'}, {'question': 'List all the customers in increasing order of IDs.', 'sql_query': 'SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC', 'db_id': 'insurance_fnol', 'hardness': 'medium'}, {'question': 'Which customers have used both the service named "Close a policy" and the service named "Upgrade a policy"? Give me the customer names.', 'sql_query': 'SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  "Close a policy" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  "New policy application"', 'db_id': 'insurance_fnol', 'hardness': 'extra'}], 'imdb': [{'question': 'What is the number of movies in which " Jennifer Aniston " acted after 2010 ?', 'sql_query': 'SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  "Jennifer Aniston" AND t2.release_year  >  2010;', 'db_id': 'imdb', 'hardness': 'hard'}, {'question': 'Find all the female actors born in " New York City " after 1980', 'sql_query': 'SELECT name FROM actor WHERE birth_city  =  "New York City" AND birth_year  >  1980 AND gender  =  "female";', 'db_id': 'imdb', 'hardness': 'medium'}, {'question': 'Find the name and budget of the latest movie by " Quentin Tarantino "', 'sql_query': 'SELECT t3.budget  ,  t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  "Quentin Tarantino" ORDER BY t3.release_year DESC LIMIT 1;', 'db_id': 'imdb', 'hardness': 'extra'}], 'customers_and_invoices': [{'question': 'What are teh names of the different products, as well as the number of customers who have ordered each product.', 'sql_query': 'SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name', 'db_id': 'customers_and_invoices', 'hardness': 'hard'}, {'question': 'What are the first names and ids for customers who have two or more accounts?', 'sql_query': 'SELECT T2.customer_first_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2', 'db_id': 'customers_and_invoices', 'hardness': 'medium'}, {'question': 'How many products were not included in any order?', 'sql_query': 'SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )', 'db_id': 'customers_and_invoices', 'hardness': 'extra'}], 'voter_2': [{'question': 'What are the distinct last names of the students who have president votes and have 8741 as the advisor?', 'sql_query': 'SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote INTERSECT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  "8741"', 'db_id': 'voter_2', 'hardness': 'hard'}, {'question': 'What are the first names and last names of the students who are 18 years old and have vice president votes.', 'sql_query': 'SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18', 'db_id': 'voter_2', 'hardness': 'medium'}, {'question': 'Find the major that is studied by the most female students.', 'sql_query': 'SELECT Major FROM STUDENT WHERE Sex  =  "F" GROUP BY major ORDER BY count(*) DESC LIMIT 1', 'db_id': 'voter_2', 'hardness': 'extra'}], 'school_finance': [{'question': 'Find the names of schools that have more than one donator with donation amount above 8.5.', 'sql_query': 'SELECT T2.School_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.amount  >  8.5 GROUP BY T1.school_id HAVING count(*)  >  1', 'db_id': 'school_finance', 'hardness': 'hard'}, {'question': 'Show the average, maximum, minimum enrollment of all schools.', 'sql_query': 'SELECT avg(enrollment) ,  max(enrollment) ,  min(enrollment) FROM school', 'db_id': 'school_finance', 'hardness': 'medium'}, {'question': 'List each donator name and the amount of endowment in descending order of the amount of endowment.', 'sql_query': 'SELECT donator_name ,  sum(amount) FROM endowment GROUP BY donator_name ORDER BY sum(amount) DESC', 'db_id': 'school_finance', 'hardness': 'extra'}], 'activity_1': [{'question': "Show the ids of the students who don't participate in any activity.", 'sql_query': 'SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in', 'db_id': 'activity_1', 'hardness': 'hard'}, {'question': 'Which students have professors as their advisors? Find their student ids.', 'sql_query': 'SELECT T2.StuID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.rank  =  "Professor"', 'db_id': 'activity_1', 'hardness': 'medium'}, {'question': 'Give me the the first and last name of the faculty who advises the most students.', 'sql_query': 'SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1', 'db_id': 'activity_1', 'hardness': 'extra'}], 'sakila_1': [{'question': 'What is the most popular first name of the actors?', 'sql_query': 'SELECT first_name FROM actor GROUP BY first_name ORDER BY count(*) DESC LIMIT 1', 'db_id': 'sakila_1', 'hardness': 'hard'}, {'question': 'Which film actors (actresses) played a role in more than 30 films? List his or her first name and last name.', 'sql_query': 'SELECT T2.first_name ,  T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id HAVING count(*)  >  30', 'db_id': 'sakila_1', 'hardness': 'medium'}, {'question': 'Which film has the most copies in the inventory? List both title and id.', 'sql_query': 'SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1', 'db_id': 'sakila_1', 'hardness': 'extra'}], 'student_1': [{'question': 'Which classroom has the most students?', 'sql_query': 'SELECT classroom FROM list GROUP BY classroom ORDER BY count(*) DESC LIMIT 1', 'db_id': 'student_1', 'hardness': 'hard'}, {'question': 'How many teachers does the student named MADLOCK RAY have?', 'sql_query': 'SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  "MADLOCK" AND T1.lastname  =  "RAY"', 'db_id': 'student_1', 'hardness': 'medium'}, {'question': 'Find all students taught by OTHA MOYER. Output the first and last names of the students.', 'sql_query': 'SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  "OTHA" AND T2.lastname  =  "MOYER"', 'db_id': 'student_1', 'hardness': 'extra'}], 'college_3': [{'question': 'What are the names of courses that give either 3 credits, or 1 credit and 4 hours?', 'sql_query': 'SELECT CName FROM COURSE WHERE Credits  =  3 UNION SELECT CName FROM COURSE WHERE Credits  =  1 AND Hours  =  4', 'db_id': 'college_3', 'hardness': 'hard'}, {'question': 'What are the maximum and minumum grade points?', 'sql_query': 'SELECT max(gradepoint) ,  min(gradepoint) FROM GRADECONVERSION', 'db_id': 'college_3', 'hardness': 'medium'}, {'question': 'Find the name of the department that has the biggest number of students minored in?', 'sql_query': 'SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) DESC LIMIT 1', 'db_id': 'college_3', 'hardness': 'extra'}], 'manufacturer': [{'question': 'Find the id and number of shops for the company that produces the most expensive furniture.', 'sql_query': 'SELECT t1.manufacturer_id ,  t1.num_of_shops FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id  =  t2.manufacturer_id ORDER BY t2.Price_in_Dollar DESC LIMIT 1', 'db_id': 'manufacturer', 'hardness': 'hard'}, {'question': 'find the total market rate of the furnitures that have the top 2 market shares.', 'sql_query': 'SELECT sum(market_rate) FROM furniture ORDER BY market_rate DESC LIMIT 2', 'db_id': 'manufacturer', 'hardness': 'medium'}, {'question': 'Find the name of the company that produces both furnitures with less than 6 components and furnitures with more than 10 components.', 'sql_query': 'SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  <  6 INTERSECT SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  >  10', 'db_id': 'manufacturer', 'hardness': 'extra'}], 'driving_school': [{'question': "How many lessons taught by staff whose first name has letter 'a' in it?", 'sql_query': 'SELECT count(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE "%a%"', 'db_id': 'driving_school', 'hardness': 'hard'}, {'question': 'What is the first and last name of all employees who live in the city Damianfort?', 'sql_query': 'SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = "Damianfort";', 'db_id': 'driving_school', 'hardness': 'medium'}, {'question': 'What is the city with the most customers?', 'sql_query': 'SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;', 'db_id': 'driving_school', 'hardness': 'extra'}], 'scientist_1': [{'question': 'Find the name of scientists who are not assigned to any project.', 'sql_query': 'SELECT Name FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)', 'db_id': 'scientist_1', 'hardness': 'hard'}, {'question': "Find the number of projects which each scientist is working on and scientist's name.", 'sql_query': 'SELECT count(*) ,  T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn  =  T2.scientist GROUP BY T1.name', 'db_id': 'scientist_1', 'hardness': 'medium'}, {'question': "What are the names of any scientists who worked on projects named 'Matter of Time' and 'A Puzzling Pattern'?", 'sql_query': "SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.name  =  'Matter of Time' INTERSECT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.name  =  'A Puzzling Parallax'", 'db_id': 'scientist_1', 'hardness': 'extra'}], 'entertainment_awards': [{'question': 'List the name of artworks that are not nominated.', 'sql_query': 'SELECT Name FROM Artwork WHERE Artwork_ID NOT IN (SELECT Artwork_ID FROM nomination)', 'db_id': 'entertainment_awards', 'hardness': 'hard'}, {'question': 'Please show different types of artworks with the corresponding number of artworks of each type.', 'sql_query': 'SELECT TYPE ,  COUNT(*) FROM artwork GROUP BY TYPE', 'db_id': 'entertainment_awards', 'hardness': 'medium'}, {'question': 'For each nomination, show the name of the artwork and name of the festival where it is nominated.', 'sql_query': 'SELECT T2.Name ,  T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID', 'db_id': 'entertainment_awards', 'hardness': 'medium'}], 'county_public_safety': [{'question': 'Show the number of cities in counties that have a population more than 20000.', 'sql_query': 'SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)', 'db_id': 'county_public_safety', 'hardness': 'hard'}, {'question': 'Return the minimum and maximum crime rates across all counties.', 'sql_query': 'SELECT min(Crime_rate) ,  max(Crime_rate) FROM county_public_safety', 'db_id': 'county_public_safety', 'hardness': 'medium'}, {'question': 'What are the white percentages of cities, and the corresponding crime rates of the counties they correspond to?', 'sql_query': 'SELECT T1.White ,  T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID', 'db_id': 'county_public_safety', 'hardness': 'medium'}], 'election_representative': [{'question': 'Show the parties that have both representatives in New York state and representatives in Pennsylvania state.', 'sql_query': 'SELECT Party FROM representative WHERE State  =  "New York" INTERSECT SELECT Party FROM representative WHERE State  =  "Pennsylvania"', 'db_id': 'election_representative', 'hardness': 'hard'}, {'question': 'What are the names of representatives in descending order of votes?', 'sql_query': 'SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY votes DESC', 'db_id': 'election_representative', 'hardness': 'medium'}, {'question': 'What are the life spans of representatives from New York state or Indiana state?', 'sql_query': 'SELECT Lifespan FROM representative WHERE State  =  "New York" OR State  =  "Indiana"', 'db_id': 'election_representative', 'hardness': 'medium'}], 'riding_club': [{'question': 'List the names of players that do not have coaches.', 'sql_query': 'SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM player_coach)', 'db_id': 'riding_club', 'hardness': 'hard'}, {'question': 'Show different occupations along with the number of players in each occupation.', 'sql_query': 'SELECT Occupation ,  COUNT(*) FROM player GROUP BY Occupation', 'db_id': 'riding_club', 'hardness': 'medium'}, {'question': 'Show the names of sponsors of players whose residence is either "Brandon" or "Birtle".', 'sql_query': 'SELECT Sponsor_name FROM player WHERE Residence  =  "Brandon" OR Residence  =  "Birtle"', 'db_id': 'riding_club', 'hardness': 'medium'}], 'manufactory_1': [{'question': 'What are the names of companies that do not make DVD drives?', 'sql_query': "SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T1.name  =  'DVD drive'", 'db_id': 'manufactory_1', 'hardness': 'hard'}, {'question': 'What are the names and prices of all products in the store?', 'sql_query': 'SELECT name ,  price FROM products', 'db_id': 'manufactory_1', 'hardness': 'medium'}, {'question': 'How many products are not made by Sony?', 'sql_query': "SELECT count(DISTINCT name) FROM products WHERE name NOT IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony')", 'db_id': 'manufactory_1', 'hardness': 'extra'}], 'ship_1': [{'question': 'Return the flag that is most common among all ships.', 'sql_query': 'SELECT flag FROM ship GROUP BY flag ORDER BY count(*) DESC LIMIT 1', 'db_id': 'ship_1', 'hardness': 'hard'}, {'question': 'Find the name of captains whose rank are either Midshipman or Lieutenant.', 'sql_query': "SELECT name FROM captain WHERE rank  =  'Midshipman' OR rank  =  'Lieutenant'", 'db_id': 'ship_1', 'hardness': 'medium'}, {'question': 'What are the names of ships that are commanded by both captains with the rank of Midshipman and captains with the rank of Lieutenant?', 'sql_query': "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Midshipman' INTERSECT SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Lieutenant'", 'db_id': 'ship_1', 'hardness': 'extra'}], 'solvency_ii': [{'question': 'Show the names of products that are in at least two events in ascending alphabetical order of product name.', 'sql_query': 'SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*)  >=  2 ORDER BY T1.Product_Name', 'db_id': 'solvency_ii', 'hardness': 'hard'}, {'question': 'What is the name of the product with the highest price?', 'sql_query': 'SELECT Product_Name FROM Products ORDER BY Product_Price DESC LIMIT 1', 'db_id': 'solvency_ii', 'hardness': 'medium'}, {'question': 'Show the prices of the products named "Dining" or "Trading Policy".', 'sql_query': 'SELECT Product_Price FROM Products WHERE Product_Name  =  "Dining" OR Product_Name  =  "Trading Policy"', 'db_id': 'solvency_ii', 'hardness': 'medium'}], 'department_store': [{'question': 'What are the distinct names of customers with an order status of Pending, sorted by customer id?', 'sql_query': 'SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  "Pending" ORDER BY T2.customer_id', 'db_id': 'department_store', 'hardness': 'hard'}, {'question': 'List the name of staff who has been assigned multiple jobs.', 'sql_query': 'SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  1', 'db_id': 'department_store', 'hardness': 'medium'}, {'question': 'Give the maximum and minimum product prices for each product type, grouped and ordered by product type.', 'sql_query': 'SELECT max(product_price) ,  min(product_price) ,  product_type_code FROM products GROUP BY product_type_code ORDER BY product_type_code', 'db_id': 'department_store', 'hardness': 'extra'}], 'scholar': [{'question': 'venue for Trophic Cascade', 'sql_query': 'SELECT DISTINCT t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "Trophic Cascade";', 'db_id': 'scholar', 'hardness': 'hard'}, {'question': 'pldi papers in 2015', 'sql_query': 'SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  "pldi";', 'db_id': 'scholar', 'hardness': 'medium'}, {'question': 'what papers have fewer than 5 citations by ACL papers', 'sql_query': 'SELECT DISTINCT t3.citingpaperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  "ACL" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid )  <  5;', 'db_id': 'scholar', 'hardness': 'extra'}], 'insurance_policies': [{'question': 'Return the claim start date for the claims whose claimed amount is no more than the average', 'sql_query': 'SELECT Date_Claim_Made FROM Claims WHERE Amount_Settled  <=  ( SELECT avg(Amount_Settled) FROM Claims )', 'db_id': 'insurance_policies', 'hardness': 'hard'}, {'question': 'Find the number of settlements each claim corresponds to. Show the number together with the claim id.', 'sql_query': 'SELECT T1.Claim_id ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id', 'db_id': 'insurance_policies', 'hardness': 'medium'}, {'question': 'Which customer had at least 2 policies but did not file any claims? List the customer details and id.', 'sql_query': 'SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 EXCEPT SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id JOIN Claims AS T3 ON T2.policy_id  =  T3.policy_id', 'db_id': 'insurance_policies', 'hardness': 'extra'}], 'assets_maintenance': [{'question': 'Which company started the earliest the maintenance contract? Show the company name.', 'sql_query': 'SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id ORDER BY T2.contract_start_date ASC LIMIT 1', 'db_id': 'assets_maintenance', 'hardness': 'hard'}, {'question': 'For all the faults of different parts, what are all the decriptions of the skills required to fix them? List the name of the faults and the skill description.', 'sql_query': 'SELECT T1.fault_short_name ,  T3.skill_description FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id  =  T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id', 'db_id': 'assets_maintenance', 'hardness': 'medium'}, {'question': 'Which fault log included the most number of faulty parts? List the fault log id, description and record time.', 'sql_query': 'SELECT T1.fault_log_entry_id ,  T1.fault_description ,  T1.fault_log_entry_datetime FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1', 'db_id': 'assets_maintenance', 'hardness': 'extra'}], 'tracking_software_problems': [{'question': 'What are the products that have problems reported after 1986-11-13? Give me the product id and the count of problems reported after 1986-11-13.', 'sql_query': 'SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > "1986-11-13" GROUP BY T2.product_id', 'db_id': 'tracking_software_problems', 'hardness': 'hard'}, {'question': 'What are the ids of the problems that are from the product "voluptatem" and are reported after 1995?', 'sql_query': 'SELECT T1.problem_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = "voluptatem" AND T1.date_problem_reported > "1995"', 'db_id': 'tracking_software_problems', 'hardness': 'medium'}, {'question': 'Find the products which have problems reported by both Lacey Bosco and Kenton Champlin?', 'sql_query': 'SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = "Lacey" AND T3.staff_last_name = "Bosco" INTERSECT SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = "Kenton" AND T3.staff_last_name = "Champlin"', 'db_id': 'tracking_software_problems', 'hardness': 'extra'}], 'movie_1': [{'question': 'Return reviewer name, movie title, stars, and ratingDate. And sort the data first by reviewer name, then by movie title, and lastly by number of stars.', 'sql_query': 'SELECT T3.name ,  T2.title ,  T1.stars ,  T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID ORDER BY T3.name ,  T2.title ,  T1.stars', 'db_id': 'movie_1', 'hardness': 'hard'}, {'question': 'What is the average rating star for each reviewer?', 'sql_query': 'SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name', 'db_id': 'movie_1', 'hardness': 'medium'}, {'question': 'What are the names of reviewers who had rated 3 star and 4 star?', 'sql_query': 'SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  3 INTERSECT SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  4', 'db_id': 'movie_1', 'hardness': 'extra'}], 'products_gen_characteristics': [{'question': 'What are characteristic names used at least twice across all products?', 'sql_query': 'SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*)  >= 2', 'db_id': 'products_gen_characteristics', 'hardness': 'hard'}, {'question': "Return the color code and description for the product with the name 'chervil'.", 'sql_query': 'SELECT t1.color_code ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  "chervil"', 'db_id': 'products_gen_characteristics', 'hardness': 'medium'}, {'question': 'Return the name of the characteristic that is most common across all products.', 'sql_query': 'SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT 1', 'db_id': 'products_gen_characteristics', 'hardness': 'extra'}], 'loan_1': [{'question': 'Find the name of customers who do not have an saving account.', 'sql_query': "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'", 'db_id': 'loan_1', 'hardness': 'hard'}, {'question': 'Find the city and state of the bank branch named morningside.', 'sql_query': "SELECT city ,  state FROM bank WHERE bname  =  'morningside'", 'db_id': 'loan_1', 'hardness': 'medium'}, {'question': 'Find the name of customers who have loans of both Mortgages and Auto.', 'sql_query': "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Auto'", 'db_id': 'loan_1', 'hardness': 'extra'}], 'dog_kennels': [{'question': 'Find the states where both owners and professionals live.', 'sql_query': 'SELECT state FROM Owners INTERSECT SELECT state FROM Professionals', 'db_id': 'dog_kennels', 'hardness': 'hard'}, {'question': "What are the date and the operating professional's first name of each treatment?", 'sql_query': 'SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id', 'db_id': 'dog_kennels', 'hardness': 'medium'}, {'question': 'Tell me the number of dogs that have not received any treatment .', 'sql_query': 'select count(*) from dogs where dog_id not in ( select dog_id from treatments )', 'db_id': 'dog_kennels', 'hardness': 'extra'}], 'e_government': [{'question': 'What are the names of all cities and states?', 'sql_query': 'SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses', 'db_id': 'e_government', 'hardness': 'hard'}, {'question': 'What are the first, middle, and last names of all individuals, ordered by last name?', 'sql_query': 'SELECT individual_first_name ,  individual_middle_name ,  individual_last_name FROM individuals ORDER BY individual_last_name', 'db_id': 'e_government', 'hardness': 'medium'}, {'question': 'What is the last name of the contact individual from the Labour party organization who was contacted most recently?', 'sql_query': 'SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.organization_name  =  "Labour Party" ORDER BY t2.date_contact_to DESC LIMIT 1', 'db_id': 'e_government', 'hardness': 'extra'}], 'tracking_grants_for_research': [{'question': 'List the project details of the projects which did not hire any staff for a researcher role.', 'sql_query': "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code  =  'researcher' )", 'db_id': 'tracking_grants_for_research', 'hardness': 'hard'}, {'question': 'What are the staff roles of the staff who', 'sql_query': "SELECT role_code FROM Project_Staff WHERE date_from  >  '2003-04-19 15:06:20' AND date_to  <  '2016-03-15 00:33:18'", 'db_id': 'tracking_grants_for_research', 'hardness': 'medium'}, {'question': 'What is the type of the organization with the most research staff?', 'sql_query': 'SELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1', 'db_id': 'tracking_grants_for_research', 'hardness': 'extra'}], 'film_rank': [{'question': 'What are the years of film market estimation for the market of Japan, ordered by year descending?', 'sql_query': 'SELECT T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T2.Country  =  "Japan" ORDER BY T1.Year DESC', 'db_id': 'film_rank', 'hardness': 'hard'}, {'question': 'How films are produced by each studio?', 'sql_query': 'SELECT Studio ,  COUNT(*) FROM film GROUP BY Studio', 'db_id': 'film_rank', 'hardness': 'medium'}, {'question': 'What are the titles and directors of the films were never presented in China?', 'sql_query': "SELECT title ,  director FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.market_id  =  T2.Market_ID WHERE country  =  'China')", 'db_id': 'film_rank', 'hardness': 'extra'}], 'academic': [{'question': 'return me the keywords of " Making database systems usable " .', 'sql_query': 'SELECT t1.keyword FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t3.pid WHERE t2.title  =  "Making database systems usable";', 'db_id': 'academic', 'hardness': 'hard'}, {'question': 'return me the number of citations of " Making database systems usable " in each year .', 'sql_query': 'SELECT YEAR  ,  SUM ( citation_num ) FROM publication WHERE title  =  "Making database systems usable" GROUP BY YEAR;', 'db_id': 'academic', 'hardness': 'medium'}, {'question': 'return me the number of authors who have papers in the VLDB conference .', 'sql_query': 'SELECT COUNT ( DISTINCT t1.name ) FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  "VLDB";', 'db_id': 'academic', 'hardness': 'extra'}], 'customer_complaints': [{'question': 'How many customers are there in the customer type with the most customers?', 'sql_query': 'SELECT count(*) FROM customers GROUP BY customer_type_code ORDER BY count(*) DESC LIMIT 1', 'db_id': 'customer_complaints', 'hardness': 'hard'}, {'question': 'Return the average price of products that have each category code.', 'sql_query': 'SELECT avg(product_price) ,  product_category_code FROM products GROUP BY product_category_code', 'db_id': 'customer_complaints', 'hardness': 'medium'}, {'question': 'What are the emails and phone numbers of custoemrs who have never filed a complaint?', 'sql_query': 'SELECT email_address ,  phone_number FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM complaints)', 'db_id': 'customer_complaints', 'hardness': 'extra'}], 'program_share': [{'question': 'Find the names of programs that are never broadcasted in the morning.', 'sql_query': 'SELECT name FROM program EXCEPT SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  "Morning"', 'db_id': 'program_share', 'hardness': 'hard'}, {'question': 'What is the owner of the channel that has the highest rating ratio?', 'sql_query': 'SELECT OWNER FROM channel ORDER BY rating_in_percent DESC LIMIT 1', 'db_id': 'program_share', 'hardness': 'medium'}, {'question': 'Who are the owners of the programs that broadcast both in the morning and at night?', 'sql_query': 'SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  "Morning" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  "Night"', 'db_id': 'program_share', 'hardness': 'extra'}], 'medicine_enzyme_interaction': [{'question': 'What is the most common interaction type between enzymes and medicine? And how many are there?', 'sql_query': 'SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT 1', 'db_id': 'medicine_enzyme_interaction', 'hardness': 'hard'}, {'question': 'What are the ids and trade names of the medicine that can interact with at least 3 enzymes?', 'sql_query': 'SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  3', 'db_id': 'medicine_enzyme_interaction', 'hardness': 'medium'}, {'question': 'What are the medicine and trade names that can interact as an inhibitor and activitor with enzymes?', 'sql_query': "SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'", 'db_id': 'medicine_enzyme_interaction', 'hardness': 'extra'}], 'local_govt_and_lot': [{'question': "What are the distinct id and type of the thing that has the status 'Close' or has a status record before the date '2017-06-19 02:59:21'", 'sql_query': "SELECT DISTINCT T2.thing_id ,  T2.Type_of_Thing_Code FROM Timed_Status_of_Things AS T1 JOIN Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.Status_of_Thing_Code  =  'Close' OR T1.Date_and_Date  <  '2017-06-19 02:59:21'", 'db_id': 'local_govt_and_lot', 'hardness': 'hard'}, {'question': "What is the distinct service types that are provided by the organization which has detail 'Denesik and Sons Party'?", 'sql_query': "SELECT DISTINCT T1.service_type_code FROM services AS T1 JOIN organizations AS T2 ON T1.organization_id  =  T2.organization_id WHERE T2.organization_details  =  'Denesik and Sons Party'", 'db_id': 'local_govt_and_lot', 'hardness': 'medium'}, {'question': 'What is the maximum number that a certain service is provided? List the service id, details and number.', 'sql_query': 'SELECT T1.service_id ,  T1.service_details ,  count(*) FROM Services AS T1 JOIN Residents_Services AS T2 ON T1.service_id  =  T2.service_id GROUP BY T1.service_id ORDER BY count(*) DESC LIMIT 1', 'db_id': 'local_govt_and_lot', 'hardness': 'extra'}], 'battle_death': [{'question': 'What are the ids and names of the battles that led to more than 10 people killed in total.', 'sql_query': 'SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10', 'db_id': 'battle_death', 'hardness': 'hard'}, {'question': "What are the notes of the death events which has substring 'East'?", 'sql_query': "SELECT note FROM death WHERE note LIKE '%East%'", 'db_id': 'battle_death', 'hardness': 'medium'}, {'question': "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'", 'sql_query': "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'", 'db_id': 'battle_death', 'hardness': 'extra'}], 'store_product': [{'question': 'Find the total population of the districts where the area is bigger than the average city area.', 'sql_query': 'SELECT sum(city_population) FROM district WHERE city_area  >  (SELECT avg(city_area) FROM district)', 'db_id': 'store_product', 'hardness': 'hard'}, {'question': 'Find the name and population of district with population between 200000 and 2000000', 'sql_query': 'SELECT District_name ,  City_Population FROM district WHERE City_Population BETWEEN 200000 AND 2000000', 'db_id': 'store_product', 'hardness': 'medium'}, {'question': 'Find all the stores in the district with the most population.', 'sql_query': 'SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id WHERE district_id  =  (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1)', 'db_id': 'store_product', 'hardness': 'extra'}], 'music_1': [{'question': 'List the duration, file size and format of songs whose genre is pop, ordered by title?', 'sql_query': 'SELECT T1.duration ,  T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.genre_is  =  "pop" ORDER BY T2.song_name', 'db_id': 'music_1', 'hardness': 'hard'}, {'question': 'What are the names of all male British artists?', 'sql_query': 'SELECT artist_name FROM artist WHERE country  =  "UK" AND gender  =  "Male"', 'db_id': 'music_1', 'hardness': 'medium'}, {'question': 'Find the top 3 artists who have the largest number of songs works whose language is Bangla.', 'sql_query': 'SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  "bangla" GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3', 'db_id': 'music_1', 'hardness': 'extra'}], 'tracking_orders': [{'question': 'For each product, show its name and the number of times it was ordered.', 'sql_query': 'SELECT T3.product_name ,  count(*) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id', 'db_id': 'tracking_orders', 'hardness': 'hard'}, {'question': 'what are the order id and customer id of the oldest order?', 'sql_query': 'SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1', 'db_id': 'tracking_orders', 'hardness': 'medium'}, {'question': 'What is the name of the customer who has the largest number of orders?', 'sql_query': 'SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1', 'db_id': 'tracking_orders', 'hardness': 'extra'}], 'election': [{'question': 'Which people severed as governor most frequently?', 'sql_query': 'SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'election', 'hardness': 'hard'}, {'question': 'For each party, return the name of the party and the number of delegates from that party.', 'sql_query': 'SELECT T2.Party ,  COUNT(*) FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party', 'db_id': 'election', 'hardness': 'medium'}, {'question': 'Find the committees that have delegates both from from the democratic party and the liberal party.', 'sql_query': 'SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  "Democratic" INTERSECT SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  "Liberal"', 'db_id': 'election', 'hardness': 'extra'}], 'music_2': [{'question': 'What are the names of the songs that do not have back vocals?', 'sql_query': 'SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  "back"', 'db_id': 'music_2', 'hardness': 'hard'}, {'question': 'What are the types of vocals used in the song "Le Pop"?', 'sql_query': 'SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  "Le Pop"', 'db_id': 'music_2', 'hardness': 'medium'}, {'question': 'What instruments did the musician with the last name "Heilo" play in "Badlands"?', 'sql_query': 'SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  "Heilo" AND T3.title  =  "Badlands"', 'db_id': 'music_2', 'hardness': 'extra'}], 'wine_1': [{'question': 'What are the names of wines that are more expensive then all wines made in the year 2006?', 'sql_query': 'SELECT Name FROM WINE WHERE Price  >  (SELECT max(Price) FROM WINE WHERE YEAR  =  2006)', 'db_id': 'wine_1', 'hardness': 'hard'}, {'question': 'What are the names of wines made from red grapes and with prices above 50?', 'sql_query': 'SELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  "Red" AND T2.price  >  50', 'db_id': 'wine_1', 'hardness': 'medium'}, {'question': 'Which 3 wineries produce the most wines made from white grapes?', 'sql_query': 'SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  "White" GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3', 'db_id': 'wine_1', 'hardness': 'extra'}], 'formula_1': [{'question': 'What is the forename and surname of the driver with the shortest laptime?', 'sql_query': 'SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1', 'db_id': 'formula_1', 'hardness': 'hard'}, {'question': 'For each nationality, how many different constructors are there?', 'sql_query': 'SELECT count(*) ,  nationality FROM constructors GROUP BY nationality', 'db_id': 'formula_1', 'hardness': 'medium'}, {'question': 'What are the forenames and surnames of drivers who participated in the races named Australian Grand Prix but not the races named Chinese Grand Prix?', 'sql_query': 'SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = "Australian Grand Prix" EXCEPT SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = "Chinese Grand Prix"', 'db_id': 'formula_1', 'hardness': 'extra'}], 'sports_competition': [{'question': 'What are the positions of both players that have more than 20 20 points and less than 10 points?', 'sql_query': 'SELECT POSITION FROM player WHERE Points  >  20 INTERSECT SELECT POSITION FROM player WHERE Points  <  10', 'db_id': 'sports_competition', 'hardness': 'hard'}, {'question': 'What are the maximum and minimum number of silver medals for clubs.', 'sql_query': 'SELECT max(Silver) ,  min(Silver) FROM club_rank', 'db_id': 'sports_competition', 'hardness': 'medium'}, {'question': 'which country did participated in the most number of Tournament competitions?', 'sql_query': "SELECT country FROM competition WHERE competition_type  =  'Tournament' GROUP BY country ORDER BY count(*) DESC LIMIT 1", 'db_id': 'sports_competition', 'hardness': 'extra'}], 'storm_record': [{'question': 'What are the names of storms that did not affect two or more regions?', 'sql_query': 'SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2', 'db_id': 'storm_record', 'hardness': 'hard'}, {'question': 'How many storms occured in each region?', 'sql_query': 'SELECT T1.region_name ,  count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id', 'db_id': 'storm_record', 'hardness': 'medium'}, {'question': 'What are the names of regions that were affected by the storm in which the most people died?', 'sql_query': 'SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id ORDER BY T3.Number_Deaths DESC LIMIT 1', 'db_id': 'storm_record', 'hardness': 'extra'}], 'tvshow': [{'question': 'Which country has the most of TV Channels? List the country and number of TV Channels it has.', 'sql_query': 'SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;', 'db_id': 'tvshow', 'hardness': 'hard'}, {'question': "which countries' tv channels are playing some cartoon written by Todd Casey?", 'sql_query': "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", 'db_id': 'tvshow', 'hardness': 'medium'}, {'question': 'What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?', 'sql_query': "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'", 'db_id': 'tvshow', 'hardness': 'extra'}], 'device': [{'question': 'Which locations contains both shops that opened after the year 2012 and shops that opened before 2008?', 'sql_query': 'SELECT LOCATION FROM shop WHERE Open_Year  >  2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year  <  2008', 'db_id': 'device', 'hardness': 'hard'}, {'question': 'Return the names and locations of shops, ordered by name in alphabetical order.', 'sql_query': 'SELECT Shop_Name ,  LOCATION FROM shop ORDER BY Shop_Name ASC', 'db_id': 'device', 'hardness': 'medium'}, {'question': 'What is the name of the shop that has the greatest quantity of devices in stock?', 'sql_query': 'SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY SUM(T1.quantity) DESC LIMIT 1', 'db_id': 'device', 'hardness': 'extra'}], 'university_basketball': [{'question': 'What is the team name and acc regular season score of the school that was founded for the longest time?', 'sql_query': 'SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1', 'db_id': 'university_basketball', 'hardness': 'hard'}, {'question': 'What are the different affiliations, and how many schools with each have an enrollment size of above 20000?', 'sql_query': 'SELECT count(*) ,  affiliation FROM university WHERE enrollment  >  20000 GROUP BY affiliation', 'db_id': 'university_basketball', 'hardness': 'medium'}, {'question': 'How many schools do not participate in the basketball match?', 'sql_query': 'SELECT count(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match)', 'db_id': 'university_basketball', 'hardness': 'extra'}], 'bike_1': [{'question': 'What are all the different zip codes that have a maximum dew point that was always below 70?', 'sql_query': 'SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70', 'db_id': 'bike_1', 'hardness': 'hard'}, {'question': 'What are the ids and durations of the trips with the top 3 durations?', 'sql_query': 'SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3', 'db_id': 'bike_1', 'hardness': 'medium'}, {'question': 'What is the id of the bike that traveled the most in 94002?', 'sql_query': 'SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'bike_1', 'hardness': 'extra'}], 'shop_membership': [{'question': 'Show all branch names with the number of members in each branch registered after 2015.', 'sql_query': 'SELECT T2.name ,  count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  >  2015 GROUP BY T2.branch_id', 'db_id': 'shop_membership', 'hardness': 'hard'}, {'question': 'Show card number, name, and hometown for all members in a descending order of level.', 'sql_query': 'SELECT card_number ,  name ,  hometown FROM member ORDER BY LEVEL DESC', 'db_id': 'shop_membership', 'hardness': 'medium'}, {'question': 'What is the name and open year for the branch with most number of memberships registered in 2016?', 'sql_query': 'SELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1', 'db_id': 'shop_membership', 'hardness': 'extra'}], 'workshop_paper': [{'question': 'List the authors who do not have submission to any workshop.', 'sql_query': 'SELECT Author FROM submission WHERE Submission_ID NOT IN (SELECT Submission_ID FROM acceptance)', 'db_id': 'workshop_paper', 'hardness': 'hard'}, {'question': 'For each submission, find its author and acceptance result.', 'sql_query': 'SELECT T2.Author ,  T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID', 'db_id': 'workshop_paper', 'hardness': 'medium'}, {'question': 'Which authors have submitted to more than one workshop?', 'sql_query': 'SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id)  >  1', 'db_id': 'workshop_paper', 'hardness': 'medium'}], 'poker_player': [{'question': 'Give the nationality that is most common across all people.', 'sql_query': 'SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'poker_player', 'hardness': 'hard'}, {'question': 'What are the names of poker players, ordered ascending by the number of final tables they have made?', 'sql_query': 'SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made', 'db_id': 'poker_player', 'hardness': 'medium'}, {'question': 'Give average earnings of poker players who are taller than 200.', 'sql_query': 'SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200', 'db_id': 'poker_player', 'hardness': 'medium'}], 'aircraft': [{'question': 'What is the average total number of passengers for all airports that the aircraft "Robinson R-22" visits?', 'sql_query': 'SELECT avg(T3.Total_Passengers) FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T1.Aircraft  =  "Robinson R-22"', 'db_id': 'aircraft', 'hardness': 'hard'}, {'question': 'Show all information on the airport that has the largest number of international passengers.', 'sql_query': 'SELECT * FROM airport ORDER BY International_Passengers DESC LIMIT 1', 'db_id': 'aircraft', 'hardness': 'medium'}, {'question': 'What is the name of the aircraft that has won an award the most?', 'sql_query': 'SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'aircraft', 'hardness': 'extra'}], 'railway': [{'question': 'Show the countries that have both managers of age above 50 and managers of age below 46.', 'sql_query': 'SELECT Country FROM manager WHERE Age  >  50 INTERSECT SELECT Country FROM manager WHERE Age  <  46', 'db_id': 'railway', 'hardness': 'hard'}, {'question': 'Show the countries that have managers of age above 50 or below 46.', 'sql_query': 'SELECT Country FROM manager WHERE Age  >  50 OR Age  <  46', 'db_id': 'railway', 'hardness': 'medium'}, {'question': 'Show the id and builder of the railway that are associated with the most trains.', 'sql_query': 'SELECT T2.Railway_ID ,  T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID GROUP BY T2.Railway_ID ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'railway', 'hardness': 'extra'}], 'concert_singer': [{'question': 'What are the number of concerts that occurred in the stadium with the largest capacity ?', 'sql_query': 'select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)', 'db_id': 'concert_singer', 'hardness': 'hard'}, {'question': 'For each stadium, how many concerts play there?', 'sql_query': 'SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id', 'db_id': 'concert_singer', 'hardness': 'medium'}, {'question': 'Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.', 'sql_query': 'SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015', 'db_id': 'concert_singer', 'hardness': 'extra'}], 'decoration_competition': [{'question': 'List the names of members who did not participate in any round.', 'sql_query': 'SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM round)', 'db_id': 'decoration_competition', 'hardness': 'hard'}, {'question': 'Show the names of members and the decoration themes they have.', 'sql_query': 'SELECT T1.Name ,  T2.Decoration_Theme FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID', 'db_id': 'decoration_competition', 'hardness': 'medium'}, {'question': 'Show the names of members that have a rank in round higher than 3.', 'sql_query': 'SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID WHERE T2.Rank_in_Round  >  3', 'db_id': 'decoration_competition', 'hardness': 'medium'}], 'book_2': [{'question': 'List the titles of books that are not published.', 'sql_query': 'SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)', 'db_id': 'book_2', 'hardness': 'hard'}, {'question': 'Show writers who have published a book with price more than 4000000.', 'sql_query': 'SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Price  >  4000000', 'db_id': 'book_2', 'hardness': 'medium'}, {'question': 'Show the titles of books in descending order of publication price.', 'sql_query': 'SELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Price DESC', 'db_id': 'book_2', 'hardness': 'medium'}], 'flight_company': [{'question': 'How many companies operates airlines in each airport?', 'sql_query': 'SELECT T3.id ,  count(*) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id JOIN airport AS T3 ON T2.airport_id  =  T3.id GROUP BY T3.id', 'db_id': 'flight_company', 'hardness': 'hard'}, {'question': 'What are the ids and names of the companies that operated more than one flight?', 'sql_query': 'SELECT T1.id ,  T1.name FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id GROUP BY T1.id HAVING count(*)  >  1', 'db_id': 'flight_company', 'hardness': 'medium'}, {'question': 'What is the id, name and IATA code of the airport that had most number of flights?', 'sql_query': 'SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1', 'db_id': 'flight_company', 'hardness': 'extra'}], 'party_host': [{'question': 'Show the most common nationality of hosts.', 'sql_query': 'SELECT Nationality FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'party_host', 'hardness': 'hard'}, {'question': 'How many hosts does each nationality have? List the nationality and the count.', 'sql_query': 'SELECT Nationality ,  COUNT(*) FROM HOST GROUP BY Nationality', 'db_id': 'party_host', 'hardness': 'medium'}, {'question': 'Show the first year and last year of parties with theme "Spring" or "Teqnology".', 'sql_query': 'SELECT First_year ,  Last_year FROM party WHERE Party_Theme  =  "Spring" OR Party_Theme  =  "Teqnology"', 'db_id': 'party_host', 'hardness': 'extra'}], 'cre_Docs_and_Epenses': [{'question': 'Return the account details with the greatest value, as well as those that include the character 5.', 'sql_query': 'SELECT max(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE "%5%"', 'db_id': 'cre_Docs_and_Epenses', 'hardness': 'hard'}, {'question': 'List all budget type codes and descriptions.', 'sql_query': 'SELECT budget_type_code ,  budget_type_description FROM Ref_budget_codes', 'db_id': 'cre_Docs_and_Epenses', 'hardness': 'medium'}, {'question': "List the document type code, document name, and document description for the document with name 'Noel CV' or name 'King Book'.", 'sql_query': "SELECT document_type_code ,  document_name ,  document_description FROM Documents WHERE document_name  =  'Noel CV' OR document_name  =  'King Book'", 'db_id': 'cre_Docs_and_Epenses', 'hardness': 'extra'}], 'restaurants': [{'question': 'where is a good place in the yosemite and mono lake area for french food ?', 'sql_query': 'SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  "yosemite and mono lake area" AND t1.food_type  =  "french" AND t1.rating  >  2.5;', 'db_id': 'restaurants', 'hardness': 'hard'}, {'question': 'how many chinese restaurants are there in the bay area ?', 'sql_query': 'SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  "bay area" AND t1.food_type  =  "chinese";', 'db_id': 'restaurants', 'hardness': 'medium'}, {'question': 'give me a good restaurant in mountain view for arabic food ?', 'sql_query': 'SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "mountain view" AND t1.food_type  =  "arabic" AND t1.rating  >  2.5;', 'db_id': 'restaurants', 'hardness': 'extra'}], 'climbing': [{'question': 'Which range contains the most mountains?', 'sql_query': 'SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'climbing', 'hardness': 'hard'}, {'question': 'What are the different names of mountains ascended by climbers from the country of West Germany?', 'sql_query': 'SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  "West Germany"', 'db_id': 'climbing', 'hardness': 'medium'}, {'question': 'What are the names of climbers and the corresponding names of mountains that they climb?', 'sql_query': 'SELECT T1.Name ,  T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID', 'db_id': 'climbing', 'hardness': 'medium'}], 'pets_1': [{'question': 'Find the number of dog pets that are raised by female students (with sex F).', 'sql_query': "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", 'db_id': 'pets_1', 'hardness': 'hard'}, {'question': 'Find the first name and age of students who have a pet.', 'sql_query': 'SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid', 'db_id': 'pets_1', 'hardness': 'medium'}, {'question': 'Find the first name of students who have cat or dog pet.', 'sql_query': "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'", 'db_id': 'pets_1', 'hardness': 'extra'}], 'customers_and_products_contacts': [{'question': 'How many products have a price higher than the average?', 'sql_query': 'SELECT count(*) FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products)', 'db_id': 'customers_and_products_contacts', 'hardness': 'hard'}, {'question': 'Show the customer name, customer address city, date from, and date to for each customer address history.', 'sql_query': 'SELECT T2.customer_name ,  T3.city ,  T1.date_from ,  T1.date_to FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id JOIN addresses AS T3 ON T1.address_id  =  T3.address_id', 'db_id': 'customers_and_products_contacts', 'hardness': 'medium'}, {'question': 'Show the product type and name for the products with price higher than 1000 or lower than 500.', 'sql_query': 'SELECT product_type_code ,  product_name FROM products WHERE product_price  >  1000 OR product_price  <  500', 'db_id': 'customers_and_products_contacts', 'hardness': 'extra'}], 'entrepreneur': [{'question': 'What are the dates of birth of entrepreneurs with investor "Simon Woodroffe" or "Peter Jones"?', 'sql_query': 'SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  "Simon Woodroffe" OR T1.Investor  =  "Peter Jones"', 'db_id': 'entrepreneur', 'hardness': 'hard'}, {'question': 'What are the weights of entrepreneurs in descending order of money requested?', 'sql_query': 'SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested DESC', 'db_id': 'entrepreneur', 'hardness': 'medium'}, {'question': 'What are the names of entrepreneurs and their corresponding investors, ordered descending by the amount of money requested?', 'sql_query': 'SELECT T2.Name ,  T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested', 'db_id': 'entrepreneur', 'hardness': 'medium'}], 'mountain_photos': [{'question': 'What is the name of each camera lens and the number of photos taken by it? Order the result by the count of photos.', 'sql_query': 'SELECT T1.name ,  count(*) FROM camera_lens AS T1 JOIN photos AS T2 ON T1.id  =  T2.camera_lens_id GROUP BY T1.id ORDER BY count(*)', 'db_id': 'mountain_photos', 'hardness': 'hard'}, {'question': 'List the camera lens names containing substring "Digital".', 'sql_query': 'SELECT name FROM camera_lens WHERE name LIKE "%Digital%"', 'db_id': 'mountain_photos', 'hardness': 'medium'}, {'question': 'How many camera lenses are not used in taking any photos?', 'sql_query': 'SELECT count(*) FROM camera_lens WHERE id NOT IN ( SELECT camera_lens_id FROM photos )', 'db_id': 'mountain_photos', 'hardness': 'extra'}], 'products_for_hire': [{'question': "What are the start date and end date of the booking that has booked the product named 'Book collection A'?", 'sql_query': "SELECT T3.booking_start_date ,   T3.booking_end_date FROM Products_for_hire AS T1 JOIN products_booked AS T2 ON T1.product_id  =  T2.product_id JOIN bookings AS T3 ON T2.booking_id  =  T3.booking_id WHERE T1.product_name  =  'Book collection A'", 'db_id': 'products_for_hire', 'hardness': 'hard'}, {'question': 'What are the first name, last name, and gender of all the good customers? Order by their last name.', 'sql_query': "SELECT first_name ,  last_name ,  gender_mf FROM customers WHERE good_or_bad_customer  =  'good' ORDER BY last_name", 'db_id': 'products_for_hire', 'hardness': 'medium'}, {'question': 'What are the coupon amount of the coupons owned by both good and bad customers?', 'sql_query': "SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  'good' INTERSECT SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  'bad'", 'db_id': 'products_for_hire', 'hardness': 'extra'}], 'journal_committee': [{'question': 'Please show the most common age of editors.', 'sql_query': 'SELECT Age FROM editor GROUP BY Age ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'journal_committee', 'hardness': 'hard'}, {'question': "What is the average sales of the journals that have an editor whose work type is 'Photo'?", 'sql_query': "SELECT avg(T1.sales) FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID  =  T2.journal_ID WHERE T2.work_type  =  'Photo'", 'db_id': 'journal_committee', 'hardness': 'medium'}, {'question': 'List the date, theme and sales of the journal which did not have any of the listed editors serving on committee.', 'sql_query': 'SELECT date ,  theme ,  sales FROM journal EXCEPT SELECT T1.date ,  T1.theme ,  T1.sales FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID  =  T2.journal_ID', 'db_id': 'journal_committee', 'hardness': 'extra'}], 'course_teach': [{'question': 'What are the names of the people who teach math courses?', 'sql_query': 'SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  "Math"', 'db_id': 'course_teach', 'hardness': 'hard'}, {'question': 'What is the name of each teacher and what course they teach?', 'sql_query': 'SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID', 'db_id': 'course_teach', 'hardness': 'medium'}, {'question': 'Show the name of teachers aged either 32 or 33?', 'sql_query': 'SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33', 'db_id': 'course_teach', 'hardness': 'medium'}], 'theme_gallery': [{'question': 'Count the number of exhibitions that have had an attendnance of over 100 or a ticket prices under 10.', 'sql_query': 'SELECT count(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  100 OR T2.ticket_price  <  10', 'db_id': 'theme_gallery', 'hardness': 'hard'}, {'question': 'Show theme and year for all exhibitions in an descending order of ticket price.', 'sql_query': 'SELECT theme ,  YEAR FROM exhibition ORDER BY ticket_price DESC', 'db_id': 'theme_gallery', 'hardness': 'medium'}, {'question': 'Show the theme for exhibitions with both records of an attendance below 100 and above 500.', 'sql_query': 'SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  <  100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  500', 'db_id': 'theme_gallery', 'hardness': 'extra'}], 'news_report': [{'question': 'Show the names of journalists that have reported more than one event.', 'sql_query': 'SELECT T3.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID GROUP BY T3.Name HAVING COUNT(*)  >  1', 'db_id': 'news_report', 'hardness': 'hard'}, {'question': 'Show the names of journalists and the dates of the events they reported.', 'sql_query': 'SELECT T3.Name ,  T2.Date FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID', 'db_id': 'news_report', 'hardness': 'medium'}, {'question': 'Find the average age and experience working length of journalists working on different role type.', 'sql_query': 'SELECT avg(t1.age) ,  avg(Years_working) ,  t2.work_type FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id  =  t2.journalist_id GROUP BY t2.work_type', 'db_id': 'news_report', 'hardness': 'extra'}]}