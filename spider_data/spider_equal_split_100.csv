,index_in_original,hardness,db_id,sql_query,question,context
0,1022,easy,geo,"SELECT state_name FROM city WHERE city_name  =  ""springfield"";",what states have a city named springfield,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );"
1,998,easy,geo,"SELECT border FROM border_info WHERE state_name  =  ""kentucky"";",which state border kentucky,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );"
2,4143,easy,cre_Doc_Control_Systems,"SELECT count(*) FROM Documents WHERE document_status_code = ""done"";",How many documents have the status code done?,"PRAGMA foreign_keys = ON; CREATE TABLE Ref_Document_Types ( document_type_code CHAR(15) NOT NULL, document_type_description VARCHAR(255) NOT NULL, PRIMARY KEY (document_type_code) ); CREATE TABLE Roles ( role_code CHAR(15) NOT NULL, role_description VARCHAR(255), PRIMARY KEY (role_code) ); CREATE TABLE Addresses ( address_id INTEGER NOT NULL, address_details VARCHAR(255), PRIMARY KEY (address_id) ); CREATE TABLE Ref_Document_Status ( document_status_code CHAR(15) NOT NULL, document_status_description VARCHAR(255) NOT NULL, PRIMARY KEY (document_status_code) ); CREATE TABLE Ref_Shipping_Agents ( shipping_agent_code CHAR(15) NOT NULL, shipping_agent_name VARCHAR(255) NOT NULL, shipping_agent_description VARCHAR(255) NOT NULL, PRIMARY KEY (shipping_agent_code) ); CREATE TABLE Documents ( document_id INTEGER NOT NULL, document_status_code CHAR(15) NOT NULL, document_type_code CHAR(15) NOT NULL, shipping_agent_code CHAR(15), receipt_date DATETIME, receipt_number VARCHAR(255), other_details VARCHAR(255), PRIMARY KEY (document_id), FOREIGN KEY (document_type_code) REFERENCES Ref_Document_Types (document_type_code), FOREIGN KEY (document_status_code) REFERENCES Ref_Document_Status (document_status_code), FOREIGN KEY (shipping_agent_code) REFERENCES Ref_Shipping_Agents (shipping_agent_code) ); CREATE TABLE Employees ( employee_id INTEGER NOT NULL, role_code CHAR(15) NOT NULL, employee_name VARCHAR(255), other_details VARCHAR(255), PRIMARY KEY (employee_id), FOREIGN KEY (role_code) REFERENCES Roles (role_code) ); CREATE TABLE Document_Drafts ( document_id INTEGER NOT NULL, draft_number INTEGER NOT NULL, draft_details VARCHAR(255), PRIMARY KEY (document_id, draft_number), FOREIGN KEY (document_id) REFERENCES Documents (document_id) ); CREATE TABLE Draft_Copies ( document_id INTEGER NOT NULL, draft_number INTEGER NOT NULL, copy_number INTEGER NOT NULL, PRIMARY KEY (document_id, draft_number, copy_number), FOREIGN KEY (document_id, draft_number) REFERENCES Document_Drafts (document_id,draft_number) ); CREATE TABLE Circulation_History ( document_id INTEGER NOT NULL, draft_number INTEGER NOT NULL, copy_number INTEGER NOT NULL, employee_id INTEGER NOT NULL, PRIMARY KEY (document_id, draft_number, copy_number, employee_id), FOREIGN KEY (document_id, draft_number, copy_number) REFERENCES Draft_Copies (document_id,draft_number,copy_number), FOREIGN KEY (employee_id) REFERENCES Employees (employee_id) ); CREATE TABLE Documents_Mailed ( document_id INTEGER NOT NULL, mailed_to_address_id INTEGER NOT NULL, mailing_date DATETIME, PRIMARY KEY (document_id, mailed_to_address_id), FOREIGN KEY (document_id) REFERENCES Documents (document_id), FOREIGN KEY (mailed_to_address_id) REFERENCES Addresses (address_id) );  "
3,513,easy,student_transcripts_tracking,SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea',What is the zip code of the address in the city Port Chelsea?,"PRAGMA foreign_keys = ON; CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `line_1` VARCHAR(255), `line_2` VARCHAR(255), `line_3` VARCHAR(255), `city` VARCHAR(255), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(255), `country` VARCHAR(255), `other_address_details` VARCHAR(255) ); CREATE TABLE `Courses` ( `course_id` INTEGER PRIMARY KEY, `course_name` VARCHAR(255), `course_description` VARCHAR(255), `other_details` VARCHAR(255) );  CREATE TABLE `Departments` ( `department_id` INTEGER PRIMARY KEY, `department_name` VARCHAR(255), `department_description` VARCHAR(255), `other_details` VARCHAR(255) ); CREATE TABLE `Degree_Programs` ( `degree_program_id` INTEGER PRIMARY KEY, `department_id` INTEGER NOT NULL, `degree_summary_name` VARCHAR(255), `degree_summary_description` VARCHAR(255), `other_details` VARCHAR(255), FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` ) );  CREATE TABLE `Sections` ( `section_id` INTEGER PRIMARY KEY, `course_id` INTEGER NOT NULL, `section_name` VARCHAR(255), `section_description` VARCHAR(255), `other_details` VARCHAR(255), FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ) ); CREATE TABLE `Semesters` ( `semester_id` INTEGER PRIMARY KEY, `semester_name` VARCHAR(255), `semester_description` VARCHAR(255), `other_details` VARCHAR(255) ); CREATE TABLE `Students` ( `student_id` INTEGER PRIMARY KEY, `current_address_id` INTEGER NOT NULL, `permanent_address_id` INTEGER NOT NULL, `first_name` VARCHAR(80), `middle_name` VARCHAR(40), `last_name` VARCHAR(40), `cell_mobile_number` VARCHAR(40), `email_address` VARCHAR(40), `ssn` VARCHAR(40), `date_first_registered` DATETIME, `date_left` DATETIME, `other_student_details` VARCHAR(255), FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` ) );  CREATE TABLE `Student_Enrolment` ( `student_enrolment_id` INTEGER PRIMARY KEY, `degree_program_id` INTEGER NOT NULL, `semester_id` INTEGER NOT NULL, `student_id` INTEGER NOT NULL, `other_details` VARCHAR(255), FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ), FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ), FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ) ); CREATE TABLE `Student_Enrolment_Courses` ( `student_course_id` INTEGER PRIMARY KEY, `course_id` INTEGER NOT NULL, `student_enrolment_id` INTEGER NOT NULL, FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ), FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` ) );  CREATE TABLE `Transcripts` ( `transcript_id` INTEGER PRIMARY KEY, `transcript_date` DATETIME, `other_details` VARCHAR(255) );  CREATE TABLE `Transcript_Contents` ( `student_course_id` INTEGER NOT NULL, `transcript_id` INTEGER NOT NULL, FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ), FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` ) );  "
4,2834,easy,product_catalog,SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3,Find the list of attribute data types possessed by more than 3 attribute definitions.,"PRAGMA foreign_keys = ON;  CREATE TABLE `Attribute_Definitions` ( `attribute_id` INTEGER PRIMARY KEY, `attribute_name` VARCHAR(30), `attribute_data_type` VARCHAR(10) ); CREATE TABLE `Catalogs` ( `catalog_id` INTEGER PRIMARY KEY, `catalog_name` VARCHAR(50), `catalog_publisher` VARCHAR(80), `date_of_publication` DATETIME, `date_of_latest_revision` DATETIME ); CREATE TABLE `Catalog_Structure` ( `catalog_level_number` INTEGER PRIMARY KEY, `catalog_id` INTEGER NOT NULL, `catalog_level_name` VARCHAR(50), FOREIGN KEY (`catalog_id` ) REFERENCES `Catalogs`(`catalog_id` ) );  CREATE TABLE `Catalog_Contents` ( `catalog_entry_id` INTEGER PRIMARY KEY, `catalog_level_number` INTEGER NOT NULL, `parent_entry_id` INTEGER, `previous_entry_id` INTEGER, `next_entry_id` INTEGER, `catalog_entry_name` VARCHAR(80), `product_stock_number` VARCHAR(50), `price_in_dollars` DOUBLE NULL, `price_in_euros` DOUBLE NULL, `price_in_pounds` DOUBLE NULL, `capacity` VARCHAR(20), `length` VARCHAR(20), `height` VARCHAR(20), `width` VARCHAR(20), FOREIGN KEY (`catalog_level_number` ) REFERENCES `Catalog_Structure`(`catalog_level_number` ) ); CREATE TABLE `Catalog_Contents_Additional_Attributes` ( `catalog_entry_id` INTEGER NOT NULL, `catalog_level_number` INTEGER NOT NULL, `attribute_id` INTEGER NOT NULL, `attribute_value` VARCHAR(255) NOT NULL, FOREIGN KEY (`catalog_entry_id` ) REFERENCES `Catalog_Contents`(`catalog_entry_id` ), FOREIGN KEY (`catalog_level_number` ) REFERENCES `Catalog_Structure`(`catalog_level_number` ) ); "
5,477,easy,wta_1,SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50,Find the codes of countries that have more than 50 players.,"CRloser_rank_pointsEATE TABLE players(     ""player_id"" INT PRIMARY KEY,     ""first_name"" TEXT,     ""last_name"" TEXT,     ""hand"" TEXT,     ""birth_date"" DATE,     ""country_code"" TEXT ); CREATE TABLE matches(   ""best_of"" INT,   ""draw_size"" INT,   ""loser_age"" FLOAT,   ""loser_entry"" TEXT,   ""loser_hand"" TEXT,   ""loser_ht"" INT,   ""loser_id"" INT,   ""loser_ioc"" TEXT,   ""loser_name"" TEXT,   ""loser_rank"" INT,   ""loser_rank_points"" INT,   ""loser_seed"" INT,   ""match_num"" INT,   ""minutes"" INT,   ""round"" TEXT,   ""score"" TEXT,   ""surface"" TEXT,   ""tourney_date"" DATE,   ""tourney_id"" TEXT,   ""tourney_level"" TEXT,   ""tourney_name"" TEXT,   ""winner_age"" FLOAT,   ""winner_entry"" TEXT,   ""winner_hand"" TEXT,   ""winner_ht"" INT,   ""winner_id"" INT,   ""winner_ioc"" TEXT,   ""winner_name"" TEXT,   ""winner_rank"" INT,   ""winner_rank_points"" INT,   ""winner_seed"" INT,   ""year"" INT,   FOREIGN KEY(loser_id) REFERENCES players(player_id),   FOREIGN KEY(winner_id) REFERENCES players(player_id) );    CREATE TABLE qualifying_matches(   ""best_of"" INT,   ""draw_size"" INT,   ""l_1stIn"" TEXT,   ""l_1stWon"" TEXT,   ""l_2ndWon"" TEXT,   ""l_SvGms"" TEXT,   ""l_ace"" TEXT,   ""l_bpFaced"" TEXT,   ""l_bpSaved"" TEXT,   ""l_df"" TEXT,   ""l_svpt"" TEXT,   ""loser_age"" FLOAT,   ""loser_entry"" TEXT,   ""loser_hand"" TEXT,   ""loser_ht"" INT,   ""loser_id"" INT,   ""loser_ioc"" TEXT,   ""loser_name"" TEXT,   ""loser_rank"" INT,   ""loser_rank_points"" INT,   ""loser_seed"" INT,   ""match_num"" INT,   ""minutes"" INT,   ""round"" TEXT,   ""score"" TEXT,   ""surface"" TEXT,   ""tourney_date"" DATE,   ""tourney_id"" TEXT,   ""tourney_level"" TEXT,   ""tourney_name"" TEXT,   ""w_1stIn"" TEXT,   ""w_1stWon"" TEXT,   ""w_2ndWon"" TEXT,   ""w_SvGms"" TEXT,   ""w_ace"" TEXT,   ""w_bpFaced"" TEXT,   ""w_bpSaved"" TEXT,   ""w_df"" TEXT,   ""w_svpt"" TEXT,   ""winner_age"" FLOAT,   ""winner_entry"" TEXT,   ""winner_hand"" TEXT,   ""winner_ht"" INT,   ""winner_id"" INT,   ""winner_ioc"" TEXT,   ""winner_name"" TEXT,   ""winner_rank"" INT,   ""winner_rank_points"" INT,   ""winner_seed"" INT,   ""year"" INT,   FOREIGN KEY(loser_id) REFERENCES players(player_id),   FOREIGN KEY(winner_id) REFERENCES players(player_id) );  CREATE TABLE rankings(   ""ranking_date"" DATE,   ""ranking"" INT,   ""player_id"" INT,   ""ranking_points"" INT,   ""tours"" INT,   FOREIGN KEY(player_id) REFERENCES players(player_id) );"
6,3676,easy,insurance_and_eClaims,SELECT count(*) FROM claims_processing_stages,How many claim processing stages are there in total?,"PRAGMA foreign_keys = ON; CREATE TABLE Customers ( Customer_ID INTEGER NOT NULL, Customer_Details VARCHAR(255) NOT NULL, PRIMARY KEY (Customer_ID) ); CREATE TABLE Staff ( Staff_ID INTEGER NOT NULL, Staff_Details VARCHAR(255) NOT NULL, PRIMARY KEY (Staff_ID) );  CREATE TABLE Policies ( Policy_ID INTEGER NOT NULL, Customer_ID INTEGER NOT NULL, Policy_Type_Code CHAR(15) NOT NULL, Start_Date DATETIME, End_Date DATETIME, PRIMARY KEY (Policy_ID), FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID) );   CREATE TABLE Claim_Headers ( Claim_Header_ID INTEGER NOT NULL, Claim_Status_Code CHAR(15) NOT NULL, Claim_Type_Code CHAR(15) NOT NULL, Policy_ID INTEGER NOT NULL, Date_of_Claim DATETIME, Date_of_Settlement DATETIME, Amount_Claimed DECIMAL(20,4), Amount_Piad DECIMAL(20,4), PRIMARY KEY (Claim_Header_ID), FOREIGN KEY (Policy_ID) REFERENCES Policies (Policy_ID) ); CREATE TABLE Claims_Documents ( Claim_ID INTEGER NOT NULL, Document_Type_Code CHAR(15) NOT NULL, Created_by_Staff_ID INTEGER, Created_Date INTEGER, PRIMARY KEY (Claim_ID, Document_Type_Code), FOREIGN KEY (Claim_ID) REFERENCES Claim_Headers (Claim_Header_ID), FOREIGN KEY (Created_by_Staff_ID) REFERENCES Staff (Staff_ID) ); CREATE TABLE Claims_Processing_Stages ( Claim_Stage_ID INTEGER NOT NULL, Next_Claim_Stage_ID INTEGER, Claim_Status_Name VARCHAR(255) NOT NULL, Claim_Status_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Claim_Stage_ID) ); CREATE TABLE Claims_Processing ( Claim_Processing_ID INTEGER NOT NULL, Claim_ID INTEGER NOT NULL, Claim_Outcome_Code CHAR(15) NOT NULL, Claim_Stage_ID INTEGER NOT NULL, Staff_ID INTEGER, PRIMARY KEY (Claim_Processing_ID), FOREIGN KEY (Claim_ID) REFERENCES Claim_Headers (Claim_Header_ID), FOREIGN KEY (Staff_ID) REFERENCES Staff (Staff_ID) ); "
7,1223,easy,geo,"SELECT density FROM state WHERE state_name  =  ""wyoming"";",what is the density of the wyoming,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );"
8,6325,easy,document_management,SELECT count(*) FROM users WHERE user_login  =  1,How many users are logged in?,"PRAGMA foreign_keys = ON;  CREATE TABLE `Roles` ( `role_code` VARCHAR(15) PRIMARY KEY, `role_description` VARCHAR(80) );  CREATE TABLE `Users` ( `user_id` INTEGER PRIMARY KEY, `role_code` VARCHAR(15) NOT NULL, `user_name` VARCHAR(40), `user_login` VARCHAR(40), `password` VARCHAR(40), FOREIGN KEY (`role_code` ) REFERENCES `Roles`(`role_code` ) ); CREATE TABLE `Document_Structures` ( `document_structure_code` VARCHAR(15) PRIMARY KEY, `parent_document_structure_code` VARCHAR(15), `document_structure_description` VARCHAR(80) ); CREATE TABLE `Functional_Areas` ( `functional_area_code` VARCHAR(15) PRIMARY KEY, `parent_functional_area_code` VARCHAR(15), `functional_area_description` VARCHAR(80) NOT NULL );  CREATE TABLE `Images` ( `image_id` INTEGER PRIMARY KEY, `image_alt_text` VARCHAR(80), `image_name` VARCHAR(40), `image_url` VARCHAR(255) ); CREATE TABLE `Documents` ( `document_code` VARCHAR(15) PRIMARY KEY, `document_structure_code` VARCHAR(15) NOT NULL, `document_type_code` VARCHAR(15) NOT NULL, `access_count` INTEGER, `document_name` VARCHAR(80), FOREIGN KEY (`document_structure_code` ) REFERENCES `Document_Structures`(`document_structure_code` ) );  CREATE TABLE `Document_Functional_Areas` ( `document_code` VARCHAR(15) NOT NULL, `functional_area_code` VARCHAR(15) NOT NULL, FOREIGN KEY (`document_code` ) REFERENCES `Documents`(`document_code` ), FOREIGN KEY (`functional_area_code` ) REFERENCES `Functional_Areas`(`functional_area_code` ) ); CREATE TABLE `Document_Sections` ( `section_id` INTEGER PRIMARY KEY, `document_code` VARCHAR(15) NOT NULL, `section_sequence` INTEGER, `section_code` VARCHAR(20), `section_title` VARCHAR(80), FOREIGN KEY (`document_code` ) REFERENCES `Documents`(`document_code` ) ); CREATE TABLE `Document_Sections_Images` ( `section_id` INTEGER NOT NULL, `image_id` INTEGER NOT NULL, PRIMARY KEY (`section_id`,`image_id`), FOREIGN KEY (`section_id` ) REFERENCES `Document_Sections`(`section_id` ), FOREIGN KEY (`image_id` ) REFERENCES `Images`(`image_id` ) );  "
9,6047,easy,club_1,SELECT clubname FROM club,Give me the name of each club.,"create table Student (          StuID        INTEGER PRIMARY KEY,          LName        VARCHAR(12),          Fname        VARCHAR(12),          Age      INTEGER,          Sex      VARCHAR(1),          Major        INTEGER,          Advisor      INTEGER,          city_code    VARCHAR(3)   );   create table Club (        ClubID           INTEGER PRIMARY KEY,        ClubName         VARCHAR(40),        ClubDesc         VARCHAR(1024),        ClubLocation VARCHAR(40) );  create table Member_of_club (        StuID            INTEGER,        ClubID           INTEGER,        Position     VARCHAR(40),        FOREIGN KEY(StuID) REFERENCES Student(StuID),        FOREIGN KEY(ClubID) REFERENCES Club(ClubID) );   teach kids and adults about computer basics.', 'AKW'); "
10,3361,easy,phone_1,"SELECT count(*) FROM phone WHERE Company_name = ""Nokia Corporation"";","How many phone hardware models are produced by the company named ""Nokia Corporation""?","PRAGMA foreign_keys=ON; BEGIN TRANSACTION; CREATE TABLE IF NOT EXISTS ""chip_model"" ( ""Model_name"" text, ""Launch_year"" real, ""RAM_MiB"" real, ""ROM_MiB"" real, ""Slots"" text, ""WiFi"" text, ""Bluetooth"" text, PRIMARY KEY (""Model_name"") ); CREATE TABLE IF NOT EXISTS ""screen_mode"" ( ""Graphics_mode"" real, ""Char_cells"" text, ""Pixels"" text, ""Hardware_colours"" real, ""used_kb"" real, ""map"" text, ""Type"" text, PRIMARY KEY (""Graphics_mode"") ); CREATE TABLE IF NOT EXISTS ""phone"" ( ""Company_name"" text, ""Hardware_Model_name"" text, ""Accreditation_type"" text, ""Accreditation_level"" text, ""Date"" text, ""chip_model"" text, ""screen_mode"" text, PRIMARY KEY(""Hardware_Model_name""), FOREIGN KEY (`screen_mode`) REFERENCES `screen_mode`(`Graphics_mode`), FOREIGN KEY (`chip_model`) REFERENCES `chip_model`(`Model_name`) ); COMMIT;"
11,6791,easy,soccer_2,SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie'),What is the count of states with college students playing in the mid position but not as goalies?,"/*   * SQL scripts for CS61 Intro to SQL lectures  * FILENAME SOCCER2.SQL  */  DROP TABLE  IF EXISTS Player; DROP TABLE  IF EXISTS Tryout; DROP TABLE  IF EXISTS College;  CREATE TABLE 	College    ( cName   	varchar(20) NOT NULL,     state   	varchar(2),     enr     	numeric(5,0),     PRIMARY KEY (cName)   );  CREATE TABLE 	Player   ( pID			numeric(5,0) NOT NULL,   	pName   	varchar(20),     yCard   	varchar(3),     HS      	numeric(5,0),     PRIMARY KEY (pID)   );  CREATE TABLE 	Tryout   ( pID			numeric(5,0),   	cName   	varchar(20),     pPos    	varchar(8),     decision    varchar(3),     PRIMARY KEY (pID, cName),     FOREIGN KEY (pID) REFERENCES Player(pID),     FOREIGN KEY (cName) REFERENCES College(cName)   );  /* note that ""left"" and ""right"" are reserved words in SQL */  "
12,1040,easy,geo,"SELECT population FROM city WHERE city_name  =  ""boulder"";",how many people in boulder,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );"
13,3898,easy,wrestler,SELECT Team FROM elimination GROUP BY Team HAVING COUNT(*)  >  3,Which teams had more than 3 eliminations?,"PRAGMA foreign_keys = ON;  CREATE TABLE ""wrestler"" ( ""Wrestler_ID"" int, ""Name"" text, ""Reign"" text, ""Days_held"" text, ""Location"" text, ""Event"" text, PRIMARY KEY (""Wrestler_ID"") );  CREATE TABLE ""Elimination"" ( ""Elimination_ID"" text, ""Wrestler_ID"" text, ""Team"" text, ""Eliminated_By"" text, ""Elimination_Move"" text, ""Time"" text, PRIMARY KEY (""Elimination_ID""), FOREIGN KEY (""Wrestler_ID"") REFERENCES ""wrestler""(""Wrestler_ID"") );  "
14,438,easy,wta_1,SELECT avg(winner_rank) FROM matches,What is the average rank for winners in all matches?,"CRloser_rank_pointsEATE TABLE players(     ""player_id"" INT PRIMARY KEY,     ""first_name"" TEXT,     ""last_name"" TEXT,     ""hand"" TEXT,     ""birth_date"" DATE,     ""country_code"" TEXT ); CREATE TABLE matches(   ""best_of"" INT,   ""draw_size"" INT,   ""loser_age"" FLOAT,   ""loser_entry"" TEXT,   ""loser_hand"" TEXT,   ""loser_ht"" INT,   ""loser_id"" INT,   ""loser_ioc"" TEXT,   ""loser_name"" TEXT,   ""loser_rank"" INT,   ""loser_rank_points"" INT,   ""loser_seed"" INT,   ""match_num"" INT,   ""minutes"" INT,   ""round"" TEXT,   ""score"" TEXT,   ""surface"" TEXT,   ""tourney_date"" DATE,   ""tourney_id"" TEXT,   ""tourney_level"" TEXT,   ""tourney_name"" TEXT,   ""winner_age"" FLOAT,   ""winner_entry"" TEXT,   ""winner_hand"" TEXT,   ""winner_ht"" INT,   ""winner_id"" INT,   ""winner_ioc"" TEXT,   ""winner_name"" TEXT,   ""winner_rank"" INT,   ""winner_rank_points"" INT,   ""winner_seed"" INT,   ""year"" INT,   FOREIGN KEY(loser_id) REFERENCES players(player_id),   FOREIGN KEY(winner_id) REFERENCES players(player_id) );    CREATE TABLE qualifying_matches(   ""best_of"" INT,   ""draw_size"" INT,   ""l_1stIn"" TEXT,   ""l_1stWon"" TEXT,   ""l_2ndWon"" TEXT,   ""l_SvGms"" TEXT,   ""l_ace"" TEXT,   ""l_bpFaced"" TEXT,   ""l_bpSaved"" TEXT,   ""l_df"" TEXT,   ""l_svpt"" TEXT,   ""loser_age"" FLOAT,   ""loser_entry"" TEXT,   ""loser_hand"" TEXT,   ""loser_ht"" INT,   ""loser_id"" INT,   ""loser_ioc"" TEXT,   ""loser_name"" TEXT,   ""loser_rank"" INT,   ""loser_rank_points"" INT,   ""loser_seed"" INT,   ""match_num"" INT,   ""minutes"" INT,   ""round"" TEXT,   ""score"" TEXT,   ""surface"" TEXT,   ""tourney_date"" DATE,   ""tourney_id"" TEXT,   ""tourney_level"" TEXT,   ""tourney_name"" TEXT,   ""w_1stIn"" TEXT,   ""w_1stWon"" TEXT,   ""w_2ndWon"" TEXT,   ""w_SvGms"" TEXT,   ""w_ace"" TEXT,   ""w_bpFaced"" TEXT,   ""w_bpSaved"" TEXT,   ""w_df"" TEXT,   ""w_svpt"" TEXT,   ""winner_age"" FLOAT,   ""winner_entry"" TEXT,   ""winner_hand"" TEXT,   ""winner_ht"" INT,   ""winner_id"" INT,   ""winner_ioc"" TEXT,   ""winner_name"" TEXT,   ""winner_rank"" INT,   ""winner_rank_points"" INT,   ""winner_seed"" INT,   ""year"" INT,   FOREIGN KEY(loser_id) REFERENCES players(player_id),   FOREIGN KEY(winner_id) REFERENCES players(player_id) );  CREATE TABLE rankings(   ""ranking_date"" DATE,   ""ranking"" INT,   ""player_id"" INT,   ""ranking_points"" INT,   ""tours"" INT,   FOREIGN KEY(player_id) REFERENCES players(player_id) );"
15,3182,easy,race_track,SELECT DISTINCT CLASS FROM race,What are the distinct classes that races can have?,"PRAGMA foreign_keys = ON;  CREATE TABLE ""race"" ( ""Race_ID"" int, ""Name"" text, ""Class"" text, ""Date"" text, ""Track_ID"" text, PRIMARY KEY (""Race_ID""), FOREIGN KEY (""Track_ID"") REFERENCES ""track""(""Track_ID"") );  CREATE TABLE ""track"" ( ""Track_ID"" int, ""Name"" text, ""Location"" text, ""Seating"" real, ""Year_Opened"" real, PRIMARY KEY (""Track_ID"") );  "
16,3406,easy,match_season,SELECT Name FROM Team,What are the names of all teams?,"PRAGMA foreign_keys = ON;   CREATE TABLE ""country"" (     ""Country_id"" int,     ""Country_name"" text,     ""Capital"" text,     ""Official_native_language"" text,     PRIMARY KEY (""Country_id"") );   CREATE TABLE `team` (       `Team_id` int,       `Name` text,       PRIMARY KEY (`Team_id`) ) ;  CREATE TABLE ""match_season"" (     ""Season"" real,     ""Player"" text,     ""Position"" text,     ""Country"" int,     ""Team"" int,     ""Draft_Pick_Number"" int,     ""Draft_Class"" text,     ""College"" text,     PRIMARY KEY (""Season""),     FOREIGN KEY (`Country`) REFERENCES `country`(`Country_id`),     FOREIGN KEY (`Team`) REFERENCES `team`(`Team_id`) );   CREATE TABLE ""player"" (     ""Player_ID"" int,     ""Player"" text,     ""Years_Played"" text,     ""Total_WL"" text,     ""Singles_WL"" text,     ""Doubles_WL"" text,     ""Team"" int,     PRIMARY KEY (""Player_ID""),     FOREIGN KEY (`Team`) REFERENCES `team`(`Team_id`) );    "
17,1220,easy,geo,SELECT SUM ( area ) FROM state;,what is the area of all the states combined,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );"
18,7422,easy,dorm_1,SELECT dorm_name FROM dorm WHERE gender  =  'F',Find the name of dorms only for female (F gender).," create table Student (         StuID        INTEGER PRIMARY KEY,         LName        VARCHAR(12),         Fname        VARCHAR(12),         Age      INTEGER,         Sex      VARCHAR(1),         Major        INTEGER,         Advisor      INTEGER,         city_code    VARCHAR(3)  );    create table Dorm (        dormid		INTEGER,        dorm_name	VARCHAR(20),        student_capacity	INTEGER,        gender			VARCHAR(1) ) ;  create table Dorm_amenity (        amenid			INTEGER,        amenity_name		VARCHAR(25) ) ;  create table Has_amenity (        dormid			INTEGER,        amenid				INTEGER, 	FOREIGN KEY (dormid) REFERENCES `Dorm`(dormid), 	FOREIGN KEY (amenid) REFERENCES `Dorm_amenity`(amenid) );  create table Lives_in (        stuid 	      INTEGER,        dormid		INTEGER,        room_number	INTEGER, 	FOREIGN KEY (stuid) REFERENCES `Student`(StuID),         FOREIGN KEY (dormid) REFERENCES `Dorm`(dormid) );  "
19,2563,easy,department_management,SELECT name FROM head WHERE born_state != 'California',What are the names of the heads who are born outside the California state?,"PRAGMA foreign_keys=ON; BEGIN TRANSACTION; CREATE TABLE IF NOT EXISTS ""department"" ( ""Department_ID"" int, ""Name"" text, ""Creation"" text, ""Ranking"" int, ""Budget_in_Billions"" real, ""Num_Employees"" real, PRIMARY KEY (""Department_ID"") ); CREATE TABLE IF NOT EXISTS ""head"" ( ""head_ID"" int, ""name"" text, ""born_state"" text, ""age"" real, PRIMARY KEY (""head_ID"") ); CREATE TABLE IF NOT EXISTS ""management"" ( ""department_ID"" int, ""head_ID"" int, ""temporary_acting"" text, PRIMARY KEY (""Department_ID"",""head_ID""), FOREIGN KEY (""Department_ID"") REFERENCES `department`(""Department_ID""), FOREIGN KEY (""head_ID"") REFERENCES `head`(""head_ID"") ); COMMIT; "
20,5991,easy,cre_Doc_Tracking_DB,SELECT count(*) FROM Employees,Find the number of employees we have.,"PRAGMA foreign_keys = ON; CREATE TABLE Ref_Document_Types ( Document_Type_Code CHAR(15) NOT NULL, Document_Type_Name VARCHAR(255) NOT NULL, Document_Type_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Document_Type_Code) );  CREATE TABLE Ref_Calendar ( Calendar_Date DATETIME NOT NULL, Day_Number INTEGER, PRIMARY KEY (Calendar_Date) ); CREATE TABLE Ref_Locations ( Location_Code CHAR(15) NOT NULL, Location_Name VARCHAR(255) NOT NULL, Location_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Location_Code) );  CREATE TABLE Roles ( Role_Code CHAR(15) NOT NULL, Role_Name VARCHAR(255), Role_Description VARCHAR(255), PRIMARY KEY (Role_Code) );  CREATE TABLE All_Documents ( Document_ID INTEGER NOT NULL, Date_Stored DATETIME, Document_Type_Code CHAR(15) NOT NULL, Document_Name CHAR(255), Document_Description CHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Document_ID), FOREIGN KEY (Document_Type_Code) REFERENCES Ref_Document_Types (Document_Type_Code), FOREIGN KEY (Date_Stored) REFERENCES Ref_Calendar (Calendar_Date) );  CREATE TABLE Employees ( Employee_ID INTEGER NOT NULL, Role_Code CHAR(15) NOT NULL, Employee_Name VARCHAR(255), Gender_MFU CHAR(1) NOT NULL, Date_of_Birth DATETIME NOT NULL, Other_Details VARCHAR(255), PRIMARY KEY (Employee_ID), FOREIGN KEY (Role_Code) REFERENCES Roles (Role_Code) );  CREATE TABLE Document_Locations ( Document_ID INTEGER NOT NULL, Location_Code CHAR(15) NOT NULL, Date_in_Location_From DATETIME NOT NULL, Date_in_Locaton_To DATETIME, PRIMARY KEY (Document_ID, Location_Code, Date_in_Location_From), FOREIGN KEY (Location_Code) REFERENCES Ref_Locations (Location_Code), FOREIGN KEY (Date_in_Location_From) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Date_in_Locaton_To) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Document_ID) REFERENCES All_Documents (Document_ID) );  CREATE TABLE Documents_to_be_Destroyed ( Document_ID INTEGER NOT NULL, Destruction_Authorised_by_Employee_ID INTEGER, Destroyed_by_Employee_ID INTEGER, Planned_Destruction_Date DATETIME, Actual_Destruction_Date DATETIME, Other_Details VARCHAR(255), PRIMARY KEY (Document_ID), FOREIGN KEY (Destroyed_by_Employee_ID) REFERENCES Employees (Employee_ID), FOREIGN KEY (Destruction_Authorised_by_Employee_ID) REFERENCES Employees (Employee_ID), FOREIGN KEY (Planned_Destruction_Date) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Actual_Destruction_Date) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Document_ID) REFERENCES All_Documents (Document_ID) ); "
21,4655,easy,inn_1,SELECT count(DISTINCT bedType) FROM Rooms;,Find the number of distinct bed types available in this inn.,"CREATE TABLE ""Rooms"" (  	""RoomId"" TEXT PRIMARY KEY, 	""roomName"" TEXT,  	""beds"" INTEGER,  	""bedType"" TEXT,  	""maxOccupancy"" INTEGER,  	""basePrice"" INTEGER,  	""decor"" TEXT  );  CREATE TABLE ""Reservations"" (  	""Code"" INTEGER PRIMARY KEY,  	""Room"" TEXT,  	""CheckIn"" TEXT,  	""CheckOut"" TEXT,  	""Rate"" REAL,  	""LastName"" TEXT,  	""FirstName"" TEXT,  	""Adults"" INTEGER,  	""Kids"" INTEGER, 	FOREIGN KEY (Room) REFERENCES Rooms(RoomId) ); "
22,7815,easy,customers_and_addresses,"SELECT customer_name FROM customers WHERE payment_method  =  ""Cash""","What are the names of customers who use payment method ""Cash""?","PRAGMA foreign_keys = ON;  CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `address_content` VARCHAR(80), `city` VARCHAR(50), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(50), `country` VARCHAR(50), `other_address_details` VARCHAR(255) );  CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_details` VARCHAR(255) ); CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `payment_method` VARCHAR(15) NOT NULL, `customer_name` VARCHAR(80), `date_became_customer` DATETIME, `other_customer_details` VARCHAR(255) ); CREATE TABLE `Customer_Addresses` ( `customer_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_address_from` DATETIME NOT NULL, `address_type` VARCHAR(15) NOT NULL, `date_address_to` DATETIME, FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) ); CREATE TABLE `Customer_Contact_Channels` ( `customer_id` INTEGER NOT NULL, `channel_code` VARCHAR(15) NOT NULL, `active_from_date` DATETIME NOT NULL, `active_to_date` DATETIME, `contact_number` VARCHAR(50) NOT NULL, FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) ); CREATE TABLE `Customer_Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `order_status` VARCHAR(15) NOT NULL, `order_date` DATETIME, `order_details` VARCHAR(255), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) );  CREATE TABLE `Order_Items` ( `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, `order_quantity` VARCHAR(15), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ), FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ) ); "
23,3086,easy,customers_card_transactions,SELECT count(*) FROM Accounts,How many accounts do we have?,"PRAGMA foreign_keys = ON;  CREATE TABLE `Accounts` ( `account_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `account_name` VARCHAR(50), `other_account_details` VARCHAR(255) ); CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_first_name` VARCHAR(20), `customer_last_name` VARCHAR(20), `customer_address` VARCHAR(255), `customer_phone` VARCHAR(255), `customer_email` VARCHAR(255), `other_customer_details` VARCHAR(255) ); CREATE TABLE `Customers_Cards` ( `card_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `card_type_code` VARCHAR(15) NOT NULL, `card_number` VARCHAR(80), `date_valid_from` DATETIME, `date_valid_to` DATETIME, `other_card_details` VARCHAR(255) ); CREATE TABLE `Financial_Transactions` ( `transaction_id` INTEGER NOT NULL , `previous_transaction_id` INTEGER, `account_id` INTEGER NOT NULL, `card_id` INTEGER NOT NULL, `transaction_type` VARCHAR(15) NOT NULL, `transaction_date` DATETIME, `transaction_amount` DOUBLE NULL, `transaction_comment` VARCHAR(255), `other_transaction_details` VARCHAR(255), FOREIGN KEY (`card_id` ) REFERENCES `Customers_Cards`(`card_id` ), FOREIGN KEY (`account_id` ) REFERENCES `Accounts`(`account_id` ) );                 "
24,1143,easy,geo,SELECT COUNT ( state_name ) FROM state;,how many states does usa have,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );"
25,7718,extra,cre_Theme_park,"SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  ""Vincent"" INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  ""Marcelle""",Which tourist attractions do the tourists Vincent and Marcelle visit? Tell me the names of the attractions.,"PRAGMA foreign_keys = ON; CREATE TABLE Ref_Hotel_Star_Ratings ( star_rating_code CHAR(15) NOT NULL, star_rating_description VARCHAR(80), PRIMARY KEY (star_rating_code), UNIQUE (star_rating_code) );   CREATE TABLE Locations ( Location_ID INTEGER NOT NULL, Location_Name VARCHAR(255), Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Location_ID) ); CREATE TABLE Ref_Attraction_Types ( Attraction_Type_Code CHAR(15) NOT NULL, Attraction_Type_Description VARCHAR(255), PRIMARY KEY (Attraction_Type_Code), UNIQUE (Attraction_Type_Code) );  CREATE TABLE Visitors ( Tourist_ID INTEGER NOT NULL, Tourist_Details VARCHAR(255), PRIMARY KEY (Tourist_ID), UNIQUE (Tourist_ID) ); CREATE TABLE Features ( Feature_ID INTEGER NOT NULL, Feature_Details VARCHAR(255), PRIMARY KEY (Feature_ID) );  CREATE TABLE Hotels ( hotel_id INTEGER NOT NULL, star_rating_code CHAR(15) NOT NULL, pets_allowed_yn CHAR(1), price_range real, other_hotel_details VARCHAR(255), PRIMARY KEY (hotel_id), FOREIGN KEY (star_rating_code) REFERENCES Ref_Hotel_Star_Ratings (star_rating_code) );  CREATE TABLE Tourist_Attractions ( Tourist_Attraction_ID INTEGER NOT NULL, Attraction_Type_Code CHAR(15) NOT NULL, Location_ID INTEGER NOT NULL, How_to_Get_There VARCHAR(255), Name VARCHAR(255), Description VARCHAR(255), Opening_Hours VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Tourist_Attraction_ID), FOREIGN KEY (Location_ID) REFERENCES Locations (Location_ID), FOREIGN KEY (Attraction_Type_Code) REFERENCES Ref_Attraction_Types (Attraction_Type_Code) );  CREATE TABLE Street_Markets ( Market_ID INTEGER NOT NULL, Market_Details VARCHAR(255), PRIMARY KEY (Market_ID), FOREIGN KEY (Market_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Shops ( Shop_ID INTEGER NOT NULL, Shop_Details VARCHAR(255), PRIMARY KEY (Shop_ID), FOREIGN KEY (Shop_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Museums ( Museum_ID INTEGER NOT NULL, Museum_Details VARCHAR(255), PRIMARY KEY (Museum_ID), FOREIGN KEY (Museum_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Royal_Family ( Royal_Family_ID INTEGER NOT NULL, Royal_Family_Details VARCHAR(255), PRIMARY KEY (Royal_Family_ID), FOREIGN KEY (Royal_Family_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Theme_Parks ( Theme_Park_ID INTEGER NOT NULL, Theme_Park_Details VARCHAR(255), PRIMARY KEY (Theme_Park_ID), FOREIGN KEY (Theme_Park_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) );   CREATE TABLE Visits ( Visit_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Tourist_ID INTEGER NOT NULL, Visit_Date DATETIME NOT NULL, Visit_Details VARCHAR(40) NOT NULL, PRIMARY KEY (Visit_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID), FOREIGN KEY (Tourist_ID) REFERENCES Visitors (Tourist_ID) );   CREATE TABLE Photos ( Photo_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Name VARCHAR(255), Description VARCHAR(255), Filename VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Photo_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Staff ( Staff_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Name VARCHAR(40), Other_Details VARCHAR(255), PRIMARY KEY (Staff_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) );   CREATE TABLE Tourist_Attraction_Features ( Tourist_Attraction_ID INTEGER NOT NULL, Feature_ID INTEGER NOT NULL, PRIMARY KEY (Tourist_Attraction_ID, Feature_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID), FOREIGN KEY (Feature_ID) REFERENCES Features (Feature_ID) ); "
26,4062,extra,gas_company,SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1,Show the manager name with most number of gas stations opened after 2000.," PRAGMA foreign_keys = ON;   CREATE TABLE ""company"" ( ""Company_ID"" int, ""Rank"" int, ""Company"" text, ""Headquarters"" text, ""Main_Industry"" text, ""Sales_billion"" real, ""Profits_billion"" real, ""Assets_billion"" real, ""Market_Value"" real, PRIMARY KEY (""Company_ID"") );  CREATE TABLE ""gas_station"" ( ""Station_ID"" int, ""Open_Year"" int, ""Location"" text, ""Manager_Name"" text, ""Vice_Manager_Name"" text, ""Representative_Name"" text, PRIMARY KEY (""Station_ID"") );  CREATE TABLE ""station_company"" ( ""Station_ID"" int, ""Company_ID"" int, ""Rank_of_the_Year"" int, PRIMARY KEY (""Station_ID"",""Company_ID""), FOREIGN KEY (`Station_ID`) REFERENCES `gas_station`(`Station_ID`), FOREIGN KEY (`Company_ID`) REFERENCES `company`(`Company_ID`) );  "
27,6884,extra,cre_Drama_Workshop_Groups,"SELECT T1.Service_Type_Description , T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T1.Service_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",What is the description and code of the type of service that is performed the most often?,"PRAGMA foreign_keys = ON;  CREATE TABLE Ref_Payment_Methods ( payment_method_code CHAR(10) NOT NULL, payment_method_description VARCHAR(80), PRIMARY KEY (payment_method_code), UNIQUE (payment_method_code) ); CREATE TABLE Ref_Service_Types ( Service_Type_Code CHAR(15) NOT NULL, Parent_Service_Type_Code CHAR(15), Service_Type_Description VARCHAR(255), PRIMARY KEY (Service_Type_Code), UNIQUE (Service_Type_Code) );  CREATE TABLE Addresses ( Address_ID VARCHAR(100) NOT NULL, Line_1 VARCHAR(255), Line_2 VARCHAR(255), City_Town VARCHAR(255), State_County VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Address_ID), UNIQUE (Address_ID) ); CREATE TABLE Products ( Product_ID VARCHAR(100) NOT NULL, Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Product_Description VARCHAR(255), Other_Product_Service_Details VARCHAR(255), PRIMARY KEY (Product_ID), UNIQUE (Product_ID) ); CREATE TABLE Marketing_Regions ( Marketing_Region_Code CHAR(15) NOT NULL, Marketing_Region_Name VARCHAR(255) NOT NULL, Marketing_Region_Descriptrion VARCHAR(255) NOT NULL, Other_Details VARCHAR(255), PRIMARY KEY (Marketing_Region_Code), UNIQUE (Marketing_Region_Code) );  CREATE TABLE Clients ( Client_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Customer_Email_Address VARCHAR(255), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Client_ID), UNIQUE (Client_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) ); CREATE TABLE Drama_Workshop_Groups ( Workshop_Group_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Currency_Code CHAR(15) NOT NULL, Marketing_Region_Code CHAR(15) NOT NULL, Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Workshop_Group_ID), UNIQUE (Workshop_Group_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) ); CREATE TABLE Performers ( Performer_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Performer_ID), UNIQUE (Performer_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) ); CREATE TABLE Customers ( Customer_ID VARCHAR(100) NOT NULL, Address_ID INTEGER NOT NULL, Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Customer_ID), UNIQUE (Customer_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) ); CREATE TABLE Stores ( Store_ID VARCHAR(100) NOT NULL, Address_ID INTEGER NOT NULL, Marketing_Region_Code CHAR(15) NOT NULL, Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Store_ID), UNIQUE (Store_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID), FOREIGN KEY (Marketing_Region_Code) REFERENCES Marketing_Regions (Marketing_Region_Code) ); CREATE TABLE Bookings ( Booking_ID INTEGER NOT NULL , Customer_ID INTEGER NOT NULL, Workshop_Group_ID VARCHAR(100) NOT NULL, Status_Code CHAR(15) NOT NULL, Store_ID INTEGER NOT NULL, Order_Date DATETIME NOT NULL, Planned_Delivery_Date DATETIME NOT NULL, Actual_Delivery_Date DATETIME NOT NULL, Other_Order_Details VARCHAR(255), PRIMARY KEY (Booking_ID), UNIQUE (Booking_ID), FOREIGN KEY (Customer_ID) REFERENCES Clients (Client_ID), FOREIGN KEY (Workshop_Group_ID) REFERENCES Drama_Workshop_Groups (Workshop_Group_ID) ); CREATE TABLE Performers_in_Bookings ( Order_ID INTEGER NOT NULL, Performer_ID INTEGER NOT NULL, PRIMARY KEY (Order_ID, Performer_ID), FOREIGN KEY (Performer_ID) REFERENCES Performers (Performer_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID) ); CREATE TABLE Customer_Orders ( Order_ID INTEGER NOT NULL , Customer_ID INTEGER NOT NULL, Store_ID INTEGER NOT NULL, Order_Date DATETIME NOT NULL, Planned_Delivery_Date DATETIME NOT NULL, Actual_Delivery_Date DATETIME NOT NULL, Other_Order_Details VARCHAR(255), PRIMARY KEY (Order_ID), UNIQUE (Order_ID), FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY (Store_ID) REFERENCES Stores (Store_ID) ); CREATE TABLE Order_Items ( Order_Item_ID INTEGER NOT NULL , Order_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), PRIMARY KEY (Order_Item_ID), FOREIGN KEY (Order_ID) REFERENCES Customer_Orders (Order_ID), FOREIGN KEY (Product_ID) REFERENCES Products (Product_ID) ); CREATE TABLE Invoices ( Invoice_ID INTEGER NOT NULL, Order_ID INTEGER NOT NULL, payment_method_code CHAR(15), Product_ID INTEGER NOT NULL, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), Order_Item_ID INTEGER NOT NULL, PRIMARY KEY (Invoice_ID), FOREIGN KEY (Order_ID) REFERENCES Customer_Orders (Order_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID), FOREIGN KEY (payment_method_code) REFERENCES Ref_Payment_Methods (payment_method_code) ); CREATE TABLE Services ( Service_ID INTEGER NOT NULL, Service_Type_Code CHAR(15), Workshop_Group_ID INTEGER NOT NULL, Product_Description VARCHAR(255), Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Other_Product_Service_Details VARCHAR(255), PRIMARY KEY (Service_ID), UNIQUE (Service_ID), FOREIGN KEY (Workshop_Group_ID) REFERENCES Drama_Workshop_Groups (Workshop_Group_ID), FOREIGN KEY (Service_Type_Code) REFERENCES Ref_Service_Types (Service_Type_Code) ); CREATE TABLE Bookings_Services ( Order_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, PRIMARY KEY (Order_ID, Product_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID), FOREIGN KEY (Product_ID) REFERENCES Services (Service_ID) );  CREATE TABLE Invoice_Items ( Invoice_Item_ID INTEGER NOT NULL , Invoice_ID INTEGER NOT NULL, Order_ID INTEGER NOT NULL, Order_Item_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, Order_Quantity INTEGER, Other_Item_Details VARCHAR(255), PRIMARY KEY (Invoice_Item_ID), FOREIGN KEY (Order_Item_ID) REFERENCES Order_Items (Order_Item_ID), FOREIGN KEY (Invoice_ID) REFERENCES Invoices (Invoice_ID), FOREIGN KEY (Order_ID, Product_ID) REFERENCES Bookings_Services (Order_ID,Product_ID) ); "
28,4624,extra,inn_1,SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T2.decor ORDER BY count(T2.decor) ASC LIMIT 1;,What kind of decor has the least number of reservations?,"CREATE TABLE ""Rooms"" (  	""RoomId"" TEXT PRIMARY KEY, 	""roomName"" TEXT,  	""beds"" INTEGER,  	""bedType"" TEXT,  	""maxOccupancy"" INTEGER,  	""basePrice"" INTEGER,  	""decor"" TEXT  );  CREATE TABLE ""Reservations"" (  	""Code"" INTEGER PRIMARY KEY,  	""Room"" TEXT,  	""CheckIn"" TEXT,  	""CheckOut"" TEXT,  	""Rate"" REAL,  	""LastName"" TEXT,  	""FirstName"" TEXT,  	""Adults"" INTEGER,  	""Kids"" INTEGER, 	FOREIGN KEY (Room) REFERENCES Rooms(RoomId) ); "
29,6517,extra,department_store,"SELECT T1.customer_name ,  T1.customer_phone ,  T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T2.customer_id ORDER BY count(*) DESC LIMIT 1","What are the name, phone number and email address of the customer who made the largest number of orders?","PRAGMA foreign_keys = ON; CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `address_details` VARCHAR(255) );                   CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `staff_gender` VARCHAR(1), `staff_name` VARCHAR(80) );  CREATE TABLE `Suppliers` ( `supplier_id` INTEGER PRIMARY KEY, `supplier_name` VARCHAR(80), `supplier_phone` VARCHAR(80) );  CREATE TABLE `Department_Store_Chain` ( `dept_store_chain_id` INTEGER PRIMARY KEY, `dept_store_chain_name` VARCHAR(80) );  CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `payment_method_code` VARCHAR(10) NOT NULL, `customer_code` VARCHAR(20), `customer_name` VARCHAR(80), `customer_address` VARCHAR(255), `customer_phone` VARCHAR(80), `customer_email` VARCHAR(80) );                  CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_type_code` VARCHAR(10) NOT NULL, `product_name` VARCHAR(80), `product_price` DECIMAL(19,4) ); CREATE TABLE `Supplier_Addresses` ( `supplier_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_from` DATETIME NOT NULL, `date_to` DATETIME, PRIMARY KEY (`supplier_id`, `address_id`), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`supplier_id` ) REFERENCES `Suppliers`(`supplier_id` ) );  CREATE TABLE `Customer_Addresses` ( `customer_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_from` DATETIME NOT NULL, `date_to` DATETIME, PRIMARY KEY (`customer_id`, `address_id`), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) );   CREATE TABLE `Customer_Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `order_status_code` VARCHAR(10) NOT NULL, `order_date` DATETIME NOT NULL, FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) );  CREATE TABLE `Department_Stores` ( `dept_store_id` INTEGER PRIMARY KEY, `dept_store_chain_id` INTEGER, `store_name` VARCHAR(80), `store_address` VARCHAR(255), `store_phone` VARCHAR(80), `store_email` VARCHAR(80), FOREIGN KEY (`dept_store_chain_id` ) REFERENCES `Department_Store_Chain`(`dept_store_chain_id` ) );                    CREATE TABLE `Departments` ( `department_id` INTEGER PRIMARY KEY, `dept_store_id` INTEGER NOT NULL, `department_name` VARCHAR(80), FOREIGN KEY (`dept_store_id` ) REFERENCES `Department_Stores`(`dept_store_id` ) ); CREATE TABLE `Order_Items` ( `order_item_id` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) ); CREATE TABLE `Product_Suppliers` ( `product_id` INTEGER NOT NULL, `supplier_id` INTEGER NOT NULL, `date_supplied_from` DATETIME NOT NULL, `date_supplied_to` DATETIME, `total_amount_purchased` VARCHAR(80), `total_value_purchased` DECIMAL(19,4), PRIMARY KEY (`product_id`, `supplier_id`), FOREIGN KEY (`supplier_id` ) REFERENCES `Suppliers`(`supplier_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) );   CREATE TABLE `Staff_Department_Assignments` ( `staff_id` INTEGER NOT NULL, `department_id` INTEGER NOT NULL, `date_assigned_from` DATETIME NOT NULL, `job_title_code` VARCHAR(10) NOT NULL, `date_assigned_to` DATETIME, PRIMARY KEY (`staff_id`, `department_id`), FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` ), FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ) );  "
30,3177,extra,race_track,"SELECT name ,  LOCATION ,  year_opened FROM track WHERE seating  >  (SELECT avg(seating) FROM track)","What are the names, locations, and years of opening for tracks with seating higher than average?","PRAGMA foreign_keys = ON;  CREATE TABLE ""race"" ( ""Race_ID"" int, ""Name"" text, ""Class"" text, ""Date"" text, ""Track_ID"" text, PRIMARY KEY (""Race_ID""), FOREIGN KEY (""Track_ID"") REFERENCES ""track""(""Track_ID"") );  CREATE TABLE ""track"" ( ""Track_ID"" int, ""Name"" text, ""Location"" text, ""Seating"" real, ""Year_Opened"" real, PRIMARY KEY (""Track_ID"") );  "
31,1609,extra,scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  ""Parsing"" AND t3.year  =  2012 AND t4.venuename  =  ""acl"";",acl papers in 2012 about Parsing,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); "
32,1838,extra,scholar,"SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  ""ohad shamir"" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",What paper by ohad shamir has the most citation ?,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); "
33,5663,extra,insurance_policies,"SELECT count(*) ,  T1.claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY T1.Date_Claim_Settled DESC LIMIT 1",Find the claim id and the number of settlements made for the claim with the most recent settlement date.,"PRAGMA foreign_keys = ON; CREATE TABLE Customers ( Customer_ID INTEGER NOT NULL, Customer_Details VARCHAR(255) NOT NULL, PRIMARY KEY (Customer_ID) ); CREATE TABLE Customer_Policies ( Policy_ID INTEGER NOT NULL, Customer_ID INTEGER NOT NULL, Policy_Type_Code CHAR(15) NOT NULL, Start_Date DATE, End_Date DATE, PRIMARY KEY (Policy_ID), FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID) );  CREATE TABLE Claims ( Claim_ID INTEGER NOT NULL, Policy_ID INTEGER NOT NULL, Date_Claim_Made DATE, Date_Claim_Settled DATE, Amount_Claimed INTEGER, Amount_Settled INTEGER, PRIMARY KEY (Claim_ID), FOREIGN KEY (Policy_ID) REFERENCES Customer_Policies (Policy_ID) );  CREATE TABLE Settlements ( Settlement_ID INTEGER NOT NULL, Claim_ID INTEGER NOT NULL, Date_Claim_Made DATE, Date_Claim_Settled DATE, Amount_Claimed INTEGER, Amount_Settled INTEGER, Customer_Policy_ID INTEGER NOT NULL, PRIMARY KEY (Settlement_ID), FOREIGN KEY (Claim_ID) REFERENCES Claims (Claim_ID) ); CREATE TABLE Payments ( Payment_ID INTEGER NOT NULL, Settlement_ID INTEGER NOT NULL, Payment_Method_Code VARCHAR(255), Date_Payment_Made DATE, Amount_Payment INTEGER, PRIMARY KEY (Payment_ID), FOREIGN KEY (Settlement_ID) REFERENCES Settlements (Settlement_ID) );    "
34,1785,extra,scholar,"SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  ""jitendra malik"";",What datasets have jitendra malik used,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); "
35,5095,extra,assets_maintenance,"SELECT count(*) ,  T1.fault_log_entry_id FROM Fault_Log AS T1 JOIN Engineer_Visits AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1",How many engineer visits are required at most for a single fault log? List the number and the log entry id.,"PRAGMA foreign_keys = ON;  CREATE TABLE `Third_Party_Companies` ( `company_id` INTEGER PRIMARY KEY , `company_type` VARCHAR(5) NOT NULL, `company_name` VARCHAR(255), `company_address` VARCHAR(255), `other_company_details` VARCHAR(255) );  CREATE TABLE `Maintenance_Contracts` ( `maintenance_contract_id` INTEGER PRIMARY KEY, `maintenance_contract_company_id` INTEGER NOT NULL, `contract_start_date` DATETIME, `contract_end_date` DATETIME, `other_contract_details` VARCHAR(255), FOREIGN KEY (`maintenance_contract_company_id` ) REFERENCES `Third_Party_Companies`(`company_id` ) );  CREATE TABLE `Parts` ( `part_id` INTEGER PRIMARY KEY, `part_name` VARCHAR(255), `chargeable_yn` VARCHAR(1), `chargeable_amount` VARCHAR(20), `other_part_details` VARCHAR(255) );  CREATE TABLE `Skills` ( `skill_id` INTEGER PRIMARY KEY, `skill_code` VARCHAR(20), `skill_description` VARCHAR(255) );  CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `staff_name` VARCHAR(255), `gender` VARCHAR(1), `other_staff_details` VARCHAR(255) ); CREATE TABLE `Assets` ( `asset_id` INTEGER PRIMARY KEY, `maintenance_contract_id` INTEGER NOT NULL, `supplier_company_id` INTEGER NOT NULL, `asset_details` VARCHAR(255), `asset_make` VARCHAR(20), `asset_model` VARCHAR(20), `asset_acquired_date` DATETIME, `asset_disposed_date` DATETIME, `other_asset_details` VARCHAR(255), FOREIGN KEY (`maintenance_contract_id` ) REFERENCES `Maintenance_Contracts`(`maintenance_contract_id` ), FOREIGN KEY (`supplier_company_id` ) REFERENCES `Third_Party_Companies`(`company_id` ) );    CREATE TABLE `Asset_Parts` ( `asset_id` INTEGER NOT NULL, `part_id` INTEGER NOT NULL, FOREIGN KEY (`part_id` ) REFERENCES `Parts`(`part_id` ), FOREIGN KEY (`asset_id` ) REFERENCES `Assets`(`asset_id` ) );  CREATE TABLE `Maintenance_Engineers` ( `engineer_id` INTEGER PRIMARY KEY, `company_id` INTEGER NOT NULL, `first_name` VARCHAR(50), `last_name` VARCHAR(50), `other_details` VARCHAR(255), FOREIGN KEY (`company_id` ) REFERENCES `Third_Party_Companies`(`company_id` ) );   CREATE TABLE `Engineer_Skills` ( `engineer_id` INTEGER NOT NULL, `skill_id` INTEGER NOT NULL, FOREIGN KEY (`engineer_id` ) REFERENCES `Maintenance_Engineers`(`engineer_id` ), FOREIGN KEY (`skill_id` ) REFERENCES `Skills`(`skill_id` ) );  CREATE TABLE `Fault_Log` ( `fault_log_entry_id` INTEGER PRIMARY KEY, `asset_id` INTEGER NOT NULL, `recorded_by_staff_id` INTEGER NOT NULL, `fault_log_entry_datetime` DATETIME, `fault_description` VARCHAR(255), `other_fault_details` VARCHAR(255), FOREIGN KEY (`asset_id` ) REFERENCES `Assets`(`asset_id` ), FOREIGN KEY (`recorded_by_staff_id` ) REFERENCES `Staff`(`staff_id` ) );  CREATE TABLE `Engineer_Visits` ( `engineer_visit_id` INTEGER PRIMARY KEY, `contact_staff_id` INTEGER, `engineer_id` INTEGER NOT NULL, `fault_log_entry_id` INTEGER NOT NULL, `fault_status` VARCHAR(10) NOT NULL, `visit_start_datetime` DATETIME, `visit_end_datetime` DATETIME, `other_visit_details` VARCHAR(255), FOREIGN KEY (`fault_log_entry_id` ) REFERENCES `Fault_Log`(`fault_log_entry_id` ), FOREIGN KEY (`engineer_id` ) REFERENCES `Maintenance_Engineers`(`engineer_id` ), FOREIGN KEY (`contact_staff_id` ) REFERENCES `Staff`(`staff_id` ) );    CREATE TABLE `Part_Faults` ( `part_fault_id` INTEGER PRIMARY KEY, `part_id` INTEGER NOT NULL, `fault_short_name` VARCHAR(20), `fault_description` VARCHAR(255), `other_fault_details` VARCHAR(255), FOREIGN KEY (`part_id` ) REFERENCES `Parts`(`part_id` ) );   CREATE TABLE `Fault_Log_Parts` ( `fault_log_entry_id` INTEGER NOT NULL, `part_fault_id` INTEGER NOT NULL, `fault_status` VARCHAR(10) NOT NULL, FOREIGN KEY (`part_fault_id` ) REFERENCES `Part_Faults`(`part_fault_id` ), FOREIGN KEY (`fault_log_entry_id` ) REFERENCES `Fault_Log`(`fault_log_entry_id` ) );  CREATE TABLE `Skills_Required_To_Fix` ( `part_fault_id` INTEGER NOT NULL, `skill_id` INTEGER NOT NULL, FOREIGN KEY (`part_fault_id` ) REFERENCES `Part_Faults`(`part_fault_id` ), FOREIGN KEY (`skill_id` ) REFERENCES `Skills`(`skill_id` ) );     "
36,6259,extra,network_2,SELECT DISTINCT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  <  (SELECT avg(age) FROM person),What are the different names of friends who are younger than the average age for a friend?,"CREATE TABLE Person (   name varchar(20) PRIMARY KEY,   age INTEGER,   city TEXT,   gender TEXT,   job TEXT );  CREATE TABLE PersonFriend (   name varchar(20),   friend varchar(20),   year INTEGER,   FOREIGN KEY (name) REFERENCES Person(name),   FOREIGN KEY (friend) REFERENCES Person(name) );  "
37,7150,extra,tracking_software_problems,"SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = ""rem"" EXCEPT SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = ""aut""","Find the first and last name of the staff members who reported problems from the product ""rem"" but not ""aut""?","PRAGMA foreign_keys = ON; CREATE TABLE `Problem_Category_Codes` ( `problem_category_code` VARCHAR(20) PRIMARY KEY, `problem_category_description` VARCHAR(80) ); CREATE TABLE `Problem_Log` ( `problem_log_id` INTEGER PRIMARY KEY, `assigned_to_staff_id` INTEGER NOT NULL, `problem_id` INTEGER NOT NULL, `problem_category_code` VARCHAR(20) NOT NULL, `problem_status_code` VARCHAR(20) NOT NULL, `log_entry_date` DATETIME, `log_entry_description` VARCHAR(255), `log_entry_fix` VARCHAR(255), `other_log_details` VARCHAR(255), FOREIGN KEY (`problem_category_code` ) REFERENCES `Problem_Category_Codes`(`problem_category_code` ),FOREIGN KEY (`assigned_to_staff_id` ) REFERENCES `Staff`(`staff_id` ),FOREIGN KEY (`problem_id` ) REFERENCES `Problems`(`problem_id` ),FOREIGN KEY (`problem_status_code` ) REFERENCES `Problem_Status_Codes`(`problem_status_code` ) ); CREATE TABLE `Problem_Status_Codes` ( `problem_status_code` VARCHAR(20) PRIMARY KEY, `problem_status_description` VARCHAR(80) ); CREATE TABLE `Product` ( `product_id` INTEGER PRIMARY KEY, `product_name` VARCHAR(80), `product_details` VARCHAR(255) ); CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `staff_first_name` VARCHAR(80), `staff_last_name` VARCHAR(80), `other_staff_details` VARCHAR(255) );  CREATE TABLE `Problems` ( `problem_id` INTEGER PRIMARY KEY, `product_id` INTEGER NOT NULL, `closure_authorised_by_staff_id` INTEGER NOT NULL, `reported_by_staff_id` INTEGER NOT NULL, `date_problem_reported` DATETIME NOT NULL, `date_problem_closed` DATETIME, `problem_description` VARCHAR(255), `other_problem_details` VARCHAR(255), FOREIGN KEY (`closure_authorised_by_staff_id` ) REFERENCES `Staff`(`staff_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Product`(`product_id` ), FOREIGN KEY (`reported_by_staff_id` ) REFERENCES `Staff`(`staff_id` ) );   "
38,7722,extra,cre_Theme_park,SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits ),Count the number of tourists who did not visit any place.,"PRAGMA foreign_keys = ON; CREATE TABLE Ref_Hotel_Star_Ratings ( star_rating_code CHAR(15) NOT NULL, star_rating_description VARCHAR(80), PRIMARY KEY (star_rating_code), UNIQUE (star_rating_code) );   CREATE TABLE Locations ( Location_ID INTEGER NOT NULL, Location_Name VARCHAR(255), Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Location_ID) ); CREATE TABLE Ref_Attraction_Types ( Attraction_Type_Code CHAR(15) NOT NULL, Attraction_Type_Description VARCHAR(255), PRIMARY KEY (Attraction_Type_Code), UNIQUE (Attraction_Type_Code) );  CREATE TABLE Visitors ( Tourist_ID INTEGER NOT NULL, Tourist_Details VARCHAR(255), PRIMARY KEY (Tourist_ID), UNIQUE (Tourist_ID) ); CREATE TABLE Features ( Feature_ID INTEGER NOT NULL, Feature_Details VARCHAR(255), PRIMARY KEY (Feature_ID) );  CREATE TABLE Hotels ( hotel_id INTEGER NOT NULL, star_rating_code CHAR(15) NOT NULL, pets_allowed_yn CHAR(1), price_range real, other_hotel_details VARCHAR(255), PRIMARY KEY (hotel_id), FOREIGN KEY (star_rating_code) REFERENCES Ref_Hotel_Star_Ratings (star_rating_code) );  CREATE TABLE Tourist_Attractions ( Tourist_Attraction_ID INTEGER NOT NULL, Attraction_Type_Code CHAR(15) NOT NULL, Location_ID INTEGER NOT NULL, How_to_Get_There VARCHAR(255), Name VARCHAR(255), Description VARCHAR(255), Opening_Hours VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Tourist_Attraction_ID), FOREIGN KEY (Location_ID) REFERENCES Locations (Location_ID), FOREIGN KEY (Attraction_Type_Code) REFERENCES Ref_Attraction_Types (Attraction_Type_Code) );  CREATE TABLE Street_Markets ( Market_ID INTEGER NOT NULL, Market_Details VARCHAR(255), PRIMARY KEY (Market_ID), FOREIGN KEY (Market_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Shops ( Shop_ID INTEGER NOT NULL, Shop_Details VARCHAR(255), PRIMARY KEY (Shop_ID), FOREIGN KEY (Shop_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Museums ( Museum_ID INTEGER NOT NULL, Museum_Details VARCHAR(255), PRIMARY KEY (Museum_ID), FOREIGN KEY (Museum_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Royal_Family ( Royal_Family_ID INTEGER NOT NULL, Royal_Family_Details VARCHAR(255), PRIMARY KEY (Royal_Family_ID), FOREIGN KEY (Royal_Family_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Theme_Parks ( Theme_Park_ID INTEGER NOT NULL, Theme_Park_Details VARCHAR(255), PRIMARY KEY (Theme_Park_ID), FOREIGN KEY (Theme_Park_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) );   CREATE TABLE Visits ( Visit_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Tourist_ID INTEGER NOT NULL, Visit_Date DATETIME NOT NULL, Visit_Details VARCHAR(40) NOT NULL, PRIMARY KEY (Visit_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID), FOREIGN KEY (Tourist_ID) REFERENCES Visitors (Tourist_ID) );   CREATE TABLE Photos ( Photo_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Name VARCHAR(255), Description VARCHAR(255), Filename VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Photo_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Staff ( Staff_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Name VARCHAR(40), Other_Details VARCHAR(255), PRIMARY KEY (Staff_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) );   CREATE TABLE Tourist_Attraction_Features ( Tourist_Attraction_ID INTEGER NOT NULL, Feature_ID INTEGER NOT NULL, PRIMARY KEY (Tourist_Attraction_ID, Feature_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID), FOREIGN KEY (Feature_ID) REFERENCES Features (Feature_ID) ); "
39,6274,extra,network_2,SELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin'),What is the total number of people who has no friend living in the city of Austin.,"CREATE TABLE Person (   name varchar(20) PRIMARY KEY,   age INTEGER,   city TEXT,   gender TEXT,   job TEXT );  CREATE TABLE PersonFriend (   name varchar(20),   friend varchar(20),   year INTEGER,   FOREIGN KEY (name) REFERENCES Person(name),   FOREIGN KEY (friend) REFERENCES Person(name) );  "
40,4520,extra,movie_1,"SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) DESC LIMIT 1",Find the movies with the highest average rating. Return the movie titles and average rating.,"-- dbext:type=SQLITE:dbname=movie_rating.db  /* Delete the tables if they already exist */ drop table if exists Movie; drop table if exists Reviewer; drop table if exists Rating;  /* Create the schema for our tables */ create table Movie( 	mID int primary key,  	title text,  	year int,  	director text ); create table Reviewer( 	rID int primary key,  	name text);  create table Rating( 	rID int,  	mID int,  	stars int,  	ratingDate date, 	FOREIGN KEY (mID) references Movie(mID), 	FOREIGN KEY (rID) references Reviewer(rID) );  /* Populate the tables with our data */ "
41,5103,extra,assets_maintenance,"SELECT T1.engineer_id ,  T1.first_name ,  T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 ON T1.engineer_id  =  T2.engineer_id GROUP BY T1.engineer_id ORDER BY count(*) ASC LIMIT 1","Among those engineers who have visited, which engineer makes the least number of visits? List the engineer id, first name and last name.","PRAGMA foreign_keys = ON;  CREATE TABLE `Third_Party_Companies` ( `company_id` INTEGER PRIMARY KEY , `company_type` VARCHAR(5) NOT NULL, `company_name` VARCHAR(255), `company_address` VARCHAR(255), `other_company_details` VARCHAR(255) );  CREATE TABLE `Maintenance_Contracts` ( `maintenance_contract_id` INTEGER PRIMARY KEY, `maintenance_contract_company_id` INTEGER NOT NULL, `contract_start_date` DATETIME, `contract_end_date` DATETIME, `other_contract_details` VARCHAR(255), FOREIGN KEY (`maintenance_contract_company_id` ) REFERENCES `Third_Party_Companies`(`company_id` ) );  CREATE TABLE `Parts` ( `part_id` INTEGER PRIMARY KEY, `part_name` VARCHAR(255), `chargeable_yn` VARCHAR(1), `chargeable_amount` VARCHAR(20), `other_part_details` VARCHAR(255) );  CREATE TABLE `Skills` ( `skill_id` INTEGER PRIMARY KEY, `skill_code` VARCHAR(20), `skill_description` VARCHAR(255) );  CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `staff_name` VARCHAR(255), `gender` VARCHAR(1), `other_staff_details` VARCHAR(255) ); CREATE TABLE `Assets` ( `asset_id` INTEGER PRIMARY KEY, `maintenance_contract_id` INTEGER NOT NULL, `supplier_company_id` INTEGER NOT NULL, `asset_details` VARCHAR(255), `asset_make` VARCHAR(20), `asset_model` VARCHAR(20), `asset_acquired_date` DATETIME, `asset_disposed_date` DATETIME, `other_asset_details` VARCHAR(255), FOREIGN KEY (`maintenance_contract_id` ) REFERENCES `Maintenance_Contracts`(`maintenance_contract_id` ), FOREIGN KEY (`supplier_company_id` ) REFERENCES `Third_Party_Companies`(`company_id` ) );    CREATE TABLE `Asset_Parts` ( `asset_id` INTEGER NOT NULL, `part_id` INTEGER NOT NULL, FOREIGN KEY (`part_id` ) REFERENCES `Parts`(`part_id` ), FOREIGN KEY (`asset_id` ) REFERENCES `Assets`(`asset_id` ) );  CREATE TABLE `Maintenance_Engineers` ( `engineer_id` INTEGER PRIMARY KEY, `company_id` INTEGER NOT NULL, `first_name` VARCHAR(50), `last_name` VARCHAR(50), `other_details` VARCHAR(255), FOREIGN KEY (`company_id` ) REFERENCES `Third_Party_Companies`(`company_id` ) );   CREATE TABLE `Engineer_Skills` ( `engineer_id` INTEGER NOT NULL, `skill_id` INTEGER NOT NULL, FOREIGN KEY (`engineer_id` ) REFERENCES `Maintenance_Engineers`(`engineer_id` ), FOREIGN KEY (`skill_id` ) REFERENCES `Skills`(`skill_id` ) );  CREATE TABLE `Fault_Log` ( `fault_log_entry_id` INTEGER PRIMARY KEY, `asset_id` INTEGER NOT NULL, `recorded_by_staff_id` INTEGER NOT NULL, `fault_log_entry_datetime` DATETIME, `fault_description` VARCHAR(255), `other_fault_details` VARCHAR(255), FOREIGN KEY (`asset_id` ) REFERENCES `Assets`(`asset_id` ), FOREIGN KEY (`recorded_by_staff_id` ) REFERENCES `Staff`(`staff_id` ) );  CREATE TABLE `Engineer_Visits` ( `engineer_visit_id` INTEGER PRIMARY KEY, `contact_staff_id` INTEGER, `engineer_id` INTEGER NOT NULL, `fault_log_entry_id` INTEGER NOT NULL, `fault_status` VARCHAR(10) NOT NULL, `visit_start_datetime` DATETIME, `visit_end_datetime` DATETIME, `other_visit_details` VARCHAR(255), FOREIGN KEY (`fault_log_entry_id` ) REFERENCES `Fault_Log`(`fault_log_entry_id` ), FOREIGN KEY (`engineer_id` ) REFERENCES `Maintenance_Engineers`(`engineer_id` ), FOREIGN KEY (`contact_staff_id` ) REFERENCES `Staff`(`staff_id` ) );    CREATE TABLE `Part_Faults` ( `part_fault_id` INTEGER PRIMARY KEY, `part_id` INTEGER NOT NULL, `fault_short_name` VARCHAR(20), `fault_description` VARCHAR(255), `other_fault_details` VARCHAR(255), FOREIGN KEY (`part_id` ) REFERENCES `Parts`(`part_id` ) );   CREATE TABLE `Fault_Log_Parts` ( `fault_log_entry_id` INTEGER NOT NULL, `part_fault_id` INTEGER NOT NULL, `fault_status` VARCHAR(10) NOT NULL, FOREIGN KEY (`part_fault_id` ) REFERENCES `Part_Faults`(`part_fault_id` ), FOREIGN KEY (`fault_log_entry_id` ) REFERENCES `Fault_Log`(`fault_log_entry_id` ) );  CREATE TABLE `Skills_Required_To_Fix` ( `part_fault_id` INTEGER NOT NULL, `skill_id` INTEGER NOT NULL, FOREIGN KEY (`part_fault_id` ) REFERENCES `Part_Faults`(`part_fault_id` ), FOREIGN KEY (`skill_id` ) REFERENCES `Skills`(`skill_id` ) );     "
42,5295,extra,hr_1,"SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  ( SELECT department_id FROM employees WHERE first_name  =  ""Clara"") AND first_name != ""Clara""",display the employee name ( first name and last name ) and hire date for all employees in the same department as Clara excluding Clara.,"-- phpMyAdmin SQL Dump -- version 4.0.10.7 -- http://www.phpmyadmin.net -- -- Host: localhost -- Generation Time: Mar 20, 2015 at 01:43 AM -- Server version: 5.5.34-cll-lve -- PHP Version: 5.4.23    /*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */; /*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */; /*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */; /*!40101 SET NAMES utf8 */; CREATE TABLE IF NOT EXISTS `regions` (   `REGION_ID` decimal(5,0) NOT NULL,   `REGION_NAME` varchar(25) DEFAULT NULL,   PRIMARY KEY (`REGION_ID`) );  -- -- Dumping data for table `regions` --   -- -- Database: `wrpracti_bookinfo` --  -- --------------------------------------------------------  -- -- Table structure for table `countries` --  CREATE TABLE IF NOT EXISTS `countries` (   `COUNTRY_ID` varchar(2) NOT NULL,   `COUNTRY_NAME` varchar(40) DEFAULT NULL,   `REGION_ID` decimal(10,0) DEFAULT NULL,   PRIMARY KEY (`COUNTRY_ID`),   FOREIGN KEY (`REGION_ID`) REFERENCES regions (`REGION_ID`) );  -- -- Dumping data for table `countries` --    -- --------------------------------------------------------  -- -- Table structure for table `departments` --  CREATE TABLE IF NOT EXISTS `departments` (   `DEPARTMENT_ID` decimal(4,0) NOT NULL DEFAULT '0',   `DEPARTMENT_NAME` varchar(30) NOT NULL,   `MANAGER_ID` decimal(6,0) DEFAULT NULL,   `LOCATION_ID` decimal(4,0) DEFAULT NULL,   PRIMARY KEY (`DEPARTMENT_ID`) );  -- -- Dumping data for table `departments` --     CREATE TABLE IF NOT EXISTS `jobs` (   `JOB_ID` varchar(10) NOT NULL DEFAULT '',   `JOB_TITLE` varchar(35) NOT NULL,   `MIN_SALARY` decimal(6,0) DEFAULT NULL,   `MAX_SALARY` decimal(6,0) DEFAULT NULL,   PRIMARY KEY (`JOB_ID`) );  -- -- Dumping data for table `jobs` --    -- --------------------------------------------------------  -- -- Table structure for table `employees` --  CREATE TABLE IF NOT EXISTS `employees` (   `EMPLOYEE_ID` decimal(6,0) NOT NULL DEFAULT '0',   `FIRST_NAME` varchar(20) DEFAULT NULL,   `LAST_NAME` varchar(25) NOT NULL,   `EMAIL` varchar(25) NOT NULL,   `PHONE_NUMBER` varchar(20) DEFAULT NULL,   `HIRE_DATE` date NOT NULL,   `JOB_ID` varchar(10) NOT NULL,   `SALARY` decimal(8,2) DEFAULT NULL,   `COMMISSION_PCT` decimal(2,2) DEFAULT NULL,   `MANAGER_ID` decimal(6,0) DEFAULT NULL,   `DEPARTMENT_ID` decimal(4,0) DEFAULT NULL,   PRIMARY KEY (`EMPLOYEE_ID`),   FOREIGN KEY (`DEPARTMENT_ID`) REFERENCES departments(`DEPARTMENT_ID`),   FOREIGN KEY (`JOB_ID`) REFERENCES jobs(`JOB_ID`) );  -- -- Dumping data for table `employees` --    -- --------------------------------------------------------  -- -- Table structure for table `job_history` --  CREATE TABLE IF NOT EXISTS `job_history` (   `EMPLOYEE_ID` decimal(6,0) NOT NULL,   `START_DATE` date NOT NULL,   `END_DATE` date NOT NULL,   `JOB_ID` varchar(10) NOT NULL,   `DEPARTMENT_ID` decimal(4,0) DEFAULT NULL,   PRIMARY KEY (`EMPLOYEE_ID`,`START_DATE`),   FOREIGN KEY (`EMPLOYEE_ID`) REFERENCES employees(`EMPLOYEE_ID`),   FOREIGN KEY (`DEPARTMENT_ID`) REFERENCES departments(`DEPARTMENT_ID`),   FOREIGN KEY (`JOB_ID`) REFERENCES jobs(`JOB_ID`) );  -- -- Dumping data for table `job_history` --    -- --------------------------------------------------------  -- -- Table structure for table `jobs` --   -- -- Table structure for table `locations` --  CREATE TABLE IF NOT EXISTS `locations` (   `LOCATION_ID` decimal(4,0) NOT NULL DEFAULT '0',   `STREET_ADDRESS` varchar(40) DEFAULT NULL,   `POSTAL_CODE` varchar(12) DEFAULT NULL,   `CITY` varchar(30) NOT NULL,   `STATE_PROVINCE` varchar(25) DEFAULT NULL,   `COUNTRY_ID` varchar(2) DEFAULT NULL,   PRIMARY KEY (`LOCATION_ID`),   FOREIGN KEY (`COUNTRY_ID`) REFERENCES countries(`COUNTRY_ID`) );  -- -- Dumping data for table `locations` --    -- --------------------------------------------------------  -- -- Table structure for table `regions` --   /*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */; /*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */; /*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;"
43,1179,extra,geo,"SELECT city_name FROM city WHERE population  >  150000 AND state_name IN ( SELECT traverse FROM river WHERE LENGTH  >  750 AND river_name  =  ""mississippi"" );",what are the major cities in states through which the mississippi runs,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );"
44,1612,extra,scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  ""Parsing"" AND t3.year  =  2012 AND t4.venuename  =  ""acl"";",how many Parsing papers did acl 2012 have ?,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); "
45,1715,extra,scholar,"SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname LIKE ""ImageNet"";",How many papers written on ImageNet ?,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); "
46,1486,extra,scholar,"SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  ""syntactic parsing"" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",who has the most publications in syntactic parsing ?,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); "
47,2967,extra,flight_1,"SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1",What is the salaray and name of the employee that is certified to fly the most planes?,"-- drop table flight cascade constraints; -- drop table aircraft cascade constraints; -- drop table employee cascade constraints; -- drop table certificate cascade constraints;  create table flight( 	flno number(4,0) primary key, 	origin varchar2(20), 	destination varchar2(20), 	distance number(6,0), 	departure_date date, 	arrival_date date, 	price number(7,2),     aid number(9,0),     foreign key(""aid"") references `aircraft`(""aid""));  create table aircraft( 	aid number(9,0) primary key, 	name varchar2(30), 	distance number(6,0));  create table employee( 	eid number(9,0) primary key, 	name varchar2(30), 	salary number(10,2));  create table certificate( 	eid number(9,0), 	aid number(9,0), 	primary key(eid,aid), 	foreign key(""eid"") references `employee`(""eid""), 	foreign key(""aid"") references `aircraft`(""aid""));   "
48,2432,extra,imdb,"SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.name  =  ""Gabriele Ferzetti"" ORDER BY t3.release_year DESC LIMIT 1;","Find the latest movie which "" Gabriele Ferzetti "" acted in","PRAGMA foreign_keys = ON; CREATE TABLE ""actor"" ( ""aid"" int, ""gender"" text, ""name"" text, ""nationality"" text, ""birth_city"" text, ""birth_year"" int, primary key(""aid"") );   CREATE TABLE ""copyright"" ( ""id"" int, ""msid"" int, ""cid"" int, primary key(""id"") ); CREATE TABLE ""cast"" ( ""id"" int, ""msid"" int, ""aid"" int, ""role"" int, primary key(""id""), foreign key(""aid"") references `actor`(""aid""), foreign key(""msid"") references `copyright`(""msid"") );  CREATE TABLE ""genre"" ( ""gid"" int, ""genre"" text, primary key(""gid"") );  CREATE TABLE ""classification"" ( ""id"" int, ""msid"" int, ""gid"" int, primary key(""id""), foreign key(""gid"") references `genre`(""gid""), foreign key(""msid"") references `copyright`(""msid"") );  CREATE TABLE ""company"" ( ""id"" int, ""name"" text, ""country_code"" text, primary key(""id"") );   CREATE TABLE ""director"" ( ""did"" int, ""gender"" text, ""name"" text, ""nationality"" text, ""birth_city"" text, ""birth_year"" int, primary key(""did"") );  CREATE TABLE ""producer"" ( ""pid"" int, ""gender"" text, ""name"" text, ""nationality"" text, ""birth_city"" text, ""birth_year"" int, primary key(""pid"") );  CREATE TABLE ""directed_by"" ( ""id"" int, ""msid"" int, ""did"" int, primary key(""id""), foreign key(""msid"") references `copyright`(""msid""), foreign key(""did"") references `director`(""did"") );  CREATE TABLE ""keyword"" ( ""id"" int, ""keyword"" text, primary key(""id"") );  CREATE TABLE ""made_by"" ( ""id"" int, ""msid"" int, ""pid"" int, primary key(""id""), foreign key(""msid"") references `copyright`(""msid""), foreign key(""pid"") references `producer`(""pid"") );  CREATE TABLE ""movie"" ( ""mid"" int, ""title"" text, ""release_year"" int, ""title_aka"" text, ""budget"" text, primary key(""mid"") ); CREATE TABLE ""tags"" ( ""id"" int, ""msid"" int, ""kid"" int, primary key(""id""), foreign key(""msid"") references `copyright`(""msid""), foreign key(""kid"") references `keyword`(""kid"") ); CREATE TABLE ""tv_series"" ( ""sid"" int, ""title"" text, ""release_year"" int, ""num_of_seasons"" int, ""num_of_episodes"" int, ""title_aka"" text, ""budget"" text, primary key(""sid"") ); CREATE TABLE ""writer"" ( ""wid"" int, ""gender"" text, ""name"" int, ""nationality"" int, ""num_of_episodes"" int, ""birth_city"" text, ""birth_year"" int, primary key(""wid"") ); CREATE TABLE ""written_by"" ( ""id"" int, ""msid"" int, ""wid"" int, foreign key(""msid"") references `copyright`(""msid""), foreign key(""wid"") references `writer`(""wid"") );"
49,7350,extra,products_gen_characteristics,"SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id","What are the names, details and data types of the characteristics which are never used by any product?","PRAGMA foreign_keys = ON; CREATE TABLE `Ref_Characteristic_Types` ( `characteristic_type_code` VARCHAR(15) PRIMARY KEY, `characteristic_type_description` VARCHAR(80) ); CREATE TABLE `Ref_Colors` ( `color_code` VARCHAR(15) PRIMARY KEY, `color_description` VARCHAR(80) ); CREATE TABLE `Ref_Product_Categories` ( `product_category_code` VARCHAR(15) PRIMARY KEY, `product_category_description` VARCHAR(80), `unit_of_measure` VARCHAR(20) ); CREATE TABLE `Characteristics` ( `characteristic_id` INTEGER PRIMARY KEY, `characteristic_type_code` VARCHAR(15) NOT NULL, `characteristic_data_type` VARCHAR(10), `characteristic_name` VARCHAR(80), `other_characteristic_details` VARCHAR(255), FOREIGN KEY (`characteristic_type_code` ) REFERENCES `Ref_Characteristic_Types`(`characteristic_type_code` ) ); CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `color_code` VARCHAR(15) NOT NULL, `product_category_code` VARCHAR(15) NOT NULL, `product_name` VARCHAR(80), `typical_buying_price` VARCHAR(20), `typical_selling_price` VARCHAR(20), `product_description` VARCHAR(255), `other_product_details` VARCHAR(255), FOREIGN KEY (`product_category_code` ) REFERENCES `Ref_Product_Categories`(`product_category_code` ),FOREIGN KEY (`color_code` ) REFERENCES `Ref_Colors`(`color_code` ) ); CREATE TABLE `Product_Characteristics` ( `product_id` INTEGER NOT NULL, `characteristic_id` INTEGER NOT NULL, `product_characteristic_value` VARCHAR(50), FOREIGN KEY (`characteristic_id` ) REFERENCES `Characteristics`(`characteristic_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) ); "
50,1760,hard,scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""question answering"" AND t3.year  =  2016;",What papers were written on question answering this year ?,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); "
51,4742,hard,storm_record,SELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region),Show the name of storms which don't have affected region in record.," PRAGMA foreign_keys = ON;  CREATE TABLE ""storm"" ( ""Storm_ID"" int, ""Name"" text, ""Dates_active"" text, ""Max_speed"" int, ""Damage_millions_USD"" real, ""Number_Deaths"" int, PRIMARY KEY (""Storm_ID"") );  CREATE TABLE ""region"" ( `Region_id` int, `Region_code` text, `Region_name` text, PRIMARY KEY (""Region_id"") );  CREATE TABLE `affected_region` ( `Region_id` int, `Storm_ID` int, `Number_city_affected` real, PRIMARY KEY (`Region_id`,`Storm_ID`), FOREIGN KEY (`Region_id`) REFERENCES `region`(`Region_id`), FOREIGN KEY (`Storm_ID`) REFERENCES `storm`(`Storm_ID`) );  "
52,2170,hard,academic,"SELECT t1.name FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t3.title  =  ""Making database systems usable"";","return me the authors of "" Making database systems usable "" .","PRAGMA foreign_keys = ON; CREATE TABLE ""author"" ( ""aid"" int, ""homepage"" text, ""name"" text, ""oid"" int, primary key(""aid"") ); CREATE TABLE ""conference"" ( ""cid"" int, ""homepage"" text, ""name"" text, primary key (""cid"") ); CREATE TABLE ""domain"" ( ""did"" int, ""name"" text, primary key (""did"") ); CREATE TABLE ""domain_author"" ( ""aid"" int,  ""did"" int, primary key (""did"", ""aid""), foreign key(""aid"") references `author`(""aid""), foreign key(""did"") references `domain`(""did"") );  CREATE TABLE ""domain_conference"" ( ""cid"" int, ""did"" int, primary key (""did"", ""cid""), foreign key(""cid"") references `conference`(""cid""), foreign key(""did"") references `domain`(""did"") ); CREATE TABLE ""journal"" ( ""homepage"" text, ""jid"" int, ""name"" text, primary key(""jid"") ); CREATE TABLE ""domain_journal"" ( ""did"" int, ""jid"" int, primary key (""did"", ""jid""), foreign key(""jid"") references ""journal""(""jid""), foreign key(""did"") references ""domain""(""did"") ); CREATE TABLE ""keyword"" ( ""keyword"" text, ""kid"" int, primary key(""kid"") ); CREATE TABLE ""domain_keyword"" ( ""did"" int, ""kid"" int, primary key (""did"", ""kid""), foreign key(""kid"") references ""keyword""(""kid""), foreign key(""did"") references ""domain""(""did"") ); CREATE TABLE ""publication"" ( ""abstract"" text, ""cid"" text, ""citation_num"" int, ""jid"" int, ""pid"" int, ""reference_num"" int, ""title"" text, ""year"" int, primary key(""pid""), foreign key(""jid"") references ""journal""(""jid""), foreign key(""cid"") references ""conference""(""cid"") ); CREATE TABLE ""domain_publication"" ( ""did"" int, ""pid"" int, primary key (""did"", ""pid""), foreign key(""pid"") references ""publication""(""pid""), foreign key(""did"") references ""domain""(""did"") );  CREATE TABLE ""organization"" ( ""continent"" text, ""homepage"" text, ""name"" text, ""oid"" int, primary key(""oid"") );  CREATE TABLE ""publication_keyword"" ( ""pid"" int, ""kid"" int, primary key (""kid"", ""pid""), foreign key(""pid"") references ""publication""(""pid""), foreign key(""kid"") references ""keyword""(""kid"") ); CREATE TABLE ""writes"" ( ""aid"" int, ""pid"" int, primary key (""aid"", ""pid""), foreign key(""pid"") references ""publication""(""pid""), foreign key(""aid"") references ""author""(""aid"") ); CREATE TABLE ""cite"" ( ""cited"" int, ""citing""  int, foreign key(""cited"") references ""publication""(""pid""), foreign key(""citing"") references ""publication""(""pid"") );"
53,5347,hard,music_1,"SELECT artist_name FROM artist WHERE country  =  ""UK"" INTERSECT SELECT artist_name FROM song WHERE languages  =  ""english""",Find the names of the artists who are from UK and have produced English songs.," --data definition  create table genre( 	g_name varchar2(20) not null, 	rating varchar2(10), 	most_popular_in varchar2(50), 	primary key(g_name) );  create table artist( 	artist_name varchar2(50) not null, 	country varchar2(20), 	gender varchar2(20), 	preferred_genre varchar2(50), 	constraint a_name primary key(artist_name), 	foreign key(preferred_genre) references genre(g_name) ON DELETE CASCADE );  create table files( 	f_id number(10) not null, 	artist_name varchar2(50), 	file_size varchar2(20), 	duration varchar2(20), 	formats varchar2(20), 	primary key(f_id), 	foreign key(artist_name) references artist(artist_name) ON DELETE CASCADE );   create table song( 	song_name varchar2(50), 	artist_name varchar2(50), 	country varchar2(20), 	f_id number(10),     	genre_is varchar2(20), 	rating number(10) check(rating>0 and rating<11), 	languages varchar2(20), 	releasedate Date,  	resolution number(10) not null, 	constraint s_name primary key(song_name), 	foreign key(artist_name) references artist(artist_name) ON DELETE CASCADE, 	foreign key(f_id) references files(f_id) ON DELETE CASCADE, 	foreign key(genre_is) references genre(g_name) ON DELETE CASCADE );   --insertion of attributes in the table   "
54,1446,hard,geo,SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );,what rivers flow through the largest state,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );"
55,7681,hard,cre_Theme_park,"SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  ""walk"" OR  T2.How_to_Get_There  =  ""bus""",What are the details of the markets that can be accessed by walk or bus?,"PRAGMA foreign_keys = ON; CREATE TABLE Ref_Hotel_Star_Ratings ( star_rating_code CHAR(15) NOT NULL, star_rating_description VARCHAR(80), PRIMARY KEY (star_rating_code), UNIQUE (star_rating_code) );   CREATE TABLE Locations ( Location_ID INTEGER NOT NULL, Location_Name VARCHAR(255), Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Location_ID) ); CREATE TABLE Ref_Attraction_Types ( Attraction_Type_Code CHAR(15) NOT NULL, Attraction_Type_Description VARCHAR(255), PRIMARY KEY (Attraction_Type_Code), UNIQUE (Attraction_Type_Code) );  CREATE TABLE Visitors ( Tourist_ID INTEGER NOT NULL, Tourist_Details VARCHAR(255), PRIMARY KEY (Tourist_ID), UNIQUE (Tourist_ID) ); CREATE TABLE Features ( Feature_ID INTEGER NOT NULL, Feature_Details VARCHAR(255), PRIMARY KEY (Feature_ID) );  CREATE TABLE Hotels ( hotel_id INTEGER NOT NULL, star_rating_code CHAR(15) NOT NULL, pets_allowed_yn CHAR(1), price_range real, other_hotel_details VARCHAR(255), PRIMARY KEY (hotel_id), FOREIGN KEY (star_rating_code) REFERENCES Ref_Hotel_Star_Ratings (star_rating_code) );  CREATE TABLE Tourist_Attractions ( Tourist_Attraction_ID INTEGER NOT NULL, Attraction_Type_Code CHAR(15) NOT NULL, Location_ID INTEGER NOT NULL, How_to_Get_There VARCHAR(255), Name VARCHAR(255), Description VARCHAR(255), Opening_Hours VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Tourist_Attraction_ID), FOREIGN KEY (Location_ID) REFERENCES Locations (Location_ID), FOREIGN KEY (Attraction_Type_Code) REFERENCES Ref_Attraction_Types (Attraction_Type_Code) );  CREATE TABLE Street_Markets ( Market_ID INTEGER NOT NULL, Market_Details VARCHAR(255), PRIMARY KEY (Market_ID), FOREIGN KEY (Market_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Shops ( Shop_ID INTEGER NOT NULL, Shop_Details VARCHAR(255), PRIMARY KEY (Shop_ID), FOREIGN KEY (Shop_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Museums ( Museum_ID INTEGER NOT NULL, Museum_Details VARCHAR(255), PRIMARY KEY (Museum_ID), FOREIGN KEY (Museum_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Royal_Family ( Royal_Family_ID INTEGER NOT NULL, Royal_Family_Details VARCHAR(255), PRIMARY KEY (Royal_Family_ID), FOREIGN KEY (Royal_Family_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Theme_Parks ( Theme_Park_ID INTEGER NOT NULL, Theme_Park_Details VARCHAR(255), PRIMARY KEY (Theme_Park_ID), FOREIGN KEY (Theme_Park_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) );   CREATE TABLE Visits ( Visit_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Tourist_ID INTEGER NOT NULL, Visit_Date DATETIME NOT NULL, Visit_Details VARCHAR(40) NOT NULL, PRIMARY KEY (Visit_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID), FOREIGN KEY (Tourist_ID) REFERENCES Visitors (Tourist_ID) );   CREATE TABLE Photos ( Photo_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Name VARCHAR(255), Description VARCHAR(255), Filename VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Photo_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) ); CREATE TABLE Staff ( Staff_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Name VARCHAR(40), Other_Details VARCHAR(255), PRIMARY KEY (Staff_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) );   CREATE TABLE Tourist_Attraction_Features ( Tourist_Attraction_ID INTEGER NOT NULL, Feature_ID INTEGER NOT NULL, PRIMARY KEY (Tourist_Attraction_ID, Feature_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID), FOREIGN KEY (Feature_ID) REFERENCES Features (Feature_ID) ); "
56,1200,hard,geo,SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );,what is the biggest city in the usa,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );"
57,1814,hard,scholar,"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  ""character recognition"" AND t3.year  <  2010;",character recognition papers earlier than 2010,"PRAGMA foreign_keys = ON;    CREATE TABLE `venue` (   `venueId` integer NOT NULL ,  `venueName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`venueId`) );    CREATE TABLE `author` (   `authorId` integer NOT NULL ,  `authorName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`authorId`) );   CREATE TABLE `dataset` (   `datasetId` integer NOT NULL ,  `datasetName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`datasetId`) );   CREATE TABLE `journal` (   `journalId` integer NOT NULL ,  `journalName` varchar(100) DEFAULT NULL ,  PRIMARY KEY (`journalId`) );  CREATE TABLE `keyphrase` (   `keyphraseId` integer NOT NULL ,  `keyphraseName` varchar(50) DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`) );   CREATE TABLE `paper` (   `paperId` integer NOT NULL ,  `title` varchar(300) DEFAULT NULL ,  `venueId` integer DEFAULT NULL ,  `year` integer DEFAULT NULL ,  `numCiting` integer DEFAULT NULL ,  `numCitedBy` integer DEFAULT NULL ,  `journalId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`) ,  FOREIGN KEY(`journalId`) REFERENCES `journal`(`journalId`) ,  FOREIGN KEY(`venueId`) REFERENCES `venue`(`venueId`) );    CREATE TABLE `cite` (   `citingPaperId` integer NOT NULL ,  `citedPaperId` integer NOT NULL ,  PRIMARY KEY (`citingPaperId`,`citedPaperId`) ,  FOREIGN KEY(`citedpaperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`citingpaperId`) REFERENCES `paper`(`paperId`) );   CREATE TABLE `paperDataset` (   `paperId` integer DEFAULT NULL ,  `datasetId` integer DEFAULT NULL ,  PRIMARY KEY (`datasetId`, `paperId`) );    CREATE TABLE `paperKeyphrase` (   `paperId` integer DEFAULT NULL ,  `keyphraseId` integer DEFAULT NULL ,  PRIMARY KEY (`keyphraseId`,`paperId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`keyphraseId`) REFERENCES `keyphrase`(`keyphraseId`) );   CREATE TABLE `writes` (   `paperId` integer DEFAULT NULL ,  `authorId` integer DEFAULT NULL ,  PRIMARY KEY (`paperId`,`authorId`) ,  FOREIGN KEY(`paperId`) REFERENCES `paper`(`paperId`) ,  FOREIGN KEY(`authorId`) REFERENCES `author`(`authorId`) ); "
58,6538,hard,department_store,SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1,Return the id of the department with the fewest staff assignments.,"PRAGMA foreign_keys = ON; CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `address_details` VARCHAR(255) );                   CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `staff_gender` VARCHAR(1), `staff_name` VARCHAR(80) );  CREATE TABLE `Suppliers` ( `supplier_id` INTEGER PRIMARY KEY, `supplier_name` VARCHAR(80), `supplier_phone` VARCHAR(80) );  CREATE TABLE `Department_Store_Chain` ( `dept_store_chain_id` INTEGER PRIMARY KEY, `dept_store_chain_name` VARCHAR(80) );  CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `payment_method_code` VARCHAR(10) NOT NULL, `customer_code` VARCHAR(20), `customer_name` VARCHAR(80), `customer_address` VARCHAR(255), `customer_phone` VARCHAR(80), `customer_email` VARCHAR(80) );                  CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_type_code` VARCHAR(10) NOT NULL, `product_name` VARCHAR(80), `product_price` DECIMAL(19,4) ); CREATE TABLE `Supplier_Addresses` ( `supplier_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_from` DATETIME NOT NULL, `date_to` DATETIME, PRIMARY KEY (`supplier_id`, `address_id`), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`supplier_id` ) REFERENCES `Suppliers`(`supplier_id` ) );  CREATE TABLE `Customer_Addresses` ( `customer_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_from` DATETIME NOT NULL, `date_to` DATETIME, PRIMARY KEY (`customer_id`, `address_id`), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) );   CREATE TABLE `Customer_Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `order_status_code` VARCHAR(10) NOT NULL, `order_date` DATETIME NOT NULL, FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) );  CREATE TABLE `Department_Stores` ( `dept_store_id` INTEGER PRIMARY KEY, `dept_store_chain_id` INTEGER, `store_name` VARCHAR(80), `store_address` VARCHAR(255), `store_phone` VARCHAR(80), `store_email` VARCHAR(80), FOREIGN KEY (`dept_store_chain_id` ) REFERENCES `Department_Store_Chain`(`dept_store_chain_id` ) );                    CREATE TABLE `Departments` ( `department_id` INTEGER PRIMARY KEY, `dept_store_id` INTEGER NOT NULL, `department_name` VARCHAR(80), FOREIGN KEY (`dept_store_id` ) REFERENCES `Department_Stores`(`dept_store_id` ) ); CREATE TABLE `Order_Items` ( `order_item_id` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) ); CREATE TABLE `Product_Suppliers` ( `product_id` INTEGER NOT NULL, `supplier_id` INTEGER NOT NULL, `date_supplied_from` DATETIME NOT NULL, `date_supplied_to` DATETIME, `total_amount_purchased` VARCHAR(80), `total_value_purchased` DECIMAL(19,4), PRIMARY KEY (`product_id`, `supplier_id`), FOREIGN KEY (`supplier_id` ) REFERENCES `Suppliers`(`supplier_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) );   CREATE TABLE `Staff_Department_Assignments` ( `staff_id` INTEGER NOT NULL, `department_id` INTEGER NOT NULL, `date_assigned_from` DATETIME NOT NULL, `job_title_code` VARCHAR(10) NOT NULL, `date_assigned_to` DATETIME, PRIMARY KEY (`staff_id`, `department_id`), FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` ), FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ) );  "
59,6095,hard,club_1,"SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  ""Bootup Baltimore"" AND t3.age  >  18","Count the number of members in club ""Bootup Baltimore"" whose age is above 18.","create table Student (          StuID        INTEGER PRIMARY KEY,          LName        VARCHAR(12),          Fname        VARCHAR(12),          Age      INTEGER,          Sex      VARCHAR(1),          Major        INTEGER,          Advisor      INTEGER,          city_code    VARCHAR(3)   );   create table Club (        ClubID           INTEGER PRIMARY KEY,        ClubName         VARCHAR(40),        ClubDesc         VARCHAR(1024),        ClubLocation VARCHAR(40) );  create table Member_of_club (        StuID            INTEGER,        ClubID           INTEGER,        Position     VARCHAR(40),        FOREIGN KEY(StuID) REFERENCES Student(StuID),        FOREIGN KEY(ClubID) REFERENCES Club(ClubID) );   teach kids and adults about computer basics.', 'AKW'); "
60,636,hard,tvshow,SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey',What are the countries that are not playing cartoons written by Todd Casey?,"PRAGMA foreign_keys=ON; BEGIN TRANSACTION;  CREATE TABLE IF NOT EXISTS ""TV_Channel"" ( ""id"" text, ""series_name"" text, ""Country"" text, ""Language"" text, ""Content"" text, ""Pixel_aspect_ratio_PAR"" text, ""Hight_definition_TV"" text, ""Pay_per_view_PPV"" text, ""Package_Option"" text, PRIMARY KEY (""id"") );  CREATE TABLE IF NOT EXISTS ""TV_series"" ( ""id"" real, ""Episode"" text, ""Air_Date"" text, ""Rating"" text, ""Share"" real, ""18_49_Rating_Share"" text, ""Viewers_m"" text, ""Weekly_Rank"" real, ""Channel"" text, PRIMARY KEY (""id""), FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`) );  CREATE TABLE IF NOT EXISTS ""Cartoon"" ( ""id"" real, ""Title"" text, ""Directed_by"" text, ""Written_by"" text, ""Original_air_date"" text, ""Production_code"" real, ""Channel"" text, PRIMARY KEY (""id""), FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`) );   COMMIT;"
61,6553,hard,department_store,"SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.date_assigned_from LIKE ""2016%""",Return the name and gender of the staff who was assigned in 2016.,"PRAGMA foreign_keys = ON; CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `address_details` VARCHAR(255) );                   CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `staff_gender` VARCHAR(1), `staff_name` VARCHAR(80) );  CREATE TABLE `Suppliers` ( `supplier_id` INTEGER PRIMARY KEY, `supplier_name` VARCHAR(80), `supplier_phone` VARCHAR(80) );  CREATE TABLE `Department_Store_Chain` ( `dept_store_chain_id` INTEGER PRIMARY KEY, `dept_store_chain_name` VARCHAR(80) );  CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `payment_method_code` VARCHAR(10) NOT NULL, `customer_code` VARCHAR(20), `customer_name` VARCHAR(80), `customer_address` VARCHAR(255), `customer_phone` VARCHAR(80), `customer_email` VARCHAR(80) );                  CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_type_code` VARCHAR(10) NOT NULL, `product_name` VARCHAR(80), `product_price` DECIMAL(19,4) ); CREATE TABLE `Supplier_Addresses` ( `supplier_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_from` DATETIME NOT NULL, `date_to` DATETIME, PRIMARY KEY (`supplier_id`, `address_id`), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`supplier_id` ) REFERENCES `Suppliers`(`supplier_id` ) );  CREATE TABLE `Customer_Addresses` ( `customer_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_from` DATETIME NOT NULL, `date_to` DATETIME, PRIMARY KEY (`customer_id`, `address_id`), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) );   CREATE TABLE `Customer_Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `order_status_code` VARCHAR(10) NOT NULL, `order_date` DATETIME NOT NULL, FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) );  CREATE TABLE `Department_Stores` ( `dept_store_id` INTEGER PRIMARY KEY, `dept_store_chain_id` INTEGER, `store_name` VARCHAR(80), `store_address` VARCHAR(255), `store_phone` VARCHAR(80), `store_email` VARCHAR(80), FOREIGN KEY (`dept_store_chain_id` ) REFERENCES `Department_Store_Chain`(`dept_store_chain_id` ) );                    CREATE TABLE `Departments` ( `department_id` INTEGER PRIMARY KEY, `dept_store_id` INTEGER NOT NULL, `department_name` VARCHAR(80), FOREIGN KEY (`dept_store_id` ) REFERENCES `Department_Stores`(`dept_store_id` ) ); CREATE TABLE `Order_Items` ( `order_item_id` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) ); CREATE TABLE `Product_Suppliers` ( `product_id` INTEGER NOT NULL, `supplier_id` INTEGER NOT NULL, `date_supplied_from` DATETIME NOT NULL, `date_supplied_to` DATETIME, `total_amount_purchased` VARCHAR(80), `total_value_purchased` DECIMAL(19,4), PRIMARY KEY (`product_id`, `supplier_id`), FOREIGN KEY (`supplier_id` ) REFERENCES `Suppliers`(`supplier_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) );   CREATE TABLE `Staff_Department_Assignments` ( `staff_id` INTEGER NOT NULL, `department_id` INTEGER NOT NULL, `date_assigned_from` DATETIME NOT NULL, `job_title_code` VARCHAR(10) NOT NULL, `date_assigned_to` DATETIME, PRIMARY KEY (`staff_id`, `department_id`), FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` ), FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ) );  "
62,6836,hard,device,SELECT Shop_Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM stock),List the names of shops that have no devices in stock.,"PRAGMA foreign_keys = ON;  CREATE TABLE ""device"" ( ""Device_ID"" int, ""Device"" text, ""Carrier"" text, ""Package_Version"" text, ""Applications"" text, ""Software_Platform"" text, PRIMARY KEY (""Device_ID"") );  CREATE TABLE ""shop"" ( ""Shop_ID"" int, ""Shop_Name"" text, ""Location"" text, ""Open_Date"" text, ""Open_Year"" int, PRIMARY KEY (""Shop_ID"") );  CREATE TABLE ""stock"" ( ""Shop_ID"" int, ""Device_ID"" int, ""Quantity"" int, PRIMARY KEY (""Shop_ID"",""Device_ID""), FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`), FOREIGN KEY (`Device_ID`) REFERENCES `device`(`Device_ID`) );  "
63,5161,hard,sports_competition,SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC LIMIT 1,List the most common type of competition.," PRAGMA foreign_keys = ON;  CREATE TABLE ""club"" ( ""Club_ID"" int, ""name"" text, ""Region"" text, ""Start_year"" text, PRIMARY KEY (""Club_ID"") );  CREATE TABLE ""club_rank"" ( ""Rank"" real, ""Club_ID"" int, ""Gold"" real, ""Silver"" real, ""Bronze"" real, ""Total"" real, PRIMARY KEY (""Rank"",""Club_ID"") FOREIGN KEY (`Club_ID`) REFERENCES `club`(`Club_ID`) );  CREATE TABLE ""player"" ( ""Player_ID"" int, ""name"" text, ""Position"" text, ""Club_ID"" int, ""Apps"" real, ""Tries"" real, ""Goals"" text, ""Points"" real, PRIMARY KEY (""Player_ID""), FOREIGN KEY (`Club_ID`) REFERENCES `club`(`Club_ID`) );  CREATE TABLE ""competition"" ( ""Competition_ID"" int, ""Year"" real, ""Competition_type"" text, ""Country"" text, PRIMARY KEY (""Competition_ID"") );  CREATE TABLE ""competition_result"" ( ""Competition_ID"" int, ""Club_ID_1"" int, ""Club_ID_2"" int, ""Score"" text, PRIMARY KEY (""Competition_ID"",""Club_ID_1"",""Club_ID_2""), FOREIGN KEY (`Club_ID_1`) REFERENCES `club`(`Club_ID`), FOREIGN KEY (`Club_ID_2`) REFERENCES `club`(`Club_ID`), FOREIGN KEY (`Competition_ID`) REFERENCES `competition`(`Competition_ID`) );   "
64,5082,hard,behavior_monitoring,SELECT last_name FROM Teachers EXCEPT SELECT T1.last_name FROM Teachers AS T1 JOIN Detention AS T2 ON T1.teacher_id  =  T2.teacher_id,Find the last names of teachers who are not involved in any detention.,"PRAGMA foreign_keys = ON; CREATE TABLE `Ref_Address_Types` ( `address_type_code` VARCHAR(15) PRIMARY KEY, `address_type_description` VARCHAR(80) ); CREATE TABLE `Ref_Detention_Type` ( `detention_type_code` VARCHAR(10) PRIMARY KEY, `detention_type_description` VARCHAR(80) ); CREATE TABLE `Ref_Incident_Type` ( `incident_type_code` VARCHAR(10) PRIMARY KEY, `incident_type_description` VARCHAR(80) );  CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `line_1` VARCHAR(120), `line_2` VARCHAR(120), `line_3` VARCHAR(120), `city` VARCHAR(80), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(50), `country` VARCHAR(50), `other_address_details` VARCHAR(255) );  CREATE TABLE `Students` ( `student_id` INTEGER PRIMARY KEY, `address_id` INTEGER NOT NULL, `first_name` VARCHAR(80), `middle_name` VARCHAR(40), `last_name` VARCHAR(40), `cell_mobile_number` VARCHAR(40), `email_address` VARCHAR(40), `date_first_rental` DATETIME, `date_left_university` DATETIME, `other_student_details` VARCHAR(255), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ) );  CREATE TABLE `Teachers` ( `teacher_id` INTEGER PRIMARY KEY, `address_id` INTEGER NOT NULL, `first_name` VARCHAR(80), `middle_name` VARCHAR(80), `last_name` VARCHAR(80), `gender` VARCHAR(1), `cell_mobile_number` VARCHAR(40), `email_address` VARCHAR(40), `other_details` VARCHAR(255), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ) ); CREATE TABLE `Assessment_Notes` ( `notes_id` INTEGER NOT NULL , `student_id` INTEGER, `teacher_id` INTEGER NOT NULL, `date_of_notes` DATETIME, `text_of_notes` VARCHAR(255), `other_details` VARCHAR(255), FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ), FOREIGN KEY (`teacher_id` ) REFERENCES `Teachers`(`teacher_id` ) ); CREATE TABLE `Behavior_Incident` ( `incident_id` INTEGER PRIMARY KEY, `incident_type_code` VARCHAR(10) NOT NULL, `student_id` INTEGER NOT NULL, `date_incident_start` DATETIME, `date_incident_end` DATETIME, `incident_summary` VARCHAR(255), `recommendations` VARCHAR(255), `other_details` VARCHAR(255), FOREIGN KEY (`incident_type_code` ) REFERENCES `Ref_Incident_Type`(`incident_type_code` ), FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ) ); CREATE TABLE `Detention` ( `detention_id` INTEGER PRIMARY KEY, `detention_type_code` VARCHAR(10) NOT NULL, `teacher_id` INTEGER, `datetime_detention_start` DATETIME, `datetime_detention_end` DATETIME, `detention_summary` VARCHAR(255), `other_details` VARCHAR(255), FOREIGN KEY (`detention_type_code` ) REFERENCES `Ref_Detention_Type`(`detention_type_code` ), FOREIGN KEY (`teacher_id` ) REFERENCES `Teachers`(`teacher_id` ) );  CREATE TABLE `Student_Addresses` ( `student_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_address_from` DATETIME NOT NULL, `date_address_to` DATETIME, `monthly_rental` DECIMAL(19,4), `other_details` VARCHAR(255), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ) );  CREATE TABLE `Students_in_Detention` ( `student_id` INTEGER NOT NULL, `detention_id` INTEGER NOT NULL, `incident_id` INTEGER NOT NULL, FOREIGN KEY (`incident_id` ) REFERENCES `Behavior_Incident`(`incident_id` ), FOREIGN KEY (`detention_id` ) REFERENCES `Detention`(`detention_id` ), FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ) );  "
65,4508,hard,movie_1,SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Chris Jackson',Find the titles of all movies not reviewed by Chris Jackson.,"-- dbext:type=SQLITE:dbname=movie_rating.db  /* Delete the tables if they already exist */ drop table if exists Movie; drop table if exists Reviewer; drop table if exists Rating;  /* Create the schema for our tables */ create table Movie( 	mID int primary key,  	title text,  	year int,  	director text ); create table Reviewer( 	rID int primary key,  	name text);  create table Rating( 	rID int,  	mID int,  	stars int,  	ratingDate date, 	FOREIGN KEY (mID) references Movie(mID), 	FOREIGN KEY (rID) references Reviewer(rID) );  /* Populate the tables with our data */ "
66,4994,hard,loan_1,SELECT cust_name FROM customer WHERE acc_type  =  'saving' INTERSECT SELECT cust_name FROM customer WHERE acc_type  =  'checking',Find the name of customers who have both saving and checking account types.,"CREATE TABLE bank ( branch_ID int PRIMARY KEY, bname varchar(20), no_of_customers int, city varchar(10), state varchar(20));   CREATE TABLE customer ( cust_ID varchar(3) PRIMARY KEY, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_ID int, state varchar(20), FOREIGN KEY(branch_ID) REFERENCES bank(branch_ID));   CREATE TABLE loan ( loan_ID varchar(3) PRIMARY KEY, loan_type varchar(15), cust_ID varchar(3), branch_ID varchar(3), amount int, FOREIGN KEY(branch_ID) REFERENCES bank(branch_ID), FOREIGN KEY(Cust_ID) REFERENCES customer(Cust_ID));  "
67,5772,hard,hospital_1,"SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  ""John Wen""",Find the names of procedures which physician John Wen was trained in.,"-- https://en.wikibooks.org/wiki/SQL_Exercises/The_Hospital  DROP TABLE IF EXISTS Physician; CREATE TABLE Physician (   EmployeeID INTEGER NOT NULL,   Name VARCHAR(30) NOT NULL,   Position VARCHAR(30) NOT NULL,   SSN INTEGER NOT NULL,   CONSTRAINT pk_physician PRIMARY KEY(EmployeeID) );   DROP TABLE IF EXISTS Department; CREATE TABLE Department (   DepartmentID INTEGER NOT NULL,   Name VARCHAR(30) NOT NULL,   Head INTEGER NOT NULL,   CONSTRAINT pk_Department PRIMARY KEY(DepartmentID),   CONSTRAINT fk_Department_Physician_EmployeeID FOREIGN KEY(Head) REFERENCES Physician(EmployeeID) );   DROP TABLE IF EXISTS Affiliated_With; CREATE TABLE Affiliated_With (   Physician INTEGER NOT NULL,   Department INTEGER NOT NULL,   PrimaryAffiliation BOOLEAN NOT NULL,   CONSTRAINT fk_Affiliated_With_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),   CONSTRAINT fk_Affiliated_With_Department_DepartmentID FOREIGN KEY(Department) REFERENCES Department(DepartmentID),   PRIMARY KEY(Physician, Department) );  DROP TABLE IF EXISTS Procedures; CREATE TABLE Procedures (   Code INTEGER PRIMARY KEY NOT NULL,   Name VARCHAR(30) NOT NULL,   Cost REAL NOT NULL );  DROP TABLE IF EXISTS Trained_In; CREATE TABLE Trained_In (   Physician INTEGER NOT NULL,   Treatment INTEGER NOT NULL,   CertificationDate DATETIME NOT NULL,   CertificationExpires DATETIME NOT NULL,   CONSTRAINT fk_Trained_In_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),   CONSTRAINT fk_Trained_In_Procedures_Code FOREIGN KEY(Treatment) REFERENCES Procedures(Code),   PRIMARY KEY(Physician, Treatment) );  DROP TABLE IF EXISTS Patient; CREATE TABLE Patient (   SSN INTEGER PRIMARY KEY NOT NULL,   Name VARCHAR(30) NOT NULL,   Address VARCHAR(30) NOT NULL,   Phone VARCHAR(30) NOT NULL,   InsuranceID INTEGER NOT NULL,   PCP INTEGER NOT NULL,   CONSTRAINT fk_Patient_Physician_EmployeeID FOREIGN KEY(PCP) REFERENCES Physician(EmployeeID) );  DROP TABLE IF EXISTS Nurse; CREATE TABLE Nurse (   EmployeeID INTEGER PRIMARY KEY NOT NULL,   Name VARCHAR(30) NOT NULL,   Position VARCHAR(30) NOT NULL,   Registered BOOLEAN NOT NULL,   SSN INTEGER NOT NULL );  DROP TABLE IF EXISTS Appointment; CREATE TABLE Appointment (   AppointmentID INTEGER PRIMARY KEY NOT NULL,   Patient INTEGER NOT NULL,       PrepNurse INTEGER,   Physician INTEGER NOT NULL,   Start DATETIME NOT NULL,   End DATETIME NOT NULL,   ExaminationRoom TEXT NOT NULL,   CONSTRAINT fk_Appointment_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),   CONSTRAINT fk_Appointment_Nurse_EmployeeID FOREIGN KEY(PrepNurse) REFERENCES Nurse(EmployeeID),   CONSTRAINT fk_Appointment_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID) );  DROP TABLE IF EXISTS Medication; CREATE TABLE Medication (   Code INTEGER PRIMARY KEY NOT NULL,   Name VARCHAR(30) NOT NULL,   Brand VARCHAR(30) NOT NULL,   Description VARCHAR(30) NOT NULL );   DROP TABLE IF EXISTS Prescribes; CREATE TABLE Prescribes (   Physician INTEGER NOT NULL,   Patient INTEGER NOT NULL,    Medication INTEGER NOT NULL,    Date DATETIME NOT NULL,   Appointment INTEGER,     Dose VARCHAR(30) NOT NULL,   PRIMARY KEY(Physician, Patient, Medication, Date),   CONSTRAINT fk_Prescribes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),   CONSTRAINT fk_Prescribes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),   CONSTRAINT fk_Prescribes_Medication_Code FOREIGN KEY(Medication) REFERENCES Medication(Code),   CONSTRAINT fk_Prescribes_Appointment_AppointmentID FOREIGN KEY(Appointment) REFERENCES Appointment(AppointmentID) );  DROP TABLE IF EXISTS Block; CREATE TABLE Block (   BlockFloor INTEGER NOT NULL,   BlockCode INTEGER NOT NULL,   PRIMARY KEY(BlockFloor, BlockCode) );   DROP TABLE IF EXISTS Room; CREATE TABLE Room (   RoomNumber INTEGER PRIMARY KEY NOT NULL,   RoomType VARCHAR(30) NOT NULL,   BlockFloor INTEGER NOT NULL,     BlockCode INTEGER NOT NULL,     Unavailable BOOLEAN NOT NULL,   CONSTRAINT fk_Room_Block_PK FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode) );  DROP TABLE IF EXISTS On_Call; CREATE TABLE On_Call (   Nurse INTEGER NOT NULL,   BlockFloor INTEGER NOT NULL,    BlockCode INTEGER NOT NULL,   OnCallStart DATETIME NOT NULL,   OnCallEnd DATETIME NOT NULL,   PRIMARY KEY(Nurse, BlockFloor, BlockCode, OnCallStart, OnCallEnd),   CONSTRAINT fk_OnCall_Nurse_EmployeeID FOREIGN KEY(Nurse) REFERENCES Nurse(EmployeeID),   CONSTRAINT fk_OnCall_Block_Floor FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode)  );  DROP TABLE IF EXISTS Stay; CREATE TABLE Stay (   StayID INTEGER PRIMARY KEY NOT NULL,   Patient INTEGER NOT NULL,   Room INTEGER NOT NULL,   StayStart DATETIME NOT NULL,   StayEnd DATETIME NOT NULL,   CONSTRAINT fk_Stay_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),   CONSTRAINT fk_Stay_Room_Number FOREIGN KEY(Room) REFERENCES Room(RoomNumber) );  DROP TABLE IF EXISTS Undergoes; CREATE TABLE Undergoes (   Patient INTEGER NOT NULL,   Procedures INTEGER NOT NULL,   Stay INTEGER NOT NULL,   DateUndergoes DATETIME NOT NULL,   Physician INTEGER NOT NULL,   AssistingNurse INTEGER,   PRIMARY KEY(Patient, Procedures, Stay, DateUndergoes),   CONSTRAINT fk_Undergoes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),   CONSTRAINT fk_Undergoes_Procedures_Code FOREIGN KEY(Procedures) REFERENCES Procedures(Code),   CONSTRAINT fk_Undergoes_Stay_StayID FOREIGN KEY(Stay) REFERENCES Stay(StayID),   CONSTRAINT fk_Undergoes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),   CONSTRAINT fk_Undergoes_Nurse_EmployeeID FOREIGN KEY(AssistingNurse) REFERENCES Nurse(EmployeeID) );   "
68,281,hard,employee_hire_evaluation,SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation),Find the names of employees who never won any award in the evaluation.," PRAGMA foreign_keys = ON;  CREATE TABLE ""employee"" ( ""Employee_ID"" int, ""Name"" text, ""Age"" int, ""City"" text, PRIMARY KEY (""Employee_ID"") );   CREATE TABLE ""shop"" ( ""Shop_ID"" int, ""Name"" text, ""Location"" text, ""District"" text, ""Number_products"" int, ""Manager_name"" text, PRIMARY KEY (""Shop_ID"") );   CREATE TABLE ""hiring"" ( ""Shop_ID"" int, ""Employee_ID"" int, ""Start_from"" text, ""Is_full_time"" bool, PRIMARY KEY (""Employee_ID""), FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`), FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`) );  CREATE TABLE ""evaluation"" ( ""Employee_ID"" text, ""Year_awarded"" text, ""Bonus"" real, PRIMARY KEY (""Employee_ID"",""Year_awarded""), FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`) );   "
69,4527,hard,movie_1,"SELECT T2.title ,  T1.stars ,  T2.director ,  max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE director != ""null"" GROUP BY director","For each director, what are the titles and ratings for all the movies they reviewed?","-- dbext:type=SQLITE:dbname=movie_rating.db  /* Delete the tables if they already exist */ drop table if exists Movie; drop table if exists Reviewer; drop table if exists Rating;  /* Create the schema for our tables */ create table Movie( 	mID int primary key,  	title text,  	year int,  	director text ); create table Reviewer( 	rID int primary key,  	name text);  create table Rating( 	rID int,  	mID int,  	stars int,  	ratingDate date, 	FOREIGN KEY (mID) references Movie(mID), 	FOREIGN KEY (rID) references Reviewer(rID) );  /* Populate the tables with our data */ "
70,6837,hard,device,SELECT Shop_Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM stock),What are the names of shops that do not have any devices in stock?,"PRAGMA foreign_keys = ON;  CREATE TABLE ""device"" ( ""Device_ID"" int, ""Device"" text, ""Carrier"" text, ""Package_Version"" text, ""Applications"" text, ""Software_Platform"" text, PRIMARY KEY (""Device_ID"") );  CREATE TABLE ""shop"" ( ""Shop_ID"" int, ""Shop_Name"" text, ""Location"" text, ""Open_Date"" text, ""Open_Year"" int, PRIMARY KEY (""Shop_ID"") );  CREATE TABLE ""stock"" ( ""Shop_ID"" int, ""Device_ID"" int, ""Quantity"" int, PRIMARY KEY (""Shop_ID"",""Device_ID""), FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`), FOREIGN KEY (`Device_ID`) REFERENCES `device`(`Device_ID`) );  "
71,1073,hard,geo,SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );,what state is the biggest,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );"
72,1322,hard,geo,SELECT state_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX ( mountain_altitude ) FROM mountain );,where is the highest mountain of the united states,"PRAGMA foreign_keys = ON;  CREATE TABLE `state` (   `state_name` text ,  `population` integer DEFAULT NULL ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `capital` text ,  `density` double DEFAULT NULL ,  PRIMARY KEY (`state_name`) );  CREATE TABLE `city` (   `city_name` text ,  `population` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`city_name`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `border_info` (   `state_name` text ,  `border` text ,  PRIMARY KEY (`border`,`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ,  FOREIGN KEY(`border`) REFERENCES `state`(`state_name`) ); CREATE TABLE `highlow` (   `state_name` text ,  `highest_elevation` text ,  `lowest_point` text ,  `highest_point` text ,  `lowest_elevation` text ,  PRIMARY KEY (`state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `lake` (   `lake_name` text ,  `area` double DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ); CREATE TABLE `mountain` (   `mountain_name` text ,  `mountain_altitude` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `state_name` text ,  PRIMARY KEY (`mountain_name`, `state_name`) ,  FOREIGN KEY(`state_name`) REFERENCES `state`(`state_name`) ); CREATE TABLE `river` (   `river_name` text ,  `length` integer DEFAULT NULL ,  `country_name` varchar(3) NOT NULL DEFAULT '' ,  `traverse` text ,  PRIMARY KEY (`river_name`) ,  FOREIGN KEY(`traverse`) REFERENCES `state`(`state_name`) );"
73,3325,hard,university_basketball,SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1,Return the primary conference of the school with the lowest acc percentage score.,"CREATE TABLE ""basketball_match"" ( ""Team_ID"" int, ""School_ID"" int, ""Team_Name"" text, ""ACC_Regular_Season"" text, ""ACC_Percent"" text, ""ACC_Home"" text, ""ACC_Road"" text, ""All_Games"" text, ""All_Games_Percent"" int, ""All_Home"" text, ""All_Road"" text, ""All_Neutral"" text, PRIMARY KEY (""Team_ID""), FOREIGN KEY (`School_ID`) REFERENCES `university`(`School_ID`) );  CREATE TABLE ""university"" ( ""School_ID"" int, ""School"" text, ""Location"" text, ""Founded"" real, ""Affiliation"" text, ""Enrollment"" real, ""Nickname"" text, ""Primary_conference"" text, PRIMARY KEY (""School_ID"") );  "
74,5719,hard,hospital_1,SELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1,What is the id of the patient who stayed in room 111 most recently?,"-- https://en.wikibooks.org/wiki/SQL_Exercises/The_Hospital  DROP TABLE IF EXISTS Physician; CREATE TABLE Physician (   EmployeeID INTEGER NOT NULL,   Name VARCHAR(30) NOT NULL,   Position VARCHAR(30) NOT NULL,   SSN INTEGER NOT NULL,   CONSTRAINT pk_physician PRIMARY KEY(EmployeeID) );   DROP TABLE IF EXISTS Department; CREATE TABLE Department (   DepartmentID INTEGER NOT NULL,   Name VARCHAR(30) NOT NULL,   Head INTEGER NOT NULL,   CONSTRAINT pk_Department PRIMARY KEY(DepartmentID),   CONSTRAINT fk_Department_Physician_EmployeeID FOREIGN KEY(Head) REFERENCES Physician(EmployeeID) );   DROP TABLE IF EXISTS Affiliated_With; CREATE TABLE Affiliated_With (   Physician INTEGER NOT NULL,   Department INTEGER NOT NULL,   PrimaryAffiliation BOOLEAN NOT NULL,   CONSTRAINT fk_Affiliated_With_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),   CONSTRAINT fk_Affiliated_With_Department_DepartmentID FOREIGN KEY(Department) REFERENCES Department(DepartmentID),   PRIMARY KEY(Physician, Department) );  DROP TABLE IF EXISTS Procedures; CREATE TABLE Procedures (   Code INTEGER PRIMARY KEY NOT NULL,   Name VARCHAR(30) NOT NULL,   Cost REAL NOT NULL );  DROP TABLE IF EXISTS Trained_In; CREATE TABLE Trained_In (   Physician INTEGER NOT NULL,   Treatment INTEGER NOT NULL,   CertificationDate DATETIME NOT NULL,   CertificationExpires DATETIME NOT NULL,   CONSTRAINT fk_Trained_In_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),   CONSTRAINT fk_Trained_In_Procedures_Code FOREIGN KEY(Treatment) REFERENCES Procedures(Code),   PRIMARY KEY(Physician, Treatment) );  DROP TABLE IF EXISTS Patient; CREATE TABLE Patient (   SSN INTEGER PRIMARY KEY NOT NULL,   Name VARCHAR(30) NOT NULL,   Address VARCHAR(30) NOT NULL,   Phone VARCHAR(30) NOT NULL,   InsuranceID INTEGER NOT NULL,   PCP INTEGER NOT NULL,   CONSTRAINT fk_Patient_Physician_EmployeeID FOREIGN KEY(PCP) REFERENCES Physician(EmployeeID) );  DROP TABLE IF EXISTS Nurse; CREATE TABLE Nurse (   EmployeeID INTEGER PRIMARY KEY NOT NULL,   Name VARCHAR(30) NOT NULL,   Position VARCHAR(30) NOT NULL,   Registered BOOLEAN NOT NULL,   SSN INTEGER NOT NULL );  DROP TABLE IF EXISTS Appointment; CREATE TABLE Appointment (   AppointmentID INTEGER PRIMARY KEY NOT NULL,   Patient INTEGER NOT NULL,       PrepNurse INTEGER,   Physician INTEGER NOT NULL,   Start DATETIME NOT NULL,   End DATETIME NOT NULL,   ExaminationRoom TEXT NOT NULL,   CONSTRAINT fk_Appointment_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),   CONSTRAINT fk_Appointment_Nurse_EmployeeID FOREIGN KEY(PrepNurse) REFERENCES Nurse(EmployeeID),   CONSTRAINT fk_Appointment_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID) );  DROP TABLE IF EXISTS Medication; CREATE TABLE Medication (   Code INTEGER PRIMARY KEY NOT NULL,   Name VARCHAR(30) NOT NULL,   Brand VARCHAR(30) NOT NULL,   Description VARCHAR(30) NOT NULL );   DROP TABLE IF EXISTS Prescribes; CREATE TABLE Prescribes (   Physician INTEGER NOT NULL,   Patient INTEGER NOT NULL,    Medication INTEGER NOT NULL,    Date DATETIME NOT NULL,   Appointment INTEGER,     Dose VARCHAR(30) NOT NULL,   PRIMARY KEY(Physician, Patient, Medication, Date),   CONSTRAINT fk_Prescribes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),   CONSTRAINT fk_Prescribes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),   CONSTRAINT fk_Prescribes_Medication_Code FOREIGN KEY(Medication) REFERENCES Medication(Code),   CONSTRAINT fk_Prescribes_Appointment_AppointmentID FOREIGN KEY(Appointment) REFERENCES Appointment(AppointmentID) );  DROP TABLE IF EXISTS Block; CREATE TABLE Block (   BlockFloor INTEGER NOT NULL,   BlockCode INTEGER NOT NULL,   PRIMARY KEY(BlockFloor, BlockCode) );   DROP TABLE IF EXISTS Room; CREATE TABLE Room (   RoomNumber INTEGER PRIMARY KEY NOT NULL,   RoomType VARCHAR(30) NOT NULL,   BlockFloor INTEGER NOT NULL,     BlockCode INTEGER NOT NULL,     Unavailable BOOLEAN NOT NULL,   CONSTRAINT fk_Room_Block_PK FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode) );  DROP TABLE IF EXISTS On_Call; CREATE TABLE On_Call (   Nurse INTEGER NOT NULL,   BlockFloor INTEGER NOT NULL,    BlockCode INTEGER NOT NULL,   OnCallStart DATETIME NOT NULL,   OnCallEnd DATETIME NOT NULL,   PRIMARY KEY(Nurse, BlockFloor, BlockCode, OnCallStart, OnCallEnd),   CONSTRAINT fk_OnCall_Nurse_EmployeeID FOREIGN KEY(Nurse) REFERENCES Nurse(EmployeeID),   CONSTRAINT fk_OnCall_Block_Floor FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode)  );  DROP TABLE IF EXISTS Stay; CREATE TABLE Stay (   StayID INTEGER PRIMARY KEY NOT NULL,   Patient INTEGER NOT NULL,   Room INTEGER NOT NULL,   StayStart DATETIME NOT NULL,   StayEnd DATETIME NOT NULL,   CONSTRAINT fk_Stay_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),   CONSTRAINT fk_Stay_Room_Number FOREIGN KEY(Room) REFERENCES Room(RoomNumber) );  DROP TABLE IF EXISTS Undergoes; CREATE TABLE Undergoes (   Patient INTEGER NOT NULL,   Procedures INTEGER NOT NULL,   Stay INTEGER NOT NULL,   DateUndergoes DATETIME NOT NULL,   Physician INTEGER NOT NULL,   AssistingNurse INTEGER,   PRIMARY KEY(Patient, Procedures, Stay, DateUndergoes),   CONSTRAINT fk_Undergoes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN),   CONSTRAINT fk_Undergoes_Procedures_Code FOREIGN KEY(Procedures) REFERENCES Procedures(Code),   CONSTRAINT fk_Undergoes_Stay_StayID FOREIGN KEY(Stay) REFERENCES Stay(StayID),   CONSTRAINT fk_Undergoes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID),   CONSTRAINT fk_Undergoes_Nurse_EmployeeID FOREIGN KEY(AssistingNurse) REFERENCES Nurse(EmployeeID) );   "
75,10,medium,concert_singer,"SELECT country ,  count(*) FROM singer GROUP BY country",Show all countries and the number of singers in each country.,"PRAGMA foreign_keys = ON;   CREATE TABLE ""stadium"" ( ""Stadium_ID"" int, ""Location"" text, ""Name"" text, ""Capacity"" int, ""Highest"" int, ""Lowest"" int, ""Average"" int, PRIMARY KEY (""Stadium_ID"") );   CREATE TABLE ""singer"" ( ""Singer_ID"" int, ""Name"" text, ""Country"" text, ""Song_Name"" text, ""Song_release_year"" text, ""Age"" int, ""Is_male"" bool, PRIMARY KEY (""Singer_ID"") );    CREATE TABLE ""concert"" ( ""concert_ID"" int, ""concert_Name"" text, ""Theme"" text, ""Stadium_ID"" text, ""Year"" text, PRIMARY KEY (""concert_ID""), FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"") );    CREATE TABLE ""singer_in_concert"" ( ""concert_ID"" int, ""Singer_ID"" text, PRIMARY KEY (""concert_ID"",""Singer_ID""), FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""), FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"") );  "
76,4400,medium,csu_1,"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2004 AND T2.campus  =  ""San Francisco State University""","How many faculty lines are there in ""San Francisco State University"" in year 2004?","CREATE TABLE ""Campuses"" ( 	""Id"" INTEGER PRIMARY KEY,  	""Campus"" TEXT,  	""Location"" TEXT,  	""County"" TEXT,  	""Year"" INTEGER  );  CREATE TABLE ""csu_fees"" (  	""Campus"" INTEGER PRIMARY KEY,  	""Year"" INTEGER,  	""CampusFee"" INTEGER, 	FOREIGN KEY (Campus) REFERENCES Campuses(Id) );  CREATE TABLE ""degrees"" (  	""Year"" INTEGER, 	""Campus"" INTEGER,  	""Degrees"" INTEGER, 	PRIMARY KEY (Year, Campus), 	FOREIGN KEY (Campus) REFERENCES Campuses(Id) );    CREATE TABLE ""discipline_enrollments"" (  	""Campus"" INTEGER,  	""Discipline"" INTEGER,  	""Year"" INTEGER,  	""Undergraduate"" INTEGER,  	""Graduate"" INTEGER, 	PRIMARY KEY (Campus, Discipline), 	FOREIGN KEY (Campus) REFERENCES Campuses(Id) );    CREATE TABLE ""enrollments"" (  	""Campus"" INTEGER,  	""Year"" INTEGER,  	""TotalEnrollment_AY"" INTEGER,  	""FTE_AY"" INTEGER, 	PRIMARY KEY(Campus, Year), 	FOREIGN KEY (Campus) REFERENCES Campuses(Id) );  CREATE TABLE ""faculty"" (  	""Campus"" INTEGER,  	""Year"" INTEGER,  	""Faculty"" REAL, 	FOREIGN KEY (Campus) REFERENCES Campuses(Id)  );  "
77,4201,medium,formula_1,"SELECT forename ,  surname FROM drivers WHERE nationality = ""German""",Find the forename and surname of drivers whose nationality is German?,"BEGIN TRANSACTION; CREATE TABLE IF NOT EXISTS ""circuits"" ( ""circuitId"" INTEGER PRIMARY KEY,   ""circuitRef"" TEXT,   ""name"" TEXT,   ""location"" TEXT,   ""country"" TEXT,   ""lat"" REAL,   ""lng"" REAL,   ""alt"" INTEGER,   ""url"" TEXT ); CREATE TABLE IF NOT EXISTS ""races"" ( ""raceId"" INTEGER PRIMARY KEY,   ""year"" INTEGER,   ""round"" INTEGER,   ""circuitId"" INTEGER,   ""name"" TEXT,   ""date"" TEXT,   ""time"" TEXT,   ""url"" TEXT,   FOREIGN KEY (""circuitId"") REFERENCES ""circuits""(""circuitId"") );  CREATE TABLE IF NOT EXISTS ""drivers"" ( ""driverId"" INTEGER PRIMARY KEY,   ""driverRef"" TEXT,   ""number"" INTEGER,   ""code"" TEXT,   ""forename"" TEXT,   ""surname"" TEXT,   ""dob"" TEXT,   ""nationality"" TEXT,   ""url"" TEXT ); CREATE TABLE IF NOT EXISTS ""status"" ( ""statusId"" INTEGER PRIMARY KEY,   ""status"" TEXT ); CREATE TABLE IF NOT EXISTS ""seasons"" ( ""year"" INTEGER PRIMARY KEY,   ""url"" TEXT ); CREATE TABLE IF NOT EXISTS ""constructors"" ( 	""constructorId"" INTEGER PRIMARY KEY,   ""constructorRef"" TEXT,   ""name"" TEXT,   ""nationality"" TEXT,   ""url"" TEXT ); CREATE TABLE IF NOT EXISTS ""constructorStandings"" ( 	""constructorStandingsId"" INTEGER PRIMARY KEY,   ""raceId"" INTEGER,   ""constructorId"" INTEGER,   ""points"" REAL,   ""position"" INTEGER,   ""positionText"" TEXT,   ""wins"" INTEGER,   FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),   FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId"") ); CREATE TABLE IF NOT EXISTS ""results"" ( ""resultId"" INTEGER PRIMARY KEY,   ""raceId"" INTEGER,   ""driverId"" INTEGER,   ""constructorId"" INTEGER,   ""number"" INTEGER,   ""grid"" INTEGER,   ""position"" INTEGER,   ""positionText"" TEXT,   ""positionOrder"" INTEGER,   ""points"" REAL,   ""laps"" INTEGER,   ""time"" TEXT,   ""milliseconds"" INTEGER,   ""fastestLap"" INTEGER,   ""rank"" INTEGER,   ""fastestLapTime"" TEXT,   ""fastestLapSpeed"" TEXT,   ""statusId"" INTEGER,   FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),   FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),   FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId"") ); CREATE TABLE IF NOT EXISTS ""driverStandings"" ( ""driverStandingsId"" INTEGER PRIMARY KEY,   ""raceId"" INTEGER,   ""driverId"" INTEGER,   ""points"" REAL,   ""position"" INTEGER,   ""positionText"" TEXT,   ""wins"" INTEGER,   FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),   FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId"") ); CREATE TABLE IF NOT EXISTS ""constructorResults"" ( ""constructorResultsId"" INTEGER PRIMARY KEY,   ""raceId"" INTEGER,   ""constructorId"" INTEGER,   ""points"" REAL,   ""status"" REAL,   FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),   FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId"") ); CREATE TABLE IF NOT EXISTS ""qualifying"" ( ""qualifyId"" INTEGER PRIMARY KEY,   ""raceId"" INTEGER,   ""driverId"" INTEGER,   ""constructorId"" INTEGER,   ""number"" INTEGER,   ""position"" INTEGER,   ""q1"" TEXT,   ""q2"" TEXT,   ""q3"" TEXT,   FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),   FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),   FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId"") ); CREATE TABLE IF NOT EXISTS ""pitStops"" ( ""raceId"" INTEGER,   ""driverId"" INTEGER,   ""stop"" INTEGER,   ""lap"" INTEGER,   ""time"" TEXT,   ""duration"" TEXT,   ""milliseconds"" INTEGER,   PRIMARY KEY (""raceId"", ""driverId"", ""stop""),   FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),   FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId"") ); CREATE TABLE IF NOT EXISTS ""lapTimes"" ( ""raceId"" INTEGER,   ""driverId"" INTEGER,   ""lap"" INTEGER,   ""position"" INTEGER,   ""time"" TEXT,   ""milliseconds"" INTEGER,   PRIMARY KEY(""raceId"", ""driverId"", ""lap""),   FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),   FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId"") );COMMIT;"
78,8453,medium,activity_1,"SELECT building FROM Faculty WHERE rank  =  ""Professor"" GROUP BY building HAVING count(*)  >=  10",Show all the buildings that have at least 10 professors.,"create table Activity (   actid INTEGER PRIMARY KEY,   activity_name varchar(25) );  create table Participates_in (   stuid INTEGER,   actid INTEGER,   FOREIGN KEY(stuid) REFERENCES Student(StuID),   FOREIGN KEY(actid) REFERENCES Activity(actid) );  create table Faculty_Participates_in (   FacID INTEGER,   actid INTEGER,   FOREIGN KEY(FacID) REFERENCES Faculty(FacID),   FOREIGN KEY(actid) REFERENCES Activity(actid) );  create table Student (         StuID        INTEGER PRIMARY KEY,         LName        VARCHAR(12),         Fname        VARCHAR(12),         Age      INTEGER,         Sex      VARCHAR(1),         Major        INTEGER,         Advisor      INTEGER,         city_code    VARCHAR(3)  );  create table Faculty (        FacID 	       INTEGER PRIMARY KEY,        Lname		VARCHAR(15),        Fname		VARCHAR(15),        Rank		VARCHAR(15),        Sex		VARCHAR(1),        Phone		INTEGER,        Room		VARCHAR(5),        Building		VARCHAR(13) );   "
79,6646,medium,local_govt_and_lot,SELECT count(DISTINCT T2.Location_Code) FROM Things AS T1 JOIN Timed_Locations_of_Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.service_details  =  'Unsatisfied',How many distinct locations have the things with service detail 'Unsatisfied' been located in?,"PRAGMA foreign_keys = ON;  CREATE TABLE Customers ( customer_id INTEGER NOT NULL, customer_details VARCHAR(255), PRIMARY KEY (customer_id) ); CREATE TABLE Properties ( property_id INTEGER NOT NULL, property_type_code CHAR(15) NOT NULL, property_address VARCHAR(255), other_details VARCHAR(255), PRIMARY KEY (property_id) ); CREATE TABLE Residents ( resident_id INTEGER NOT NULL, property_id INTEGER NOT NULL, date_moved_in DATETIME NOT NULL, date_moved_out DATETIME NOT NULL, other_details VARCHAR(255), PRIMARY KEY (resident_id, property_id, date_moved_in), FOREIGN KEY (property_id) REFERENCES Properties (property_id) );  CREATE TABLE Organizations ( organization_id INTEGER NOT NULL, parent_organization_id INTEGER, organization_details VARCHAR(255), PRIMARY KEY (organization_id) );  CREATE TABLE Services ( service_id INTEGER NOT NULL, organization_id INTEGER NOT NULL, service_type_code CHAR(15) NOT NULL, service_details VARCHAR(255), PRIMARY KEY (service_id), FOREIGN KEY (organization_id) REFERENCES Organizations (organization_id) ); CREATE TABLE Residents_Services ( resident_id INTEGER NOT NULL, service_id INTEGER NOT NULL, date_moved_in DATETIME, property_id INTEGER, date_requested DATETIME, date_provided DATETIME, other_details VARCHAR(255), PRIMARY KEY (resident_id, service_id), FOREIGN KEY (service_id) REFERENCES Services (service_id), FOREIGN KEY (resident_id, property_id, date_moved_in) REFERENCES Residents (resident_id,property_id,date_moved_in) );  CREATE TABLE Things ( thing_id INTEGER NOT NULL, organization_id INTEGER NOT NULL, Type_of_Thing_Code CHAR(15) NOT NULL, service_type_code CHAR(10) NOT NULL, service_details VARCHAR(255), PRIMARY KEY (thing_id), FOREIGN KEY (organization_id) REFERENCES Organizations (organization_id) ); CREATE TABLE Customer_Events ( Customer_Event_ID INTEGER NOT NULL, customer_id INTEGER, date_moved_in DATETIME, property_id INTEGER, resident_id INTEGER, thing_id INTEGER NOT NULL, PRIMARY KEY (Customer_Event_ID), FOREIGN KEY (thing_id) REFERENCES Things (thing_id), FOREIGN KEY (customer_id) REFERENCES Customers (customer_id), FOREIGN KEY (resident_id, property_id, date_moved_in) REFERENCES Residents (resident_id,property_id,date_moved_in) ); CREATE TABLE Customer_Event_Notes ( Customer_Event_Note_ID INTEGER NOT NULL, Customer_Event_ID INTEGER NOT NULL, service_type_code CHAR(15) NOT NULL, resident_id INTEGER NOT NULL, property_id INTEGER NOT NULL, date_moved_in DATETIME NOT NULL, PRIMARY KEY (Customer_Event_Note_ID), FOREIGN KEY (Customer_Event_ID) REFERENCES Customer_Events (Customer_Event_ID) );  CREATE TABLE Timed_Status_of_Things ( thing_id INTEGER NOT NULL, Date_and_Date DATETIME NOT NULL, Status_of_Thing_Code CHAR(15) NOT NULL, PRIMARY KEY (thing_id, Date_and_Date, Status_of_Thing_Code), FOREIGN KEY (thing_id) REFERENCES Things (thing_id) ); CREATE TABLE Timed_Locations_of_Things ( thing_id INTEGER NOT NULL, Date_and_Time DATETIME NOT NULL, Location_Code CHAR(15) NOT NULL, PRIMARY KEY (thing_id, Date_and_Time, Location_Code), FOREIGN KEY (thing_id) REFERENCES Things (thing_id));   "
80,698,medium,orchestra,"SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != ""Live final""","Return the maximum and minimum shares for performances that do not have the type ""Live final""."," PRAGMA foreign_keys = ON;    CREATE TABLE ""conductor"" ( ""Conductor_ID"" int, ""Name"" text, ""Age"" int, ""Nationality"" text, ""Year_of_Work"" int, PRIMARY KEY (""Conductor_ID"") );  CREATE TABLE ""orchestra"" ( ""Orchestra_ID"" int, ""Orchestra"" text, ""Conductor_ID"" int, ""Record_Company"" text, ""Year_of_Founded"" real, ""Major_Record_Format"" text, PRIMARY KEY (""Orchestra_ID""), FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`) );  CREATE TABLE ""performance"" ( ""Performance_ID"" int, ""Orchestra_ID"" int, ""Type"" text, ""Date"" text, ""Official_ratings_(millions)"" real, ""Weekly_rank"" text, ""Share"" text, PRIMARY KEY (""Performance_ID""), FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`) );  CREATE TABLE ""show"" ( ""Show_ID"" int, ""Performance_ID"" int, ""If_first_show"" bool, ""Result"" text, ""Attendance"" real, FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`) );    "
81,6285,medium,decoration_competition,"SELECT Leader_Name ,  College_Location FROM college",Show the leader names and locations of colleges.,"PRAGMA foreign_keys = ON;  CREATE TABLE ""college"" ( ""College_ID"" int, ""Name"" text, ""Leader_Name"" text, ""College_Location"" text, PRIMARY KEY (""College_ID"") );    CREATE TABLE ""member"" ( ""Member_ID"" int, ""Name"" text, ""Country"" text, ""College_ID"" int, PRIMARY KEY (""Member_ID""), FOREIGN KEY (""College_ID"") REFERENCES `college`(""College_ID"") );   CREATE TABLE ""round"" ( ""Round_ID"" int, ""Member_ID"" int, ""Decoration_Theme"" text, ""Rank_in_Round"" int, PRIMARY KEY (""Member_ID"",""Round_ID""), FOREIGN KEY (""Member_ID"") REFERENCES ""member""(""Member_ID"") );   "
82,5004,medium,loan_1,SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1,Find the branch name of the bank that has the most number of customers.,"CREATE TABLE bank ( branch_ID int PRIMARY KEY, bname varchar(20), no_of_customers int, city varchar(10), state varchar(20));   CREATE TABLE customer ( cust_ID varchar(3) PRIMARY KEY, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_ID int, state varchar(20), FOREIGN KEY(branch_ID) REFERENCES bank(branch_ID));   CREATE TABLE loan ( loan_ID varchar(3) PRIMARY KEY, loan_type varchar(15), cust_ID varchar(3), branch_ID varchar(3), amount int, FOREIGN KEY(branch_ID) REFERENCES bank(branch_ID), FOREIGN KEY(Cust_ID) REFERENCES customer(Cust_ID));  "
83,2931,medium,flight_1,SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3,What are the numbers of the shortest flights?,"-- drop table flight cascade constraints; -- drop table aircraft cascade constraints; -- drop table employee cascade constraints; -- drop table certificate cascade constraints;  create table flight( 	flno number(4,0) primary key, 	origin varchar2(20), 	destination varchar2(20), 	distance number(6,0), 	departure_date date, 	arrival_date date, 	price number(7,2),     aid number(9,0),     foreign key(""aid"") references `aircraft`(""aid""));  create table aircraft( 	aid number(9,0) primary key, 	name varchar2(30), 	distance number(6,0));  create table employee( 	eid number(9,0) primary key, 	name varchar2(30), 	salary number(10,2));  create table certificate( 	eid number(9,0), 	aid number(9,0), 	primary key(eid,aid), 	foreign key(""eid"") references `employee`(""eid""), 	foreign key(""aid"") references `aircraft`(""aid""));   "
84,7737,medium,game_1,"SELECT gtype ,  count(*) FROM Video_games GROUP BY gtype",Show all video game types and the number of video games in each type.,"create table Student (         StuID        INTEGER PRIMARY KEY,         LName        VARCHAR(12),         Fname        VARCHAR(12),         Age      INTEGER,         Sex      VARCHAR(1),         Major        INTEGER,         Advisor      INTEGER,         city_code    VARCHAR(3)  );  create table Video_Games (        GameID           INTEGER PRIMARY KEY,        GName            VARCHAR(40),        GType            VARCHAR(40) );  create table Plays_Games (        StuID                INTEGER,        GameID            INTEGER,        Hours_Played      INTEGER,        FOREIGN KEY(GameID) REFERENCES Video_Games(GameID),        FOREIGN KEY(StuID) REFERENCES Student(StuID) );  create table SportsInfo (   StuID INTEGER,   SportName VARCHAR(32),   HoursPerWeek INTEGER,   GamesPlayed INTEGER,   OnScholarship VARCHAR(1),   FOREIGN KEY(StuID) REFERENCES Student(StuID) );   "
85,4528,medium,movie_1,"SELECT T2.title ,  T1.rID ,  T1.stars ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.rID",Find the title and star rating of the movie that got the least rating star for each reviewer.,"-- dbext:type=SQLITE:dbname=movie_rating.db  /* Delete the tables if they already exist */ drop table if exists Movie; drop table if exists Reviewer; drop table if exists Rating;  /* Create the schema for our tables */ create table Movie( 	mID int primary key,  	title text,  	year int,  	director text ); create table Reviewer( 	rID int primary key,  	name text);  create table Rating( 	rID int,  	mID int,  	stars int,  	ratingDate date, 	FOREIGN KEY (mID) references Movie(mID), 	FOREIGN KEY (rID) references Reviewer(rID) );  /* Populate the tables with our data */ "
86,3375,medium,phone_1,"SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE t2.Company_name  =  ""Nokia Corporation"" AND T1.Type != ""Text"";","List the hardware model name for the phons that were produced by ""Nokia Corporation"" but whose screen mode type is not Text.","PRAGMA foreign_keys=ON; BEGIN TRANSACTION; CREATE TABLE IF NOT EXISTS ""chip_model"" ( ""Model_name"" text, ""Launch_year"" real, ""RAM_MiB"" real, ""ROM_MiB"" real, ""Slots"" text, ""WiFi"" text, ""Bluetooth"" text, PRIMARY KEY (""Model_name"") ); CREATE TABLE IF NOT EXISTS ""screen_mode"" ( ""Graphics_mode"" real, ""Char_cells"" text, ""Pixels"" text, ""Hardware_colours"" real, ""used_kb"" real, ""map"" text, ""Type"" text, PRIMARY KEY (""Graphics_mode"") ); CREATE TABLE IF NOT EXISTS ""phone"" ( ""Company_name"" text, ""Hardware_Model_name"" text, ""Accreditation_type"" text, ""Accreditation_level"" text, ""Date"" text, ""chip_model"" text, ""screen_mode"" text, PRIMARY KEY(""Hardware_Model_name""), FOREIGN KEY (`screen_mode`) REFERENCES `screen_mode`(`Graphics_mode`), FOREIGN KEY (`chip_model`) REFERENCES `chip_model`(`Model_name`) ); COMMIT;"
87,7069,medium,manufactory_1,"SELECT count(DISTINCT T1.name) ,  T2.Headquarter FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.Headquarter",How many different products are produced in each headquarter city?,"-- LINK: https://en.wikibooks.org/wiki/SQL_Exercises/The_computer_store  CREATE TABLE Manufacturers (   Code INTEGER,   Name VARCHAR(255) NOT NULL,   Headquarter VARCHAR(255) NOT NULL,   Founder VARCHAR(255) NOT NULL,   Revenue REAL,   PRIMARY KEY (Code)    );  CREATE TABLE Products (   Code INTEGER,   Name VARCHAR(255) NOT NULL ,   Price DECIMAL NOT NULL ,   Manufacturer INTEGER NOT NULL,   PRIMARY KEY (Code),    FOREIGN KEY (Manufacturer) REFERENCES Manufacturers(Code) );  "
88,2174,medium,academic,"SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  ""PVLDB"";",return me the papers on PVLDB .,"PRAGMA foreign_keys = ON; CREATE TABLE ""author"" ( ""aid"" int, ""homepage"" text, ""name"" text, ""oid"" int, primary key(""aid"") ); CREATE TABLE ""conference"" ( ""cid"" int, ""homepage"" text, ""name"" text, primary key (""cid"") ); CREATE TABLE ""domain"" ( ""did"" int, ""name"" text, primary key (""did"") ); CREATE TABLE ""domain_author"" ( ""aid"" int,  ""did"" int, primary key (""did"", ""aid""), foreign key(""aid"") references `author`(""aid""), foreign key(""did"") references `domain`(""did"") );  CREATE TABLE ""domain_conference"" ( ""cid"" int, ""did"" int, primary key (""did"", ""cid""), foreign key(""cid"") references `conference`(""cid""), foreign key(""did"") references `domain`(""did"") ); CREATE TABLE ""journal"" ( ""homepage"" text, ""jid"" int, ""name"" text, primary key(""jid"") ); CREATE TABLE ""domain_journal"" ( ""did"" int, ""jid"" int, primary key (""did"", ""jid""), foreign key(""jid"") references ""journal""(""jid""), foreign key(""did"") references ""domain""(""did"") ); CREATE TABLE ""keyword"" ( ""keyword"" text, ""kid"" int, primary key(""kid"") ); CREATE TABLE ""domain_keyword"" ( ""did"" int, ""kid"" int, primary key (""did"", ""kid""), foreign key(""kid"") references ""keyword""(""kid""), foreign key(""did"") references ""domain""(""did"") ); CREATE TABLE ""publication"" ( ""abstract"" text, ""cid"" text, ""citation_num"" int, ""jid"" int, ""pid"" int, ""reference_num"" int, ""title"" text, ""year"" int, primary key(""pid""), foreign key(""jid"") references ""journal""(""jid""), foreign key(""cid"") references ""conference""(""cid"") ); CREATE TABLE ""domain_publication"" ( ""did"" int, ""pid"" int, primary key (""did"", ""pid""), foreign key(""pid"") references ""publication""(""pid""), foreign key(""did"") references ""domain""(""did"") );  CREATE TABLE ""organization"" ( ""continent"" text, ""homepage"" text, ""name"" text, ""oid"" int, primary key(""oid"") );  CREATE TABLE ""publication_keyword"" ( ""pid"" int, ""kid"" int, primary key (""kid"", ""pid""), foreign key(""pid"") references ""publication""(""pid""), foreign key(""kid"") references ""keyword""(""kid"") ); CREATE TABLE ""writes"" ( ""aid"" int, ""pid"" int, primary key (""aid"", ""pid""), foreign key(""pid"") references ""publication""(""pid""), foreign key(""aid"") references ""author""(""aid"") ); CREATE TABLE ""cite"" ( ""cited"" int, ""citing""  int, foreign key(""cited"") references ""publication""(""pid""), foreign key(""citing"") references ""publication""(""pid"") );"
89,2780,medium,book_2,"SELECT T1.Title ,  T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID",Show the title and publication dates of books.,"PRAGMA foreign_keys = ON;  CREATE TABLE ""publication"" ( ""Publication_ID"" int, ""Book_ID"" int, ""Publisher"" text, ""Publication_Date"" text, ""Price"" real, PRIMARY KEY (""Publication_ID""), FOREIGN KEY (""Book_ID"") REFERENCES ""book""(""Book_ID"") );  CREATE TABLE ""book"" ( ""Book_ID"" int, ""Title"" text, ""Issues"" real, ""Writer"" text, PRIMARY KEY (""Book_ID"") );   "
90,8096,medium,flight_company,"SELECT count(*) ,  country FROM airport GROUP BY country",how many airports are there in each country?,"PRAGMA foreign_keys = ON;  CREATE TABLE ""airport"" ( ""id"" int, ""City"" text, ""Country"" text, ""IATA"" text, ""ICAO"" text, ""name"" text, primary key(""id"") );   CREATE TABLE ""operate_company"" ( ""id"" int, ""name"" text, ""Type"" text, ""Principal_activities"" text, ""Incorporated_in"" text, ""Group_Equity_Shareholding"" real, primary key (""id"") );  CREATE TABLE ""flight"" ( ""id"" int, ""Vehicle_Flight_number"" text, ""Date"" text, ""Pilot"" text, ""Velocity"" real, ""Altitude"" real, ""airport_id"" int, ""company_id"" int, primary key (""id""), foreign key (""airport_id"") references `airport`(""id""), foreign key (""company_id"") references `operate_company`(""id"") );    "
91,4688,medium,party_host,"SELECT Party_Theme ,  LOCATION FROM party",What are the themes and locations of parties?," PRAGMA foreign_keys = ON;  CREATE TABLE ""party"" ( ""Party_ID"" int, ""Party_Theme"" text, ""Location"" text, ""First_year"" text, ""Last_year"" text, ""Number_of_hosts"" int, PRIMARY KEY (""Party_ID"") );  CREATE TABLE ""host"" ( ""Host_ID"" int, ""Name"" text, ""Nationality"" text, ""Age"" text, PRIMARY KEY (""Host_ID"") );  CREATE TABLE ""party_host"" ( ""Party_ID"" int, ""Host_ID"" int, ""Is_Main_in_Charge"" bool, PRIMARY KEY (""Party_ID"",""Host_ID""), FOREIGN KEY (""Host_ID"") REFERENCES `host`(""Host_ID""), FOREIGN KEY (""Party_ID"") REFERENCES `party`(""Party_ID"") );  "
92,8137,medium,cre_Docs_and_Epenses,"SELECT T1.statement_details ,  T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id  =  T2.document_id WHERE T1.statement_details  =  'Private Project'",Show the statement detail and the corresponding document name for the statement with detail 'Private Project'.,"PRAGMA foreign_keys = ON;  CREATE TABLE Ref_Document_Types ( Document_Type_Code CHAR(15) NOT NULL, Document_Type_Name VARCHAR(255) NOT NULL, Document_Type_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Document_Type_Code) ); CREATE TABLE Ref_Budget_Codes ( Budget_Type_Code CHAR(15) NOT NULL, Budget_Type_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Budget_Type_Code) ); CREATE TABLE Projects ( Project_ID INTEGER NOT NULL, Project_Details VARCHAR(255), PRIMARY KEY (Project_ID) ); CREATE TABLE Documents ( Document_ID INTEGER NOT NULL, Document_Type_Code CHAR(15) NOT NULL, Project_ID INTEGER NOT NULL, Document_Date DATETIME, Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Document_ID), FOREIGN KEY (Document_Type_Code) REFERENCES Ref_Document_Types (Document_Type_Code), FOREIGN KEY (Project_ID) REFERENCES Projects (Project_ID) ); CREATE TABLE Statements ( Statement_ID INTEGER NOT NULL, Statement_Details VARCHAR(255), PRIMARY KEY (Statement_ID), FOREIGN KEY (Statement_ID) REFERENCES Documents (Document_ID) ); CREATE TABLE Documents_with_Expenses ( Document_ID INTEGER NOT NULL, Budget_Type_Code CHAR(15) NOT NULL, Document_Details VARCHAR(255), PRIMARY KEY (Document_ID), FOREIGN KEY (Budget_Type_Code) REFERENCES Ref_Budget_Codes (Budget_Type_Code), FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID) ); CREATE TABLE Accounts ( Account_ID INTEGER NOT NULL, Statement_ID INTEGER NOT NULL, Account_Details VARCHAR(255), PRIMARY KEY (Account_ID), FOREIGN KEY (Statement_ID) REFERENCES Statements (Statement_ID) ); "
93,5849,medium,student_1,"SELECT DISTINCT firstname ,  lastname FROM teachers",What are the first name and last name of all the teachers?,"CREATE TABLE ""list"" (  	""LastName"" TEXT,  	""FirstName"" TEXT,  	""Grade"" INTEGER,  	""Classroom"" INTEGER, 	PRIMARY KEY(LastName, FirstName) ); CREATE TABLE ""teachers"" (  	""LastName"" TEXT,  	""FirstName"" TEXT,  	""Classroom"" INTEGER, 	PRIMARY KEY(LastName, FirstName) );"
94,3313,medium,university_basketball,"SELECT school ,  nickname FROM university ORDER BY founded","What are the different schools and their nicknames, ordered by their founding years?","CREATE TABLE ""basketball_match"" ( ""Team_ID"" int, ""School_ID"" int, ""Team_Name"" text, ""ACC_Regular_Season"" text, ""ACC_Percent"" text, ""ACC_Home"" text, ""ACC_Road"" text, ""All_Games"" text, ""All_Games_Percent"" int, ""All_Home"" text, ""All_Road"" text, ""All_Neutral"" text, PRIMARY KEY (""Team_ID""), FOREIGN KEY (`School_ID`) REFERENCES `university`(`School_ID`) );  CREATE TABLE ""university"" ( ""School_ID"" int, ""School"" text, ""Location"" text, ""Founded"" real, ""Affiliation"" text, ""Enrollment"" real, ""Nickname"" text, ""Primary_conference"" text, PRIMARY KEY (""School_ID"") );  "
95,3738,medium,customers_and_invoices,"SELECT transaction_type ,  sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type",Show the transaction types and the total amount of transactions.,"PRAGMA foreign_keys = ON; CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_first_name` VARCHAR(50), `customer_middle_initial` VARCHAR(1), `customer_last_name` VARCHAR(50), `gender` VARCHAR(1), `email_address` VARCHAR(255), `login_name` VARCHAR(80), `login_password` VARCHAR(20), `phone_number` VARCHAR(255), `town_city` VARCHAR(50), `state_county_province` VARCHAR(50), `country` VARCHAR(50) );  CREATE TABLE `Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `date_order_placed` DATETIME NOT NULL, `order_details` VARCHAR(255), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) ); CREATE TABLE `Invoices` ( `invoice_number` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `invoice_date` DATETIME, FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ) ); CREATE TABLE `Accounts` ( `account_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `date_account_opened` DATETIME, `account_name` VARCHAR(50), `other_account_details` VARCHAR(255), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) );    CREATE TABLE `Product_Categories` ( `production_type_code` VARCHAR(15) PRIMARY KEY, `product_type_description` VARCHAR(80), `vat_rating` DECIMAL(19,4) ); CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `parent_product_id` INTEGER, `production_type_code` VARCHAR(15) NOT NULL, `unit_price` DECIMAL(19,4), `product_name` VARCHAR(80), `product_color` VARCHAR(20), `product_size` VARCHAR(20), FOREIGN KEY (`production_type_code` ) REFERENCES `Product_Categories`(`production_type_code` ) );  CREATE TABLE `Financial_Transactions` ( `transaction_id` INTEGER NOT NULL , `account_id` INTEGER NOT NULL, `invoice_number` INTEGER, `transaction_type` VARCHAR(15) NOT NULL, `transaction_date` DATETIME, `transaction_amount` DECIMAL(19,4), `transaction_comment` VARCHAR(255), `other_transaction_details` VARCHAR(255), FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ), FOREIGN KEY (`account_id` ) REFERENCES `Accounts`(`account_id` ) ); CREATE TABLE `Order_Items` ( `order_item_id` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, `product_quantity` VARCHAR(50), `other_order_item_details` VARCHAR(255), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ), FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ) );   CREATE TABLE `Invoice_Line_Items` ( `order_item_id` INTEGER NOT NULL, `invoice_number` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, `product_title` VARCHAR(80), `product_quantity` VARCHAR(50), `product_price` DECIMAL(19,4), `derived_product_cost` DECIMAL(19,4), `derived_vat_payable` DECIMAL(19,4), `derived_total_cost` DECIMAL(19,4), FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ), FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) ); "
96,5916,medium,film_rank,"SELECT max(Number_cities) ,  min(Number_cities) FROM market",What are the maximum and minimum number of cities in all markets.," PRAGMA foreign_keys = ON;    CREATE TABLE ""film"" ( ""Film_ID"" int, ""Title"" text, ""Studio"" text, ""Director"" text, ""Gross_in_dollar"" int, PRIMARY KEY (""Film_ID"") );   CREATE TABLE ""market"" ( ""Market_ID"" int, ""Country"" text, ""Number_cities"" int, PRIMARY KEY (""Market_ID"") );  CREATE TABLE ""film_market_estimation"" ( ""Estimation_ID"" int, ""Low_Estimate"" real, ""High_Estimate"" real, ""Film_ID"" int, ""Type"" text, ""Market_ID"" int, ""Year"" int, PRIMARY KEY (""Estimation_ID""), FOREIGN KEY (""Film_ID"") REFERENCES film(""Film_ID""), FOREIGN KEY (""Market_ID"") REFERENCES market(""Market_ID"") );   "
97,4603,medium,inn_1,"SELECT kids FROM Reservations WHERE FirstName = ""ROY"" AND LastName  =  ""SWEAZY"";",Find the number of kids staying in the rooms reserved by a person called ROY SWEAZ.,"CREATE TABLE ""Rooms"" (  	""RoomId"" TEXT PRIMARY KEY, 	""roomName"" TEXT,  	""beds"" INTEGER,  	""bedType"" TEXT,  	""maxOccupancy"" INTEGER,  	""basePrice"" INTEGER,  	""decor"" TEXT  );  CREATE TABLE ""Reservations"" (  	""Code"" INTEGER PRIMARY KEY,  	""Room"" TEXT,  	""CheckIn"" TEXT,  	""CheckOut"" TEXT,  	""Rate"" REAL,  	""LastName"" TEXT,  	""FirstName"" TEXT,  	""Adults"" INTEGER,  	""Kids"" INTEGER, 	FOREIGN KEY (Room) REFERENCES Rooms(RoomId) ); "
98,5917,medium,film_rank,"SELECT max(Number_cities) ,  min(Number_cities) FROM market",Return the maximum and minimum number of cities across all markets.," PRAGMA foreign_keys = ON;    CREATE TABLE ""film"" ( ""Film_ID"" int, ""Title"" text, ""Studio"" text, ""Director"" text, ""Gross_in_dollar"" int, PRIMARY KEY (""Film_ID"") );   CREATE TABLE ""market"" ( ""Market_ID"" int, ""Country"" text, ""Number_cities"" int, PRIMARY KEY (""Market_ID"") );  CREATE TABLE ""film_market_estimation"" ( ""Estimation_ID"" int, ""Low_Estimate"" real, ""High_Estimate"" real, ""Film_ID"" int, ""Type"" text, ""Market_ID"" int, ""Year"" int, PRIMARY KEY (""Estimation_ID""), FOREIGN KEY (""Film_ID"") REFERENCES film(""Film_ID""), FOREIGN KEY (""Market_ID"") REFERENCES market(""Market_ID"") );   "
99,2439,medium,restaurants,"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t1.name  =  ""jamerican cuisine"";",where is jamerican cuisine ?,"PRAGMA foreign_keys = ON; CREATE TABLE ""GEOGRAPHIC"" ( ""CITY_NAME"" text, ""COUNTY"" text, ""REGION"" text, primary key(""CITY_NAME"") ); CREATE TABLE ""RESTAURANT"" ( ""ID"" int, ""NAME"" text, ""FOOD_TYPE"" text, ""CITY_NAME"" text, ""RATING"" real, primary key(""ID""), foreign key (""CITY_NAME"") references `GEOGRAPHIC`(""CITY_NAME"") ); CREATE TABLE ""LOCATION"" ( ""RESTAURANT_ID"" int, ""HOUSE_NUMBER"" int, ""STREET_NAME"" text, ""CITY_NAME"" text, primary key(""RESTAURANT_ID""), foreign key (""CITY_NAME"") references `GEOGRAPHIC`(""CITY_NAME"") foreign key (""RESTAURANT_ID"") references `RESTAURANT`(""RESTAURANT_ID"") );"
