{'geo': [{'question': 'what rivers are in states that border alabama', 'sql_query': 'SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  "alabama" );', 'db_id': 'geo'}], 'cre_Doc_Control_Systems': [{'question': "List the employees who have not showed up in any circulation history of documents. List the employee's name.", 'sql_query': 'SELECT employee_name FROM Employees EXCEPT SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id', 'db_id': 'cre_Doc_Control_Systems'}], 'student_transcripts_tracking': [{'question': 'What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?', 'sql_query': "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'", 'db_id': 'student_transcripts_tracking'}], 'product_catalog': [{'question': 'Find the catalog publisher that has the most catalogs.', 'sql_query': 'SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1', 'db_id': 'product_catalog'}], 'wta_1': [{'question': 'Find the year that has the most number of matches.', 'sql_query': 'SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1', 'db_id': 'wta_1'}], 'insurance_and_eClaims': [{'question': 'Find the names of all the customers and staff members.', 'sql_query': 'SELECT customer_details FROM customers UNION SELECT staff_details FROM staff', 'db_id': 'insurance_and_eClaims'}], 'document_management': [{'question': 'Find the average access counts of documents with functional area "Acknowledgement".', 'sql_query': 'SELECT avg(t1.access_count) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code  =  t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code  =  t3.functional_area_code WHERE t3.functional_area_description  =  "Acknowledgement"', 'db_id': 'document_management'}], 'club_1': [{'question': 'Which clubs have one or more members from the city with code "BAL"? Give me the names of the clubs.', 'sql_query': 'SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  "BAL"', 'db_id': 'club_1'}], 'phone_1': [{'question': 'List the hardware model name and company name for all the phones that were launched in year 2002 or have RAM size greater than 32.', 'sql_query': 'SELECT T2.Hardware_Model_name ,  T2.Company_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 OR T1.RAM_MiB  >  32;', 'db_id': 'phone_1'}], 'soccer_2': [{'question': 'Which position is most popular among players in the tryout?', 'sql_query': 'SELECT pPos FROM tryout GROUP BY pPos ORDER BY count(*) DESC LIMIT 1', 'db_id': 'soccer_2'}], 'wrestler': [{'question': 'Show the teams that have both wrestlers eliminated by "Orton" and wrestlers eliminated by "Benjamin".', 'sql_query': 'SELECT Team FROM Elimination WHERE Eliminated_By  =  "Orton" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  "Benjamin"', 'db_id': 'wrestler'}], 'race_track': [{'question': 'What are the locations that have both tracks with more than 90000 seats, and tracks with fewer than 70000 seats?', 'sql_query': 'SELECT LOCATION FROM track WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM track WHERE seating  <  70000', 'db_id': 'race_track'}], 'match_season': [{'question': 'What are the names of teams that do no have match season record?', 'sql_query': 'SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)', 'db_id': 'match_season'}], 'dorm_1': [{'question': 'How many female students live in Smith Hall?', 'sql_query': "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'", 'db_id': 'dorm_1'}], 'department_management': [{'question': "What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?", 'sql_query': "SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T3.born_state  =  'Alabama'", 'db_id': 'department_management'}], 'cre_Doc_Tracking_DB': [{'question': 'Show the ids of all employees who have either destroyed a document or made an authorization to do this.', 'sql_query': 'SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed UNION SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed', 'db_id': 'cre_Doc_Tracking_DB'}], 'inn_1': [{'question': 'What are the name of rooms that cost more than the average.', 'sql_query': 'SELECT roomName FROM Rooms WHERE basePrice  >  ( SELECT avg(basePrice) FROM Rooms );', 'db_id': 'inn_1'}], 'customers_and_addresses': [{'question': 'What are the names of customers using the most popular payment method?', 'sql_query': 'SELECT customer_name FROM customers WHERE payment_method  =  (SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1)', 'db_id': 'customers_and_addresses'}], 'customers_card_transactions': [{'question': 'Show the customer id and number of accounts with most accounts.', 'sql_query': 'SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1', 'db_id': 'customers_card_transactions'}], 'cre_Drama_Workshop_Groups': [{'question': 'What is the payment method code used by the most orders?', 'sql_query': 'SELECT payment_method_code FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1', 'db_id': 'cre_Drama_Workshop_Groups'}], 'baseball_1': [{'question': "What is the average height of the players from the college named 'Yale University'?", 'sql_query': "SELECT avg(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id  =  T2.player_id JOIN college AS T3 ON T3.college_id  =  T2.college_id WHERE T3.name_full  =  'Yale University';", 'db_id': 'baseball_1'}], 'cre_Theme_park': [{'question': "Which tourist attractions does the visitor with detail 'Vincent' visit?", 'sql_query': 'SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID JOIN VISITORS AS T3 ON T2.Tourist_ID  =  T3.Tourist_ID WHERE T3.Tourist_Details  =  "Vincent"', 'db_id': 'cre_Theme_park'}], 'cinema': [{'question': 'Show all the locations where no cinema has capacity over 800.', 'sql_query': 'SELECT LOCATION FROM cinema EXCEPT SELECT LOCATION FROM cinema WHERE capacity  >  800', 'db_id': 'cinema'}], 'apartment_rentals': [{'question': 'Which apartment type has the largest number of total rooms? Return the apartment type code, its number of bathrooms and number of bedrooms.', 'sql_query': 'SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1', 'db_id': 'apartment_rentals'}], 'station_weather': [{'question': 'Find names and times of trains that run through stations for the local authority Chiltern.', 'sql_query': 'SELECT t3.name ,  t3.time FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id JOIN train AS t3 ON t2.train_id  =  t3.id WHERE t1.local_authority  =  "Chiltern"', 'db_id': 'station_weather'}], 'local_govt_in_alabama': [{'question': 'What is the id of the event with the most participants?', 'sql_query': 'SELECT Event_ID FROM Participants_in_Events GROUP BY Event_ID ORDER BY count(*) DESC LIMIT 1', 'db_id': 'local_govt_in_alabama'}], 'game_1': [{'question': 'Show all game names played by Linda Smith', 'sql_query': 'SELECT Gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid JOIN Student AS T3 ON T3.Stuid  =  T1.Stuid WHERE T3.Lname  =  "Smith" AND T3.Fname  =  "Linda"', 'db_id': 'game_1'}], 'employee_hire_evaluation': [{'question': 'Find the name of the shops that do not hire any employee.', 'sql_query': 'SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)', 'db_id': 'employee_hire_evaluation'}], 'train_station': [{'question': 'What is the average and maximum number of total passengers for train stations in London or Glasgow?', 'sql_query': "SELECT avg(total_passengers) ,  max(total_passengers) FROM station WHERE LOCATION  =  'London' OR LOCATION  =  'Glasgow'", 'db_id': 'train_station'}], 'musical': [{'question': 'Who are the nominees who have been nominated for both a Tony Award and a Drama Desk Award?', 'sql_query': 'SELECT Nominee FROM musical WHERE Award  =  "Tony Award" INTERSECT SELECT Nominee FROM musical WHERE Award  =  "Drama Desk Award"', 'db_id': 'musical'}], 'flight_2': [{'question': 'Find the number of flights landing in the city of Aberdeen or Abilene.', 'sql_query': 'SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  "Aberdeen" OR T2.city  =  "Abilene"', 'db_id': 'flight_2'}], 'e_learning': [{'question': 'Find the common personal name of course authors and students.', 'sql_query': 'SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students', 'db_id': 'e_learning'}], 'behavior_monitoring': [{'question': 'What is the cell phone number of the student whose address has the lowest monthly rental?', 'sql_query': 'SELECT T2.cell_mobile_number FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id ORDER BY T1.monthly_rental ASC LIMIT 1', 'db_id': 'behavior_monitoring'}], 'flight_1': [{'question': 'Show names for all aircrafts of which John Williams has certificates.', 'sql_query': 'SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  "John Williams"', 'db_id': 'flight_1'}], 'orchestra': [{'question': 'List the names of orchestras that have no performance.', 'sql_query': 'SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)', 'db_id': 'orchestra'}], 'hospital_1': [{'question': 'What are the name and primarily affiliated department name of each physician?', 'sql_query': 'SELECT T1.name ,  T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T2.PrimaryAffiliation  =  1', 'db_id': 'hospital_1'}], 'gas_company': [{'question': "What are the headquarters that have both a company in the banking and 'oil and gas' industries?", 'sql_query': "SELECT headquarters FROM company WHERE main_industry  =  'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry  =  'Oil and gas'", 'db_id': 'gas_company'}], 'game_injury': [{'question': 'What are the headquarters without companies that are in the banking industry?', 'sql_query': "SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking'", 'db_id': 'gas_company'}], 'department_store': [{'question': 'What are the distinct names of customers with an order status of Pending, sorted by customer id?', 'sql_query': 'SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  "Pending" ORDER BY T2.customer_id', 'db_id': 'department_store'}], 'scholar': [{'question': 'monte carlo simulation papers later than 2011', 'sql_query': 'SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "monte carlo simulation" AND t3.year  >  2011;', 'db_id': 'scholar'}], 'insurance_policies': [{'question': 'Find the policy type the most customers choose.', 'sql_query': 'SELECT Policy_Type_Code FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY count(*) DESC LIMIT 1', 'db_id': 'insurance_policies'}], 'assets_maintenance': [{'question': 'Which company started the earliest the maintenance contract? Show the company name.', 'sql_query': 'SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id ORDER BY T2.contract_start_date ASC LIMIT 1', 'db_id': 'assets_maintenance'}], 'network_2': [{'question': 'How many people are older than every engineer?', 'sql_query': "SELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  'engineer')", 'db_id': 'network_2'}], 'tracking_software_problems': [{'question': 'What are the products that have problems reported after 1986-11-13? Give me the product id and the count of problems reported after 1986-11-13.', 'sql_query': 'SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > "1986-11-13" GROUP BY T2.product_id', 'db_id': 'tracking_software_problems'}], 'movie_1': [{'question': "For each director, return the director's name together with the title of the movie they directed that received the highest rating among all of their movies, and the value of that rating. Ignore movies whose director is NULL.", 'sql_query': 'SELECT T2.title ,  T1.stars ,  T2.director ,  max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE director != "null" GROUP BY director', 'db_id': 'movie_1'}], 'hr_1': [{'question': 'What are the ids for employees who do not work in departments with managers that have ids between 100 and 200?', 'sql_query': 'SELECT * FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)', 'db_id': 'hr_1'}], 'imdb': [{'question': 'How many movies did " Shahab Hosseini " act in ?', 'sql_query': 'SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  "Shahab Hosseini";', 'db_id': 'imdb'}], 'products_gen_characteristics': [{'question': "Return the characteristic names of the 'sesame' product.", 'sql_query': 'SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  "sesame"', 'db_id': 'products_gen_characteristics'}], 'loan_1': [{'question': 'What are the names of customers with credit score less than the average credit score across customers?', 'sql_query': 'SELECT cust_name FROM customer WHERE credit_score  <  (SELECT avg(credit_score) FROM customer)', 'db_id': 'loan_1'}], 'dog_kennels': [{'question': 'What is the average age of the dogs who have gone through any treatments?', 'sql_query': 'SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )', 'db_id': 'dog_kennels'}], 'e_government': [{'question': 'What are the names of all cities and states?', 'sql_query': 'SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses', 'db_id': 'e_government'}], 'tracking_grants_for_research': [{'question': "What are the result description of the project whose detail is 'sint'?", 'sql_query': "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code JOIN Projects AS T3 ON T2.project_id  =  T3.project_id WHERE T3.project_details  =  'sint'", 'db_id': 'tracking_grants_for_research'}], 'film_rank': [{'question': 'Return the title of the film with the highest high estimate?', 'sql_query': 'SELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2  ON T1.Film_ID  =  T2.Film_ID ORDER BY high_estimate DESC LIMIT 1', 'db_id': 'film_rank'}], 'academic': [{'question': 'return me all the keywords in Databases area .', 'sql_query': 'SELECT t1.keyword FROM DOMAIN AS t3 JOIN domain_keyword AS t2 ON t3.did  =  t2.did JOIN keyword AS t1 ON t1.kid  =  t2.kid WHERE t3.name  =  "Databases";', 'db_id': 'academic'}], 'customer_complaints': [{'question': 'Find the phone number of all the customers and staff.', 'sql_query': 'SELECT phone_number FROM customers UNION SELECT phone_number FROM staff', 'db_id': 'customer_complaints'}], 'storm_record': [{'question': 'Return the names of the regions affected by storms that had a death count of at least 10.', 'sql_query': 'SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T3.number_deaths  >=  10', 'db_id': 'storm_record'}], 'music_1': [{'question': 'Find the distinct names of all songs that have a higher resolution than some songs in English.', 'sql_query': 'SELECT DISTINCT song_name FROM song WHERE resolution  >  (SELECT min(resolution) FROM song WHERE languages  =  "english")', 'db_id': 'music_1'}], 'tvshow': [{'question': 'What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?', 'sql_query': "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", 'db_id': 'tvshow'}], 'device': [{'question': 'List the software platform shared by the greatest number of devices.', 'sql_query': 'SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'device'}], 'sports_competition': [{'question': 'what are the name of players who get more than the average points.', 'sql_query': 'SELECT name FROM player WHERE points  >  (SELECT avg(points) FROM player)', 'db_id': 'sports_competition'}], 'university_basketball': [{'question': 'What is the primary conference of the school that has the lowest acc percent score in the competition?', 'sql_query': 'SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1', 'db_id': 'university_basketball'}], 'music_2': [{'question': 'Which vocal type is the most frequently appearring type?', 'sql_query': 'SELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1', 'db_id': 'music_2'}], 'body_builder': [{'question': 'What are the total scores of the body builders whose birthday contains the string "January" ?', 'sql_query': 'SELECT T1.total FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T2.Birth_Date LIKE "%January%";', 'db_id': 'body_builder'}], 'bike_1': [{'question': 'What are the names of stations that are located in Palo Alto city but have never been the ending point of trips more than 100 times?', 'sql_query': 'SELECT name FROM station WHERE city  =  "Palo Alto" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  100', 'db_id': 'bike_1'}], 'shop_membership': [{'question': 'What are the names of the members that have never registered at any branch?', 'sql_query': 'SELECT name FROM member WHERE member_id NOT IN (SELECT member_id FROM membership_register_branch)', 'db_id': 'shop_membership'}], 'party_people': [{'question': 'Show names of parties that does not have any members.', 'sql_query': 'SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM Member)', 'db_id': 'party_people'}], 'student_assessment': [{'question': 'For each course id, how many students are registered and what are the course names?', 'sql_query': 'SELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id', 'db_id': 'student_assessment'}], 'performance_attendance': [{'question': 'Show the most common location of performances.', 'sql_query': 'SELECT LOCATION FROM performance GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'performance_attendance'}], 'concert_singer': [{'question': 'List all song names by singers above the average age.', 'sql_query': 'SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)', 'db_id': 'concert_singer'}], 'csu_1': [{'question': 'Which campus has the most degrees conferred in all times?', 'sql_query': 'SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1', 'db_id': 'csu_1'}], 'formula_1': [{'question': 'What is the id, forename, and number of races for all drivers that have participated in at least 2 races?', 'sql_query': 'SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  2', 'db_id': 'formula_1'}], 'activity_1': [{'question': 'What are the names of the activities Mark Giuliano is involved in', 'sql_query': 'SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN Activity AS T3 ON T3.actid  =  T2.actid WHERE T1.fname  =  "Mark" AND T1.lname  =  "Giuliano"', 'db_id': 'activity_1'}], 'local_govt_and_lot': [{'question': 'How many services has each resident requested? List the resident id, details, and the count in descending order of the count.', 'sql_query': 'SELECT T1.resident_id ,  T1.other_details ,  count(*) FROM Residents AS T1 JOIN Residents_Services AS T2 ON T1.resident_id  =  T2.resident_id GROUP BY T1.resident_id ORDER BY count(*) DESC', 'db_id': 'local_govt_and_lot'}], 'decoration_competition': [{'question': 'List the names of members who did not participate in any round.', 'sql_query': 'SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM round)', 'db_id': 'decoration_competition'}], 'manufactory_1': [{'question': 'Find the name of companies whose revenue is smaller than the revenue of all companies based in Austin.', 'sql_query': "SELECT name FROM manufacturers WHERE revenue  <  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')", 'db_id': 'manufactory_1'}], 'book_2': [{'question': 'Please show the most common publication date.', 'sql_query': 'SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'book_2'}], 'flight_company': [{'question': 'What is the most common company type, and how many are there?', 'sql_query': 'SELECT TYPE ,  count(*) FROM operate_company GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1', 'db_id': 'flight_company'}], 'party_host': [{'question': 'Show the most common nationality of hosts.', 'sql_query': 'SELECT Nationality FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'party_host'}], 'cre_Docs_and_Epenses': [{'question': "What are the account details with the largest value or with value having char '5' in it?", 'sql_query': 'SELECT max(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE "%5%"', 'db_id': 'cre_Docs_and_Epenses'}], 'student_1': [{'question': 'Which classroom has the most students?', 'sql_query': 'SELECT classroom FROM list GROUP BY classroom ORDER BY count(*) DESC LIMIT 1', 'db_id': 'student_1'}], 'customers_and_invoices': [{'question': "Show customer ids who don't have an account.", 'sql_query': 'SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Accounts', 'db_id': 'customers_and_invoices'}], 'restaurants': [{'question': 'where is a good french restaurant in the yosemite and mono lake area ?', 'sql_query': 'SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  "yosemite and mono lake area" AND t1.food_type  =  "french" AND t1.rating  >  2.5;', 'db_id': 'restaurants'}], 'climbing': [{'question': 'Show the countries that have mountains with height more than 5600 stories and mountains with height less than 5200.', 'sql_query': 'SELECT Country FROM mountain WHERE Height  >  5600 INTERSECT SELECT Country FROM mountain WHERE Height  <  5200', 'db_id': 'climbing'}], 'election': [{'question': 'Which people severed as comptroller most frequently? Give me the name of the person and the frequency count.', 'sql_query': 'SELECT Comptroller ,  COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'election'}], 'aircraft': [{'question': 'What are the names of all aicrafts that have never won any match?', 'sql_query': 'SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)', 'db_id': 'aircraft'}], 'pets_1': [{'question': 'Find the number of dog pets that are raised by female students (with sex F).', 'sql_query': "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", 'db_id': 'pets_1'}], 'customers_and_products_contacts': [{'question': 'Show the names of customers who use Credit Card payment method and have more than 2 orders.', 'sql_query': "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.payment_method_code  =  'Credit Card' GROUP BY T1.customer_id HAVING count(*)  >  2", 'db_id': 'customers_and_products_contacts'}], 'entrepreneur': [{'question': 'Which company was started by the entrepreneur with the greatest height?', 'sql_query': 'SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1', 'db_id': 'entrepreneur'}]}