{'geo': [{'question': 'which state has the smallest average urban population', 'sql_query': 'SELECT state_name FROM city GROUP BY state_name ORDER BY AVG ( population ) LIMIT 1;', 'db_id': 'geo'}, {'question': 'what are the capitals of states that border texas', 'sql_query': 'SELECT t2.capital FROM state AS t2 JOIN border_info AS t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  "texas";', 'db_id': 'geo'}, {'question': 'how many major rivers cross ohio', 'sql_query': 'SELECT COUNT ( river_name ) FROM river WHERE LENGTH  >  750 AND traverse  =  "ohio";', 'db_id': 'geo'}], 'cre_Doc_Control_Systems': [{'question': 'Which document has the most draft copies? List its document id and number of draft copies.', 'sql_query': 'SELECT document_id , count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT 1;', 'db_id': 'cre_Doc_Control_Systems'}, {'question': 'List roles that have more than one employee. List the role description and number of employees.', 'sql_query': 'SELECT Roles.role_description , count(Employees.employee_id) FROM ROLES JOIN Employees ON Employees.role_code = Roles.role_code GROUP BY Employees.role_code HAVING count(Employees.employee_id)  >  1;', 'db_id': 'cre_Doc_Control_Systems'}, {'question': 'What is the name of the shipping agent of the document with id 2?', 'sql_query': 'SELECT Ref_Shipping_Agents.shipping_agent_name FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Documents.document_id = 2;', 'db_id': 'cre_Doc_Control_Systems'}], 'student_transcripts_tracking': [{'question': 'How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.', 'sql_query': 'SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1', 'db_id': 'student_transcripts_tracking'}, {'question': 'Who is the earliest graduate of the school? List the first name, middle name and last name.', 'sql_query': 'SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1', 'db_id': 'student_transcripts_tracking'}, {'question': 'What are the names and descriptions of all the sections?', 'sql_query': 'SELECT section_name ,  section_description FROM Sections', 'db_id': 'student_transcripts_tracking'}], 'product_catalog': [{'question': 'What is the level name of the cheapest catalog (in USD)?', 'sql_query': 'SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1', 'db_id': 'product_catalog'}, {'question': 'Find all the catalog publishers whose name contains "Murray"', 'sql_query': 'SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE "%Murray%"', 'db_id': 'product_catalog'}, {'question': 'Which catalog content has the highest height? Give me the catalog entry name.', 'sql_query': 'SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1', 'db_id': 'product_catalog'}], 'wta_1': [{'question': 'What are the names of players who won in both 2013 and 2016?', 'sql_query': 'SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016', 'db_id': 'wta_1'}, {'question': 'What are the names and ranks of the three youngest winners across all matches?', 'sql_query': 'SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3', 'db_id': 'wta_1'}, {'question': 'Find the total ranking points for each player and their first name.', 'sql_query': 'SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name', 'db_id': 'wta_1'}], 'insurance_and_eClaims': [{'question': 'Find the names of customers who either have an deputy policy or uniformed policy.', 'sql_query': 'SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  "Deputy" OR t1.policy_type_code  =  "Uniform"', 'db_id': 'insurance_and_eClaims'}, {'question': 'Find the names of customers whose name contains "Diana".', 'sql_query': 'SELECT customer_details FROM customers WHERE customer_details LIKE "%Diana%"', 'db_id': 'insurance_and_eClaims'}, {'question': 'Which customers have the substring "Diana" in their names? Return the customer details.', 'sql_query': 'SELECT customer_details FROM customers WHERE customer_details LIKE "%Diana%"', 'db_id': 'insurance_and_eClaims'}], 'document_management': [{'question': 'What is the total access count of documents that are of the most common document type?', 'sql_query': 'SELECT sum(access_count) FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1', 'db_id': 'document_management'}, {'question': 'List all the image name and URLs in the order of their names.', 'sql_query': 'SELECT image_name ,  image_url FROM images ORDER BY image_name', 'db_id': 'document_management'}, {'question': 'What are the names of all the documents, as well as the access counts of each, ordered alphabetically?', 'sql_query': 'SELECT document_name ,  access_count FROM documents ORDER BY document_name', 'db_id': 'document_management'}], 'club_1': [{'question': 'How many members of "Bootup Baltimore" are older than 18?', 'sql_query': 'SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  "Bootup Baltimore" AND t3.age  >  18', 'db_id': 'club_1'}, {'question': 'How many different roles are there in the club "Bootup Baltimore"?', 'sql_query': 'SELECT count(DISTINCT t2.position) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid WHERE t1.clubname  =  "Bootup Baltimore"', 'db_id': 'club_1'}, {'question': 'Count the number of different positions in the club "Bootup Baltimore".', 'sql_query': 'SELECT count(DISTINCT t2.position) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid WHERE t1.clubname  =  "Bootup Baltimore"', 'db_id': 'club_1'}], 'phone_1': [{'question': 'List the hardware model name and company name for all the phones that were launched in year 2002 or have RAM size greater than 32.', 'sql_query': 'SELECT T2.Hardware_Model_name ,  T2.Company_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 OR T1.RAM_MiB  >  32;', 'db_id': 'phone_1'}, {'question': 'Which model has the least amount of RAM? List the model name and the amount of RAM.', 'sql_query': 'SELECT Model_name ,  RAM_MiB FROM chip_model ORDER BY RAM_MiB ASC LIMIT 1;', 'db_id': 'phone_1'}, {'question': "Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name.", 'sql_query': "SELECT Hardware_Model_name ,  Company_name FROM phone WHERE Accreditation_type LIKE 'Full';", 'db_id': 'phone_1'}], 'soccer_2': [{'question': 'Find names of all colleges whose enrollment is greater than that of all colleges in the FL state.', 'sql_query': "SELECT cName FROM college WHERE enr  >  (SELECT max(enr) FROM college WHERE state  =  'FL')", 'db_id': 'soccer_2'}, {'question': 'What are the name of the players who received a card in descending order of the hours of training?', 'sql_query': "SELECT pName FROM Player WHERE yCard  =  'yes' ORDER BY HS DESC", 'db_id': 'soccer_2'}, {'question': 'What are the names and enrollment numbers for colleges that have more than 10000 enrolled and are located in Louisiana?', 'sql_query': 'SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = "LA"', 'db_id': 'soccer_2'}], 'wrestler': [{'question': 'Which reign is the most common among wrestlers?', 'sql_query': 'SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'wrestler'}, {'question': 'Give the names and locations of all wrestlers.', 'sql_query': 'SELECT Name ,  LOCATION FROM wrestler', 'db_id': 'wrestler'}, {'question': 'What are the names of wrestlers and their teams in elimination, ordered descending by days held?', 'sql_query': 'SELECT T2.Name ,  T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC', 'db_id': 'wrestler'}], 'race_track': [{'question': "What are the names for tracks without a race in class 'GT'.", 'sql_query': "SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'", 'db_id': 'race_track'}, {'question': 'What is the minimum, maximum, and average seating for all tracks.', 'sql_query': 'SELECT min(seating) ,  max(seating) ,  avg(seating) FROM track', 'db_id': 'race_track'}, {'question': 'What are the names of different tracks, and how many races has each had?', 'sql_query': 'SELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id', 'db_id': 'race_track'}], 'match_season': [{'question': 'Which college have both players with position midfielder and players with position defender?', 'sql_query': 'SELECT College FROM match_season WHERE POSITION  =  "Midfielder" INTERSECT SELECT College FROM match_season WHERE POSITION  =  "Defender"', 'db_id': 'match_season'}, {'question': 'How many players played each position?', 'sql_query': 'SELECT POSITION ,  COUNT(*) FROM match_season GROUP BY POSITION', 'db_id': 'match_season'}, {'question': 'For each player, what are their name, season, and country that they belong to?', 'sql_query': 'SELECT T2.Season ,  T2.Player ,  T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country', 'db_id': 'match_season'}], 'dorm_1': [{'question': 'What are the total number of students who are living in a male dorm?', 'sql_query': "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.gender  =  'M'", 'db_id': 'dorm_1'}, {'question': 'Find the number and average age of students living in each city.', 'sql_query': 'SELECT count(*) ,  avg(age) ,  city_code FROM student GROUP BY city_code', 'db_id': 'dorm_1'}, {'question': 'What is the average and total capacity for all dorms who are of gender X?', 'sql_query': "SELECT avg(student_capacity) ,  sum(student_capacity) FROM dorm WHERE gender  =  'X'", 'db_id': 'dorm_1'}], 'department_management': [{'question': "What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?", 'sql_query': "SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T3.born_state  =  'Alabama'", 'db_id': 'department_management'}, {'question': "Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'?", 'sql_query': "SELECT T1.name ,  T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id WHERE T2.temporary_acting  =  'Yes'", 'db_id': 'department_management'}, {'question': 'List the name, born state and age of the heads of departments ordered by age.', 'sql_query': 'SELECT name ,  born_state ,  age FROM head ORDER BY age', 'db_id': 'department_management'}], 'cre_Doc_Tracking_DB': [{'question': 'Which employees do not destroy any document? Find their employee ids.', 'sql_query': 'SELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed', 'db_id': 'cre_Doc_Tracking_DB'}, {'question': 'Show all calendar dates and day Numbers.', 'sql_query': 'SELECT calendar_date ,  day_Number FROM Ref_calendar', 'db_id': 'cre_Doc_Tracking_DB'}, {'question': 'Give me the name and description of the location with code x.', 'sql_query': 'SELECT location_name ,  location_description FROM Ref_locations WHERE location_code  =  "x"', 'db_id': 'cre_Doc_Tracking_DB'}], 'inn_1': [{'question': 'Find the name of rooms whose price is higher than the average price.', 'sql_query': 'SELECT roomName FROM Rooms WHERE basePrice  >  ( SELECT avg(basePrice) FROM Rooms );', 'db_id': 'inn_1'}, {'question': 'How many rooms have king beds? Report the number for each decor type.', 'sql_query': 'SELECT decor ,  count(*) FROM Rooms WHERE bedType = "King" GROUP BY decor;', 'db_id': 'inn_1'}, {'question': 'Find the names of rooms that have been reserved for more than 60 times.', 'sql_query': 'SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room HAVING count(*)  >  60', 'db_id': 'inn_1'}], 'customers_and_addresses': [{'question': 'Return the address content for the customer whose name is "Maudie Kertzmann".', 'sql_query': 'SELECT t3.address_content FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t1.customer_name  =  "Maudie Kertzmann"', 'db_id': 'customers_and_addresses'}, {'question': 'Find the customer name and date of the orders that have the status "Delivered".', 'sql_query': 'SELECT t1.customer_name ,  t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id WHERE order_status  =  "Delivered"', 'db_id': 'customers_and_addresses'}, {'question': 'Which contact channel has been used by the customer with name "Tillman Ernser"?', 'sql_query': 'SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  "Tillman Ernser"', 'db_id': 'customers_and_addresses'}], 'customers_card_transactions': [{'question': 'Show the customer id and number of accounts with most accounts.', 'sql_query': 'SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1', 'db_id': 'customers_card_transactions'}, {'question': 'Count the number of cards the customer with the first name Art and last name Turcotte has.', 'sql_query': 'SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  "Art" AND T2.customer_last_name  =  "Turcotte"', 'db_id': 'customers_card_transactions'}, {'question': 'What is the phone and email for customer with first name Aniyah and last name Feest?', 'sql_query': 'SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  "Aniyah" AND customer_last_name  =  "Feest"', 'db_id': 'customers_card_transactions'}], 'cre_Drama_Workshop_Groups': [{'question': 'What are the names of the clients who do not have any booking?', 'sql_query': 'SELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID  =  T2.Client_ID', 'db_id': 'cre_Drama_Workshop_Groups'}, {'question': 'Tell me the name of the most pricy product.', 'sql_query': 'SELECT Product_Name FROM PRODUCTS ORDER BY Product_Price DESC LIMIT 1', 'db_id': 'cre_Drama_Workshop_Groups'}, {'question': 'List the actual delivery date for all the orders with quantity 1', 'sql_query': 'SELECT T1.Actual_Delivery_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID WHERE T2.Order_Quantity  =  1', 'db_id': 'cre_Drama_Workshop_Groups'}], 'baseball_1': [{'question': 'What are the three countries that the least players are from?', 'sql_query': 'SELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT 3;', 'db_id': 'baseball_1'}, {'question': 'How many games in total did team Boston Red Stockings attend from 2000 to 2010?', 'sql_query': "SELECT sum(T1.attendance) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year BETWEEN 2000 AND 2010;", 'db_id': 'baseball_1'}, {'question': 'What is the average number of attendance at home games for each year?', 'sql_query': 'SELECT YEAR ,  avg(attendance) FROM home_game GROUP BY YEAR;', 'db_id': 'baseball_1'}], 'cre_Theme_park': [{'question': 'Find the names of the tourist attractions that is either accessible by walk or at address 660 Shea Crescent.', 'sql_query': 'SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  "660 Shea Crescent" OR T2.How_to_Get_There  =  "walk"', 'db_id': 'cre_Theme_park'}, {'question': 'Show the average price range of hotels that have 5 star ratings and allow pets.', 'sql_query': 'SELECT avg(price_range) FROM HOTELS WHERE star_rating_code  =  "5" AND pets_allowed_yn  =  1', 'db_id': 'cre_Theme_park'}, {'question': "Show different tourist attractions' names, ids, and the corresponding number of visits.", 'sql_query': 'SELECT T1.Name ,  T2.Tourist_Attraction_ID ,   COUNT(*) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID', 'db_id': 'cre_Theme_park'}], 'cinema': [{'question': 'Show all the locations where no cinema has capacity over 800.', 'sql_query': 'SELECT LOCATION FROM cinema EXCEPT SELECT LOCATION FROM cinema WHERE capacity  >  800', 'db_id': 'cinema'}, {'question': 'Show the title and director for all films.', 'sql_query': 'SELECT title ,  directed_by FROM film', 'db_id': 'cinema'}, {'question': 'What are the title and director of each film?', 'sql_query': 'SELECT title ,  directed_by FROM film', 'db_id': 'cinema'}], 'apartment_rentals': [{'question': 'Which apartment type code appears the most often?', 'sql_query': 'SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1', 'db_id': 'apartment_rentals'}, {'question': 'What are the facility codes of the apartments with more than four bedrooms?', 'sql_query': 'SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  4', 'db_id': 'apartment_rentals'}, {'question': 'Show the total number of rooms of the apartments in the building with short name "Columbus Square".', 'sql_query': 'SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  "Columbus Square"', 'db_id': 'apartment_rentals'}], 'station_weather': [{'question': 'Find names and times of trains that run through stations for the local authority Chiltern.', 'sql_query': 'SELECT t3.name ,  t3.time FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id JOIN train AS t3 ON t2.train_id  =  t3.id WHERE t1.local_authority  =  "Chiltern"', 'db_id': 'station_weather'}, {'question': "How many trains have 'Express' in their names?", 'sql_query': 'SELECT count(*) FROM train WHERE name LIKE "%Express%"', 'db_id': 'station_weather'}, {'question': 'show all train numbers and names ordered by their time from early to late.', 'sql_query': 'SELECT train_number ,  name FROM train ORDER BY TIME', 'db_id': 'station_weather'}], 'local_govt_in_alabama': [{'question': "Which events id does not have any participant with detail 'Kenyatta Kuhn'?", 'sql_query': "SELECT event_id FROM EVENTS EXCEPT SELECT T1.event_id FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE Participant_Details  =  'Kenyatta Kuhn'", 'db_id': 'local_govt_in_alabama'}, {'question': 'List the service id and details for the events.', 'sql_query': 'SELECT service_id ,  event_details FROM EVENTS', 'db_id': 'local_govt_in_alabama'}, {'question': 'What are the ids and details of events that have more than one participants?', 'sql_query': 'SELECT T1.event_id ,  T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID  =  T2.Event_ID GROUP BY T1.Event_ID HAVING count(*)  >  1', 'db_id': 'local_govt_in_alabama'}], 'game_1': [{'question': 'Which game type has most number of games?', 'sql_query': 'SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) DESC LIMIT 1', 'db_id': 'game_1'}, {'question': 'Show all student ids and the number of hours played.', 'sql_query': 'SELECT Stuid ,  sum(hours_played) FROM Plays_games GROUP BY Stuid', 'db_id': 'game_1'}, {'question': 'Show all sport name and the number of students.', 'sql_query': 'SELECT sportname ,  count(*) FROM Sportsinfo GROUP BY sportname', 'db_id': 'game_1'}], 'employee_hire_evaluation': [{'question': 'Find the name of the shops that do not hire any employee.', 'sql_query': 'SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)', 'db_id': 'employee_hire_evaluation'}, {'question': 'How many shops are there in each location?', 'sql_query': 'SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION', 'db_id': 'employee_hire_evaluation'}, {'question': 'Sort all the shops by number products in descending order, and return the name, location and district of each shop.', 'sql_query': 'SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC', 'db_id': 'employee_hire_evaluation'}], 'train_station': [{'question': "Show all locations which don't have a train station with at least 15 platforms.", 'sql_query': 'SELECT LOCATION FROM station EXCEPT SELECT LOCATION FROM station WHERE number_of_platforms  >=  15', 'db_id': 'train_station'}, {'question': 'Show the name, location, and number of platforms for all stations.', 'sql_query': 'SELECT name ,  LOCATION ,  number_of_platforms FROM station', 'db_id': 'train_station'}, {'question': 'Show all locations and the total number of platforms and passengers for all train stations in each location.', 'sql_query': 'SELECT LOCATION ,  sum(number_of_platforms) ,  sum(total_passengers) FROM station GROUP BY LOCATION', 'db_id': 'train_station'}], 'musical': [{'question': 'Who are the nominees who have been nominated for both a Tony Award and a Drama Desk Award?', 'sql_query': 'SELECT Nominee FROM musical WHERE Award  =  "Tony Award" INTERSECT SELECT Nominee FROM musical WHERE Award  =  "Drama Desk Award"', 'db_id': 'musical'}, {'question': 'Who are the nominees who were nominated for either of the Bob Fosse or Cleavant Derricks awards?', 'sql_query': 'SELECT Nominee FROM musical WHERE Award  =  "Tony Award" OR Award  =  "Cleavant Derricks"', 'db_id': 'musical'}, {'question': 'What is the duration of the oldest actor?', 'sql_query': 'SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1', 'db_id': 'musical'}], 'flight_2': [{'question': "How many United Airlines flights go to City 'Aberdeen'?", 'sql_query': 'SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  "Aberdeen" AND T3.Airline  =  "United Airlines"', 'db_id': 'flight_2'}, {'question': 'What are the airline names and abbreviations for airlines in the USA?', 'sql_query': 'SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  "USA"', 'db_id': 'flight_2'}, {'question': 'Give the city and country for the Alton airport.', 'sql_query': 'SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  "Alton"', 'db_id': 'flight_2'}], 'e_learning': [{'question': 'Find the common login name of course authors and students.', 'sql_query': 'SELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students', 'db_id': 'e_learning'}, {'question': 'What are all the dates of enrollment and completion in record?', 'sql_query': 'SELECT date_of_enrolment ,  date_of_completion FROM Student_Course_Enrolment', 'db_id': 'e_learning'}, {'question': 'What are the personal names and family names of the students? Sort the result in alphabetical order of the family name.', 'sql_query': 'SELECT personal_name ,  family_name FROM Students ORDER BY family_name', 'db_id': 'e_learning'}], 'behavior_monitoring': [{'question': 'What are the line 1 of addresses shared by some students and some teachers?', 'sql_query': 'SELECT T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.address_id INTERSECT SELECT T1.line_1 FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id', 'db_id': 'behavior_monitoring'}, {'question': 'What is the zip code of the address where the teacher with first name "Lyla" lives?', 'sql_query': 'SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id WHERE T2.first_name  =  "Lyla"', 'db_id': 'behavior_monitoring'}, {'question': 'Return the cell phone number and email address for all students.', 'sql_query': 'SELECT cell_mobile_number ,  email_address FROM STUDENTS', 'db_id': 'behavior_monitoring'}], 'flight_1': [{'question': 'Show names for all employees who do not have certificate of Boeing 737-800.', 'sql_query': 'SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  "Boeing 737-800"', 'db_id': 'flight_1'}, {'question': 'What are the departure and arrival dates of all flights from LA to Honolulu?', 'sql_query': 'SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  "Los Angeles" AND destination  =  "Honolulu"', 'db_id': 'flight_1'}, {'question': 'What are the names and distances for all airplanes?', 'sql_query': 'SELECT name ,  distance FROM Aircraft', 'db_id': 'flight_1'}], 'orchestra': [{'question': 'What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?', 'sql_query': 'SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003', 'db_id': 'orchestra'}, {'question': 'What is the name of the conductor who has worked the greatest number of years?', 'sql_query': 'SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1', 'db_id': 'orchestra'}, {'question': 'Please show the name of the conductor that has conducted orchestras founded after 2008.', 'sql_query': 'SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008', 'db_id': 'orchestra'}], 'hospital_1': [{'question': "Find the names of all physicians and their primary affiliated departments' names.", 'sql_query': 'SELECT T1.name ,  T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T2.PrimaryAffiliation  =  1', 'db_id': 'hospital_1'}, {'question': 'What are the names of departments that have primarily affiliated physicians.', 'sql_query': 'SELECT DISTINCT T2.name FROM affiliated_with AS T1 JOIN department AS T2 ON T1.department = T2.departmentid WHERE PrimaryAffiliation  =  1', 'db_id': 'hospital_1'}, {'question': "List the physicians' employee ids together with their primary affiliation departments' ids.", 'sql_query': 'SELECT physician ,  department FROM affiliated_with WHERE primaryaffiliation  =  1', 'db_id': 'hospital_1'}], 'gas_company': [{'question': 'Show all headquarters without a company in banking industry.', 'sql_query': "SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking'", 'db_id': 'gas_company'}, {'question': 'List the company name and rank for all companies in the decreasing order of their sales.', 'sql_query': 'SELECT company ,  rank FROM company ORDER BY Sales_billion DESC', 'db_id': 'gas_company'}, {'question': 'For each company id, what are the companies and how many gas stations does each one operate?', 'sql_query': 'SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id', 'db_id': 'gas_company'}], 'game_injury': [{'question': 'Show all headquarters with both a company in banking industry and a company in Oil and gas.', 'sql_query': "SELECT headquarters FROM company WHERE main_industry  =  'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry  =  'Oil and gas'", 'db_id': 'gas_company'}, {'question': 'How many games has each stadium held?', 'sql_query': 'SELECT T1.id ,  count(*) FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id GROUP BY T1.id', 'db_id': 'game_injury'}, {'question': 'What are the ids, scores, and dates of the games which caused at least two injury accidents?', 'sql_query': 'SELECT T1.id ,  T1.score ,  T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T2.game_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2', 'db_id': 'game_injury'}], 'department_store': [{'question': 'What are the distinct ids of customers who made an order after any order that was Cancelled?', 'sql_query': 'SELECT DISTINCT customer_id FROM Customer_Orders WHERE order_date  >  (SELECT min(order_date) FROM Customer_Orders WHERE order_status_code  =  "Cancelled")', 'db_id': 'department_store'}, {'question': 'Return the average price for each product type.', 'sql_query': 'SELECT product_type_code ,  avg(product_price) FROM products GROUP BY product_type_code', 'db_id': 'department_store'}, {'question': 'For each product type, return the maximum and minimum price.', 'sql_query': 'SELECT product_type_code ,  max(product_price) ,  min(product_price) FROM products GROUP BY product_type_code', 'db_id': 'department_store'}], 'scholar': [{'question': 'What did Liwen Xiong published in 2015 ?', 'sql_query': 'SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "Liwen Xiong" AND t3.year  =  2015;', 'db_id': 'scholar'}, {'question': 'papers with at least 5 citations', 'sql_query': 'SELECT DISTINCT t2.citingpaperid FROM paper AS t1 JOIN cite AS t2 ON t1.paperid  =  t2.citedpaperid GROUP BY t2.citingpaperid HAVING COUNT ( DISTINCT t2.citedpaperid )  >=  5;', 'db_id': 'scholar'}, {'question': 'how many papers does Christopher D. Manning have ?', 'sql_query': 'SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "Christopher D. Manning";', 'db_id': 'scholar'}], 'insurance_policies': [{'question': 'List the details of the customers who do not have any policies.', 'sql_query': 'SELECT customer_details FROM Customers EXCEPT SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.customer_id  =  T2.customer_id', 'db_id': 'insurance_policies'}, {'question': 'Of all the claims, what was the earliest date when any claim was made?', 'sql_query': 'SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1', 'db_id': 'insurance_policies'}, {'question': 'Find the the customer details and id for the customers who had more than one policy.', 'sql_query': 'SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.Customer_id GROUP BY T1.customer_id HAVING count(*)  >  1', 'db_id': 'insurance_policies'}], 'assets_maintenance': [{'question': 'Which company started the earliest the maintenance contract? Show the company name.', 'sql_query': 'SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id ORDER BY T2.contract_start_date ASC LIMIT 1', 'db_id': 'assets_maintenance'}, {'question': 'Which parts have more than 2 faults? Show the part name and id.', 'sql_query': 'SELECT T1.part_name ,  T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_id HAVING count(*)  >  2', 'db_id': 'assets_maintenance'}, {'question': 'List the asset id, details, make and model for every asset.', 'sql_query': 'SELECT asset_id ,  asset_details ,  asset_make ,  asset_model FROM Assets', 'db_id': 'assets_maintenance'}], 'network_2': [{'question': 'Find the name of the person who has no student friends.', 'sql_query': "SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.job  =  'student'", 'db_id': 'network_2'}, {'question': 'What is average age for different job title?', 'sql_query': 'SELECT avg(age) ,  job FROM Person GROUP BY job', 'db_id': 'network_2'}, {'question': 'What are all the friends of Alice who are female?', 'sql_query': "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'female'", 'db_id': 'network_2'}], 'tracking_software_problems': [{'question': 'For each product that has problems, find the number of problems reported after 1986-11-13 and the product id?', 'sql_query': 'SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > "1986-11-13" GROUP BY T2.product_id', 'db_id': 'tracking_software_problems'}, {'question': 'How many problems did the product called "voluptatem" have in record?', 'sql_query': 'SELECT count(*) FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = "voluptatem"', 'db_id': 'tracking_software_problems'}, {'question': 'Find the oldest log id and its corresponding problem id.', 'sql_query': 'SELECT problem_log_id ,  problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1', 'db_id': 'tracking_software_problems'}], 'movie_1': [{'question': 'Find the names of all reviewers who rated Gone with the Wind.', 'sql_query': "SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  'Gone with the Wind'", 'db_id': 'movie_1'}, {'question': 'What are the names of all movies made before 1980 or had James Cameron as the director?', 'sql_query': 'SELECT title FROM Movie WHERE director  =  "James Cameron" OR YEAR   <  1980', 'db_id': 'movie_1'}, {'question': 'What is the id of the reviewer whose name includes the word "Mike"?', 'sql_query': 'SELECT rID FROM Reviewer WHERE name LIKE "%Mike%"', 'db_id': 'movie_1'}], 'hr_1': [{'question': 'What is all the information regarding employees with salaries above the minimum and under 2500?', 'sql_query': 'SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500', 'db_id': 'hr_1'}, {'question': 'return the smallest salary for every departments.', 'sql_query': 'SELECT MIN(salary) ,  department_id FROM employees GROUP BY department_id', 'db_id': 'hr_1'}, {'question': 'What are the job titles, and range of salaries for jobs with maximum salary between 12000 and 18000?', 'sql_query': 'SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000', 'db_id': 'hr_1'}], 'imdb': [{'question': 'Find the actor who played " Alan Turing " in the movie " The Imitation Game "', 'sql_query': 'SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t2.role  =  "Alan Turing" AND t3.title  =  "The Imitation Game";', 'db_id': 'imdb'}, {'question': 'What was the budget of the movie Juno from 2007 ?', 'sql_query': 'SELECT budget FROM movie WHERE release_year  =  2007 AND title  =  "Juno";', 'db_id': 'imdb'}, {'question': 'Find all actors who were born in " New York City " in 1984', 'sql_query': 'SELECT name FROM actor WHERE birth_city  =  "New York City" AND birth_year  =  1984;', 'db_id': 'imdb'}], 'products_gen_characteristics': [{'question': "Count the number of characteristics of the 'flax' product.", 'sql_query': 'SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  "flax"', 'db_id': 'products_gen_characteristics'}, {'question': 'Find the number of products with category "Spices" and typically sold above 1000.', 'sql_query': 'SELECT count(*) FROM products WHERE product_category_code  =  "Spices" AND typical_buying_price  >  1000', 'db_id': 'products_gen_characteristics'}, {'question': "What are the unit of measure and category code for the 'chervil' product?", 'sql_query': 'SELECT t2.unit_of_measure ,  t2.product_category_code FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  "chervil"', 'db_id': 'products_gen_characteristics'}], 'loan_1': [{'question': 'What are the names of the different customers who have taken out a loan, ordered by the total amount that they have taken?', 'sql_query': 'SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)', 'db_id': 'loan_1'}, {'question': 'What is the total amount of money loaned by banks in New York state?', 'sql_query': "SELECT sum(T2.amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.state  =  'New York'", 'db_id': 'loan_1'}, {'question': 'What is the average account balance of customers with credit score below 50 for the different account types?', 'sql_query': 'SELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type', 'db_id': 'loan_1'}], 'dog_kennels': [{'question': 'Which states have both owners and professionals living there?', 'sql_query': 'SELECT state FROM Owners INTERSECT SELECT state FROM Professionals', 'db_id': 'dog_kennels'}, {'question': 'What are the arriving date and the departing date of all the dogs?', 'sql_query': 'SELECT date_arrived ,  date_departed FROM Dogs', 'db_id': 'dog_kennels'}, {'question': 'Find the first names of owners living in Virginia and the names of dogs they own.', 'sql_query': "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", 'db_id': 'dog_kennels'}], 'e_government': [{'question': 'What are the names of the services that have never been used?', 'sql_query': 'SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id  =  t2.service_id', 'db_id': 'e_government'}, {'question': 'Give the state corresponding to the line number building "6862 Kaitlyn Knolls".', 'sql_query': 'SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE "%6862 Kaitlyn Knolls%"', 'db_id': 'e_government'}, {'question': 'Find the payment method and phone of the party with email "enrico09@example.com".', 'sql_query': 'SELECT payment_method_code ,  party_phone FROM parties WHERE party_email  =  "enrico09@example.com"', 'db_id': 'e_government'}], 'tracking_grants_for_research': [{'question': 'How many staff does each project has? List the project id and the number in an ascending order.', 'sql_query': 'SELECT T1.project_id ,  count(*) FROM Project_Staff AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) ASC', 'db_id': 'tracking_grants_for_research'}, {'question': "What is the type of the document whose description starts with the word 'Initial'?", 'sql_query': "SELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%'", 'db_id': 'tracking_grants_for_research'}, {'question': 'When did the first staff for the projects started working?', 'sql_query': 'SELECT date_from FROM Project_Staff ORDER BY date_from ASC LIMIT 1', 'db_id': 'tracking_grants_for_research'}], 'film_rank': [{'question': 'What is the name of teh studio that created the most films?', 'sql_query': 'SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'film_rank'}, {'question': 'Please list the countries and years of film market estimations.', 'sql_query': 'SELECT T2.Country ,  T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID', 'db_id': 'film_rank'}, {'question': 'List the studios of each film and the number of films produced by that studio.', 'sql_query': 'SELECT Studio ,  COUNT(*) FROM film GROUP BY Studio', 'db_id': 'film_rank'}], 'academic': [{'question': 'return me the paper after 2000 in Databases area with more than 200 citations .', 'sql_query': 'SELECT t3.title FROM DOMAIN AS t2 JOIN domain_publication AS t1 ON t2.did  =  t1.did JOIN publication AS t3 ON t3.pid  =  t1.pid WHERE t2.name  =  "Databases" AND t3.citation_num  >  200 AND t3.year  >  2000;', 'db_id': 'academic'}, {'question': 'return me the total citations of papers in the VLDB conference in 2005 .', 'sql_query': 'SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  "VLDB" AND t2.year  =  2005;', 'db_id': 'academic'}, {'question': 'return me the number of papers published on PVLDB before 2000 .', 'sql_query': 'SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  "PVLDB" AND t2.year  <  2000;', 'db_id': 'academic'}], 'customer_complaints': [{'question': 'How many customers are there in the customer type with the most customers?', 'sql_query': 'SELECT count(*) FROM customers GROUP BY customer_type_code ORDER BY count(*) DESC LIMIT 1', 'db_id': 'customer_complaints'}, {'question': 'What are lines 1 and 2 of the addressed of the customer with the email "vbogisich@example.org"?', 'sql_query': 'SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  "vbogisich@example.org"', 'db_id': 'customer_complaints'}, {'question': 'What are all the different product names, and how many complains has each received?', 'sql_query': 'SELECT t1.product_name ,  count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_name', 'db_id': 'customer_complaints'}], 'storm_record': [{'question': 'What are the names of the storms that affected Denmark?', 'sql_query': "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark'", 'db_id': 'storm_record'}, {'question': 'What is the average and maximum damage in millions for storms that had a max speed over 1000?', 'sql_query': 'SELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  1000', 'db_id': 'storm_record'}, {'question': 'Show the average and maximum damage for all storms with max speed higher than 1000.', 'sql_query': 'SELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  1000', 'db_id': 'storm_record'}], 'music_1': [{'question': 'What are the names of all singers that are from the UK and released a song in English?', 'sql_query': 'SELECT artist_name FROM artist WHERE country  =  "UK" INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  "english"', 'db_id': 'music_1'}, {'question': 'What are the names of all male British artists?', 'sql_query': 'SELECT artist_name FROM artist WHERE country  =  "UK" AND gender  =  "Male"', 'db_id': 'music_1'}, {'question': 'What are the different names and countries of origins for all artists whose song ratings are above 9?', 'sql_query': 'SELECT DISTINCT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.rating  >  9', 'db_id': 'music_1'}], 'tvshow': [{'question': 'What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?', 'sql_query': "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')", 'db_id': 'tvshow'}, {'question': 'How many cartoons did each director create?', 'sql_query': 'SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by', 'db_id': 'tvshow'}, {'question': 'What are the package options and the name of the series for the TV Channel that supports high definition TV?', 'sql_query': 'SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  "yes"', 'db_id': 'tvshow'}], 'device': [{'question': 'List the software platform shared by the greatest number of devices.', 'sql_query': 'SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'device'}, {'question': 'List the open date of open year of the shop named "Apple".', 'sql_query': 'SELECT Open_Date ,  Open_Year FROM shop WHERE Shop_Name  =  "Apple"', 'db_id': 'device'}, {'question': 'Show names of shops and the carriers of devices they have in stock.', 'sql_query': 'SELECT T3.Shop_Name ,  T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID JOIN shop AS T3 ON T1.Shop_ID  =  T3.Shop_ID', 'db_id': 'device'}], 'sports_competition': [{'question': 'what are the name of players who get more than the average points.', 'sql_query': 'SELECT name FROM player WHERE points  >  (SELECT avg(points) FROM player)', 'db_id': 'sports_competition'}, {'question': 'List the types of competition and the number of competitions of each type.', 'sql_query': 'SELECT Competition_type ,  COUNT(*) FROM competition GROUP BY Competition_type', 'db_id': 'sports_competition'}, {'question': 'What is the average number of points for players from the "AIB" club?', 'sql_query': 'SELECT avg(T2.Points) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T1.name  =  "AIB"', 'db_id': 'sports_competition'}], 'university_basketball': [{'question': 'Find the founded year of the newest non public school.', 'sql_query': "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1", 'db_id': 'university_basketball'}, {'question': 'What is the highest acc percent score in the competition?', 'sql_query': 'SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1', 'db_id': 'university_basketball'}, {'question': 'What are the different affiliations, and what is the total enrollment of schools founded after 1850 for each enrollment type?', 'sql_query': 'SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation', 'db_id': 'university_basketball'}], 'music_2': [{'question': 'What is the first and last name of artist who performed "Le Pop"?', 'sql_query': 'SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  "Le Pop"', 'db_id': 'music_2'}, {'question': 'How many instruments does the song "Le Pop" use?', 'sql_query': 'SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  "Le Pop"', 'db_id': 'music_2'}, {'question': 'How many songs have a lead vocal?', 'sql_query': 'SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  "lead"', 'db_id': 'music_2'}], 'body_builder': [{'question': 'List the weight of the body builders who have snatch score higher than 140 or have the height greater than 200.', 'sql_query': 'SELECT T2.weight FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T1.snatch  >  140 OR T2.height  >  200;', 'db_id': 'body_builder'}, {'question': 'List each birth place along with the number of people from there.', 'sql_query': 'SELECT Birth_Place ,  COUNT(*) FROM people GROUP BY Birth_Place', 'db_id': 'body_builder'}, {'question': 'What are the names of body builders in descending order of total scores?', 'sql_query': 'SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC', 'db_id': 'body_builder'}], 'bike_1': [{'question': 'What are the names of stations that are located in Palo Alto city but have never been the ending point of trips more than 100 times?', 'sql_query': 'SELECT name FROM station WHERE city  =  "Palo Alto" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  100', 'db_id': 'bike_1'}, {'question': 'What are the id and name of the stations that have ever had more than 12 bikes available?', 'sql_query': 'SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12', 'db_id': 'bike_1'}, {'question': 'On which day has it neither been foggy nor rained in the zip code of 94107?', 'sql_query': 'SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != "Fog" AND EVENTS != "Rain"', 'db_id': 'bike_1'}], 'shop_membership': [{'question': 'Show all member names and registered branch names sorted by register year.', 'sql_query': 'SELECT T3.name ,  T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id ORDER BY T1.register_year', 'db_id': 'shop_membership'}, {'question': 'Show all city with a branch opened in 2001 and a branch with more than 100 membership.', 'sql_query': 'SELECT city FROM branch WHERE open_year  =  2001 AND membership_amount  >  100', 'db_id': 'shop_membership'}, {'question': 'What are the names for the 3 branches that have the most memberships?', 'sql_query': 'SELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3', 'db_id': 'shop_membership'}], 'party_people': [{'question': 'Show the member names which are in both the party with id 3 and the party with id 1.', 'sql_query': 'SELECT member_name FROM member WHERE party_id  =  3 INTERSECT SELECT member_name FROM member WHERE party_id  =  1', 'db_id': 'party_people'}, {'question': 'Show all party names and their region names.', 'sql_query': 'SELECT T1.party_name ,  T2.region_name FROM party AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id', 'db_id': 'party_people'}, {'question': 'Show all ministers and parties they belong to in descending order of the time they took office.', 'sql_query': 'SELECT minister ,  party_name FROM party ORDER BY took_office DESC', 'db_id': 'party_people'}], 'student_assessment': [{'question': 'List the id of students who never attends courses?', 'sql_query': 'SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)', 'db_id': 'student_assessment'}, {'question': 'How many courses does the student with id 171 actually attend?', 'sql_query': 'SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171', 'db_id': 'student_assessment'}, {'question': 'what are the first name and last name of all candidates?', 'sql_query': 'SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id', 'db_id': 'student_assessment'}], 'performance_attendance': [{'question': 'Show the most common location of performances.', 'sql_query': 'SELECT LOCATION FROM performance GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'performance_attendance'}, {'question': 'What are the dates and locations of performances?', 'sql_query': 'SELECT Date ,  LOCATION FROM performance', 'db_id': 'performance_attendance'}, {'question': 'What is the date of the performance with the highest number of attendees?', 'sql_query': 'SELECT Date FROM performance ORDER BY Attendance DESC LIMIT 1', 'db_id': 'performance_attendance'}], 'concert_singer': [{'question': 'What are the names of the stadiums without any concerts?', 'sql_query': 'SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)', 'db_id': 'concert_singer'}, {'question': 'Show the stadium name and the number of concerts in each stadium.', 'sql_query': 'SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id', 'db_id': 'concert_singer'}, {'question': 'What is the name and capacity for the stadium with the highest average attendance?', 'sql_query': 'SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1', 'db_id': 'concert_singer'}], 'csu_1': [{'question': 'For each Orange county campus, report the number of degrees granted after 2000.', 'sql_query': 'SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T1.county  =  "Orange" AND T2.year  >=  2000 GROUP BY T1.campus', 'db_id': 'csu_1'}, {'question': 'What is the number of graduates in "San Francisco State University" in year 2004?', 'sql_query': 'SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  "San Francisco State University"', 'db_id': 'csu_1'}, {'question': 'What are the degrees conferred in "San Francisco State University" in 2001.', 'sql_query': 'SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  "San Francisco State University" AND t2.year  =  2001', 'db_id': 'csu_1'}], 'formula_1': [{'question': 'Find the driver id and number of races of all drivers who have at most participated in 30 races?', 'sql_query': 'SELECT T1.driverid ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  30', 'db_id': 'formula_1'}, {'question': 'Find all the distinct id and nationality of drivers who have had laptime more than 100000 milliseconds?', 'sql_query': 'SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000', 'db_id': 'formula_1'}, {'question': 'What are the names of races that were held after 2017 and the circuits were in the country of Spain?', 'sql_query': 'SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = "Spain" AND T1.year > 2017', 'db_id': 'formula_1'}], 'activity_1': [{'question': 'What are ids of the faculty members who not only participate in an activity but also advise a student.', 'sql_query': 'SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student', 'db_id': 'activity_1'}, {'question': 'Which students have professors as their advisors? Find their student ids.', 'sql_query': 'SELECT T2.StuID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.rank  =  "Professor"', 'db_id': 'activity_1'}, {'question': 'Show the first name and last name for all the instructors.', 'sql_query': 'SELECT fname ,  lname FROM Faculty WHERE Rank  =  "Instructor"', 'db_id': 'activity_1'}], 'local_govt_and_lot': [{'question': 'How many services has each resident requested? List the resident id, details, and the count in descending order of the count.', 'sql_query': 'SELECT T1.resident_id ,  T1.other_details ,  count(*) FROM Residents AS T1 JOIN Residents_Services AS T2 ON T1.resident_id  =  T2.resident_id GROUP BY T1.resident_id ORDER BY count(*) DESC', 'db_id': 'local_govt_and_lot'}, {'question': 'Which events have the number of notes between one and three? List the event id and the property id.', 'sql_query': 'SELECT T1.Customer_Event_ID  ,  T1.property_id FROM Customer_Events AS T1 JOIN Customer_Event_Notes AS T2 ON T1.Customer_Event_ID  =  T2.Customer_Event_ID GROUP BY T1.customer_event_id HAVING count(*) BETWEEN 1 AND 3', 'db_id': 'local_govt_and_lot'}, {'question': 'What are the id and details of the customers who have at least 3 events?', 'sql_query': 'SELECT T1.customer_id ,  T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  3', 'db_id': 'local_govt_and_lot'}], 'decoration_competition': [{'question': 'Show the most common country across members.', 'sql_query': 'SELECT Country FROM member GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'decoration_competition'}, {'question': 'What are the names and countries of members?', 'sql_query': 'SELECT Name ,  Country FROM member', 'db_id': 'decoration_competition'}, {'question': 'Show the distinct leader names of colleges associated with members from country "Canada".', 'sql_query': 'SELECT DISTINCT T1.Leader_Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID WHERE T2.Country  =  "Canada"', 'db_id': 'decoration_competition'}], 'manufactory_1': [{'question': 'Find the name of companies whose revenue is smaller than the revenue of all companies based in Austin.', 'sql_query': "SELECT name FROM manufacturers WHERE revenue  <  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')", 'db_id': 'manufactory_1'}, {'question': 'Select the names of manufacturer whose products have an average price higher than or equal to $150.', 'sql_query': 'SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name HAVING avg(T1.price) >= 150', 'db_id': 'manufactory_1'}, {'question': 'Select the name of each manufacturer along with the name and price of its most expensive product.', 'sql_query': 'SELECT T1.Name ,  max(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name', 'db_id': 'manufactory_1'}], 'book_2': [{'question': 'Please show the most common publication date.', 'sql_query': 'SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'book_2'}, {'question': 'Show different publishers together with the number of publications they have.', 'sql_query': 'SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher', 'db_id': 'book_2'}, {'question': 'What are the title and issues of the books?', 'sql_query': 'SELECT Title ,  Issues FROM book', 'db_id': 'book_2'}], 'flight_company': [{'question': 'What is the most common company type, and how many are there?', 'sql_query': 'SELECT TYPE ,  count(*) FROM operate_company GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1', 'db_id': 'flight_company'}, {'question': 'What are the ids and names of the companies that operated more than one flight?', 'sql_query': 'SELECT T1.id ,  T1.name FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id GROUP BY T1.id HAVING count(*)  >  1', 'db_id': 'flight_company'}, {'question': 'List the id, country, city and name of the airports ordered alphabetically by the name.', 'sql_query': 'SELECT id ,  country ,  city ,  name FROM airport ORDER BY name', 'db_id': 'flight_company'}], 'party_host': [{'question': 'List the names of hosts who did not serve as a host of any party in our record.', 'sql_query': 'SELECT Name FROM HOST WHERE Host_ID NOT IN (SELECT Host_ID FROM party_host)', 'db_id': 'party_host'}, {'question': 'What is the location of the party with the most hosts?', 'sql_query': 'SELECT LOCATION FROM party ORDER BY Number_of_hosts DESC LIMIT 1', 'db_id': 'party_host'}, {'question': 'Show different nationalities along with the number of hosts of each nationality.', 'sql_query': 'SELECT Nationality ,  COUNT(*) FROM HOST GROUP BY Nationality', 'db_id': 'party_host'}], 'cre_Docs_and_Epenses': [{'question': "What are the ids of documents which don't have expense budgets?", 'sql_query': 'SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_with_expenses', 'db_id': 'cre_Docs_and_Epenses'}, {'question': 'Show the ids and names of all documents.', 'sql_query': 'SELECT document_id ,  document_name FROM Documents', 'db_id': 'cre_Docs_and_Epenses'}, {'question': 'What is the project detail for the project with document "King Book"?', 'sql_query': 'SELECT T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id WHERE T2.document_name  =  "King Book"', 'db_id': 'cre_Docs_and_Epenses'}], 'student_1': [{'question': 'Find the classroom that the most students use.', 'sql_query': 'SELECT classroom FROM list GROUP BY classroom ORDER BY count(*) DESC LIMIT 1', 'db_id': 'student_1'}, {'question': 'For each classroom report the grade that is taught in it. Report just the classroom number and the grade number.', 'sql_query': 'SELECT DISTINCT classroom ,  grade FROM list', 'db_id': 'student_1'}, {'question': 'What are the first names of the teachers who teach grade 1?', 'sql_query': 'SELECT DISTINCT T2.firstname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  1', 'db_id': 'student_1'}], 'customers_and_invoices': [{'question': 'What are teh names of the different products, as well as the number of customers who have ordered each product.', 'sql_query': 'SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name', 'db_id': 'customers_and_invoices'}, {'question': 'Show order ids and the number of products in each order.', 'sql_query': 'SELECT order_id ,  count(DISTINCT product_id) FROM Order_items GROUP BY order_id', 'db_id': 'customers_and_invoices'}, {'question': 'What are the ids and names of accounts with 4 or more transactions?', 'sql_query': 'SELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  4', 'db_id': 'customers_and_invoices'}], 'restaurants': [{'question': 'where can i eat french food in the bay area ?', 'sql_query': 'SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  "bay area" AND t1.food_type  =  "french";', 'db_id': 'restaurants'}, {'question': 'give me a restaurant in alameda ?', 'sql_query': 'SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "alameda";', 'db_id': 'restaurants'}, {'question': 'how many french restaurants are there in palo alto ?', 'sql_query': 'SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "palo alto" AND t1.food_type  =  "french";', 'db_id': 'restaurants'}], 'climbing': [{'question': 'What is the height of the mountain climbined by the climbing who had the most points?', 'sql_query': 'SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1', 'db_id': 'climbing'}, {'question': 'Show the distinct names of mountains climbed by climbers from country "West Germany".', 'sql_query': 'SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  "West Germany"', 'db_id': 'climbing'}, {'question': 'How many climbers are from each country?', 'sql_query': 'SELECT Country ,  COUNT(*) FROM climber GROUP BY Country', 'db_id': 'climbing'}], 'election': [{'question': 'Which parties did not have any delegates in elections?', 'sql_query': 'SELECT Party FROM party WHERE Party_ID NOT IN (SELECT Party FROM election)', 'db_id': 'election'}, {'question': 'What are the names of the county that the delegates on "Appropriations" committee belong to?', 'sql_query': 'SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T2.Committee  =  "Appropriations"', 'db_id': 'election'}, {'question': 'Which counties have two or more delegates? Give me the county names.', 'sql_query': 'SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2', 'db_id': 'election'}], 'aircraft': [{'question': 'What are the names of all the aircrafts associated with London Gatwick airport?', 'sql_query': 'SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  "London Gatwick"', 'db_id': 'aircraft'}, {'question': 'What is the maximum and mininum number of transit passengers for all airports?', 'sql_query': 'SELECT max(Transit_Passengers) ,  min(Transit_Passengers) FROM airport', 'db_id': 'aircraft'}, {'question': 'Show all information on the airport that has the largest number of international passengers.', 'sql_query': 'SELECT * FROM airport ORDER BY International_Passengers DESC LIMIT 1', 'db_id': 'aircraft'}], 'pets_1': [{'question': 'Find the number of dog pets that are raised by female students (with sex F).', 'sql_query': "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", 'db_id': 'pets_1'}, {'question': 'Find the average and maximum age for each type of pet.', 'sql_query': 'SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype', 'db_id': 'pets_1'}, {'question': 'Find the number of pets for each student who has any pet and student id.', 'sql_query': 'SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid', 'db_id': 'pets_1'}], 'customers_and_products_contacts': [{'question': 'How many products have a price higher than the average?', 'sql_query': 'SELECT count(*) FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products)', 'db_id': 'customers_and_products_contacts'}, {'question': 'Show each state and the number of addresses in each state.', 'sql_query': 'SELECT state_province_county ,  count(*) FROM addresses GROUP BY state_province_county', 'db_id': 'customers_and_products_contacts'}, {'question': 'Show the minimum, maximum, average price for all products.', 'sql_query': 'SELECT min(product_price) ,  max(product_price) ,  avg(product_price) FROM products', 'db_id': 'customers_and_products_contacts'}], 'entrepreneur': [{'question': 'Return the investor who have invested in the greatest number of entrepreneurs.', 'sql_query': 'SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'entrepreneur'}, {'question': 'Give the total money requested by entrepreneurs who are taller than 1.85.', 'sql_query': 'SELECT sum(T1.Money_Requested) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  1.85', 'db_id': 'entrepreneur'}, {'question': 'What is the weight of the shortest person?', 'sql_query': 'SELECT Weight FROM people ORDER BY Height ASC LIMIT 1', 'db_id': 'entrepreneur'}]}