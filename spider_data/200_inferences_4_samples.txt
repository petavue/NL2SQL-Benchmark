{'geo': [{'question': 'what is the state with the lowest population', 'sql_query': 'SELECT state_name FROM state WHERE population  =  ( SELECT MIN ( population ) FROM state );', 'db_id': 'geo'}, {'question': 'what is the capital of the smallest state', 'sql_query': 'SELECT capital FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );', 'db_id': 'geo'}, {'question': 'what are major rivers in illinois', 'sql_query': 'SELECT river_name FROM river WHERE LENGTH  >  750 AND traverse  =  "illinois";', 'db_id': 'geo'}, {'question': 'what are the capitals of states that border texas', 'sql_query': 'SELECT t2.capital FROM state AS t2 JOIN border_info AS t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  "texas";', 'db_id': 'geo'}], 'cre_Doc_Control_Systems': [{'question': "List the employees who have not showed up in any circulation history of documents. List the employee's name.", 'sql_query': 'SELECT employee_name FROM Employees EXCEPT SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id', 'db_id': 'cre_Doc_Control_Systems'}, {'question': 'Which document has the most draft copies? List its document id and number of draft copies.', 'sql_query': 'SELECT document_id , count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT 1;', 'db_id': 'cre_Doc_Control_Systems'}, {'question': 'What is the document status description of the document with id 1?', 'sql_query': 'SELECT Ref_Document_Status.document_status_description FROM Ref_Document_Status JOIN Documents ON Documents.document_status_code = Ref_Document_Status.document_status_code WHERE Documents.document_id = 1;', 'db_id': 'cre_Doc_Control_Systems'}, {'question': 'What is the role of the employee named Koby?', 'sql_query': 'SELECT T1.role_description FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code WHERE T2.employee_name = "Koby";', 'db_id': 'cre_Doc_Control_Systems'}], 'student_transcripts_tracking': [{'question': 'How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.', 'sql_query': 'SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1', 'db_id': 'student_transcripts_tracking'}, {'question': 'Which semesters do not have any student enrolled? List the semester name.', 'sql_query': 'SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )', 'db_id': 'student_transcripts_tracking'}, {'question': 'What are the names and id of courses having at most 2 sections?', 'sql_query': 'SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2', 'db_id': 'student_transcripts_tracking'}, {'question': 'What is the department description for the one whose name has the word computer?', 'sql_query': "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'", 'db_id': 'student_transcripts_tracking'}], 'product_catalog': [{'question': 'Find the catalog publisher that has the most catalogs.', 'sql_query': 'SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1', 'db_id': 'product_catalog'}, {'question': 'What is the level name of the cheapest catalog (in USD)?', 'sql_query': 'SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1', 'db_id': 'product_catalog'}, {'question': 'What are the average and minimum price (in Euro) of all products?', 'sql_query': 'SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents', 'db_id': 'product_catalog'}, {'question': 'Which catalog publishers have substring "Murray" in their names?', 'sql_query': 'SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE "%Murray%"', 'db_id': 'product_catalog'}], 'wta_1': [{'question': 'Find the year that has the most number of matches.', 'sql_query': 'SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1', 'db_id': 'wta_1'}, {'question': 'What are the names of players who won in both 2013 and 2016?', 'sql_query': 'SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016', 'db_id': 'wta_1'}, {'question': 'Find the name and rank of the 3 youngest winners across all matches.', 'sql_query': 'SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3', 'db_id': 'wta_1'}, {'question': 'How many total tours were there for each ranking date?', 'sql_query': 'SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date', 'db_id': 'wta_1'}], 'insurance_and_eClaims': [{'question': 'Which customers have an insurance policy with the type code "Deputy" or "Uniform"? Return the customer details.', 'sql_query': 'SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  "Deputy" OR t1.policy_type_code  =  "Uniform"', 'db_id': 'insurance_and_eClaims'}, {'question': 'What are the names of the customers and staff members?', 'sql_query': 'SELECT customer_details FROM customers UNION SELECT staff_details FROM staff', 'db_id': 'insurance_and_eClaims'}, {'question': 'Find all the policy type codes associated with the customer "Dayana Robel"', 'sql_query': 'SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  "Dayana Robel"', 'db_id': 'insurance_and_eClaims'}, {'question': 'Find the names of the customers who have an deputy policy.', 'sql_query': 'SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  "Deputy"', 'db_id': 'insurance_and_eClaims'}], 'document_management': [{'question': 'Find the average access count of documents with the least popular structure.', 'sql_query': 'SELECT avg(access_count) FROM documents GROUP BY document_structure_code ORDER BY count(*) ASC LIMIT 1', 'db_id': 'document_management'}, {'question': 'Find all the name of documents without any sections.', 'sql_query': 'SELECT document_name FROM documents WHERE document_code NOT IN (SELECT document_code FROM document_sections)', 'db_id': 'document_management'}, {'question': 'Find the name of the document that has been accessed the greatest number of times, as well as the count of how many times it has been accessed?', 'sql_query': 'SELECT document_name ,  access_count FROM documents ORDER BY access_count DESC LIMIT 1', 'db_id': 'document_management'}, {'question': 'Find the name and access counts of all documents, in alphabetic order of the document name.', 'sql_query': 'SELECT document_name ,  access_count FROM documents ORDER BY document_name', 'db_id': 'document_management'}], 'club_1': [{'question': 'Find the average age of members of the club "Hopkins Student Enterprises".', 'sql_query': 'SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  "Hopkins Student Enterprises"', 'db_id': 'club_1'}, {'question': 'Count the members of the club "Tennis Club".', 'sql_query': 'SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  "Tennis Club"', 'db_id': 'club_1'}, {'question': 'How many different roles are there in the club "Bootup Baltimore"?', 'sql_query': 'SELECT count(DISTINCT t2.position) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid WHERE t1.clubname  =  "Bootup Baltimore"', 'db_id': 'club_1'}, {'question': 'Count the number of different positions in the club "Bootup Baltimore".', 'sql_query': 'SELECT count(DISTINCT t2.position) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid WHERE t1.clubname  =  "Bootup Baltimore"', 'db_id': 'club_1'}], 'phone_1': [{'question': 'Find the names of the chip models that are not used by any phone with full accreditation type.', 'sql_query': "SELECT model_name FROM chip_model EXCEPT SELECT chip_model FROM phone WHERE Accreditation_type  =  'Full'", 'db_id': 'phone_1'}, {'question': 'Find the name of the company that has the least number of phone models. List the company name and the number of phone model produced by that company.', 'sql_query': 'SELECT Company_name ,  count(*) FROM phone GROUP BY Company_name ORDER BY count(*) ASC LIMIT 1;', 'db_id': 'phone_1'}, {'question': 'Find the Char cells, Pixels and Hardware colours for the screen of the phone whose hardware model name is "LG-P760".', 'sql_query': 'SELECT T1.Char_cells ,  T1.Pixels ,  T1.Hardware_colours FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Hardware_Model_name = "LG-P760";', 'db_id': 'phone_1'}, {'question': 'List the maximum, minimum and average number of used kb in screen mode.', 'sql_query': 'SELECT max(used_kb) , min(used_kb) , avg(used_kb) FROM screen_mode;', 'db_id': 'phone_1'}], 'soccer_2': [{'question': 'What is the number of states that has some colleges whose enrollment is smaller than the average enrollment?', 'sql_query': 'SELECT count(DISTINCT state) FROM college WHERE enr  <  (SELECT avg(enr) FROM college)', 'db_id': 'soccer_2'}, {'question': 'How many states have a college with more students than average?', 'sql_query': 'SELECT count(DISTINCT state) FROM college WHERE enr  >  (SELECT avg(enr) FROM college)', 'db_id': 'soccer_2'}, {'question': 'Find the names of the students who are in the position of striker and got a yes tryout decision.', 'sql_query': "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes' AND T2.pPos  =  'striker'", 'db_id': 'soccer_2'}, {'question': 'Find the name, enrollment of the colleges whose size is bigger than 10000 and location is in state LA.', 'sql_query': 'SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = "LA"', 'db_id': 'soccer_2'}], 'wrestler': [{'question': 'Please show the most common reigns of wrestlers.', 'sql_query': 'SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'wrestler'}, {'question': 'Show the teams that have both wrestlers eliminated by "Orton" and wrestlers eliminated by "Benjamin".', 'sql_query': 'SELECT Team FROM Elimination WHERE Eliminated_By  =  "Orton" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  "Benjamin"', 'db_id': 'wrestler'}, {'question': 'What are the names of wrestlers and the elimination moves?', 'sql_query': 'SELECT T2.Name ,  T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID', 'db_id': 'wrestler'}, {'question': 'Show times of elimination of wrestlers with days held more than 50.', 'sql_query': 'SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  50', 'db_id': 'wrestler'}], 'race_track': [{'question': 'What are the locations that have both tracks with more than 90000 seats, and tracks with fewer than 70000 seats?', 'sql_query': 'SELECT LOCATION FROM track WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM track WHERE seating  <  70000', 'db_id': 'race_track'}, {'question': 'Find the locations where have both tracks with more than 90000 seats and tracks with less than 70000 seats.', 'sql_query': 'SELECT LOCATION FROM track WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM track WHERE seating  <  70000', 'db_id': 'race_track'}, {'question': 'Show name, class, and date for all races.', 'sql_query': 'SELECT name ,  CLASS ,  date FROM race', 'db_id': 'race_track'}, {'question': 'Show the name and location for all tracks.', 'sql_query': 'SELECT name ,  LOCATION FROM track', 'db_id': 'race_track'}], 'match_season': [{'question': 'What is the position that is most common among players in match seasons?', 'sql_query': 'SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count(*) DESC LIMIT 1', 'db_id': 'match_season'}, {'question': 'Return the colleges that have players who play the Midfielder position, as well as players who play the Defender position.', 'sql_query': 'SELECT College FROM match_season WHERE POSITION  =  "Midfielder" INTERSECT SELECT College FROM match_season WHERE POSITION  =  "Defender"', 'db_id': 'match_season'}, {'question': 'Show the positions of the players from the team with name "Ryley Goldner".', 'sql_query': 'SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  "Ryley Goldner"', 'db_id': 'match_season'}, {'question': 'What are the distinct positions of the players from a country whose capital is Dublin?', 'sql_query': 'SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  "Dublin"', 'db_id': 'match_season'}], 'dorm_1': [{'question': 'Find the name of dorms that do not have any amenity', 'sql_query': 'SELECT dorm_name FROM dorm WHERE dormid NOT IN (SELECT dormid FROM has_amenity)', 'db_id': 'dorm_1'}, {'question': "What are the names of all the dorms that don't have any amenities?", 'sql_query': 'SELECT dorm_name FROM dorm WHERE dormid NOT IN (SELECT dormid FROM has_amenity)', 'db_id': 'dorm_1'}, {'question': 'Find the first name of students living in city PHL whose age is between 20 and 25.', 'sql_query': "SELECT fname FROM student WHERE city_code  =  'PHL' AND age BETWEEN 20 AND 25", 'db_id': 'dorm_1'}, {'question': 'How many female students (sex is F) whose age is below 25?', 'sql_query': "SELECT count(*) FROM student WHERE sex  =  'F' AND age  <  25", 'db_id': 'dorm_1'}], 'department_management': [{'question': "What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?", 'sql_query': "SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T3.born_state  =  'Alabama'", 'db_id': 'department_management'}, {'question': 'In which year were most departments established?', 'sql_query': 'SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1', 'db_id': 'department_management'}, {'question': 'Which department has more than 1 head at a time? List the id, name and the number of heads.', 'sql_query': 'SELECT T1.department_id ,  T1.name ,  count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  1', 'db_id': 'department_management'}, {'question': "Which head's name has the substring 'Ha'? List the id and name.", 'sql_query': "SELECT head_id ,  name FROM head WHERE name LIKE '%Ha%'", 'db_id': 'department_management'}], 'cre_Doc_Tracking_DB': [{'question': 'Show the location name for document "Robin CV".', 'sql_query': 'SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id  =  T2.document_id JOIN Ref_locations AS T3 ON T2.location_code  =  T3.location_code WHERE T1.document_name  =  "Robin CV"', 'db_id': 'cre_Doc_Tracking_DB'}, {'question': 'Show the role code with the least employees.', 'sql_query': 'SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) ASC LIMIT 1', 'db_id': 'cre_Doc_Tracking_DB'}, {'question': 'What are the id of each employee and the number of document destruction authorised by that employee?', 'sql_query': 'SELECT Destruction_Authorised_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID', 'db_id': 'cre_Doc_Tracking_DB'}, {'question': 'What are the name and description for location code x?', 'sql_query': 'SELECT location_name ,  location_description FROM Ref_locations WHERE location_code  =  "x"', 'db_id': 'cre_Doc_Tracking_DB'}], 'inn_1': [{'question': 'Find the name of rooms booked by some customers whose first name contains ROY.', 'sql_query': "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE firstname LIKE '%ROY%'", 'db_id': 'inn_1'}, {'question': 'Find the name of rooms whose price is higher than the average price.', 'sql_query': 'SELECT roomName FROM Rooms WHERE basePrice  >  ( SELECT avg(basePrice) FROM Rooms );', 'db_id': 'inn_1'}, {'question': 'Find the number of rooms for each bed type.', 'sql_query': 'SELECT bedType ,  count(*) FROM Rooms GROUP BY bedType;', 'db_id': 'inn_1'}, {'question': 'How many rooms have king beds? Report the number for each decor type.', 'sql_query': 'SELECT decor ,  count(*) FROM Rooms WHERE bedType = "King" GROUP BY decor;', 'db_id': 'inn_1'}], 'customers_and_addresses': [{'question': 'How many types of products have Rodrick Heaney bought in total?', 'sql_query': 'SELECT count(DISTINCT t3.product_id) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  "Rodrick Heaney"', 'db_id': 'customers_and_addresses'}, {'question': 'Which payment method is used by most customers?', 'sql_query': 'SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1', 'db_id': 'customers_and_addresses'}, {'question': 'What are the name and active date of the customers whose contact channel code is email?', 'sql_query': "SELECT t1.customer_name ,  t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.channel_code  =  'Email'", 'db_id': 'customers_and_addresses'}, {'question': 'Which contact channel has been used by the customer with name "Tillman Ernser"?', 'sql_query': 'SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  "Tillman Ernser"', 'db_id': 'customers_and_addresses'}], 'customers_card_transactions': [{'question': 'Show the customer id and number of accounts with most accounts.', 'sql_query': 'SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1', 'db_id': 'customers_card_transactions'}, {'question': 'Return the id of the customer who has the most cards, as well as the number of cards.', 'sql_query': 'SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1', 'db_id': 'customers_card_transactions'}, {'question': 'Count the number of cards the customer with the first name Art and last name Turcotte has.', 'sql_query': 'SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  "Art" AND T2.customer_last_name  =  "Turcotte"', 'db_id': 'customers_card_transactions'}, {'question': 'What are the ids, full names, and phones of each customer?', 'sql_query': 'SELECT customer_id ,  customer_first_name ,  customer_last_name ,  customer_phone FROM Customers', 'db_id': 'customers_card_transactions'}], 'cre_Drama_Workshop_Groups': [{'question': 'What is the product ID of the most frequently ordered item on invoices?', 'sql_query': 'SELECT Product_ID FROM INVOICES GROUP BY Product_ID ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'cre_Drama_Workshop_Groups'}, {'question': 'Find the order dates of the orders with price above 1000.', 'sql_query': 'SELECT T1.Order_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID JOIN Products AS T3 ON T2.Product_ID  =  T3.Product_ID WHERE T3.Product_price  >  1000', 'db_id': 'cre_Drama_Workshop_Groups'}, {'question': 'What are the different product names? What is the average product price for each of them?', 'sql_query': 'SELECT Product_Name ,  avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name', 'db_id': 'cre_Drama_Workshop_Groups'}, {'question': 'What are the planned delivery date and actual delivery date for each booking?', 'sql_query': 'SELECT Planned_Delivery_Date ,  Actual_Delivery_Date FROM BOOKINGS', 'db_id': 'cre_Drama_Workshop_Groups'}], 'baseball_1': [{'question': "Find the average height of the players who belong to the college called 'Yale University'.", 'sql_query': "SELECT avg(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id  =  T2.player_id JOIN college AS T3 ON T3.college_id  =  T2.college_id WHERE T3.name_full  =  'Yale University';", 'db_id': 'baseball_1'}, {'question': 'For each year, return the year and the number of times the team Boston Red Stockings won in the postseasons.', 'sql_query': "SELECT count(*) ,  T1.year FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' GROUP BY T1.year", 'db_id': 'baseball_1'}, {'question': 'How many home games did the team Boston Red Stockings play from 1990 to 2000 in total?', 'sql_query': "SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000;", 'db_id': 'baseball_1'}, {'question': 'How many games in 1885 postseason resulted in ties (that is, the value of "ties" is \'1\')?', 'sql_query': 'SELECT count(*) FROM postseason WHERE YEAR  =  1885 AND ties  =  1;', 'db_id': 'baseball_1'}], 'cre_Theme_park': [{'question': 'Find the names of the tourist attractions that is either accessible by bus or at address 254 Ottilie Junction.', 'sql_query': 'SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  "254 Ottilie Junction" OR T2.How_to_Get_There  =  "bus"', 'db_id': 'cre_Theme_park'}, {'question': 'What are the names of tourist attractions that can be reached by walk or is at address 660 Shea Crescent?', 'sql_query': 'SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  "660 Shea Crescent" OR T2.How_to_Get_There  =  "walk"', 'db_id': 'cre_Theme_park'}, {'question': "Show different tourist attractions' names, ids, and the corresponding number of visits.", 'sql_query': 'SELECT T1.Name ,  T2.Tourist_Attraction_ID ,   COUNT(*) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID', 'db_id': 'cre_Theme_park'}, {'question': 'Which tourist attraction is associated with the photo "game1"? Return its name.', 'sql_query': 'SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T1.Name  =  "game1"', 'db_id': 'cre_Theme_park'}], 'cinema': [{'question': 'Show all the locations where some cinemas were opened in both year 2010 and year 2011.', 'sql_query': 'SELECT LOCATION FROM cinema WHERE openning_year  =  2010 INTERSECT SELECT LOCATION FROM cinema WHERE openning_year  =  2011', 'db_id': 'cinema'}, {'question': 'Show all the locations where no cinema has capacity over 800.', 'sql_query': 'SELECT LOCATION FROM cinema EXCEPT SELECT LOCATION FROM cinema WHERE capacity  >  800', 'db_id': 'cinema'}, {'question': 'Show the title and director for all films.', 'sql_query': 'SELECT title ,  directed_by FROM film', 'db_id': 'cinema'}, {'question': 'What are the title and director of each film?', 'sql_query': 'SELECT title ,  directed_by FROM film', 'db_id': 'cinema'}], 'apartment_rentals': [{'question': 'Show the apartment type code that has the largest number of total rooms, together with the number of bathrooms and number of bedrooms.', 'sql_query': 'SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1', 'db_id': 'apartment_rentals'}, {'question': 'Show the most common apartment type code.', 'sql_query': 'SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1', 'db_id': 'apartment_rentals'}, {'question': 'What are the building full names that contain the word "court"?', 'sql_query': 'SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE "%court%"', 'db_id': 'apartment_rentals'}, {'question': 'How many rooms in total are there in the apartments in the building with short name "Columbus Square"?', 'sql_query': 'SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  "Columbus Square"', 'db_id': 'apartment_rentals'}], 'station_weather': [{'question': 'Find names and times of trains that run through stations for the local authority Chiltern.', 'sql_query': 'SELECT t3.name ,  t3.time FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id JOIN train AS t3 ON t2.train_id  =  t3.id WHERE t1.local_authority  =  "Chiltern"', 'db_id': 'station_weather'}, {'question': 'list the local authorities and services provided by all stations.', 'sql_query': 'SELECT local_authority ,  services FROM station', 'db_id': 'station_weather'}, {'question': 'Find the number of trains for each station, as well as the station network name and services.', 'sql_query': 'SELECT count(*) ,  t1.network_name ,  t1.services FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id GROUP BY t2.station_id', 'db_id': 'station_weather'}, {'question': 'What is the average high temperature for each day of week?', 'sql_query': 'SELECT avg(high_temperature) ,  day_of_week FROM weekly_weather GROUP BY day_of_week', 'db_id': 'station_weather'}], 'local_govt_in_alabama': [{'question': 'What is the most common participant type?', 'sql_query': 'SELECT participant_type_code FROM participants GROUP BY participant_type_code ORDER BY count(*) DESC LIMIT 1', 'db_id': 'local_govt_in_alabama'}, {'question': 'What is the id of the event with the most participants?', 'sql_query': 'SELECT Event_ID FROM Participants_in_Events GROUP BY Event_ID ORDER BY count(*) DESC LIMIT 1', 'db_id': 'local_govt_in_alabama'}, {'question': 'What are all the the participant ids, type code and details?', 'sql_query': 'SELECT Participant_ID ,  Participant_Type_Code ,  Participant_Details FROM  Participants', 'db_id': 'local_govt_in_alabama'}, {'question': 'List the service id and details for the events.', 'sql_query': 'SELECT service_id ,  event_details FROM EVENTS', 'db_id': 'local_govt_in_alabama'}], 'game_1': [{'question': 'Show student ids who are on scholarship and have major 600.', 'sql_query': "SELECT StuID FROM Student WHERE major  =  600 INTERSECT SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y'", 'db_id': 'game_1'}, {'question': 'Which game type has most number of games?', 'sql_query': 'SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) DESC LIMIT 1', 'db_id': 'game_1'}, {'question': 'What are ids and total number of hours played for each game?', 'sql_query': 'SELECT gameid ,  sum(hours_played) FROM Plays_games GROUP BY gameid', 'db_id': 'game_1'}, {'question': 'What is the total number of all football games played by scholarship students?', 'sql_query': 'SELECT sum(gamesplayed) FROM Sportsinfo WHERE sportname  =  "Football" AND onscholarship  =  \'Y\'', 'db_id': 'game_1'}], 'employee_hire_evaluation': [{'question': 'Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.', 'sql_query': 'SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000', 'db_id': 'employee_hire_evaluation'}, {'question': 'Which employee received the biggest bonus? Give me the employee name.', 'sql_query': 'SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1', 'db_id': 'employee_hire_evaluation'}, {'question': 'Find the cities that have more than one employee under age 30.', 'sql_query': 'SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1', 'db_id': 'employee_hire_evaluation'}, {'question': 'Return the name, location and district of all shops in descending order of number of products.', 'sql_query': 'SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC', 'db_id': 'employee_hire_evaluation'}], 'train_station': [{'question': 'Show station names without any trains.', 'sql_query': 'SELECT name FROM station WHERE station_id NOT IN (SELECT station_id FROM train_station)', 'db_id': 'train_station'}, {'question': 'Show the location with most number of train stations.', 'sql_query': 'SELECT LOCATION FROM station GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1', 'db_id': 'train_station'}, {'question': 'Show all locations that have train stations with at least 15 platforms and train stations with more than 25 total passengers.', 'sql_query': 'SELECT DISTINCT LOCATION FROM station WHERE number_of_platforms  >=  15 AND total_passengers  >  25', 'db_id': 'train_station'}, {'question': 'Show the station name and number of trains in each station.', 'sql_query': 'SELECT T2.name ,  count(*) FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id', 'db_id': 'train_station'}], 'musical': [{'question': 'Who is the nominee who has been nominated for the most musicals?', 'sql_query': 'SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'musical'}, {'question': 'Show the nominees that have nominated musicals for both "Tony Award" and "Drama Desk Award".', 'sql_query': 'SELECT Nominee FROM musical WHERE Award  =  "Tony Award" INTERSECT SELECT Nominee FROM musical WHERE Award  =  "Drama Desk Award"', 'db_id': 'musical'}, {'question': 'Show names of musicals and the number of actors who have appeared in the musicals.', 'sql_query': 'SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID', 'db_id': 'musical'}, {'question': 'Show names of musicals which have at least three actors.', 'sql_query': 'SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3', 'db_id': 'musical'}], 'flight_2': [{'question': "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?", 'sql_query': 'SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  "Ashley" AND T3.City  =  "Aberdeen"', 'db_id': 'flight_2'}, {'question': 'Which airports do not have departing or arriving flights?', 'sql_query': 'SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)', 'db_id': 'flight_2'}, {'question': 'Return the number of United Airlines flights leaving from AHD Airport.', 'sql_query': 'SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.SourceAirport  =  "AHD"', 'db_id': 'flight_2'}, {'question': 'List the airport code and name in the city of Anthony.', 'sql_query': 'SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  "Anthony"', 'db_id': 'flight_2'}], 'e_learning': [{'question': 'What are the personal names used both by some course authors and some students?', 'sql_query': 'SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students', 'db_id': 'e_learning'}, {'question': 'Find the subject ID, name of subject and the corresponding number of courses for each subject, and sort by the course count in ascending order.', 'sql_query': 'SELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id ORDER BY COUNT(*) ASC', 'db_id': 'e_learning'}, {'question': 'Which student are enrolled in at least two courses? Give me the student ID and personal name.', 'sql_query': 'SELECT T1.student_id ,  T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  >=  2', 'db_id': 'e_learning'}, {'question': 'List the personal names and family names of all the students in alphabetical order of family name.', 'sql_query': 'SELECT personal_name ,  family_name FROM Students ORDER BY family_name', 'db_id': 'e_learning'}], 'behavior_monitoring': [{'question': 'What is the cell phone number of the student whose address has the lowest monthly rental?', 'sql_query': 'SELECT T2.cell_mobile_number FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id ORDER BY T1.monthly_rental ASC LIMIT 1', 'db_id': 'behavior_monitoring'}, {'question': 'What are the line 1 of addresses shared by some students and some teachers?', 'sql_query': 'SELECT T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.address_id INTERSECT SELECT T1.line_1 FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id', 'db_id': 'behavior_monitoring'}, {'question': 'Find the start and end dates of behavior incidents of students with last name "Fahey".', 'sql_query': 'SELECT T1.date_incident_start ,  date_incident_end FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.last_name  =  "Fahey"', 'db_id': 'behavior_monitoring'}, {'question': 'Return the cell phone number and email address for all students.', 'sql_query': 'SELECT cell_mobile_number ,  email_address FROM STUDENTS', 'db_id': 'behavior_monitoring'}], 'flight_1': [{'question': 'Show names for all employees who do not have certificate of Boeing 737-800.', 'sql_query': 'SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  "Boeing 737-800"', 'db_id': 'flight_1'}, {'question': 'Show names for all employees who have certificate of Boeing 737-800.', 'sql_query': 'SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  "Boeing 737-800"', 'db_id': 'flight_1'}, {'question': 'Return the minimum, average and maximum distances traveled across all aircrafts.', 'sql_query': 'SELECT min(distance) ,  avg(distance) ,  max(distance) FROM Aircraft', 'db_id': 'flight_1'}, {'question': 'Show all destinations and the number of flights to each destination.', 'sql_query': 'SELECT destination ,  count(*) FROM Flight GROUP BY destination', 'db_id': 'flight_1'}], 'orchestra': [{'question': 'List the record company shared by the most number of orchestras.', 'sql_query': 'SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'orchestra'}, {'question': 'What is the record company used by the greatest number of orchestras?', 'sql_query': 'SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'orchestra'}, {'question': 'Please show the record formats of orchestras in ascending order of count.', 'sql_query': 'SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC', 'db_id': 'orchestra'}, {'question': 'What is the name of the conductor who has worked the greatest number of years?', 'sql_query': 'SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1', 'db_id': 'orchestra'}], 'hospital_1': [{'question': 'What is the names of the physicians who prescribe medication Thesisin?', 'sql_query': 'SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name  =  "Thesisin"', 'db_id': 'hospital_1'}, {'question': 'What are the names of patients who are not taking the medication of Procrastin-X.', 'sql_query': "SELECT name FROM patient EXCEPT SELECT T1.name FROM patient AS T1 JOIN Prescribes AS T2 ON T2.Patient  =  T1.SSN JOIN Medication AS T3 ON T2.Medication  =  T3.Code WHERE T3.name  =  'Procrastin-X'", 'db_id': 'hospital_1'}, {'question': 'Which patients made more than one appointment? Tell me the name and phone number of these patients.', 'sql_query': 'SELECT name ,  phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn GROUP BY T1.patient HAVING count(*)  >  1', 'db_id': 'hospital_1'}, {'question': 'List the name and cost of all procedures sorted by the cost from the highest to the lowest.', 'sql_query': 'SELECT name ,  cost FROM procedures ORDER BY cost DESC', 'db_id': 'hospital_1'}], 'gas_company': [{'question': 'What are the names of the managers for gas stations that are operated by the ExxonMobil company?', 'sql_query': "SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.company  =  'ExxonMobil'", 'db_id': 'gas_company'}, {'question': 'Show the manager name for gas stations belonging to the ExxonMobil company.', 'sql_query': "SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.company  =  'ExxonMobil'", 'db_id': 'gas_company'}, {'question': 'What are the headquarters with at least two companies in the banking industry?', 'sql_query': "SELECT headquarters FROM company WHERE main_industry  =  'Banking' GROUP BY headquarters HAVING count(*)  >=  2", 'db_id': 'gas_company'}, {'question': 'For each headquarter, what are the headquarter and how many companies are centered there?', 'sql_query': 'SELECT headquarters ,  count(*) FROM company GROUP BY headquarters', 'db_id': 'gas_company'}], 'game_injury': [{'question': 'What are the names of the managers for gas stations that are operated by the ExxonMobil company?', 'sql_query': "SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.company  =  'ExxonMobil'", 'db_id': 'gas_company'}, {'question': 'Show all headquarters without a company in banking industry.', 'sql_query': "SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking'", 'db_id': 'gas_company'}, {'question': 'What are the maximum, minimum and average home games each stadium held?', 'sql_query': 'SELECT max(home_games) ,  min(home_games) ,  avg(home_games) FROM stadium', 'db_id': 'game_injury'}, {'question': 'List the season, home team, away team of all the games.', 'sql_query': 'SELECT season ,  home_team ,  away_team FROM game', 'db_id': 'game_injury'}], 'department_store': [{'question': 'What is the name and job title of the staff who was assigned the latest?', 'sql_query': 'SELECT T1.staff_name ,  T2.job_title_code FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY T2.date_assigned_to DESC LIMIT 1', 'db_id': 'department_store'}, {'question': 'Return the id of the staff whose Staff Department Assignment was earlier than that of any Clerical Staff.', 'sql_query': "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff')", 'db_id': 'department_store'}, {'question': 'What are the names of staff who have been assigned multiple jobs?', 'sql_query': 'SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  1', 'db_id': 'department_store'}, {'question': 'Give me the product type, name and price for all the products supplied by supplier id 3.', 'sql_query': 'SELECT T2.product_type_code ,  T2.product_name ,  T2.product_price FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  3', 'db_id': 'department_store'}], 'scholar': [{'question': 'papers with Question Answering in keyphrases', 'sql_query': 'SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "Question Answering";', 'db_id': 'scholar'}, {'question': 'Question Answering publications', 'sql_query': 'SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "Question Answering";', 'db_id': 'scholar'}, {'question': 'pldi 2015 list of papers', 'sql_query': 'SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  "pldi";', 'db_id': 'scholar'}, {'question': 'What papers were published during the conference pldi 2015 ?', 'sql_query': 'SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  "pldi";', 'db_id': 'scholar'}], 'insurance_policies': [{'question': 'Which customers do not have any policies? Find the details of these customers.', 'sql_query': 'SELECT customer_details FROM Customers EXCEPT SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.customer_id  =  T2.customer_id', 'db_id': 'insurance_policies'}, {'question': 'List the details of the customers who do not have any policies.', 'sql_query': 'SELECT customer_details FROM Customers EXCEPT SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.customer_id  =  T2.customer_id', 'db_id': 'insurance_policies'}, {'question': 'Among all the claims, what is the settlement amount of the claim with the largest claim amount? List both the settlement amount and claim amount.', 'sql_query': 'SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Claimed DESC LIMIT 1', 'db_id': 'insurance_policies'}, {'question': 'Tell me the the claim date and settlement date for each settlement case.', 'sql_query': 'SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Settlements', 'db_id': 'insurance_policies'}], 'assets_maintenance': [{'question': 'Which company started the earliest the maintenance contract? Show the company name.', 'sql_query': 'SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id ORDER BY T2.contract_start_date ASC LIMIT 1', 'db_id': 'assets_maintenance'}, {'question': 'Which assets did not incur any fault log? List the asset model.', 'sql_query': 'SELECT asset_model FROM Assets WHERE asset_id NOT IN (SELECT asset_id FROM Fault_Log)', 'db_id': 'assets_maintenance'}, {'question': 'How many assets can each parts be used in? List the part name and the number.', 'sql_query': 'SELECT T1.part_name ,  count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name', 'db_id': 'assets_maintenance'}, {'question': 'How many assets does each maintenance contract contain? List the number and the contract id.', 'sql_query': 'SELECT count(*) ,  T1.maintenance_contract_id FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id  =  T2.maintenance_contract_id GROUP BY T1.maintenance_contract_id', 'db_id': 'assets_maintenance'}], 'network_2': [{'question': 'Who is the oldest person?', 'sql_query': 'SELECT name FROM Person WHERE age  =  (SELECT max(age) FROM person)', 'db_id': 'network_2'}, {'question': 'What is the name of the person who is the oldest?', 'sql_query': 'SELECT name FROM Person WHERE age  =  (SELECT max(age) FROM person)', 'db_id': 'network_2'}, {'question': 'How many people are under 40 for each gender?', 'sql_query': 'SELECT count(*) ,  gender FROM Person WHERE age  <  40 GROUP BY gender', 'db_id': 'network_2'}, {'question': 'What are the names of all friends who are from New York?', 'sql_query': "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.city  =  'new york city'", 'db_id': 'network_2'}], 'tracking_software_problems': [{'question': 'What are the products that have problems reported after 1986-11-13? Give me the product id and the count of problems reported after 1986-11-13.', 'sql_query': 'SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > "1986-11-13" GROUP BY T2.product_id', 'db_id': 'tracking_software_problems'}, {'question': 'For each product that has problems, find the number of problems reported after 1986-11-13 and the product id?', 'sql_query': 'SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > "1986-11-13" GROUP BY T2.product_id', 'db_id': 'tracking_software_problems'}, {'question': 'For the problem with id 10, return the ids and dates of its problem logs.', 'sql_query': 'SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10', 'db_id': 'tracking_software_problems'}, {'question': 'What are the ids of the problems that are from the product "voluptatem" and are reported after 1995?', 'sql_query': 'SELECT T1.problem_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = "voluptatem" AND T1.date_problem_reported > "1995"', 'db_id': 'tracking_software_problems'}], 'movie_1': [{'question': 'Find the names of all reviewers who rated Gone with the Wind.', 'sql_query': "SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  'Gone with the Wind'", 'db_id': 'movie_1'}, {'question': 'What are the different reviewer names, movie titles, and stars for every rating where the reviewer had the same name as the director?', 'sql_query': 'SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name', 'db_id': 'movie_1'}, {'question': 'For each movie that received more than 3 reviews, what is the average rating?', 'sql_query': 'SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2', 'db_id': 'movie_1'}, {'question': 'For each reviewer id, what is the title and rating for the movie with the smallest rating?', 'sql_query': 'SELECT T2.title ,  T1.rID ,  T1.stars ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.rID', 'db_id': 'movie_1'}], 'hr_1': [{'question': 'Find the employee id for all employees who earn more than the average salary.', 'sql_query': 'SELECT employee_id FROM employees WHERE salary  >  (SELECT AVG(salary) FROM employees)', 'db_id': 'hr_1'}, {'question': 'display the full name (first and last name), and salary of those employees who working in any department located in London.', 'sql_query': "SELECT first_name ,  last_name ,  salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN  locations AS T3 ON T2.location_id  =  T3.location_id WHERE  T3.city  =  'London'", 'db_id': 'hr_1'}, {'question': 'What are the full name (first and last name) and salary for all employees who does not have any value for commission?', 'sql_query': 'SELECT first_name ,  last_name ,  salary FROM  employees WHERE commission_pct  =  "null"', 'db_id': 'hr_1'}, {'question': 'What is the average salary of employees who have a commission percentage that is not null?', 'sql_query': 'SELECT department_id ,  AVG(salary) FROM employees WHERE commission_pct != "null" GROUP BY department_id', 'db_id': 'hr_1'}], 'imdb': [{'question': 'Who directed the movie " James Bond " ?', 'sql_query': 'SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  "James Bond";', 'db_id': 'imdb'}, {'question': 'What are all the movies featuring " Robin Wright " ?', 'sql_query': 'SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  "Robin Wright";', 'db_id': 'imdb'}, {'question': 'Find all the female actors from Austin', 'sql_query': 'SELECT name FROM actor WHERE birth_city  =  "Austin" AND gender  =  "female";', 'db_id': 'imdb'}, {'question': 'Find all actors born in " Austin " after 1980', 'sql_query': 'SELECT name FROM actor WHERE birth_city  =  "Austin" AND birth_year  >  1980;', 'db_id': 'imdb'}], 'products_gen_characteristics': [{'question': "Count the number of characteristics of the 'flax' product.", 'sql_query': 'SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  "flax"', 'db_id': 'products_gen_characteristics'}, {'question': 'List all characteristics of product named "sesame" with type code "Grade".', 'sql_query': 'SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  "sesame" AND t3.characteristic_type_code  =  "Grade"', 'db_id': 'products_gen_characteristics'}, {'question': "Return the category code and typical price of 'cumin'.", 'sql_query': 'SELECT product_category_code ,  typical_buying_price FROM products WHERE product_name  =  "cumin"', 'db_id': 'products_gen_characteristics'}, {'question': "Give the unit of measure for the product with the name 'cumin'.", 'sql_query': 'SELECT t2.unit_of_measure FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  "cumin"', 'db_id': 'products_gen_characteristics'}], 'loan_1': [{'question': 'What are the names of customers who do not have saving accounts?', 'sql_query': "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'", 'db_id': 'loan_1'}, {'question': 'What are the names of customers who have both savings and checking accounts?', 'sql_query': "SELECT cust_name FROM customer WHERE acc_type  =  'saving' INTERSECT SELECT cust_name FROM customer WHERE acc_type  =  'checking'", 'db_id': 'loan_1'}, {'question': 'What are the names of customers who have taken out more than one loan?', 'sql_query': 'SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1', 'db_id': 'loan_1'}, {'question': 'Find the total account balance of each customer from Utah or Texas.', 'sql_query': "SELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'", 'db_id': 'loan_1'}], 'dog_kennels': [{'question': 'Find the first names that are used for professionals or owners but are not used as dog names.', 'sql_query': 'SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs', 'db_id': 'dog_kennels'}, {'question': 'Find the average age of the dogs who went through treatments.', 'sql_query': 'SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )', 'db_id': 'dog_kennels'}, {'question': 'Which professionals have done at least two types of treatments? List the professional id and cell phone.', 'sql_query': 'SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2', 'db_id': 'dog_kennels'}, {'question': "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", 'sql_query': "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", 'db_id': 'dog_kennels'}], 'e_government': [{'question': 'What are the names of the services that have never been used?', 'sql_query': 'SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id  =  t2.service_id', 'db_id': 'e_government'}, {'question': 'Find the name of all the cities and states.', 'sql_query': 'SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses', 'db_id': 'e_government'}, {'question': 'What are the first, middle, and last names of all individuals, ordered by last name?', 'sql_query': 'SELECT individual_first_name ,  individual_middle_name ,  individual_last_name FROM individuals ORDER BY individual_last_name', 'db_id': 'e_government'}, {'question': 'What are the names of organizations that contain the word "Party"?', 'sql_query': 'SELECT organization_name FROM organizations WHERE organization_name LIKE "%Party%"', 'db_id': 'e_government'}], 'tracking_grants_for_research': [{'question': 'For each project id, how many staff does it have? List them in increasing order.', 'sql_query': 'SELECT T1.project_id ,  count(*) FROM Project_Staff AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) ASC', 'db_id': 'tracking_grants_for_research'}, {'question': 'What are the details of the project with no outcomes?', 'sql_query': 'SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_outcomes )', 'db_id': 'tracking_grants_for_research'}, {'question': "What is the type of the document whose description starts with the word 'Initial'?", 'sql_query': "SELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%'", 'db_id': 'tracking_grants_for_research'}, {'question': "How many project staff worked as leaders or started working before '1989-04-24 23:51:54'?", 'sql_query': "SELECT count(*) FROM Project_Staff WHERE role_code  =  'leader' OR date_from  <  '1989-04-24 23:51:54'", 'db_id': 'tracking_grants_for_research'}], 'film_rank': [{'question': 'What are the years of film market estimation for the market of Japan, ordered by year descending?', 'sql_query': 'SELECT T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T2.Country  =  "Japan" ORDER BY T1.Year DESC', 'db_id': 'film_rank'}, {'question': 'Show the studios that have not produced films with director "Walter Hill".', 'sql_query': 'SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director  =  "Walter Hill"', 'db_id': 'film_rank'}, {'question': 'Please show the titles of films and the types of market estimations.', 'sql_query': 'SELECT T1.Title ,  T2.Type FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID', 'db_id': 'film_rank'}, {'question': 'Find the titles and studios of the films that are produced by some film studios that contained the word "Universal".', 'sql_query': 'SELECT title ,  Studio FROM film WHERE Studio LIKE "%Universal%"', 'db_id': 'film_rank'}], 'academic': [{'question': 'return me the number of papers which contain the keyword " Natural Language " .', 'sql_query': 'SELECT COUNT ( DISTINCT t3.title ) FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t2.pid WHERE t1.keyword  =  "Natural Language";', 'db_id': 'academic'}, {'question': 'return me the number of the keywords of " Making database systems usable " .', 'sql_query': 'SELECT COUNT ( DISTINCT t1.keyword ) FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t3.pid WHERE t2.title  =  "Making database systems usable";', 'db_id': 'academic'}, {'question': 'return me the citations of each paper in the VLDB conference .', 'sql_query': 'SELECT t2.citation_num FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  "VLDB";', 'db_id': 'academic'}, {'question': 'return me the total citations of papers in PVLDB before 2005 .', 'sql_query': 'SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  "PVLDB" AND t2.year  <  2005;', 'db_id': 'academic'}], 'customer_complaints': [{'question': 'Find the prices of products which has never received a single complaint.', 'sql_query': 'SELECT product_price FROM products WHERE product_id NOT IN (SELECT product_id FROM complaints)', 'db_id': 'customer_complaints'}, {'question': 'Return the phone number of the customer who filed the complaint that was raised most recently.', 'sql_query': 'SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1', 'db_id': 'customer_complaints'}, {'question': 'What are the emails and phone numbers of all customers, sorted by email address and phone number?', 'sql_query': 'SELECT email_address ,  phone_number FROM customers ORDER BY email_address ,  phone_number', 'db_id': 'customer_complaints'}, {'question': 'Find the last name of the staff whose email address contains "wrau".', 'sql_query': 'SELECT last_name FROM staff WHERE email_address LIKE "%wrau%"', 'db_id': 'customer_complaints'}], 'storm_record': [{'question': 'What are the names of storms that did not affect two or more regions?', 'sql_query': 'SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2', 'db_id': 'storm_record'}, {'question': 'Show the name for regions not affected.', 'sql_query': 'SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)', 'db_id': 'storm_record'}, {'question': 'Show all region code and region name sorted by the codes.', 'sql_query': 'SELECT region_code ,  region_name FROM region ORDER BY region_code', 'db_id': 'storm_record'}, {'question': 'What are the names of regions with two or more storms?', 'sql_query': 'SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2', 'db_id': 'storm_record'}], 'music_1': [{'question': 'What are the song names for every song whose rating is less than the minimum rating for English songs?', 'sql_query': "SELECT song_name FROM song WHERE rating  <   (SELECT min(rating) FROM song WHERE languages  =  'english')", 'db_id': 'music_1'}, {'question': 'What is the name and country of origin of the artist who released a song that has "love" in its title?', 'sql_query': 'SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE "%love%"', 'db_id': 'music_1'}, {'question': 'How many songs, on average, are sung by a female artist?', 'sql_query': 'SELECT avg(T2.rating) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  "Female"', 'db_id': 'music_1'}, {'question': 'How many songs have 4 minute duration?', 'sql_query': 'SELECT count(*) FROM files WHERE duration LIKE "4:%"', 'db_id': 'music_1'}], 'tvshow': [{'question': "which countries' tv channels are not playing any cartoon written by Todd Casey?", 'sql_query': "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", 'db_id': 'tvshow'}, {'question': 'Which country has the most of TV Channels? List the country and number of TV Channels it has.', 'sql_query': 'SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;', 'db_id': 'tvshow'}, {'question': 'What is the TV Channel of TV series with Episode "A Love of a Lifetime"? List the TV Channel\'s series name.', 'sql_query': 'SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = "A Love of a Lifetime";', 'db_id': 'tvshow'}, {'question': "which countries' tv channels are playing some cartoon written by Todd Casey?", 'sql_query': "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", 'db_id': 'tvshow'}], 'device': [{'question': 'List the carriers of devices that have no devices in stock.', 'sql_query': 'SELECT Carrier FROM device WHERE Device_ID NOT IN (SELECT Device_ID FROM stock)', 'db_id': 'device'}, {'question': 'What are the carriers of devices that are not in stock anywhere?', 'sql_query': 'SELECT Carrier FROM device WHERE Device_ID NOT IN (SELECT Device_ID FROM stock)', 'db_id': 'device'}, {'question': 'What are the carriers of devices that are in stock in more than a single shop?', 'sql_query': 'SELECT T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID GROUP BY T1.Device_ID HAVING COUNT(*)  >  1', 'db_id': 'device'}, {'question': 'What are the different software platforms for devices, and how many devices have each?', 'sql_query': 'SELECT Software_Platform ,  COUNT(*) FROM device GROUP BY Software_Platform', 'db_id': 'device'}], 'sports_competition': [{'question': 'What are the positions with both players having more than 20 points and less than 10 points.', 'sql_query': 'SELECT POSITION FROM player WHERE Points  >  20 INTERSECT SELECT POSITION FROM player WHERE Points  <  10', 'db_id': 'sports_competition'}, {'question': 'What are the positions of both players that have more than 20 20 points and less than 10 points?', 'sql_query': 'SELECT POSITION FROM player WHERE Points  >  20 INTERSECT SELECT POSITION FROM player WHERE Points  <  10', 'db_id': 'sports_competition'}, {'question': 'Show the names of clubs that have players with position "Right Wing".', 'sql_query': 'SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Position  =  "Right Wing"', 'db_id': 'sports_competition'}, {'question': 'What are the maximum and minimum number of silver medals for clubs.', 'sql_query': 'SELECT max(Silver) ,  min(Silver) FROM club_rank', 'db_id': 'sports_competition'}], 'university_basketball': [{'question': 'What is the team name and acc regular season score of the school that was founded for the longest time?', 'sql_query': 'SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1', 'db_id': 'university_basketball'}, {'question': 'What is the founded year of the non public school that was founded most recently?', 'sql_query': "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1", 'db_id': 'university_basketball'}, {'question': 'Find the location and all games score of the school that has Clemson as its team name.', 'sql_query': "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'", 'db_id': 'university_basketball'}, {'question': 'When was the school with the largest enrollment founded?', 'sql_query': 'SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1', 'db_id': 'university_basketball'}], 'music_2': [{'question': 'Who is performing in the back stage position for the song "Badlands"? Show the first name and the last name.', 'sql_query': 'SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  "Badlands" AND T1.StagePosition  =  "back"', 'db_id': 'music_2'}, {'question': 'What are the names of all songs produced by the artist with the first name "Marianne"?', 'sql_query': 'SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T2.firstname  =  "Marianne"', 'db_id': 'music_2'}, {'question': 'How many vocal types are used in the song "Le Pop"?', 'sql_query': 'SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  "Le Pop"', 'db_id': 'music_2'}, {'question': 'Find all the stage positions of the musicians with first name "Solveig"', 'sql_query': 'SELECT DISTINCT T1.stageposition FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE Firstname  =  "Solveig"', 'db_id': 'music_2'}], 'body_builder': [{'question': 'List the weight of the body builders who have snatch score higher than 140 or have the height greater than 200.', 'sql_query': 'SELECT T2.weight FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T1.snatch  >  140 OR T2.height  >  200;', 'db_id': 'body_builder'}, {'question': 'What are the birth date and birth place of the body builder with the highest total points?', 'sql_query': 'SELECT T2.Birth_Date ,  T2.Birth_Place FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC LIMIT 1', 'db_id': 'body_builder'}, {'question': 'List the height and weight of people in descending order of height.', 'sql_query': 'SELECT Height ,  Weight FROM people ORDER BY Height DESC', 'db_id': 'body_builder'}, {'question': 'List each birth place along with the number of people from there.', 'sql_query': 'SELECT Birth_Place ,  COUNT(*) FROM people GROUP BY Birth_Place', 'db_id': 'body_builder'}], 'bike_1': [{'question': 'What is the latitude, longitude, city of the station from which the shortest trip started?', 'sql_query': 'SELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1', 'db_id': 'bike_1'}, {'question': 'What are all the different zip codes that have a maximum dew point that was always below 70?', 'sql_query': 'SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70', 'db_id': 'bike_1'}, {'question': 'What is the average latitude and longitude in San Jose?', 'sql_query': 'SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  "San Jose"', 'db_id': 'bike_1'}, {'question': 'What is the name, latitude, and city of the station that is located the furthest South?', 'sql_query': 'SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1', 'db_id': 'bike_1'}], 'shop_membership': [{'question': 'Show minimum and maximum amount of memberships for all branches opened in 2011 or located at city London.', 'sql_query': "SELECT min(membership_amount) ,  max(membership_amount) FROM branch WHERE open_year  =  2011 OR city  =  'London'", 'db_id': 'shop_membership'}, {'question': 'What are the cities that do not have any branches with more than 100 members?', 'sql_query': 'SELECT city FROM branch EXCEPT SELECT city FROM branch WHERE membership_amount  >  100', 'db_id': 'shop_membership'}, {'question': 'What are the total purchases for members rated at level 6?', 'sql_query': 'SELECT count(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T2.level  =  6', 'db_id': 'shop_membership'}, {'question': 'What is the sum of total pounds of purchase in year 2018 for all branches in London?', 'sql_query': "SELECT sum(total_pounds) FROM purchase AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.city  =  'London' AND T1.year  =  2018", 'db_id': 'shop_membership'}], 'party_people': [{'question': 'What are the names of parties that have no members?', 'sql_query': 'SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM Member)', 'db_id': 'party_people'}, {'question': 'Show all member names who are not in charge of any event.', 'sql_query': 'SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id', 'db_id': 'party_people'}, {'question': 'Return the names of parties that have two or more events.', 'sql_query': 'SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  2', 'db_id': 'party_people'}, {'question': 'Show all ministers and parties they belong to in descending order of the time they took office.', 'sql_query': 'SELECT minister ,  party_name FROM party ORDER BY took_office DESC', 'db_id': 'party_people'}], 'student_assessment': [{'question': 'What are the cell phone numbers of the candidates that received an assessment code of "Fail"?', 'sql_query': 'SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = "Fail"', 'db_id': 'student_assessment'}, {'question': 'What are the ids of the students who attended courses in the statistics department in order of attendance date.', 'sql_query': 'SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = "statistics" ORDER BY T2.date_of_attendance', 'db_id': 'student_assessment'}, {'question': 'What are the ids of all students for courses and what are the names of those courses?', 'sql_query': 'SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id', 'db_id': 'student_assessment'}, {'question': 'What are the different cities where students live?', 'sql_query': 'SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id', 'db_id': 'student_assessment'}], 'performance_attendance': [{'question': 'List the names of members who did not attend any performance.', 'sql_query': 'SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM member_attendance)', 'db_id': 'performance_attendance'}, {'question': 'Show the most common location of performances.', 'sql_query': 'SELECT LOCATION FROM performance GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'performance_attendance'}, {'question': 'What is the date of the performance with the highest number of attendees?', 'sql_query': 'SELECT Date FROM performance ORDER BY Attendance DESC LIMIT 1', 'db_id': 'performance_attendance'}, {'question': 'What are the dates and locations of performances?', 'sql_query': 'SELECT Date ,  LOCATION FROM performance', 'db_id': 'performance_attendance'}], 'concert_singer': [{'question': 'List all singer names in concerts in year 2014.', 'sql_query': 'SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014', 'db_id': 'concert_singer'}, {'question': 'List all song names by singers above the average age.', 'sql_query': 'SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)', 'db_id': 'concert_singer'}, {'question': 'For each stadium, how many concerts play there?', 'sql_query': 'SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id', 'db_id': 'concert_singer'}, {'question': 'How many concerts are there in year 2014 or 2015?', 'sql_query': 'SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015', 'db_id': 'concert_singer'}], 'csu_1': [{'question': 'Which campus has the most degrees conferred in all times?', 'sql_query': 'SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1', 'db_id': 'csu_1'}, {'question': 'report the total number of degrees granted between 1998 and 2002.', 'sql_query': 'SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T2.year  >=  1998 AND T2.year  <=  2002 GROUP BY T1.campus', 'db_id': 'csu_1'}, {'question': 'What is the campus fee of "San Francisco State University" in year 1996?', 'sql_query': 'SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  "San Francisco State University" AND T2.year  =  1996', 'db_id': 'csu_1'}, {'question': 'Find the campus fee of "San Jose State University" in year 2000.', 'sql_query': 'SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  "San Jose State University" AND t1.year  =  2000', 'db_id': 'csu_1'}], 'formula_1': [{'question': 'Find the driver id and number of races of all drivers who have at most participated in 30 races?', 'sql_query': 'SELECT T1.driverid ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  30', 'db_id': 'formula_1'}, {'question': 'What is the forename and surname of the driver with the shortest laptime?', 'sql_query': 'SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1', 'db_id': 'formula_1'}, {'question': 'What are the names of all races that occurred after 12:00:00 or before 09:00:00?', 'sql_query': 'SELECT name FROM races WHERE TIME > "12:00:00" OR TIME < "09:00:00"', 'db_id': 'formula_1'}, {'question': 'Find all the forenames of distinct drivers who won in position 1 as driver standing and had more than 20 points?', 'sql_query': 'SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20', 'db_id': 'formula_1'}], 'activity_1': [{'question': 'Show the ids of all the faculty members who participate in an activity and advise a student.', 'sql_query': 'SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student', 'db_id': 'activity_1'}, {'question': 'What are the first names of the professors who do not play Canoeing or Kayaking as activities?', 'sql_query': "SELECT lname FROM faculty WHERE rank  =  'Professor' EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'", 'db_id': 'activity_1'}, {'question': 'Show the first name, last name, and phone number for all female faculty members.', 'sql_query': "SELECT Fname ,  Lname ,  phone FROM Faculty WHERE Sex  =  'F'", 'db_id': 'activity_1'}, {'question': 'Show the number of male and female assistant professors.', 'sql_query': 'SELECT sex ,  count(*) FROM Faculty WHERE rank  =  "AsstProf" GROUP BY sex', 'db_id': 'activity_1'}], 'local_govt_and_lot': [{'question': "What are the distinct id and type of the thing that has the status 'Close' or has a status record before the date '2017-06-19 02:59:21'", 'sql_query': "SELECT DISTINCT T2.thing_id ,  T2.Type_of_Thing_Code FROM Timed_Status_of_Things AS T1 JOIN Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.Status_of_Thing_Code  =  'Close' OR T1.Date_and_Date  <  '2017-06-19 02:59:21'", 'db_id': 'local_govt_and_lot'}, {'question': 'Which organizations are not a parent organization of others? List the organization id.', 'sql_query': 'SELECT organization_id FROM organizations EXCEPT SELECT parent_organization_id FROM organizations', 'db_id': 'local_govt_and_lot'}, {'question': 'List the id and type of each thing, and the details of the organization that owns it.', 'sql_query': 'SELECT T1.thing_id ,  T1.type_of_Thing_Code ,  T2.organization_details FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id  =  T2.organization_id', 'db_id': 'local_govt_and_lot'}, {'question': 'How many residents does each property have? List property id and resident count.', 'sql_query': 'SELECT T1.property_id ,  count(*) FROM properties AS T1 JOIN residents AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.property_id', 'db_id': 'local_govt_and_lot'}], 'decoration_competition': [{'question': 'Show the most common country across members.', 'sql_query': 'SELECT Country FROM member GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'decoration_competition'}, {'question': 'List the names of members who did not participate in any round.', 'sql_query': 'SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM round)', 'db_id': 'decoration_competition'}, {'question': 'Show the names of members that have a rank in round higher than 3.', 'sql_query': 'SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID WHERE T2.Rank_in_Round  >  3', 'db_id': 'decoration_competition'}, {'question': 'Show the distinct leader names of colleges associated with members from country "Canada".', 'sql_query': 'SELECT DISTINCT T1.Leader_Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID WHERE T2.Country  =  "Canada"', 'db_id': 'decoration_competition'}], 'manufactory_1': [{'question': 'Find the name of companies whose revenue is greater than the average revenue of all companies.', 'sql_query': 'SELECT name FROM manufacturers WHERE revenue  >  (SELECT avg(revenue) FROM manufacturers)', 'db_id': 'manufactory_1'}, {'question': 'Find the name of companies whose revenue is smaller than the revenue of all companies based in Austin.', 'sql_query': "SELECT name FROM manufacturers WHERE revenue  <  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')", 'db_id': 'manufactory_1'}, {'question': 'What are the names and average prices of products for manufacturers whose products cost on average 150 or more?', 'sql_query': 'SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name HAVING avg(T1.price) >= 150', 'db_id': 'manufactory_1'}, {'question': 'What are the names and prices of all products in the store?', 'sql_query': 'SELECT name ,  price FROM products', 'db_id': 'manufactory_1'}], 'book_2': [{'question': 'Please show the most common publication date.', 'sql_query': 'SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'book_2'}, {'question': 'Show the publishers that have publications with price higher than 10000000 and publications with price lower than 5000000.', 'sql_query': 'SELECT Publisher FROM publication WHERE Price  >  10000000 INTERSECT SELECT Publisher FROM publication WHERE Price  <  5000000', 'db_id': 'book_2'}, {'question': 'Show the titles of books in descending order of publication price.', 'sql_query': 'SELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Price DESC', 'db_id': 'book_2'}, {'question': 'Show the prices of publications whose publisher is either "Person" or "Wiley"', 'sql_query': 'SELECT Price FROM publication WHERE Publisher  =  "Person" OR Publisher  =  "Wiley"', 'db_id': 'book_2'}], 'flight_company': [{'question': 'What is the most common company type, and how many are there?', 'sql_query': 'SELECT TYPE ,  count(*) FROM operate_company GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1', 'db_id': 'flight_company'}, {'question': "What are the different pilot names who had piloted a flight in the country 'United States' or in the airport named 'Billund Airport'?", 'sql_query': "SELECT DISTINCT T2.pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id WHERE T1.country  =  'United States' OR T1.name  =  'Billund Airport'", 'db_id': 'flight_company'}, {'question': 'List the id, country, city and name of the airports ordered alphabetically by the name.', 'sql_query': 'SELECT id ,  country ,  city ,  name FROM airport ORDER BY name', 'db_id': 'flight_company'}, {'question': 'What are the names and types of the companies that have ever operated a flight?', 'sql_query': 'SELECT T1.name ,  T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id', 'db_id': 'flight_company'}], 'party_host': [{'question': 'Which nations have both hosts of age above 45 and hosts of age below 35?', 'sql_query': 'SELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35', 'db_id': 'party_host'}, {'question': 'Show the locations of parties and the names of the party hosts in ascending order of the age of the host.', 'sql_query': 'SELECT T3.Location ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID ORDER BY T2.Age', 'db_id': 'party_host'}, {'question': 'How many hosts does each nationality have? List the nationality and the count.', 'sql_query': 'SELECT Nationality ,  COUNT(*) FROM HOST GROUP BY Nationality', 'db_id': 'party_host'}, {'question': 'Show different nationalities along with the number of hosts of each nationality.', 'sql_query': 'SELECT Nationality ,  COUNT(*) FROM HOST GROUP BY Nationality', 'db_id': 'party_host'}], 'cre_Docs_and_Epenses': [{'question': "What are the account details with the largest value or with value having char '5' in it?", 'sql_query': 'SELECT max(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE "%5%"', 'db_id': 'cre_Docs_and_Epenses'}, {'question': 'Return the account details with the greatest value, as well as those that include the character 5.', 'sql_query': 'SELECT max(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE "%5%"', 'db_id': 'cre_Docs_and_Epenses'}, {'question': 'How many documents are with document type code BK for each product id?', 'sql_query': 'SELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  "BK" GROUP BY project_id', 'db_id': 'cre_Docs_and_Epenses'}, {'question': 'What are the ids and details for each project?', 'sql_query': 'SELECT project_id ,  project_details FROM Projects', 'db_id': 'cre_Docs_and_Epenses'}], 'student_1': [{'question': 'Find the classroom that the most students use.', 'sql_query': 'SELECT classroom FROM list GROUP BY classroom ORDER BY count(*) DESC LIMIT 1', 'db_id': 'student_1'}, {'question': 'Which classroom has the most students?', 'sql_query': 'SELECT classroom FROM list GROUP BY classroom ORDER BY count(*) DESC LIMIT 1', 'db_id': 'student_1'}, {'question': 'Find the number of students taught by the teacher KAWA GORDON.', 'sql_query': 'SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  "KAWA" AND T2.lastname  =  "GORDON"', 'db_id': 'student_1'}, {'question': 'For each grade, return the grade number, the number of classrooms used for the grade, and the total number of students enrolled in the grade.', 'sql_query': 'SELECT grade ,  count(DISTINCT classroom) ,  count(*) FROM list GROUP BY grade', 'db_id': 'student_1'}], 'customers_and_invoices': [{'question': 'Show all product names and the number of customers having an order on each product.', 'sql_query': 'SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name', 'db_id': 'customers_and_invoices'}, {'question': 'What are the ids for transactions that have an amount greater than the average amount of a transaction?', 'sql_query': 'SELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)', 'db_id': 'customers_and_invoices'}, {'question': 'What are the different product names, and what is the sum of quantity ordered for each product?', 'sql_query': 'SELECT T2.product_name ,  sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T2.product_name', 'db_id': 'customers_and_invoices'}, {'question': 'Show all product names and the total quantity ordered for each product name.', 'sql_query': 'SELECT T2.product_name ,  sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T2.product_name', 'db_id': 'customers_and_invoices'}], 'restaurants': [{'question': 'give me a good restaurant in the yosemite and mono lake area for french food ?', 'sql_query': 'SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  "yosemite and mono lake area" AND t1.food_type  =  "french" AND t1.rating  >  2.5;', 'db_id': 'restaurants'}, {'question': 'what are some good places in the yosemite and mono lake area for french food ?', 'sql_query': 'SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  "yosemite and mono lake area" AND t1.food_type  =  "french" AND t1.rating  >  2.5;', 'db_id': 'restaurants'}, {'question': 'how many places for french food are there in palo alto ?', 'sql_query': 'SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "palo alto" AND t1.food_type  =  "french";', 'db_id': 'restaurants'}, {'question': 'how many places for chinese food are there in the bay area ?', 'sql_query': 'SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  "bay area" AND t1.food_type  =  "chinese";', 'db_id': 'restaurants'}], 'climbing': [{'question': 'List the names of mountains that do not have any climber.', 'sql_query': 'SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)', 'db_id': 'climbing'}, {'question': 'Show the height of the mountain climbed by the climber with the maximum points.', 'sql_query': 'SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1', 'db_id': 'climbing'}, {'question': 'Show the times used by climbers to climb mountains in Country Uganda.', 'sql_query': 'SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  "Uganda"', 'db_id': 'climbing'}, {'question': 'Show the names of mountains with height more than 5000 or prominence more than 1000.', 'sql_query': 'SELECT Name FROM mountain WHERE Height  >  5000 OR Prominence  >  1000', 'db_id': 'climbing'}], 'election': [{'question': 'Find the parties associated with the delegates from district 1 or 2. Who served as comptrollers of the parties?', 'sql_query': 'SELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1 OR T1.District  =  2', 'db_id': 'election'}, {'question': 'Which people severed as governor most frequently?', 'sql_query': 'SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'election'}, {'question': 'Return all the committees that have delegates from Democratic party.', 'sql_query': 'SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  "Democratic"', 'db_id': 'election'}, {'question': 'What are the delegate and committee information for each election record?', 'sql_query': 'SELECT Delegate ,  Committee FROM election', 'db_id': 'election'}], 'aircraft': [{'question': 'What is the average total number of passengers for all airports that the aircraft "Robinson R-22" visits?', 'sql_query': 'SELECT avg(T3.Total_Passengers) FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T1.Aircraft  =  "Robinson R-22"', 'db_id': 'aircraft'}, {'question': 'What are the names and descriptions of aircrafts associated with an airport that has more total passengers than 10000000?', 'sql_query': 'SELECT T1.Aircraft ,  T1.Description FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Total_Passengers  >  10000000', 'db_id': 'aircraft'}, {'question': 'List the names of aircrafts and the number of times it won matches.', 'sql_query': 'SELECT T1.Aircraft ,  COUNT(*) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft', 'db_id': 'aircraft'}, {'question': 'Please list the location and the winning aircraft name.', 'sql_query': 'SELECT T2.Location ,  T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft', 'db_id': 'aircraft'}], 'pets_1': [{'question': 'What is the last name of the student who has a cat that is 3 years old?', 'sql_query': "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", 'db_id': 'pets_1'}, {'question': 'How many dog pets are raised by female students?', 'sql_query': "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", 'db_id': 'pets_1'}, {'question': 'Find the average and maximum age for each type of pet.', 'sql_query': 'SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype', 'db_id': 'pets_1'}, {'question': 'What are the different first names and ages of the students who do have pets?', 'sql_query': 'SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid', 'db_id': 'pets_1'}], 'customers_and_products_contacts': [{'question': 'Show the names of customers who use Credit Card payment method and have more than 2 orders.', 'sql_query': "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.payment_method_code  =  'Credit Card' GROUP BY T1.customer_id HAVING count(*)  >  2", 'db_id': 'customers_and_products_contacts'}, {'question': 'How many products have a price higher than the average?', 'sql_query': 'SELECT count(*) FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products)', 'db_id': 'customers_and_products_contacts'}, {'question': 'Show the minimum, maximum, average price for all products.', 'sql_query': 'SELECT min(product_price) ,  max(product_price) ,  avg(product_price) FROM products', 'db_id': 'customers_and_products_contacts'}, {'question': 'Show each state and the number of addresses in each state.', 'sql_query': 'SELECT state_province_county ,  count(*) FROM addresses GROUP BY state_province_county', 'db_id': 'customers_and_products_contacts'}], 'entrepreneur': [{'question': 'Which company was started by the entrepreneur with the greatest height?', 'sql_query': 'SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1', 'db_id': 'entrepreneur'}, {'question': 'Return the name of the heaviest entrepreneur.', 'sql_query': 'SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1', 'db_id': 'entrepreneur'}, {'question': 'How many entrepreneurs correspond to each investor?', 'sql_query': 'SELECT Investor ,  COUNT(*) FROM entrepreneur GROUP BY Investor', 'db_id': 'entrepreneur'}, {'question': 'What are the names of entrepreneurs and their corresponding investors, ordered descending by the amount of money requested?', 'sql_query': 'SELECT T2.Name ,  T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested', 'db_id': 'entrepreneur'}]}