{'geo': [{'question': 'what is the population of the largest state', 'sql_query': 'SELECT population FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );', 'db_id': 'geo'}, {'question': 'what are the major cities of kansas', 'sql_query': 'SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  "kansas";', 'db_id': 'geo'}], 'cre_Doc_Control_Systems': [{'question': 'Which document has the most draft copies? List its document id and number of draft copies.', 'sql_query': 'SELECT document_id , count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT 1;', 'db_id': 'cre_Doc_Control_Systems'}, {'question': 'For each document, list the number of employees who have showed up in the circulation history of that document. List the document ids and number of employees.', 'sql_query': 'SELECT document_id ,  count(DISTINCT employee_id) FROM Circulation_History GROUP BY document_id;', 'db_id': 'cre_Doc_Control_Systems'}], 'student_transcripts_tracking': [{'question': 'How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.', 'sql_query': 'SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1', 'db_id': 'student_transcripts_tracking'}, {'question': 'What is the earliest date of a transcript release, and what details can you tell me?', 'sql_query': 'SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1', 'db_id': 'student_transcripts_tracking'}], 'product_catalog': [{'question': 'What is the level name of the cheapest catalog (in USD)?', 'sql_query': 'SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1', 'db_id': 'product_catalog'}, {'question': 'Which catalog content has the smallest capacity? Return the catalog entry name.', 'sql_query': 'SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1', 'db_id': 'product_catalog'}], 'wta_1': [{'question': 'find the code of the country where has the greatest number of players.', 'sql_query': 'SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1', 'db_id': 'wta_1'}, {'question': 'Find the first name and country code of the oldest player.', 'sql_query': 'SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1', 'db_id': 'wta_1'}], 'insurance_and_eClaims': [{'question': 'Find the names of all the customers and staff members.', 'sql_query': 'SELECT customer_details FROM customers UNION SELECT staff_details FROM staff', 'db_id': 'insurance_and_eClaims'}, {'question': 'Find all the policy type codes associated with the customer "Dayana Robel"', 'sql_query': 'SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  "Dayana Robel"', 'db_id': 'insurance_and_eClaims'}], 'document_management': [{'question': 'What are the average access counts of documents that have the functional area description "Acknowledgement"?', 'sql_query': 'SELECT avg(t1.access_count) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code  =  t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code  =  t3.functional_area_code WHERE t3.functional_area_description  =  "Acknowledgement"', 'db_id': 'document_management'}, {'question': 'Give the section titles of the document with the name "David CV".', 'sql_query': 'SELECT t2.section_title FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code WHERE t1.document_name  =  "David CV"', 'db_id': 'document_management'}], 'club_1': [{'question': 'Find all the male members of club "Hopkins Student Enterprises". Show the first name and last name.', 'sql_query': 'SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  "Hopkins Student Enterprises" AND t3.sex  =  "M"', 'db_id': 'club_1'}, {'question': 'Count the number of different positions in the club "Bootup Baltimore".', 'sql_query': 'SELECT count(DISTINCT t2.position) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid WHERE t1.clubname  =  "Bootup Baltimore"', 'db_id': 'club_1'}], 'phone_1': [{'question': 'Find the name of the company that has the least number of phone models. List the company name and the number of phone model produced by that company.', 'sql_query': 'SELECT Company_name ,  count(*) FROM phone GROUP BY Company_name ORDER BY count(*) ASC LIMIT 1;', 'db_id': 'phone_1'}, {'question': 'Which model has the least amount of RAM? List the model name and the amount of RAM.', 'sql_query': 'SELECT Model_name ,  RAM_MiB FROM chip_model ORDER BY RAM_MiB ASC LIMIT 1;', 'db_id': 'phone_1'}], 'soccer_2': [{'question': 'What is the maximum training hours for the students whose training hours is greater than 1000 in different positions?', 'sql_query': 'SELECT max(T1.HS) ,  pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T1.HS  >  1000 GROUP BY T2.pPos', 'db_id': 'soccer_2'}, {'question': 'Find the max, average and min training hours of all players.', 'sql_query': 'SELECT avg(HS) ,  max(HS) ,  min(HS) FROM Player', 'db_id': 'soccer_2'}], 'wrestler': [{'question': 'What are the names of wrestlers who have never been eliminated?', 'sql_query': 'SELECT Name FROM wrestler WHERE Wrestler_ID NOT IN (SELECT Wrestler_ID FROM elimination)', 'db_id': 'wrestler'}, {'question': 'Return the name of the wrestler who had the lowest number of days held.', 'sql_query': 'SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1', 'db_id': 'wrestler'}], 'race_track': [{'question': "What are the names for tracks without a race in class 'GT'.", 'sql_query': "SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'", 'db_id': 'race_track'}, {'question': 'What is the name, location and seating for the most recently opened track?', 'sql_query': 'SELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1', 'db_id': 'race_track'}], 'match_season': [{'question': 'Return the colleges that have players who play the Midfielder position, as well as players who play the Defender position.', 'sql_query': 'SELECT College FROM match_season WHERE POSITION  =  "Midfielder" INTERSECT SELECT College FROM match_season WHERE POSITION  =  "Defender"', 'db_id': 'match_season'}, {'question': 'Who are the different players and how many years has each played?', 'sql_query': 'SELECT Player ,  Years_Played FROM player', 'db_id': 'match_season'}], 'dorm_1': [{'question': 'Find the code of city where most of students are living in.', 'sql_query': 'SELECT city_code FROM student GROUP BY city_code ORDER BY count(*) DESC LIMIT 1', 'db_id': 'dorm_1'}, {'question': 'Find the numbers of different majors and cities.', 'sql_query': 'SELECT count(DISTINCT major) ,  count(DISTINCT city_code) FROM student', 'db_id': 'dorm_1'}], 'department_management': [{'question': "What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?", 'sql_query': "SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T3.born_state  =  'Alabama'", 'db_id': 'department_management'}, {'question': 'What are the maximum and minimum budget of the departments?', 'sql_query': 'SELECT max(budget_in_billions) ,  min(budget_in_billions) FROM department', 'db_id': 'department_management'}], 'cre_Doc_Tracking_DB': [{'question': 'Which employees have either destroyed a document or made an authorization to do so? Return their employee ids.', 'sql_query': 'SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed UNION SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed', 'db_id': 'cre_Doc_Tracking_DB'}, {'question': 'What are the id of each employee and the number of document destroyed by that employee?', 'sql_query': 'SELECT Destroyed_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destroyed_by_Employee_ID', 'db_id': 'cre_Doc_Tracking_DB'}], 'inn_1': [{'question': 'Find the name of rooms booked by some customers whose first name contains ROY.', 'sql_query': "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE firstname LIKE '%ROY%'", 'db_id': 'inn_1'}, {'question': "Find the first and last names of people who payed more than the rooms' base prices.", 'sql_query': 'SELECT T1.firstname ,  T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T1.Rate - T2.basePrice  >  0', 'db_id': 'inn_1'}], 'customers_and_addresses': [{'question': 'What are the names of customers who live in Colorado state?', 'sql_query': 'SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  "Colorado"', 'db_id': 'customers_and_addresses'}, {'question': 'Find the state and country of all cities with post code starting with 4.', 'sql_query': 'SELECT state_province_county ,  country FROM addresses WHERE zip_postcode LIKE "4%"', 'db_id': 'customers_and_addresses'}], 'customers_card_transactions': [{'question': 'What is the customer id of the customer with the most accounts, and how many accounts does this person have?', 'sql_query': 'SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1', 'db_id': 'customers_card_transactions'}, {'question': 'What are the different customer ids, and how many cards does each one hold?', 'sql_query': 'SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id', 'db_id': 'customers_card_transactions'}], 'cre_Drama_Workshop_Groups': [{'question': 'What are the names of the clients who do not have any booking?', 'sql_query': 'SELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID  =  T2.Client_ID', 'db_id': 'cre_Drama_Workshop_Groups'}, {'question': 'Find the city the store named "FJA Filming" is in.', 'sql_query': 'SELECT T1.City_Town FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Store_Name  =  "FJA Filming"', 'db_id': 'cre_Drama_Workshop_Groups'}], 'baseball_1': [{'question': 'What is the number of wins the team Boston Red Stockings got in the postseasons each year in history?', 'sql_query': "SELECT count(*) ,  T1.year FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' GROUP BY T1.year", 'db_id': 'baseball_1'}, {'question': "How many players born in USA are right-handed batters? That is, have the batter value 'R'.", 'sql_query': "SELECT count(*) FROM player WHERE birth_country = 'USA' AND bats  =  'R';", 'db_id': 'baseball_1'}], 'cre_Theme_park': [{'question': 'What are the names of tourist attractions that can be reached by walk or is at address 660 Shea Crescent?', 'sql_query': 'SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  "660 Shea Crescent" OR T2.How_to_Get_There  =  "walk"', 'db_id': 'cre_Theme_park'}, {'question': 'Give me the detail and opening hour for each museum.', 'sql_query': 'SELECT T1.Museum_Details ,  T2.Opening_Hours FROM MUSEUMS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Museum_ID  =  T2.Tourist_Attraction_ID', 'db_id': 'cre_Theme_park'}], 'cinema': [{'question': 'Show all the locations where some cinemas were opened in both year 2010 and year 2011.', 'sql_query': 'SELECT LOCATION FROM cinema WHERE openning_year  =  2010 INTERSECT SELECT LOCATION FROM cinema WHERE openning_year  =  2011', 'db_id': 'cinema'}, {'question': 'In which locations are there more than one movie theater with capacity above 300?', 'sql_query': 'SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1', 'db_id': 'cinema'}], 'apartment_rentals': [{'question': 'Which apartment type code appears the most often?', 'sql_query': 'SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1', 'db_id': 'apartment_rentals'}, {'question': 'Show the start dates and end dates of all the apartment bookings made by guests with gender code "Female".', 'sql_query': 'SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T2.gender_code  =  "Female"', 'db_id': 'apartment_rentals'}], 'station_weather': [{'question': 'Find names and times of trains that run through stations for the local authority Chiltern.', 'sql_query': 'SELECT t3.name ,  t3.time FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id JOIN train AS t3 ON t2.train_id  =  t3.id WHERE t1.local_authority  =  "Chiltern"', 'db_id': 'station_weather'}, {'question': 'Find the number and time of the train that goes from Chennai to Guruvayur.', 'sql_query': "SELECT train_number ,  TIME FROM train WHERE origin  =  'Chennai' AND destination  =  'Guruvayur'", 'db_id': 'station_weather'}], 'local_govt_in_alabama': [{'question': 'What is the id of the event with the most participants?', 'sql_query': 'SELECT Event_ID FROM Participants_in_Events GROUP BY Event_ID ORDER BY count(*) DESC LIMIT 1', 'db_id': 'local_govt_in_alabama'}, {'question': 'What are the ids and details of events that have more than one participants?', 'sql_query': 'SELECT T1.event_id ,  T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID  =  T2.Event_ID GROUP BY T1.Event_ID HAVING count(*)  >  1', 'db_id': 'local_govt_in_alabama'}], 'game_1': [{'question': 'Show all game names played by Linda Smith', 'sql_query': 'SELECT Gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid JOIN Student AS T3 ON T3.Stuid  =  T1.Stuid WHERE T3.Lname  =  "Smith" AND T3.Fname  =  "Linda"', 'db_id': 'game_1'}, {'question': 'What are the names of all the games that have been played for at least 1000 hours?', 'sql_query': 'SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid HAVING sum(hours_played)  >=  1000', 'db_id': 'game_1'}], 'employee_hire_evaluation': [{'question': 'Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.', 'sql_query': 'SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000', 'db_id': 'employee_hire_evaluation'}, {'question': 'What is the number of employees from each city?', 'sql_query': 'SELECT count(*) ,  city FROM employee GROUP BY city', 'db_id': 'employee_hire_evaluation'}], 'train_station': [{'question': 'Show the location with most number of train stations.', 'sql_query': 'SELECT LOCATION FROM station GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1', 'db_id': 'train_station'}, {'question': 'show the train name and station name for each train.', 'sql_query': 'SELECT T2.name ,  T3.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id', 'db_id': 'train_station'}], 'musical': [{'question': 'Return the most frequent result across all musicals.', 'sql_query': 'SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'musical'}, {'question': 'Show names of actors and names of musicals they are in.', 'sql_query': 'SELECT T1.Name ,  T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID', 'db_id': 'musical'}], 'flight_2': [{'question': 'Find the name of airports which do not have any flight in and out.', 'sql_query': 'SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)', 'db_id': 'flight_2'}, {'question': "What are airlines that have flights arriving at airport 'AHD'?", 'sql_query': 'SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  "AHD"', 'db_id': 'flight_2'}], 'e_learning': [{'question': 'Find the personal names of students not enrolled in any course.', 'sql_query': 'SELECT personal_name FROM Students EXCEPT SELECT T1.personal_name FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id  =  T2.student_id', 'db_id': 'e_learning'}, {'question': 'What are the enrollment dates of all the tests that have result "Pass"?', 'sql_query': 'SELECT T1.date_of_enrolment FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  "Pass"', 'db_id': 'e_learning'}], 'behavior_monitoring': [{'question': 'What are the id and zip code of the address with the highest monthly rental?', 'sql_query': 'SELECT T2.address_id ,  T1.zip_postcode FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id ORDER BY monthly_rental DESC LIMIT 1', 'db_id': 'behavior_monitoring'}, {'question': 'What are the first names and last names of students with address in Wisconsin state?', 'sql_query': 'SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.address_id WHERE T1.state_province_county  =  "Wisconsin"', 'db_id': 'behavior_monitoring'}], 'flight_1': [{'question': 'Show names for all aircrafts of which John Williams has certificates.', 'sql_query': 'SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  "John Williams"', 'db_id': 'flight_1'}, {'question': 'Show the id and name of the aircraft with the maximum distance.', 'sql_query': 'SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1', 'db_id': 'flight_1'}], 'orchestra': [{'question': 'List the names of orchestras that have no performance.', 'sql_query': 'SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)', 'db_id': 'orchestra'}, {'question': 'Please show the different record companies and the corresponding number of orchestras.', 'sql_query': 'SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company', 'db_id': 'orchestra'}], 'hospital_1': [{'question': 'Find the names of all patients who have an undergoing treatment and are staying in room 111.', 'sql_query': 'SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN patient AS T2 ON T1.patient = T2.SSN JOIN stay AS T3 ON T1.Stay  =  T3.StayID WHERE T3.room  =  111', 'db_id': 'hospital_1'}, {'question': 'Which physicians are in charge of more than one patient? Give me their names.', 'sql_query': 'SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid HAVING count(*)  >  1', 'db_id': 'hospital_1'}], 'gas_company': [{'question': 'Show all headquarters without a company in banking industry.', 'sql_query': "SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking'", 'db_id': 'gas_company'}, {'question': 'What are the headquarters with at least two companies in the banking industry?', 'sql_query': "SELECT headquarters FROM company WHERE main_industry  =  'Banking' GROUP BY headquarters HAVING count(*)  >=  2", 'db_id': 'gas_company'}], 'game_injury': [{'question': 'What are the names of the managers for gas stations that are operated by the ExxonMobil company?', 'sql_query': "SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.company  =  'ExxonMobil'", 'db_id': 'gas_company'}, {'question': 'What are the ids, scores, and dates of the games which caused at least two injury accidents?', 'sql_query': 'SELECT T1.id ,  T1.score ,  T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T2.game_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2', 'db_id': 'game_injury'}], 'department_store': [{'question': 'What is the id of the department with the least number of staff?', 'sql_query': 'SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1', 'db_id': 'department_store'}, {'question': 'Return the staff ids and genders for any staff with the title Department Manager.', 'sql_query': 'SELECT T1.staff_id ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  "Department Manager"', 'db_id': 'department_store'}], 'scholar': [{'question': 'How many papers did Mirella Lapata cite ?', 'sql_query': 'SELECT DISTINCT COUNT ( t3.citedpaperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN cite AS t3 ON t2.paperid  =  t3.citingpaperid WHERE t1.authorname  =  "Mirella Lapata";', 'db_id': 'scholar'}, {'question': 'What are the papers from pldi 2015 ?', 'sql_query': 'SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  "pldi";', 'db_id': 'scholar'}], 'insurance_policies': [{'question': 'Among all the claims, which settlements have a claimed amount that is no more than the average? List the claim start date.', 'sql_query': 'SELECT Date_Claim_Made FROM Claims WHERE Amount_Settled  <=  ( SELECT avg(Amount_Settled) FROM Claims )', 'db_id': 'insurance_policies'}, {'question': 'Find the settlement amount of the claim with the largest claim amount. Show both the settlement amount and claim amount.', 'sql_query': 'SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Claimed DESC LIMIT 1', 'db_id': 'insurance_policies'}], 'assets_maintenance': [{'question': 'Which gender makes up the majority of the staff?', 'sql_query': 'SELECT gender FROM staff GROUP BY gender ORDER BY count(*) DESC LIMIT 1', 'db_id': 'assets_maintenance'}, {'question': 'For all the faults of different parts, what are all the decriptions of the skills required to fix them? List the name of the faults and the skill description.', 'sql_query': 'SELECT T1.fault_short_name ,  T3.skill_description FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id  =  T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id', 'db_id': 'assets_maintenance'}], 'network_2': [{'question': 'Find the name of the person who has no student friends.', 'sql_query': "SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.job  =  'student'", 'db_id': 'network_2'}, {'question': 'What is average age for different job title?', 'sql_query': 'SELECT avg(age) ,  job FROM Person GROUP BY job', 'db_id': 'network_2'}], 'tracking_software_problems': [{'question': 'For each product that has problems, find the number of problems reported after 1986-11-13 and the product id?', 'sql_query': 'SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > "1986-11-13" GROUP BY T2.product_id', 'db_id': 'tracking_software_problems'}, {'question': 'Find the ids of the problems that are reported by the staff whose last name is Bosco.', 'sql_query': 'SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_last_name = "Bosco"', 'db_id': 'tracking_software_problems'}], 'movie_1': [{'question': 'What are the names of all the reviewers and movie names?', 'sql_query': 'SELECT name FROM Reviewer UNION SELECT title FROM Movie', 'db_id': 'movie_1'}, {'question': 'Find the names of all reviewers who have ratings with a NULL value for the date.', 'sql_query': 'SELECT DISTINCT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID  =  T2.rID WHERE ratingDate  =  "null"', 'db_id': 'movie_1'}], 'hr_1': [{'question': 'What are the ids for employees who do not work in departments with managers that have ids between 100 and 200?', 'sql_query': 'SELECT * FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)', 'db_id': 'hr_1'}, {'question': 'Display the first name and department name for each employee.', 'sql_query': 'SELECT T1.first_name ,  T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id', 'db_id': 'hr_1'}], 'imdb': [{'question': 'How many movies did " Quentin Tarantino " direct before 2010 ?', 'sql_query': 'SELECT COUNT ( DISTINCT t3.title  ) FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  "Quentin Tarantino" AND t3.release_year  <  2010;', 'db_id': 'imdb'}, {'question': 'Who are the actors born in " Austin " after 1980 ?', 'sql_query': 'SELECT name FROM actor WHERE birth_city  =  "Austin" AND birth_year  >  1980;', 'db_id': 'imdb'}], 'products_gen_characteristics': [{'question': "Count the number of different characteristic names the product 'cumin' has.", 'sql_query': 'SELECT count(DISTINCT t3.characteristic_name) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  "sesame"', 'db_id': 'products_gen_characteristics'}, {'question': 'What are the name and typical buying and selling prices of the products that have color described as "yellow"?', 'sql_query': 'SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  "yellow"', 'db_id': 'products_gen_characteristics'}], 'loan_1': [{'question': 'Find the average credit score of the customers who have some loan.', 'sql_query': 'SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)', 'db_id': 'loan_1'}, {'question': 'What are the names and cities of bank branches that offer loans for business?', 'sql_query': "SELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'", 'db_id': 'loan_1'}], 'dog_kennels': [{'question': 'Find the average age of the dogs who went through treatments.', 'sql_query': 'SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )', 'db_id': 'dog_kennels'}, {'question': "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", 'sql_query': "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", 'db_id': 'dog_kennels'}], 'e_government': [{'question': 'What are the names of all cities and states?', 'sql_query': 'SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses', 'db_id': 'e_government'}, {'question': 'What are the names of organizations that contain the word "Party"?', 'sql_query': 'SELECT organization_name FROM organizations WHERE organization_name LIKE "%Party%"', 'db_id': 'e_government'}], 'tracking_grants_for_research': [{'question': 'What is the total amount of grant money for research?', 'sql_query': "SELECT sum(grant_amount) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id JOIN organisation_Types AS T3 ON T2.organisation_type  =  T3.organisation_type WHERE T3.organisation_type_description  =  'Research'", 'db_id': 'tracking_grants_for_research'}, {'question': 'What are the ids and details for all organizations that have grants of more than 6000 dollars?', 'sql_query': 'SELECT T2.organisation_id ,  T2.organisation_details FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id GROUP BY T2.organisation_id HAVING sum(T1.grant_amount)  >  6000', 'db_id': 'tracking_grants_for_research'}], 'film_rank': [{'question': 'What is the name of teh studio that created the most films?', 'sql_query': 'SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'film_rank'}, {'question': 'What is the average number of cities of markets with low film market estimate bigger than 10000?', 'sql_query': 'SELECT avg(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T1.Low_Estimate  >  10000', 'db_id': 'film_rank'}], 'academic': [{'question': 'return me the number of papers by " H. V. Jagadish " .', 'sql_query': 'SELECT COUNT ( DISTINCT t3.title ) FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  "H. V. Jagadish";', 'db_id': 'academic'}, {'question': 'return me the paper after 2000 in VLDB conference with more than 200 citations .', 'sql_query': 'SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  "VLDB" AND t2.citation_num  >  200 AND t2.year  >  2000;', 'db_id': 'academic'}], 'customer_complaints': [{'question': 'Count the number of customers that have the customer type that is most common.', 'sql_query': 'SELECT count(*) FROM customers GROUP BY customer_type_code ORDER BY count(*) DESC LIMIT 1', 'db_id': 'customer_complaints'}, {'question': 'What are lines 1 and 2 of the addressed of the customer with the email "vbogisich@example.org"?', 'sql_query': 'SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  "vbogisich@example.org"', 'db_id': 'customer_complaints'}], 'storm_record': [{'question': 'What are the names of storms that did not affect two or more regions?', 'sql_query': 'SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2', 'db_id': 'storm_record'}, {'question': 'Show the region name with at least two storms.', 'sql_query': 'SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2', 'db_id': 'storm_record'}], 'music_1': [{'question': 'What are the names of all songs that have a lower rating than some song of blues genre?', 'sql_query': 'SELECT song_name FROM song WHERE rating  <  (SELECT max(rating) FROM song WHERE genre_is  =  "blues")', 'db_id': 'music_1'}, {'question': 'For each file format, return the number of artists who released songs in that format.', 'sql_query': 'SELECT count(*) ,  formats FROM files GROUP BY formats', 'db_id': 'music_1'}], 'tvshow': [{'question': 'What is the country with the most number of TV Channels and how many does it have?', 'sql_query': 'SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;', 'db_id': 'tvshow'}, {'question': 'What is the maximum and minimum share for the TV series?', 'sql_query': 'SELECT max(SHARE) , min(SHARE) FROM TV_series;', 'db_id': 'tvshow'}], 'device': [{'question': 'What is the software platform that is most common amongst all devices?', 'sql_query': 'SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'device'}, {'question': 'What is the shop name corresponding to the shop that opened in the most recent year?', 'sql_query': 'SELECT Shop_Name FROM shop ORDER BY Open_Year DESC LIMIT 1', 'db_id': 'device'}], 'sports_competition': [{'question': 'What is the most common competition type?', 'sql_query': 'SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'sports_competition'}, {'question': 'What are the maximum and minimum number of silver medals for all the clubs?', 'sql_query': 'SELECT max(Silver) ,  min(Silver) FROM club_rank', 'db_id': 'sports_competition'}], 'university_basketball': [{'question': 'Return the name of the team and the acc during the regular season for the school that was founded the earliest.', 'sql_query': 'SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1', 'db_id': 'university_basketball'}, {'question': 'What are the enrollment and primary conference for the university which was founded the earliest?', 'sql_query': 'SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1', 'db_id': 'university_basketball'}], 'music_2': [{'question': 'What is the type of vocables that appears most frequently?', 'sql_query': 'SELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1', 'db_id': 'music_2'}, {'question': 'How many different instruments are used in the song "Badlands"?', 'sql_query': 'SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  "Badlands"', 'db_id': 'music_2'}], 'body_builder': [{'question': 'List the weight of the body builders who have snatch score higher than 140 or have the height greater than 200.', 'sql_query': 'SELECT T2.weight FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T1.snatch  >  140 OR T2.height  >  200;', 'db_id': 'body_builder'}, {'question': 'List the snatch score and clean jerk score of body builders in ascending order of snatch score.', 'sql_query': 'SELECT Snatch ,  Clean_Jerk FROM body_builder ORDER BY Snatch ASC', 'db_id': 'body_builder'}], 'bike_1': [{'question': 'What is the zip code in which the average mean sea level pressure is the lowest?', 'sql_query': 'SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1', 'db_id': 'bike_1'}, {'question': 'How many days had both mean humidity above 50 and mean visibility above 8?', 'sql_query': 'SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8', 'db_id': 'bike_1'}], 'shop_membership': [{'question': 'What are the minimum and maximum membership amounts for all branches that either opened in 2011 or are located in London?', 'sql_query': "SELECT min(membership_amount) ,  max(membership_amount) FROM branch WHERE open_year  =  2011 OR city  =  'London'", 'db_id': 'shop_membership'}, {'question': 'What are names for top three branches with most number of membership?', 'sql_query': 'SELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3', 'db_id': 'shop_membership'}], 'party_people': [{'question': 'Count the number of Annual Meeting events that took place in the region of the United Kingdom.', 'sql_query': 'SELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  "United Kingdom" AND t3.Event_Name  =  "Annaual Meeting"', 'db_id': 'party_people'}, {'question': 'How many events are there for each party?', 'sql_query': 'SELECT T2.party_name ,  count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id', 'db_id': 'party_people'}], 'student_assessment': [{'question': 'What are all info of students who registered courses but not attended courses?', 'sql_query': 'SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)', 'db_id': 'student_assessment'}, {'question': 'Find id of the candidate who most recently accessed the course?', 'sql_query': 'SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1', 'db_id': 'student_assessment'}], 'performance_attendance': [{'question': 'Show the locations that have both performances with more than 2000 attendees and performances with less than 1000 attendees.', 'sql_query': 'SELECT LOCATION FROM performance WHERE Attendance  >  2000 INTERSECT SELECT LOCATION FROM performance WHERE Attendance  <  1000', 'db_id': 'performance_attendance'}, {'question': 'What is the date of the performance with the highest number of attendees?', 'sql_query': 'SELECT Date FROM performance ORDER BY Attendance DESC LIMIT 1', 'db_id': 'performance_attendance'}], 'concert_singer': [{'question': 'Show the stadium names without any concert.', 'sql_query': 'SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)', 'db_id': 'concert_singer'}, {'question': 'What are the names , themes , and number of singers for every concert ?', 'sql_query': 'select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id', 'db_id': 'concert_singer'}], 'csu_1': [{'question': 'What campus has the most degrees  conferrred over its entire existence?', 'sql_query': 'SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1', 'db_id': 'csu_1'}, {'question': 'How many degrees were conferred at San Jose State University in 2000?', 'sql_query': 'SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  "San Jose State University" AND t2.year  =  2000', 'db_id': 'csu_1'}], 'formula_1': [{'question': 'What is the id and last name of the driver with the longest laptime?', 'sql_query': 'SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1', 'db_id': 'formula_1'}, {'question': 'What are the names of all the Japanese constructors that have earned more than 5 points?', 'sql_query': 'SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = "Japanese" AND T2.points > 5', 'db_id': 'formula_1'}], 'activity_1': [{'question': 'Find the first names of professors who are not playing Canoeing or Kayaking.', 'sql_query': "SELECT lname FROM faculty WHERE rank  =  'Professor' EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'", 'db_id': 'activity_1'}, {'question': 'Count the number of female Professors we have.', 'sql_query': 'SELECT count(*) FROM Faculty WHERE Sex  =  \'F\' AND Rank  =  "Professor"', 'db_id': 'activity_1'}], 'local_govt_and_lot': [{'question': 'How many services has each resident requested? List the resident id, details, and the count in descending order of the count.', 'sql_query': 'SELECT T1.resident_id ,  T1.other_details ,  count(*) FROM Residents AS T1 JOIN Residents_Services AS T2 ON T1.resident_id  =  T2.resident_id GROUP BY T1.resident_id ORDER BY count(*) DESC', 'db_id': 'local_govt_and_lot'}, {'question': 'What are the id and details of the customers who have at least 3 events?', 'sql_query': 'SELECT T1.customer_id ,  T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  3', 'db_id': 'local_govt_and_lot'}], 'decoration_competition': [{'question': 'Show the most common country across members.', 'sql_query': 'SELECT Country FROM member GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'decoration_competition'}, {'question': 'Show the names of members in ascending order of their rank in rounds.', 'sql_query': 'SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID ORDER BY Rank_in_Round ASC', 'db_id': 'decoration_competition'}], 'manufactory_1': [{'question': 'Find the name of companies whose revenue is greater than the average revenue of all companies.', 'sql_query': 'SELECT name FROM manufacturers WHERE revenue  >  (SELECT avg(revenue) FROM manufacturers)', 'db_id': 'manufactory_1'}, {'question': 'Find the name and revenue of the company that earns the highest revenue in each city.', 'sql_query': 'SELECT name ,  max(revenue) ,  Headquarter FROM manufacturers GROUP BY Headquarter', 'db_id': 'manufactory_1'}], 'book_2': [{'question': 'Please show the most common publication date.', 'sql_query': 'SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'book_2'}, {'question': 'List the publisher of the publication with the highest price.', 'sql_query': 'SELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1', 'db_id': 'book_2'}], 'flight_company': [{'question': 'What is the most common company type, and how many are there?', 'sql_query': 'SELECT TYPE ,  count(*) FROM operate_company GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1', 'db_id': 'flight_company'}, {'question': 'List the id, country, city and name of the airports ordered alphabetically by the name.', 'sql_query': 'SELECT id ,  country ,  city ,  name FROM airport ORDER BY name', 'db_id': 'flight_company'}], 'party_host': [{'question': 'Show the host names for parties with number of hosts greater than 20.', 'sql_query': 'SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20', 'db_id': 'party_host'}, {'question': 'Give me the theme and location of each party.', 'sql_query': 'SELECT Party_Theme ,  LOCATION FROM party', 'db_id': 'party_host'}], 'cre_Docs_and_Epenses': [{'question': 'Show ids for all documents in type CV without expense budgets.', 'sql_query': 'SELECT document_id FROM Documents WHERE document_type_code  =  "CV" EXCEPT SELECT document_id FROM Documents_with_expenses', 'db_id': 'cre_Docs_and_Epenses'}, {'question': 'List document type codes and the number of documents in each code.', 'sql_query': 'SELECT document_type_code ,  count(*) FROM Documents GROUP BY document_type_code', 'db_id': 'cre_Docs_and_Epenses'}], 'student_1': [{'question': 'Find the classroom that the most students use.', 'sql_query': 'SELECT classroom FROM list GROUP BY classroom ORDER BY count(*) DESC LIMIT 1', 'db_id': 'student_1'}, {'question': 'Find the first names of the teachers that teach first grade.', 'sql_query': 'SELECT DISTINCT T2.firstname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  1', 'db_id': 'student_1'}], 'customers_and_invoices': [{'question': 'Show ids for all transactions whose amounts are greater than the average.', 'sql_query': 'SELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)', 'db_id': 'customers_and_invoices'}, {'question': 'Show the id, the date of account opened, the account name, and other account detail for all accounts.', 'sql_query': 'SELECT account_id ,  date_account_opened ,  account_name ,  other_account_details FROM Accounts', 'db_id': 'customers_and_invoices'}], 'restaurants': [{'question': 'where can i eat some good french food in the yosemite and mono lake area ?', 'sql_query': 'SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  "yosemite and mono lake area" AND t1.food_type  =  "french" AND t1.rating  >  2.5;', 'db_id': 'restaurants'}, {'question': 'where is a restaurant in alameda ?', 'sql_query': 'SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "alameda";', 'db_id': 'restaurants'}], 'climbing': [{'question': 'What are the names of countains that no climber has climbed?', 'sql_query': 'SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)', 'db_id': 'climbing'}, {'question': 'Please show the countries and the number of climbers from each country.', 'sql_query': 'SELECT Country ,  COUNT(*) FROM climber GROUP BY Country', 'db_id': 'climbing'}], 'election': [{'question': 'Who were the comptrollers of the parties associated with the delegates from district 1 or district 2?', 'sql_query': 'SELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1 OR T1.District  =  2', 'db_id': 'election'}, {'question': 'Show the 3 counties with the smallest population.', 'sql_query': 'SELECT County_name FROM county ORDER BY Population ASC LIMIT 3', 'db_id': 'election'}], 'aircraft': [{'question': 'Please show the names of aircrafts associated with airport with name "London Gatwick".', 'sql_query': 'SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  "London Gatwick"', 'db_id': 'aircraft'}, {'question': 'Show all information on the airport that has the largest number of international passengers.', 'sql_query': 'SELECT * FROM airport ORDER BY International_Passengers DESC LIMIT 1', 'db_id': 'aircraft'}], 'pets_1': [{'question': 'Find the id of students who do not have a cat pet.', 'sql_query': "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'", 'db_id': 'pets_1'}, {'question': 'Find the average weight for each pet type.', 'sql_query': 'SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype', 'db_id': 'pets_1'}], 'customers_and_products_contacts': [{'question': 'How many products have a price higher than the average?', 'sql_query': 'SELECT count(*) FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products)', 'db_id': 'customers_and_products_contacts'}, {'question': 'Show each state and the number of addresses in each state.', 'sql_query': 'SELECT state_province_county ,  count(*) FROM addresses GROUP BY state_province_county', 'db_id': 'customers_and_products_contacts'}], 'entrepreneur': [{'question': 'What is the investor that has invested in the most number of entrepreneurs?', 'sql_query': 'SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'entrepreneur'}, {'question': 'How many entrepreneurs correspond to each investor?', 'sql_query': 'SELECT Investor ,  COUNT(*) FROM entrepreneur GROUP BY Investor', 'db_id': 'entrepreneur'}]}