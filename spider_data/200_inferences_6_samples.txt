{'geo': [{'question': 'what state has the highest elevation', 'sql_query': 'SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );', 'db_id': 'geo'}, {'question': 'what is the smallest state by area', 'sql_query': 'SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );', 'db_id': 'geo'}, {'question': 'what is the state with the largest population density', 'sql_query': 'SELECT state_name FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );', 'db_id': 'geo'}, {'question': 'what are the capitals of the states that border texas', 'sql_query': 'SELECT t2.capital FROM state AS t2 JOIN border_info AS t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  "texas";', 'db_id': 'geo'}, {'question': 'name the major rivers in illinois', 'sql_query': 'SELECT river_name FROM river WHERE LENGTH  >  750 AND traverse  =  "illinois";', 'db_id': 'geo'}, {'question': 'what is the population of the major cities in wisconsin', 'sql_query': 'SELECT population FROM city WHERE population  >  150000 AND state_name  =  "wisconsin";', 'db_id': 'geo'}], 'cre_Doc_Control_Systems': [{'question': 'Which document has the most draft copies? List its document id and number of draft copies.', 'sql_query': 'SELECT document_id , count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT 1;', 'db_id': 'cre_Doc_Control_Systems'}, {'question': "List the employees who have not showed up in any circulation history of documents. List the employee's name.", 'sql_query': 'SELECT employee_name FROM Employees EXCEPT SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id', 'db_id': 'cre_Doc_Control_Systems'}, {'question': 'List roles that have more than one employee. List the role description and number of employees.', 'sql_query': 'SELECT Roles.role_description , count(Employees.employee_id) FROM ROLES JOIN Employees ON Employees.role_code = Roles.role_code GROUP BY Employees.role_code HAVING count(Employees.employee_id)  >  1;', 'db_id': 'cre_Doc_Control_Systems'}, {'question': 'What is the document status description of the document with id 1?', 'sql_query': 'SELECT Ref_Document_Status.document_status_description FROM Ref_Document_Status JOIN Documents ON Documents.document_status_code = Ref_Document_Status.document_status_code WHERE Documents.document_id = 1;', 'db_id': 'cre_Doc_Control_Systems'}, {'question': 'Which documents have more than 1 draft copies? List document id and number of draft copies.', 'sql_query': 'SELECT document_id , count(*) FROM Draft_Copies GROUP BY document_id HAVING count(*)  >  1;', 'db_id': 'cre_Doc_Control_Systems'}, {'question': 'How many employees does each role have? List role description, id and number of employees.', 'sql_query': 'SELECT T1.role_description ,  T2.role_code ,  count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code;', 'db_id': 'cre_Doc_Control_Systems'}], 'student_transcripts_tracking': [{'question': 'Which semesters do not have any student enrolled? List the semester name.', 'sql_query': 'SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )', 'db_id': 'student_transcripts_tracking'}, {'question': 'What is the name of the semester with no students enrolled?', 'sql_query': 'SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )', 'db_id': 'student_transcripts_tracking'}, {'question': "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?", 'sql_query': 'SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1', 'db_id': 'student_transcripts_tracking'}, {'question': 'Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.', 'sql_query': 'SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2', 'db_id': 'student_transcripts_tracking'}, {'question': 'What is the first, middle, and last name of the first student to register?', 'sql_query': 'SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1', 'db_id': 'student_transcripts_tracking'}, {'question': 'What are the names and id of courses having at most 2 sections?', 'sql_query': 'SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2', 'db_id': 'student_transcripts_tracking'}], 'product_catalog': [{'question': 'Find the level name of the catalog with the lowest price (in USD).', 'sql_query': 'SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1', 'db_id': 'product_catalog'}, {'question': 'What is the level name of the cheapest catalog (in USD)?', 'sql_query': 'SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1', 'db_id': 'product_catalog'}, {'question': 'Which catalog publisher has published the most catalogs?', 'sql_query': 'SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1', 'db_id': 'product_catalog'}, {'question': 'What is the entry name of the most expensive catalog (in USD)?', 'sql_query': 'SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1', 'db_id': 'product_catalog'}, {'question': 'Which catalog content has the smallest capacity? Return the catalog entry name.', 'sql_query': 'SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1', 'db_id': 'product_catalog'}, {'question': 'Find the name and capacity of products with price greater than 700 (in USD).', 'sql_query': 'SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700', 'db_id': 'product_catalog'}], 'wta_1': [{'question': 'Find the year that has the most number of matches.', 'sql_query': 'SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1', 'db_id': 'wta_1'}, {'question': 'Find the first name, country code and birth date of the winner who has the highest rank points in all matches.', 'sql_query': 'SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1', 'db_id': 'wta_1'}, {'question': 'What is the name of the winner who has won the most matches, and how many rank points does this player have?', 'sql_query': 'SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1', 'db_id': 'wta_1'}, {'question': 'List the first and last name of all players who are left / L hand in the order of birth date.', 'sql_query': "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date", 'db_id': 'wta_1'}, {'question': 'Find the total number of tours for each ranking date.', 'sql_query': 'SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date', 'db_id': 'wta_1'}, {'question': 'How many matches were played in each year?', 'sql_query': 'SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR', 'db_id': 'wta_1'}], 'insurance_and_eClaims': [{'question': 'What are the names of customers who do not have any policies?', 'sql_query': 'SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id', 'db_id': 'insurance_and_eClaims'}, {'question': 'What are the names of the customers and staff members?', 'sql_query': 'SELECT customer_details FROM customers UNION SELECT staff_details FROM staff', 'db_id': 'insurance_and_eClaims'}, {'question': 'Which type of policy is most frequently used? Give me the policy type code.', 'sql_query': 'SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1', 'db_id': 'insurance_and_eClaims'}, {'question': 'Which customers have the substring "Diana" in their names? Return the customer details.', 'sql_query': 'SELECT customer_details FROM customers WHERE customer_details LIKE "%Diana%"', 'db_id': 'insurance_and_eClaims'}, {'question': 'For each policy type, return its type code and its count in the record.', 'sql_query': 'SELECT policy_type_code ,  count(*) FROM policies GROUP BY policy_type_code', 'db_id': 'insurance_and_eClaims'}, {'question': 'What are the total amount and average amount paid in claim headers?', 'sql_query': 'SELECT sum(amount_piad) ,  avg(amount_piad) FROM claim_headers', 'db_id': 'insurance_and_eClaims'}], 'document_management': [{'question': 'What are the names of documents that do not have any sections?', 'sql_query': 'SELECT document_name FROM documents WHERE document_code NOT IN (SELECT document_code FROM document_sections)', 'db_id': 'document_management'}, {'question': 'Find the average access count of documents with the least popular structure.', 'sql_query': 'SELECT avg(access_count) FROM documents GROUP BY document_structure_code ORDER BY count(*) ASC LIMIT 1', 'db_id': 'document_management'}, {'question': 'Find the total access count of all documents in the most popular document type.', 'sql_query': 'SELECT sum(access_count) FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1', 'db_id': 'document_management'}, {'question': 'Find the name of the document that has been accessed the greatest number of times, as well as the count of how many times it has been accessed?', 'sql_query': 'SELECT document_name ,  access_count FROM documents ORDER BY access_count DESC LIMIT 1', 'db_id': 'document_management'}, {'question': 'What are all the section titles of the document named "David CV"?', 'sql_query': 'SELECT t2.section_title FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code WHERE t1.document_name  =  "David CV"', 'db_id': 'document_management'}, {'question': 'What are the different role codes for users, and how many users have each?', 'sql_query': 'SELECT count(*) ,  role_code FROM users GROUP BY role_code', 'db_id': 'document_management'}], 'club_1': [{'question': 'Find the names of the clubs that have at least a member from the city with city code "HOU".', 'sql_query': 'SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  "HOU"', 'db_id': 'club_1'}, {'question': 'What is the average age of the members of the club "Bootup Baltimore"?', 'sql_query': 'SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  "Bootup Baltimore"', 'db_id': 'club_1'}, {'question': 'Who is the "CTO" of club "Hopkins Student Enterprises"? Show the first name and last name.', 'sql_query': 'SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  "Hopkins Student Enterprises" AND t2.position  =  "CTO"', 'db_id': 'club_1'}, {'question': 'What are the names of the clubs that have "Davis Steven" as a member?', 'sql_query': 'SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  "Davis" AND t3.lname  =  "Steven"', 'db_id': 'club_1'}, {'question': 'How many different roles are there in the club "Bootup Baltimore"?', 'sql_query': 'SELECT count(DISTINCT t2.position) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid WHERE t1.clubname  =  "Bootup Baltimore"', 'db_id': 'club_1'}, {'question': 'Count the number of different positions in the club "Bootup Baltimore".', 'sql_query': 'SELECT count(DISTINCT t2.position) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid WHERE t1.clubname  =  "Bootup Baltimore"', 'db_id': 'club_1'}], 'phone_1': [{'question': 'List the hardware model name for the phones that were produced by "Nokia Corporation" or whose screen mode type is "Graphics."', 'sql_query': 'SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  "Graphics" OR t2.Company_name  =  "Nokia Corporation"', 'db_id': 'phone_1'}, {'question': 'What are the wifi and screen mode type of the hardware model named "LG-P760"?', 'sql_query': 'SELECT T1.WiFi , T3.Type FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T2.Hardware_Model_name = "LG-P760";', 'db_id': 'phone_1'}, {'question': 'List the hardware model name and company name for all the phones that were launched in year 2002 or have RAM size greater than 32.', 'sql_query': 'SELECT T2.Hardware_Model_name ,  T2.Company_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 OR T1.RAM_MiB  >  32;', 'db_id': 'phone_1'}, {'question': 'Find the Char cells, Pixels and Hardware colours for the screen of the phone whose hardware model name is "LG-P760".', 'sql_query': 'SELECT T1.Char_cells ,  T1.Pixels ,  T1.Hardware_colours FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Hardware_Model_name = "LG-P760";', 'db_id': 'phone_1'}, {'question': "Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name.", 'sql_query': "SELECT Hardware_Model_name ,  Company_name FROM phone WHERE Accreditation_type LIKE 'Full';", 'db_id': 'phone_1'}, {'question': 'Which model has the least amount of RAM? List the model name and the amount of RAM.', 'sql_query': 'SELECT Model_name ,  RAM_MiB FROM chip_model ORDER BY RAM_MiB ASC LIMIT 1;', 'db_id': 'phone_1'}], 'soccer_2': [{'question': 'How many states have smaller colleges than average?', 'sql_query': 'SELECT count(DISTINCT state) FROM college WHERE enr  <  (SELECT avg(enr) FROM college)', 'db_id': 'soccer_2'}, {'question': 'What is the number of states that has some college whose enrollment is larger than the average enrollment?', 'sql_query': 'SELECT count(DISTINCT state) FROM college WHERE enr  >  (SELECT avg(enr) FROM college)', 'db_id': 'soccer_2'}, {'question': 'Find names of colleges with enrollment greater than that of some (at least one) college in the FL state.', 'sql_query': "SELECT DISTINCT cName FROM college WHERE enr  >  (SELECT min(enr) FROM college WHERE state  =  'FL')", 'db_id': 'soccer_2'}, {'question': 'Find the max, average and min training hours of all players.', 'sql_query': 'SELECT avg(HS) ,  max(HS) ,  min(HS) FROM Player', 'db_id': 'soccer_2'}, {'question': "List the name of the colleges whose enrollment is greater 18000 sorted by the college's name.", 'sql_query': 'SELECT cName FROM College WHERE enr  >  18000 ORDER BY cName', 'db_id': 'soccer_2'}, {'question': 'What is the average number of hours spent practicing for students who got rejected?', 'sql_query': "SELECT avg(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'no'", 'db_id': 'soccer_2'}], 'wrestler': [{'question': 'Which reign is the most common among wrestlers?', 'sql_query': 'SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'wrestler'}, {'question': 'Please show the most common reigns of wrestlers.', 'sql_query': 'SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'wrestler'}, {'question': 'What are the names of wrestlers who have never been eliminated?', 'sql_query': 'SELECT Name FROM wrestler WHERE Wrestler_ID NOT IN (SELECT Wrestler_ID FROM elimination)', 'db_id': 'wrestler'}, {'question': 'What are the times of elimination for any instances in which the elimination was done by Punk or Orton?', 'sql_query': 'SELECT TIME FROM elimination WHERE Eliminated_By  =  "Punk" OR Eliminated_By  =  "Orton"', 'db_id': 'wrestler'}, {'question': 'Give the names of wrestlers and their elimination moves.', 'sql_query': 'SELECT T2.Name ,  T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID', 'db_id': 'wrestler'}, {'question': 'What are the names and location of the wrestlers?', 'sql_query': 'SELECT Name ,  LOCATION FROM wrestler', 'db_id': 'wrestler'}], 'race_track': [{'question': 'What are the locations that have both tracks with more than 90000 seats, and tracks with fewer than 70000 seats?', 'sql_query': 'SELECT LOCATION FROM track WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM track WHERE seating  <  70000', 'db_id': 'race_track'}, {'question': "What are the names for tracks without a race in class 'GT'.", 'sql_query': "SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'", 'db_id': 'race_track'}, {'question': 'Give the class of races that is most common.', 'sql_query': 'SELECT CLASS FROM race GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1', 'db_id': 'race_track'}, {'question': 'Show names and seatings, ordered by seating for all tracks opened after 2000.', 'sql_query': 'SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating', 'db_id': 'race_track'}, {'question': 'Show the race class and number of races in each class.', 'sql_query': 'SELECT CLASS ,  count(*) FROM race GROUP BY CLASS', 'db_id': 'race_track'}, {'question': 'What are the names of different tracks, and how many races has each had?', 'sql_query': 'SELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id', 'db_id': 'race_track'}], 'match_season': [{'question': 'Which college have both players with position midfielder and players with position defender?', 'sql_query': 'SELECT College FROM match_season WHERE POSITION  =  "Midfielder" INTERSECT SELECT College FROM match_season WHERE POSITION  =  "Defender"', 'db_id': 'match_season'}, {'question': 'Show the most common position of players in match seasons.', 'sql_query': 'SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count(*) DESC LIMIT 1', 'db_id': 'match_season'}, {'question': 'Return the colleges that have players who play the Midfielder position, as well as players who play the Defender position.', 'sql_query': 'SELECT College FROM match_season WHERE POSITION  =  "Midfielder" INTERSECT SELECT College FROM match_season WHERE POSITION  =  "Defender"', 'db_id': 'match_season'}, {'question': 'Show the positions of the players from the team with name "Ryley Goldner".', 'sql_query': 'SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  "Ryley Goldner"', 'db_id': 'match_season'}, {'question': 'Show all official native languages that contain the word "English".', 'sql_query': 'SELECT Official_native_language FROM country WHERE Official_native_language LIKE "%English%"', 'db_id': 'match_season'}, {'question': 'What are the official native languages that contain the string "English".', 'sql_query': 'SELECT Official_native_language FROM country WHERE Official_native_language LIKE "%English%"', 'db_id': 'match_season'}], 'dorm_1': [{'question': 'What is the code of the city with the most students?', 'sql_query': 'SELECT city_code FROM student GROUP BY city_code ORDER BY count(*) DESC LIMIT 1', 'db_id': 'dorm_1'}, {'question': 'Find the number of female students (with F sex) living in Smith Hall', 'sql_query': "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'", 'db_id': 'dorm_1'}, {'question': 'What are the names of the dorm that does not have a TV Lounge?', 'sql_query': "SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge'", 'db_id': 'dorm_1'}, {'question': 'What are the names of the dorm with the largest capacity?', 'sql_query': 'SELECT dorm_name FROM dorm ORDER BY student_capacity DESC LIMIT 1', 'db_id': 'dorm_1'}, {'question': 'Find the average and oldest age for students with different sex.', 'sql_query': 'SELECT avg(age) ,  max(age) ,  sex FROM student GROUP BY sex', 'db_id': 'dorm_1'}, {'question': 'Find the number of students in each major.', 'sql_query': 'SELECT count(*) ,  major FROM student GROUP BY major', 'db_id': 'dorm_1'}], 'department_management': [{'question': "What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?", 'sql_query': "SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T3.born_state  =  'Alabama'", 'db_id': 'department_management'}, {'question': 'In which year were most departments established?', 'sql_query': 'SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1', 'db_id': 'department_management'}, {'question': "Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'?", 'sql_query': "SELECT T1.name ,  T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id WHERE T2.temporary_acting  =  'Yes'", 'db_id': 'department_management'}, {'question': 'List the creation year, name and budget of each department.', 'sql_query': 'SELECT creation ,  name ,  budget_in_billions FROM department', 'db_id': 'department_management'}, {'question': 'What are the distinct ages of the heads who are acting?', 'sql_query': "SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id  =  T2.head_id WHERE T2.temporary_acting  =  'Yes'", 'db_id': 'department_management'}, {'question': 'List the name, born state and age of the heads of departments ordered by age.', 'sql_query': 'SELECT name ,  born_state ,  age FROM head ORDER BY age', 'db_id': 'department_management'}], 'cre_Doc_Tracking_DB': [{'question': 'What are the employee ids of the employees whose role name is "Human Resource" or "Manager"?', 'sql_query': 'SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  "Human Resource" OR T2.role_name  =  "Manager"', 'db_id': 'cre_Doc_Tracking_DB'}, {'question': 'Show the location name for document "Robin CV".', 'sql_query': 'SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id  =  T2.document_id JOIN Ref_locations AS T3 ON T2.location_code  =  T3.location_code WHERE T1.document_name  =  "Robin CV"', 'db_id': 'cre_Doc_Tracking_DB'}, {'question': 'Which employees have either destroyed a document or made an authorization to do so? Return their employee ids.', 'sql_query': 'SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed UNION SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed', 'db_id': 'cre_Doc_Tracking_DB'}, {'question': 'What is the document type name for the document with name "How to read a book"?', 'sql_query': 'SELECT T2.document_type_name FROM All_documents AS T1 JOIN Ref_document_types AS T2 ON T1.document_type_code  =  T2.document_type_code WHERE T1.document_name  =  "How to read a book"', 'db_id': 'cre_Doc_Tracking_DB'}, {'question': 'Show the names of employees with role name Editor.', 'sql_query': 'SELECT T1.employee_name FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  "Editor"', 'db_id': 'cre_Doc_Tracking_DB'}, {'question': 'How many documents have document type code CV or BK?', 'sql_query': 'SELECT count(*) FROM All_documents WHERE document_type_code  =  "CV" OR document_type_code  =  "BK"', 'db_id': 'cre_Doc_Tracking_DB'}], 'inn_1': [{'question': 'What are the name of rooms booked by customers whose first name has "ROY" in part?', 'sql_query': "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE firstname LIKE '%ROY%'", 'db_id': 'inn_1'}, {'question': 'Find the name of rooms booked by some customers whose first name contains ROY.', 'sql_query': "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE firstname LIKE '%ROY%'", 'db_id': 'inn_1'}, {'question': 'What are the name of rooms that cost more than the average.', 'sql_query': 'SELECT roomName FROM Rooms WHERE basePrice  >  ( SELECT avg(basePrice) FROM Rooms );', 'db_id': 'inn_1'}, {'question': 'List the names and decor of rooms that have a king bed. Sort the list by their price.', 'sql_query': "SELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;", 'db_id': 'inn_1'}, {'question': 'Find the id and name of the most expensive base price room.', 'sql_query': 'SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1;', 'db_id': 'inn_1'}, {'question': 'What are the room name and base price of the room with the lowest base price?', 'sql_query': 'SELECT roomName ,  basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1;', 'db_id': 'inn_1'}], 'customers_and_addresses': [{'question': 'Find the names of customers who never ordered product Latte.', 'sql_query': "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte'", 'db_id': 'customers_and_addresses'}, {'question': 'What are names of customers who never ordered product Latte.', 'sql_query': "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte'", 'db_id': 'customers_and_addresses'}, {'question': 'What is the address content of the customer named "Maudie Kertzmann"?', 'sql_query': 'SELECT t3.address_content FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t1.customer_name  =  "Maudie Kertzmann"', 'db_id': 'customers_and_addresses'}, {'question': 'What is the total amount of products purchased before 2018-03-17 07:13:53?', 'sql_query': 'SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_date  <  "2018-03-17 07:13:53"', 'db_id': 'customers_and_addresses'}, {'question': 'Find the customer name and date of the orders that have the status "Delivered".', 'sql_query': 'SELECT t1.customer_name ,  t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id WHERE order_status  =  "Delivered"', 'db_id': 'customers_and_addresses'}, {'question': 'What are the state and country of all the cities that have post codes starting with 4.\\', 'sql_query': 'SELECT state_province_county ,  country FROM addresses WHERE zip_postcode LIKE "4%"', 'db_id': 'customers_and_addresses'}], 'customers_card_transactions': [{'question': 'What is the card type code with most number of cards?', 'sql_query': 'SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1', 'db_id': 'customers_card_transactions'}, {'question': 'Return the type of transaction with the highest total amount.', 'sql_query': 'SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC LIMIT 1', 'db_id': 'customers_card_transactions'}, {'question': 'What is the customer id with most number of cards, and how many does he have?', 'sql_query': 'SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1', 'db_id': 'customers_card_transactions'}, {'question': 'Give the full name and phone of the customer who has the account name 162.', 'sql_query': 'SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  "162"', 'db_id': 'customers_card_transactions'}, {'question': 'What are the valid from and valid to dates for the card with the number 4560596484842?', 'sql_query': 'SELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  "4560596484842"', 'db_id': 'customers_card_transactions'}, {'question': 'Return the full name and phone of the customer who has card number 4560596484842.', 'sql_query': 'SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  "4560596484842"', 'db_id': 'customers_card_transactions'}], 'cre_Drama_Workshop_Groups': [{'question': 'Find the id of the product ordered the most often on invoices.', 'sql_query': 'SELECT Product_ID FROM INVOICES GROUP BY Product_ID ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'cre_Drama_Workshop_Groups'}, {'question': 'What is the most frequent status of bookings?', 'sql_query': 'SELECT Status_Code FROM BOOKINGS GROUP BY Status_Code ORDER BY count(*) DESC LIMIT 1', 'db_id': 'cre_Drama_Workshop_Groups'}, {'question': 'Find the payment method that is used the most often in all the invoices. Give me its code.', 'sql_query': 'SELECT payment_method_code FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1', 'db_id': 'cre_Drama_Workshop_Groups'}, {'question': 'Find the names of the workshop groups where services with product name "film" are performed.', 'sql_query': 'SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T2.Product_Name  =  "film"', 'db_id': 'cre_Drama_Workshop_Groups'}, {'question': 'Find the phone number and email address of customer "Harold".', 'sql_query': 'SELECT Customer_Phone ,  Customer_Email_Address FROM CUSTOMERS WHERE Customer_Name  =  "Harold"', 'db_id': 'cre_Drama_Workshop_Groups'}, {'question': 'What are the phone and email for customer Harold?', 'sql_query': 'SELECT Customer_Phone ,  Customer_Email_Address FROM CUSTOMERS WHERE Customer_Name  =  "Harold"', 'db_id': 'cre_Drama_Workshop_Groups'}], 'baseball_1': [{'question': 'List three countries which are the origins of the least players.', 'sql_query': 'SELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT 3;', 'db_id': 'baseball_1'}, {'question': 'What were all the salary values of players in 2010 and 2001?', 'sql_query': 'SELECT salary FROM salary WHERE YEAR  =  2010 UNION SELECT salary FROM salary WHERE YEAR  =  2001', 'db_id': 'baseball_1'}, {'question': 'What are the three countries that the least players are from?', 'sql_query': 'SELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT 3;', 'db_id': 'baseball_1'}, {'question': "Compute the average salary of the players in the team called 'Boston Red Stockings'.", 'sql_query': "SELECT avg(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings'", 'db_id': 'baseball_1'}, {'question': 'Find the number of tied games (the value of "ties" is \'1\') in 1885 postseason.', 'sql_query': 'SELECT count(*) FROM postseason WHERE YEAR  =  1885 AND ties  =  1;', 'db_id': 'baseball_1'}, {'question': 'For each team, return the team name, id and the maximum salary among the team.', 'sql_query': 'SELECT T1.name ,  T1.team_id ,  max(T2.salary) FROM team AS T1 JOIN salary AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.team_id;', 'db_id': 'baseball_1'}], 'cre_Theme_park': [{'question': 'What are the names of tourist attractions that can be reached by bus or is at address 254 Ottilie Junction?', 'sql_query': 'SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  "254 Ottilie Junction" OR T2.How_to_Get_There  =  "bus"', 'db_id': 'cre_Theme_park'}, {'question': 'Which transportation method is used the most often to get to tourist attractions?', 'sql_query': 'SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'cre_Theme_park'}, {'question': 'Find the names of the tourist attractions that is either accessible by walk or at address 660 Shea Crescent.', 'sql_query': 'SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  "660 Shea Crescent" OR T2.How_to_Get_There  =  "walk"', 'db_id': 'cre_Theme_park'}, {'question': 'What is the name of the staff that is in charge of the attraction named "US museum"?', 'sql_query': 'SELECT T1.Name FROM STAFF AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  "US museum"', 'db_id': 'cre_Theme_park'}, {'question': 'Show different ways to get to attractions and the number of attractions that can be accessed in the corresponding way.', 'sql_query': 'SELECT How_to_Get_There ,  COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There', 'db_id': 'cre_Theme_park'}, {'question': 'What are the details and star ratings of the three hotels with the lowest price ranges?', 'sql_query': 'SELECT other_hotel_details ,  star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3', 'db_id': 'cre_Theme_park'}], 'cinema': [{'question': 'Show all the locations where no cinema has capacity over 800.', 'sql_query': 'SELECT LOCATION FROM cinema EXCEPT SELECT LOCATION FROM cinema WHERE capacity  >  800', 'db_id': 'cinema'}, {'question': 'Show all the locations where some cinemas were opened in both year 2010 and year 2011.', 'sql_query': 'SELECT LOCATION FROM cinema WHERE openning_year  =  2010 INTERSECT SELECT LOCATION FROM cinema WHERE openning_year  =  2011', 'db_id': 'cinema'}, {'question': 'Show the title and director for all films.', 'sql_query': 'SELECT title ,  directed_by FROM film', 'db_id': 'cinema'}, {'question': 'Show each location and the number of cinemas there.', 'sql_query': 'SELECT LOCATION ,  count(*) FROM cinema GROUP BY LOCATION', 'db_id': 'cinema'}, {'question': 'Show all the cinema names and opening years in descending order of opening year.', 'sql_query': 'SELECT name ,  openning_year FROM cinema ORDER BY openning_year DESC', 'db_id': 'cinema'}, {'question': 'What are the title and maximum price of each film?', 'sql_query': 'SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id', 'db_id': 'cinema'}], 'apartment_rentals': [{'question': 'Which apartment type has the largest number of total rooms? Return the apartment type code, its number of bathrooms and number of bedrooms.', 'sql_query': 'SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1', 'db_id': 'apartment_rentals'}, {'question': 'Which apartment type code appears the most often?', 'sql_query': 'SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1', 'db_id': 'apartment_rentals'}, {'question': 'Show the apartment type code that has the largest number of total rooms, together with the number of bathrooms and number of bedrooms.', 'sql_query': 'SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1', 'db_id': 'apartment_rentals'}, {'question': 'Show the apartment numbers, start dates, and end dates of all the apartment bookings.', 'sql_query': 'SELECT T2.apt_number ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id', 'db_id': 'apartment_rentals'}, {'question': 'Which apartments have bookings with status code "Confirmed"? Return their apartment numbers.', 'sql_query': 'SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  "Confirmed"', 'db_id': 'apartment_rentals'}, {'question': 'Show the guest first names, start dates, and end dates of all the apartment bookings.', 'sql_query': 'SELECT T2.guest_first_name ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id', 'db_id': 'apartment_rentals'}], 'station_weather': [{'question': 'Find names and times of trains that run through stations for the local authority Chiltern.', 'sql_query': 'SELECT t3.name ,  t3.time FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id JOIN train AS t3 ON t2.train_id  =  t3.id WHERE t1.local_authority  =  "Chiltern"', 'db_id': 'station_weather'}, {'question': 'Find the number of trains for each station, as well as the station network name and services.', 'sql_query': 'SELECT count(*) ,  t1.network_name ,  t1.services FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id GROUP BY t2.station_id', 'db_id': 'station_weather'}, {'question': 'Give me the times and numbers of all trains that go to Chennai, ordered by time.', 'sql_query': "SELECT TIME ,  train_number FROM train WHERE destination  =  'Chennai' ORDER BY TIME", 'db_id': 'station_weather'}, {'question': "How many trains have 'Express' in their names?", 'sql_query': 'SELECT count(*) FROM train WHERE name LIKE "%Express%"', 'db_id': 'station_weather'}, {'question': 'list the local authorities and services provided by all stations.', 'sql_query': 'SELECT local_authority ,  services FROM station', 'db_id': 'station_weather'}, {'question': 'Find the number of trains starting from each origin.', 'sql_query': 'SELECT origin ,  count(*) FROM train GROUP BY origin', 'db_id': 'station_weather'}], 'local_govt_in_alabama': [{'question': "Which events id does not have any participant with detail 'Kenyatta Kuhn'?", 'sql_query': "SELECT event_id FROM EVENTS EXCEPT SELECT T1.event_id FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE Participant_Details  =  'Kenyatta Kuhn'", 'db_id': 'local_govt_in_alabama'}, {'question': 'What is the id of the event with the most participants?', 'sql_query': 'SELECT Event_ID FROM Participants_in_Events GROUP BY Event_ID ORDER BY count(*) DESC LIMIT 1', 'db_id': 'local_govt_in_alabama'}, {'question': "How many events had participants whose details had the substring 'Dr.'", 'sql_query': "SELECT count(*) FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE T1.participant_details LIKE '%Dr.%'", 'db_id': 'local_govt_in_alabama'}, {'question': 'What are the ids and details of events that have more than one participants?', 'sql_query': 'SELECT T1.event_id ,  T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID  =  T2.Event_ID GROUP BY T1.Event_ID HAVING count(*)  >  1', 'db_id': 'local_govt_in_alabama'}, {'question': "what are the event details of the services that have the type code 'Marriage'?", 'sql_query': "SELECT T1.event_details FROM EVENTS AS T1 JOIN Services AS T2 ON T1.Service_ID  =  T2.Service_ID WHERE T2.Service_Type_Code  =  'Marriage'", 'db_id': 'local_govt_in_alabama'}, {'question': 'How many events have each participants attended? List the participant id, type and the number.', 'sql_query': 'SELECT T1.Participant_ID ,  T1.Participant_Type_Code ,  count(*) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID GROUP BY T1.Participant_ID', 'db_id': 'local_govt_in_alabama'}], 'game_1': [{'question': 'Show total hours per week and number of games played for student David Shieber.', 'sql_query': 'SELECT sum(hoursperweek) ,  sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.Fname  =  "David" AND T2.Lname  =  "Shieber"', 'db_id': 'game_1'}, {'question': 'What are the ids of all students who played video games and sports?', 'sql_query': 'SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games', 'db_id': 'game_1'}, {'question': 'What are the ids of all female students who play football?', 'sql_query': 'SELECT StuID FROM Student WHERE sex  =  \'F\' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname  =  "Football"', 'db_id': 'game_1'}, {'question': 'What are the ids of all students along with how many sports and games did they play?', 'sql_query': 'SELECT StuID ,  count(*) ,  sum(gamesplayed) FROM Sportsinfo GROUP BY StuID', 'db_id': 'game_1'}, {'question': 'Show all student ids and the number of hours played.', 'sql_query': 'SELECT Stuid ,  sum(hours_played) FROM Plays_games GROUP BY Stuid', 'db_id': 'game_1'}, {'question': 'What are the names of all the games that have been played for at least 1000 hours?', 'sql_query': 'SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid HAVING sum(hours_played)  >=  1000', 'db_id': 'game_1'}], 'employee_hire_evaluation': [{'question': 'Find the name of the employee who got the highest one time bonus.', 'sql_query': 'SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1', 'db_id': 'employee_hire_evaluation'}, {'question': 'Which district has both stores with less than 3000 products and stores with more than 10000 products?', 'sql_query': 'SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000', 'db_id': 'employee_hire_evaluation'}, {'question': 'Find the names of stores whose number products is more than the average number of products.', 'sql_query': 'SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)', 'db_id': 'employee_hire_evaluation'}, {'question': 'Find the manager name and district of the shop whose number of products is the largest.', 'sql_query': 'SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1', 'db_id': 'employee_hire_evaluation'}, {'question': 'What are the manager name and district of the shop that sells the largest number of products?', 'sql_query': 'SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1', 'db_id': 'employee_hire_evaluation'}, {'question': 'How many shops are there in each location?', 'sql_query': 'SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION', 'db_id': 'employee_hire_evaluation'}], 'train_station': [{'question': "Show all locations which don't have a train station with at least 15 platforms.", 'sql_query': 'SELECT LOCATION FROM station EXCEPT SELECT LOCATION FROM station WHERE number_of_platforms  >=  15', 'db_id': 'train_station'}, {'question': 'Show station names without any trains.', 'sql_query': 'SELECT name FROM station WHERE station_id NOT IN (SELECT station_id FROM train_station)', 'db_id': 'train_station'}, {'question': 'What is the average and maximum number of total passengers for train stations in London or Glasgow?', 'sql_query': "SELECT avg(total_passengers) ,  max(total_passengers) FROM station WHERE LOCATION  =  'London' OR LOCATION  =  'Glasgow'", 'db_id': 'train_station'}, {'question': 'show the train name and station name for each train.', 'sql_query': 'SELECT T2.name ,  T3.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id', 'db_id': 'train_station'}, {'question': 'Show the name and service for all trains in order by time.', 'sql_query': 'SELECT name ,  service FROM train ORDER BY TIME', 'db_id': 'train_station'}, {'question': 'Show all locations that have train stations with at least 15 platforms and train stations with more than 25 total passengers.', 'sql_query': 'SELECT DISTINCT LOCATION FROM station WHERE number_of_platforms  >=  15 AND total_passengers  >  25', 'db_id': 'train_station'}], 'musical': [{'question': 'What are the names of musicals who have no actors?', 'sql_query': 'SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)', 'db_id': 'musical'}, {'question': 'List the most common result of the musicals.', 'sql_query': 'SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'musical'}, {'question': 'Who are the nominees who have been nominated for both a Tony Award and a Drama Desk Award?', 'sql_query': 'SELECT Nominee FROM musical WHERE Award  =  "Tony Award" INTERSECT SELECT Nominee FROM musical WHERE Award  =  "Drama Desk Award"', 'db_id': 'musical'}, {'question': 'Show names of actors in descending order of the year their musical is awarded.', 'sql_query': 'SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID ORDER BY T2.Year DESC', 'db_id': 'musical'}, {'question': 'Show the musical nominee with award "Bob Fosse" or "Cleavant Derricks".', 'sql_query': 'SELECT Nominee FROM musical WHERE Award  =  "Tony Award" OR Award  =  "Cleavant Derricks"', 'db_id': 'musical'}, {'question': 'Show different nominees and the number of musicals they have been nominated.', 'sql_query': 'SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee', 'db_id': 'musical'}], 'flight_2': [{'question': 'How many flights land in Aberdeen or Abilene?', 'sql_query': 'SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  "Aberdeen" OR T2.city  =  "Abilene"', 'db_id': 'flight_2'}, {'question': 'How many flights fly from Aberdeen to Ashley?', 'sql_query': 'SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  "Ashley" AND T3.City  =  "Aberdeen"', 'db_id': 'flight_2'}, {'question': 'Count the number of United Airlines flights that arrive in Aberdeen.', 'sql_query': 'SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  "Aberdeen" AND T3.Airline  =  "United Airlines"', 'db_id': 'flight_2'}, {'question': "How many 'United Airlines' flights depart from Airport 'AHD'?", 'sql_query': 'SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.SourceAirport  =  "AHD"', 'db_id': 'flight_2'}, {'question': "What are airlines that have some flight departing from airport 'AHD'?", 'sql_query': 'SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "AHD"', 'db_id': 'flight_2'}, {'question': 'What are flight numbers of flights departing from City "Aberdeen "?', 'sql_query': 'SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"', 'db_id': 'flight_2'}], 'e_learning': [{'question': 'What are the personal names used both by some course authors and some students?', 'sql_query': 'SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students', 'db_id': 'e_learning'}, {'question': 'Find the common login name of course authors and students.', 'sql_query': 'SELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students', 'db_id': 'e_learning'}, {'question': 'Which students not enrolled in any course? Find their personal names.', 'sql_query': 'SELECT personal_name FROM Students EXCEPT SELECT T1.personal_name FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id  =  T2.student_id', 'db_id': 'e_learning'}, {'question': 'List all the dates of enrollment and completion of students.', 'sql_query': 'SELECT date_of_enrolment ,  date_of_completion FROM Student_Course_Enrolment', 'db_id': 'e_learning'}, {'question': 'Find the student ID and middle name for all the students with at most two enrollments.', 'sql_query': 'SELECT T1.student_id ,  T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  <=  2', 'db_id': 'e_learning'}, {'question': 'List the dates of enrollment and completion of the student with personal name "Karson".', 'sql_query': 'SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.personal_name  =  "Karson"', 'db_id': 'e_learning'}], 'behavior_monitoring': [{'question': 'What is the cell phone number of the student whose address has the lowest monthly rental?', 'sql_query': 'SELECT T2.cell_mobile_number FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id ORDER BY T1.monthly_rental ASC LIMIT 1', 'db_id': 'behavior_monitoring'}, {'question': 'What are the line 1 of addresses shared by some students and some teachers?', 'sql_query': 'SELECT T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.address_id INTERSECT SELECT T1.line_1 FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id', 'db_id': 'behavior_monitoring'}, {'question': 'What are the id and zip code of the address with the highest monthly rental?', 'sql_query': 'SELECT T2.address_id ,  T1.zip_postcode FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id ORDER BY monthly_rental DESC LIMIT 1', 'db_id': 'behavior_monitoring'}, {'question': 'Find the start and end dates of detentions of teachers with last name "Schultz".', 'sql_query': 'SELECT T1.datetime_detention_start ,  datetime_detention_end FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.last_name  =  "Schultz"', 'db_id': 'behavior_monitoring'}, {'question': 'Find the dates of assessment notes for students with first name "Fanny".', 'sql_query': 'SELECT T1.date_of_notes FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.first_name  =  "Fanny"', 'db_id': 'behavior_monitoring'}, {'question': 'Find the maximum and minimum monthly rental for all student addresses.', 'sql_query': 'SELECT max(monthly_rental) ,  min(monthly_rental) FROM Student_Addresses', 'db_id': 'behavior_monitoring'}], 'flight_1': [{'question': 'Show names for all employees who have certificate of Boeing 737-800.', 'sql_query': 'SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  "Boeing 737-800"', 'db_id': 'flight_1'}, {'question': 'Show names for all aircrafts with distances more than the average.', 'sql_query': 'SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)', 'db_id': 'flight_1'}, {'question': 'What place has the most flights coming from there?', 'sql_query': 'SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1', 'db_id': 'flight_1'}, {'question': 'Show the id and name of the aircraft with the maximum distance.', 'sql_query': 'SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1', 'db_id': 'flight_1'}, {'question': 'What is the name and salary of the employee with the id 242518965?', 'sql_query': 'SELECT name ,  salary FROM Employee WHERE eid  =  242518965', 'db_id': 'flight_1'}, {'question': 'What is the flight number, origin, and destination for all flights in alphabetical order by departure cities?', 'sql_query': 'SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin', 'db_id': 'flight_1'}], 'orchestra': [{'question': 'What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?', 'sql_query': 'SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003', 'db_id': 'orchestra'}, {'question': 'What are the orchestras that do not have any performances?', 'sql_query': 'SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)', 'db_id': 'orchestra'}, {'question': 'List the names of orchestras that have no performance.', 'sql_query': 'SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)', 'db_id': 'orchestra'}, {'question': 'List the name of the conductor with the most years of work.', 'sql_query': 'SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1', 'db_id': 'orchestra'}, {'question': 'What are the names of conductors who have conducted orchestras founded after the year 2008?', 'sql_query': 'SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008', 'db_id': 'orchestra'}, {'question': 'Please show the different record companies and the corresponding number of orchestras.', 'sql_query': 'SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company', 'db_id': 'orchestra'}], 'hospital_1': [{'question': 'What are the names of the physician who prescribed the highest dose?', 'sql_query': 'SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1', 'db_id': 'hospital_1'}, {'question': 'What are the procedures that cost more than 1000 or are specialized in by physician John Wen?', 'sql_query': 'SELECT name FROM procedures WHERE cost  >  1000 UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  "John Wen"', 'db_id': 'hospital_1'}, {'question': 'What is the name of the patient who made the most recent appointment?', 'sql_query': 'SELECT T1.name FROM patient AS T1 JOIN appointment AS T2 ON T1.ssn = T2.patient ORDER BY T2.start DESC LIMIT 1', 'db_id': 'hospital_1'}, {'question': 'Find the name of physicians who are in charge of more than one patient.', 'sql_query': 'SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid HAVING count(*)  >  1', 'db_id': 'hospital_1'}, {'question': "What are each physician's employee id and department id primarily affiliated.", 'sql_query': 'SELECT physician ,  department FROM affiliated_with WHERE primaryaffiliation  =  1', 'db_id': 'hospital_1'}, {'question': 'Which patient is undergoing the most recent treatment?', 'sql_query': 'SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1', 'db_id': 'hospital_1'}], 'gas_company': [{'question': 'What are the names of the managers for gas stations that are operated by the ExxonMobil company?', 'sql_query': "SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.company  =  'ExxonMobil'", 'db_id': 'gas_company'}, {'question': 'What are the headquarters without companies that are in the banking industry?', 'sql_query': "SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking'", 'db_id': 'gas_company'}, {'question': 'Show all headquarters without a company in banking industry.', 'sql_query': "SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking'", 'db_id': 'gas_company'}, {'question': 'For each company id, what are the companies and how many gas stations does each one operate?', 'sql_query': 'SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id', 'db_id': 'gas_company'}, {'question': 'Show the company name with the number of gas station.', 'sql_query': 'SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id', 'db_id': 'gas_company'}, {'question': 'What are the gas station ids, locations, and manager names for the gas stations ordered by opening year?', 'sql_query': 'SELECT station_id ,  LOCATION ,  manager_name FROM gas_station ORDER BY open_year', 'db_id': 'gas_company'}], 'game_injury': [{'question': 'What are the headquarters without companies that are in the banking industry?', 'sql_query': "SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking'", 'db_id': 'gas_company'}, {'question': 'Show the manager name for gas stations belonging to the ExxonMobil company.', 'sql_query': "SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.company  =  'ExxonMobil'", 'db_id': 'gas_company'}, {'question': 'Show all headquarters without a company in banking industry.', 'sql_query': "SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking'", 'db_id': 'gas_company'}, {'question': "What is the season of the game which causes the player 'Walter Samuel' to get injured?", 'sql_query': "SELECT T1.season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id WHERE T2.player  =  'Walter Samuel'", 'db_id': 'game_injury'}, {'question': "What are the player name, number of matches, and information source for players who do not suffer from injury of 'Knee problem'?", 'sql_query': "SELECT player ,  number_of_matches ,  SOURCE FROM injury_accident WHERE injury != 'Knee problem'", 'db_id': 'game_injury'}, {'question': 'How many games has each stadium held?', 'sql_query': 'SELECT T1.id ,  count(*) FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id GROUP BY T1.id', 'db_id': 'game_injury'}], 'department_store': [{'question': 'What are the distinct names and phone numbers for suppliers who have red jeans?', 'sql_query': 'SELECT DISTINCT T1.supplier_name ,  T1.supplier_phone FROM suppliers AS T1 JOIN product_suppliers AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN products AS T3 ON T2.product_id  =  T3.product_id WHERE T3.product_name  =  "red jeans"', 'db_id': 'department_store'}, {'question': 'What is the id of the department with the least number of staff?', 'sql_query': 'SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1', 'db_id': 'department_store'}, {'question': 'Return the name and job title of the staff with the latest date assigned.', 'sql_query': 'SELECT T1.staff_name ,  T2.job_title_code FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY T2.date_assigned_to DESC LIMIT 1', 'db_id': 'department_store'}, {'question': 'For each product type, return the maximum and minimum price.', 'sql_query': 'SELECT product_type_code ,  max(product_price) ,  min(product_price) FROM products GROUP BY product_type_code', 'db_id': 'department_store'}, {'question': 'What is the average price for each type of product?', 'sql_query': 'SELECT product_type_code ,  avg(product_price) FROM products GROUP BY product_type_code', 'db_id': 'department_store'}, {'question': 'Return the product type, name, and price for products supplied by supplier 3.', 'sql_query': 'SELECT T2.product_type_code ,  T2.product_name ,  T2.product_price FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  3', 'db_id': 'department_store'}], 'scholar': [{'question': 'author published acl 2016', 'sql_query': 'SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  "acl";', 'db_id': 'scholar'}, {'question': '2014 papers using ImageNet', 'sql_query': 'SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  "ImageNet" AND t3.year  =  2014;', 'db_id': 'scholar'}, {'question': 'who publishes in NIPS ?', 'sql_query': 'SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  "NIPS";', 'db_id': 'scholar'}, {'question': 'list papers published in chi', 'sql_query': 'SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  "chi";', 'db_id': 'scholar'}, {'question': 'How many papers does Christopher D. Manning have', 'sql_query': 'SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "Christopher D. Manning";', 'db_id': 'scholar'}, {'question': 'How many papers does Christopher D. Manning have ?', 'sql_query': 'SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "Christopher D. Manning";', 'db_id': 'scholar'}], 'insurance_policies': [{'question': 'List the details of the customers who do not have any policies.', 'sql_query': 'SELECT customer_details FROM Customers EXCEPT SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.customer_id  =  T2.customer_id', 'db_id': 'insurance_policies'}, {'question': 'Which customers do not have any policies? Find the details of these customers.', 'sql_query': 'SELECT customer_details FROM Customers EXCEPT SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.customer_id  =  T2.customer_id', 'db_id': 'insurance_policies'}, {'question': 'Return the claim start date for the claims whose claimed amount is no more than the average', 'sql_query': 'SELECT Date_Claim_Made FROM Claims WHERE Amount_Settled  <=  ( SELECT avg(Amount_Settled) FROM Claims )', 'db_id': 'insurance_policies'}, {'question': 'Of all the claims, what was the earliest date when any claim was made?', 'sql_query': 'SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1', 'db_id': 'insurance_policies'}, {'question': 'Tell me the the claim date and settlement date for each settlement case.', 'sql_query': 'SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Settlements', 'db_id': 'insurance_policies'}, {'question': 'List the date the claim was made, the date it was settled and the amount settled for all the claims which had exactly one settlement.', 'sql_query': 'SELECT T1.claim_id ,  T1.date_claim_made ,  T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.claim_id HAVING count(*)  =  1', 'db_id': 'insurance_policies'}], 'assets_maintenance': [{'question': 'Which company started the earliest the maintenance contract? Show the company name.', 'sql_query': 'SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id ORDER BY T2.contract_start_date ASC LIMIT 1', 'db_id': 'assets_maintenance'}, {'question': 'Which assets did not incur any fault log? List the asset model.', 'sql_query': 'SELECT asset_model FROM Assets WHERE asset_id NOT IN (SELECT asset_id FROM Fault_Log)', 'db_id': 'assets_maintenance'}, {'question': 'Which gender makes up the majority of the staff?', 'sql_query': 'SELECT gender FROM staff GROUP BY gender ORDER BY count(*) DESC LIMIT 1', 'db_id': 'assets_maintenance'}, {'question': 'How many assets does each third party company supply? List the count and the company id.', 'sql_query': 'SELECT count(*) ,  T1.company_id FROM Third_Party_Companies AS T1 JOIN Assets AS T2 ON T1.company_id  =  T2.supplier_company_id GROUP BY T1.company_id', 'db_id': 'assets_maintenance'}, {'question': 'What are all the fault descriptions and the fault status of all the faults recoreded in the logs?', 'sql_query': 'SELECT T1.fault_description ,  T2.fault_status FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id', 'db_id': 'assets_maintenance'}, {'question': 'How many assets does each maintenance contract contain? List the number and the contract id.', 'sql_query': 'SELECT count(*) ,  T1.maintenance_contract_id FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id  =  T2.maintenance_contract_id GROUP BY T1.maintenance_contract_id', 'db_id': 'assets_maintenance'}], 'network_2': [{'question': 'What are the names of the people who have no friends who are students?', 'sql_query': "SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.job  =  'student'", 'db_id': 'network_2'}, {'question': 'Find the name of the person who has no student friends.', 'sql_query': "SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.job  =  'student'", 'db_id': 'network_2'}, {'question': 'How many people are older than every engineer?', 'sql_query': "SELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  'engineer')", 'db_id': 'network_2'}, {'question': 'How old is the youngest person for each job?', 'sql_query': 'SELECT min(age) ,  job FROM Person GROUP BY job', 'db_id': 'network_2'}, {'question': 'What are all the friends of Alice who are female?', 'sql_query': "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'female'", 'db_id': 'network_2'}, {'question': 'How many people are under 40 for each gender?', 'sql_query': 'SELECT count(*) ,  gender FROM Person WHERE age  <  40 GROUP BY gender', 'db_id': 'network_2'}], 'tracking_software_problems': [{'question': 'For each product that has problems, find the number of problems reported after 1986-11-13 and the product id?', 'sql_query': 'SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > "1986-11-13" GROUP BY T2.product_id', 'db_id': 'tracking_software_problems'}, {'question': 'What are the products that have problems reported after 1986-11-13? Give me the product id and the count of problems reported after 1986-11-13.', 'sql_query': 'SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > "1986-11-13" GROUP BY T2.product_id', 'db_id': 'tracking_software_problems'}, {'question': 'For each product which has problems, what are the number of problems and the product id?', 'sql_query': 'SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id', 'db_id': 'tracking_software_problems'}, {'question': 'For the problem with id 10, return the ids and dates of its problem logs.', 'sql_query': 'SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10', 'db_id': 'tracking_software_problems'}, {'question': 'What are the ids of the problems that are from the product "voluptatem" and are reported after 1995?', 'sql_query': 'SELECT T1.problem_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = "voluptatem" AND T1.date_problem_reported > "1995"', 'db_id': 'tracking_software_problems'}, {'question': 'Find the ids of the problems that are reported by the staff whose last name is Bosco.', 'sql_query': 'SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_last_name = "Bosco"', 'db_id': 'tracking_software_problems'}], 'movie_1': [{'question': 'What are the ids of all reviewers who did not give 4 stars?', 'sql_query': 'SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  4', 'db_id': 'movie_1'}, {'question': 'What is the names of movies whose created year is after all movies directed by Steven Spielberg?', 'sql_query': 'SELECT title FROM Movie WHERE YEAR  >  (SELECT max(YEAR) FROM Movie WHERE director  =  "Steven Spielberg")', 'db_id': 'movie_1'}, {'question': 'For all directors who have directed more than one movie, what movies have they directed and what are their names?', 'sql_query': 'SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title', 'db_id': 'movie_1'}, {'question': 'Find the average rating star for each movie that received at least 2 ratings.', 'sql_query': 'SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2', 'db_id': 'movie_1'}, {'question': 'What are the names of all movies made before 1980 or had James Cameron as the director?', 'sql_query': 'SELECT title FROM Movie WHERE director  =  "James Cameron" OR YEAR   <  1980', 'db_id': 'movie_1'}, {'question': 'What are names of the movies that are either made before 1980 or directed by James Cameron?', 'sql_query': 'SELECT title FROM Movie WHERE director  =  "James Cameron" OR YEAR   <  1980', 'db_id': 'movie_1'}], 'hr_1': [{'question': 'display the full name (first and last name ) of employee with ID and name of the country presently where (s)he is working.', 'sql_query': 'SELECT T1.first_name ,  T1.last_name , T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id', 'db_id': 'hr_1'}, {'question': 'Find the ids of the employees who does not work in those departments where some employees works whose manager id within the range 100 and 200.', 'sql_query': 'SELECT * FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)', 'db_id': 'hr_1'}, {'question': 'What is all the information regarding employees with salaries above the minimum and under 2500?', 'sql_query': 'SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500', 'db_id': 'hr_1'}, {'question': 'display the country ID and number of cities for each country.', 'sql_query': 'SELECT country_id ,  COUNT(*) FROM locations GROUP BY country_id', 'db_id': 'hr_1'}, {'question': 'What are the full name (first and last name) and salary for all employees who does not have any value for commission?', 'sql_query': 'SELECT first_name ,  last_name ,  salary FROM  employees WHERE commission_pct  =  "null"', 'db_id': 'hr_1'}, {'question': 'What are the first names and department numbers for employees with last name McEwen?', 'sql_query': "SELECT first_name ,  department_id FROM employees WHERE last_name  =  'McEwen'", 'db_id': 'hr_1'}], 'imdb': [{'question': 'What is the number of movies in which " Shahab Hosseini " acted ?', 'sql_query': 'SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  "Shahab Hosseini";', 'db_id': 'imdb'}, {'question': 'How many movies about Iraq war were produced in 2015 ?', 'sql_query': 'SELECT COUNT ( DISTINCT t3.title  ) FROM tags AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.id JOIN movie AS t3 ON t2.msid  =  t3.mid WHERE t1.keyword  =  "Iraq war" AND t3.release_year  =  2015;', 'db_id': 'imdb'}, {'question': 'where is the director of " The Past " from', 'sql_query': 'SELECT t2.birth_city FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  "The Past";', 'db_id': 'imdb'}, {'question': 'who acted the role of " Mr. Bean "', 'sql_query': 'SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid WHERE t2.role  =  "Mr. Bean";', 'db_id': 'imdb'}, {'question': 'Find all the female actors from Austin', 'sql_query': 'SELECT name FROM actor WHERE birth_city  =  "Austin" AND gender  =  "female";', 'db_id': 'imdb'}, {'question': 'Find all actors who were born in " New York City " in 1984', 'sql_query': 'SELECT name FROM actor WHERE birth_city  =  "New York City" AND birth_year  =  1984;', 'db_id': 'imdb'}], 'products_gen_characteristics': [{'question': "Count the number of products with the 'hot' charactersitic.", 'sql_query': 'SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  "hot"', 'db_id': 'products_gen_characteristics'}, {'question': "Count the number of characteristics of the 'flax' product.", 'sql_query': 'SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  "flax"', 'db_id': 'products_gen_characteristics'}, {'question': "Count the number of different characteristic names the product 'cumin' has.", 'sql_query': 'SELECT count(DISTINCT t3.characteristic_name) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  "sesame"', 'db_id': 'products_gen_characteristics'}, {'question': 'List all the product names with the color description "white".', 'sql_query': 'SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  "white"', 'db_id': 'products_gen_characteristics'}, {'question': "What are the names, color descriptions, and product descriptions for products in the 'Herbs' category?", 'sql_query': 'SELECT T1.product_name ,  T2.color_description ,  T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE product_category_code  =  "Herbs"', 'db_id': 'products_gen_characteristics'}, {'question': "Give the color description for the product 'catnip'.", 'sql_query': 'SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  "catnip"', 'db_id': 'products_gen_characteristics'}], 'loan_1': [{'question': 'Find the state which has the most number of customers.', 'sql_query': 'SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1', 'db_id': 'loan_1'}, {'question': 'Which state has the greatest total number of bank customers?', 'sql_query': 'SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1', 'db_id': 'loan_1'}, {'question': 'What are the names of customers who do not have saving accounts?', 'sql_query': "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'", 'db_id': 'loan_1'}, {'question': 'Find the total amount of loans provided by bank branches in the state of New York.', 'sql_query': "SELECT sum(T2.amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.state  =  'New York'", 'db_id': 'loan_1'}, {'question': 'What are the states, account types, and credit scores for customers who have 0 loans?', 'sql_query': 'SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0', 'db_id': 'loan_1'}, {'question': 'What is the average account balance of customers with credit score below 50 for the different account types?', 'sql_query': 'SELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type', 'db_id': 'loan_1'}], 'dog_kennels': [{'question': 'Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .', 'sql_query': 'select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )', 'db_id': 'dog_kennels'}, {'question': 'Count the number of dogs of an age below the average.', 'sql_query': 'SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )', 'db_id': 'dog_kennels'}, {'question': 'What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?', 'sql_query': 'select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )', 'db_id': 'dog_kennels'}, {'question': "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", 'sql_query': "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", 'db_id': 'dog_kennels'}, {'question': 'Find the distinct breed type and size type combinations for dogs.', 'sql_query': 'SELECT DISTINCT breed_code ,  size_code FROM dogs', 'db_id': 'dog_kennels'}, {'question': "What are each owner's first name and their dogs's name?", 'sql_query': 'SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id', 'db_id': 'dog_kennels'}], 'e_government': [{'question': 'Find name of the services that has never been used.', 'sql_query': 'SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id  =  t2.service_id', 'db_id': 'e_government'}, {'question': 'What are the names of all cities and states?', 'sql_query': 'SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses', 'db_id': 'e_government'}, {'question': 'Find the name of all the cities and states.', 'sql_query': 'SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses', 'db_id': 'e_government'}, {'question': 'Give the state corresponding to the line number building "6862 Kaitlyn Knolls".', 'sql_query': 'SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE "%6862 Kaitlyn Knolls%"', 'db_id': 'e_government'}, {'question': 'Find the name of the youngest organization.', 'sql_query': 'SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1', 'db_id': 'e_government'}, {'question': 'What is the name of the organization that was formed most recently?', 'sql_query': 'SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1', 'db_id': 'e_government'}], 'tracking_grants_for_research': [{'question': "What are all the details of the organisations described as 'Sponsor'? Sort the result in an ascending order.", 'sql_query': "SELECT organisation_details FROM Organisations AS T1 JOIN organisation_Types AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_type_description  =  'Sponsor' ORDER BY organisation_details", 'db_id': 'tracking_grants_for_research'}, {'question': 'What are the details for all projects that did not hire any staff in a research role?', 'sql_query': "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code  =  'researcher' )", 'db_id': 'tracking_grants_for_research'}, {'question': 'What are the details of all organizations that are described as Sponsors and sort the results in ascending order?', 'sql_query': "SELECT organisation_details FROM Organisations AS T1 JOIN organisation_Types AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_type_description  =  'Sponsor' ORDER BY organisation_details", 'db_id': 'tracking_grants_for_research'}, {'question': 'What are the staff roles of the staff who', 'sql_query': "SELECT role_code FROM Project_Staff WHERE date_from  >  '2003-04-19 15:06:20' AND date_to  <  '2016-03-15 00:33:18'", 'db_id': 'tracking_grants_for_research'}, {'question': "What is the type of the document whose description starts with the word 'Initial'?", 'sql_query': "SELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%'", 'db_id': 'tracking_grants_for_research'}, {'question': 'What is the total amount of grants given by each organisations? Also list the organisation id.', 'sql_query': 'SELECT sum(grant_amount) ,  organisation_id FROM Grants GROUP BY organisation_id', 'db_id': 'tracking_grants_for_research'}], 'film_rank': [{'question': 'List the title of films that do not have any market estimation.', 'sql_query': 'SELECT Title FROM film WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation)', 'db_id': 'film_rank'}, {'question': 'What is the title of the film that has the highest high market estimation.', 'sql_query': 'SELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2  ON T1.Film_ID  =  T2.Film_ID ORDER BY high_estimate DESC LIMIT 1', 'db_id': 'film_rank'}, {'question': 'Return the title of the film with the highest high estimate?', 'sql_query': 'SELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2  ON T1.Film_ID  =  T2.Film_ID ORDER BY high_estimate DESC LIMIT 1', 'db_id': 'film_rank'}, {'question': 'Show the distinct director of films with market estimation in the year of 1995.', 'sql_query': 'SELECT DISTINCT T1.Director FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID WHERE T2.Year  =  1995', 'db_id': 'film_rank'}, {'question': 'Find the titles and studios of the films that are produced by some film studios that contained the word "Universal".', 'sql_query': 'SELECT title ,  Studio FROM film WHERE Studio LIKE "%Universal%"', 'db_id': 'film_rank'}, {'question': 'Please list the countries and years of film market estimations.', 'sql_query': 'SELECT T2.Country ,  T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID', 'db_id': 'film_rank'}], 'academic': [{'question': 'return me the keywords of " Making database systems usable " .', 'sql_query': 'SELECT t1.keyword FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t3.pid WHERE t2.title  =  "Making database systems usable";', 'db_id': 'academic'}, {'question': 'return me the area of the VLDB conference .', 'sql_query': 'SELECT t2.name FROM domain_conference AS t3 JOIN conference AS t1 ON t3.cid  =  t1.cid JOIN DOMAIN AS t2 ON t2.did  =  t3.did WHERE t1.name  =  "VLDB";', 'db_id': 'academic'}, {'question': 'return me the number of the keywords of " Making database systems usable " .', 'sql_query': 'SELECT COUNT ( DISTINCT t1.keyword ) FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t3.pid WHERE t2.title  =  "Making database systems usable";', 'db_id': 'academic'}, {'question': 'return me the total citations of all the papers in the VLDB conference .', 'sql_query': 'SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  "VLDB";', 'db_id': 'academic'}, {'question': 'return me the paper after 2000 with more than 200 citations .', 'sql_query': 'SELECT title FROM publication WHERE citation_num  >  200 AND YEAR  >  2000;', 'db_id': 'academic'}, {'question': 'return me the papers on VLDB conference .', 'sql_query': 'SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  "VLDB";', 'db_id': 'academic'}], 'customer_complaints': [{'question': 'Count the number of customers that have the customer type that is most common.', 'sql_query': 'SELECT count(*) FROM customers GROUP BY customer_type_code ORDER BY count(*) DESC LIMIT 1', 'db_id': 'customer_complaints'}, {'question': 'Return the phone number of the customer who filed the complaint that was raised most recently.', 'sql_query': 'SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1', 'db_id': 'customer_complaints'}, {'question': 'Find the prices of products which has never received a single complaint.', 'sql_query': 'SELECT product_price FROM products WHERE product_id NOT IN (SELECT product_id FROM complaints)', 'db_id': 'customer_complaints'}, {'question': 'What are lines 1 and 2 of the addressed of the customer with the email "vbogisich@example.org"?', 'sql_query': 'SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  "vbogisich@example.org"', 'db_id': 'customer_complaints'}, {'question': 'Return the average price of products that have each category code.', 'sql_query': 'SELECT avg(product_price) ,  product_category_code FROM products GROUP BY product_category_code', 'db_id': 'customer_complaints'}, {'question': 'Find the address line 1 and 2 of the customer with email "vbogisich@example.org".', 'sql_query': 'SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  "vbogisich@example.org"', 'db_id': 'customer_complaints'}], 'storm_record': [{'question': 'What are the names of regions that were not affected?', 'sql_query': 'SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)', 'db_id': 'storm_record'}, {'question': 'What are the names of storms that did not affect two or more regions?', 'sql_query': 'SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2', 'db_id': 'storm_record'}, {'question': 'Show the name for regions not affected.', 'sql_query': 'SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)', 'db_id': 'storm_record'}, {'question': 'List the name for storms and the number of affected regions for each storm.', 'sql_query': 'SELECT T1.name ,  count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id', 'db_id': 'storm_record'}, {'question': 'List name and damage for all storms in a descending order of max speed.', 'sql_query': 'SELECT name ,  damage_millions_USD FROM storm ORDER BY max_speed DESC', 'db_id': 'storm_record'}, {'question': 'Show the average and maximum damage for all storms with max speed higher than 1000.', 'sql_query': 'SELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  1000', 'db_id': 'storm_record'}], 'music_1': [{'question': 'What are the different names for all songs that have a higher resolution than English songs?', 'sql_query': 'SELECT DISTINCT song_name FROM song WHERE resolution  >  (SELECT min(resolution) FROM song WHERE languages  =  "english")', 'db_id': 'music_1'}, {'question': 'What are the names of the artists who released a song that has the word love in its title, and where are the artists from?', 'sql_query': 'SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE "%love%"', 'db_id': 'music_1'}, {'question': 'What is the name of the artist who produced the shortest song?', 'sql_query': 'SELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id  =  T2.f_id ORDER BY T2.duration LIMIT 1', 'db_id': 'music_1'}, {'question': 'What are the average rating and resolution of songs that are in Bangla?', 'sql_query': 'SELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  "bangla"', 'db_id': 'music_1'}, {'question': 'For each file format, return the number of artists who released songs in that format.', 'sql_query': 'SELECT count(*) ,  formats FROM files GROUP BY formats', 'db_id': 'music_1'}, {'question': 'What is the average rating and resolution of all bangla songs?', 'sql_query': 'SELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  "bangla"', 'db_id': 'music_1'}], 'tvshow': [{'question': "which countries' tv channels are not playing any cartoon written by Todd Casey?", 'sql_query': "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", 'db_id': 'tvshow'}, {'question': 'find the package option of the tv channel that do not have any cartoon directed by Ben Jones.', 'sql_query': "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')", 'db_id': 'tvshow'}, {'question': 'What is the country with the most number of TV Channels and how many does it have?', 'sql_query': 'SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;', 'db_id': 'tvshow'}, {'question': 'List each language and the number of TV Channels using it.', 'sql_query': 'SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE', 'db_id': 'tvshow'}, {'question': 'What are 3 most highly rated episodes in the TV series table and what were those ratings?', 'sql_query': 'SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;', 'db_id': 'tvshow'}, {'question': 'Find the package choice and series name of the TV channel that has high definition TV.', 'sql_query': 'SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  "yes"', 'db_id': 'tvshow'}], 'device': [{'question': 'Show the locations shared by shops with open year later than 2012 and shops with open year before 2008.', 'sql_query': 'SELECT LOCATION FROM shop WHERE Open_Year  >  2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year  <  2008', 'db_id': 'device'}, {'question': 'What is the software platform that is most common amongst all devices?', 'sql_query': 'SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'device'}, {'question': 'Which locations contains both shops that opened after the year 2012 and shops that opened before 2008?', 'sql_query': 'SELECT LOCATION FROM shop WHERE Open_Year  >  2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year  <  2008', 'db_id': 'device'}, {'question': 'What are the names of shops that have more than a single kind of device in stock?', 'sql_query': 'SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID HAVING COUNT(*)  >  1', 'db_id': 'device'}, {'question': 'What are the different software platforms for devices, and how many devices have each?', 'sql_query': 'SELECT Software_Platform ,  COUNT(*) FROM device GROUP BY Software_Platform', 'db_id': 'device'}, {'question': 'Return the names and locations of shops, ordered by name in alphabetical order.', 'sql_query': 'SELECT Shop_Name ,  LOCATION FROM shop ORDER BY Shop_Name ASC', 'db_id': 'device'}], 'sports_competition': [{'question': 'What are the names of all players that got more than the average number of points?', 'sql_query': 'SELECT name FROM player WHERE points  >  (SELECT avg(points) FROM player)', 'db_id': 'sports_competition'}, {'question': 'What are the positions with both players having more than 20 points and less than 10 points.', 'sql_query': 'SELECT POSITION FROM player WHERE Points  >  20 INTERSECT SELECT POSITION FROM player WHERE Points  <  10', 'db_id': 'sports_competition'}, {'question': 'Find the countries that have never participated in any competition with Friendly type.', 'sql_query': "SELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type  =  'Friendly'", 'db_id': 'sports_competition'}, {'question': 'Please show the names and the players of clubs.', 'sql_query': 'SELECT T1.name ,  T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID', 'db_id': 'sports_competition'}, {'question': 'For each position, what is the average number of points for players in that position?', 'sql_query': 'SELECT POSITION ,  avg(Points) FROM player GROUP BY POSITION', 'db_id': 'sports_competition'}, {'question': 'List the types of competition and the number of competitions of each type.', 'sql_query': 'SELECT Competition_type ,  COUNT(*) FROM competition GROUP BY Competition_type', 'db_id': 'sports_competition'}], 'university_basketball': [{'question': 'Find the founded year of the newest non public school.', 'sql_query': "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1", 'db_id': 'university_basketball'}, {'question': 'What is the primary conference of the school that has the lowest acc percent score in the competition?', 'sql_query': 'SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1', 'db_id': 'university_basketball'}, {'question': 'Return the name of the team and the acc during the regular season for the school that was founded the earliest.', 'sql_query': 'SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1', 'db_id': 'university_basketball'}, {'question': 'Find the total student enrollment for different affiliation type schools.', 'sql_query': 'SELECT sum(enrollment) ,  affiliation FROM university GROUP BY affiliation', 'db_id': 'university_basketball'}, {'question': 'What are the enrollment and primary conference for the university which was founded the earliest?', 'sql_query': 'SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1', 'db_id': 'university_basketball'}, {'question': 'Return the total and minimum enrollments across all schools.', 'sql_query': 'SELECT sum(enrollment) ,  min(enrollment) FROM university', 'db_id': 'university_basketball'}], 'music_2': [{'question': 'Find the name of songs that does not have a back vocal.', 'sql_query': 'SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  "back"', 'db_id': 'music_2'}, {'question': 'What are the names of all the songs whose album is under the label of "Universal Music Group"?', 'sql_query': 'SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.label  =  "Universal Music Group"', 'db_id': 'music_2'}, {'question': 'Who performed the song named "Badlands"? Show the first name and the last name.', 'sql_query': 'SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  "Badlands"', 'db_id': 'music_2'}, {'question': 'Find the number of vocal types used in song "Demon Kitty Rag"?', 'sql_query': 'SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  "Demon Kitty Rag"', 'db_id': 'music_2'}, {'question': 'How many different instruments does the musician with the last name "Heilo" use?', 'sql_query': 'SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  "Heilo"', 'db_id': 'music_2'}, {'question': 'How many instruments does the song "Badlands" use?', 'sql_query': 'SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  "Badlands"', 'db_id': 'music_2'}], 'body_builder': [{'question': 'List the weight of the body builders who have snatch score higher than 140 or have the height greater than 200.', 'sql_query': 'SELECT T2.weight FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T1.snatch  >  140 OR T2.height  >  200;', 'db_id': 'body_builder'}, {'question': 'What are the total scores of the body builders whose birthday contains the string "January" ?', 'sql_query': 'SELECT T1.total FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T2.Birth_Date LIKE "%January%";', 'db_id': 'body_builder'}, {'question': 'What are the birth date and birth place of the body builder with the highest total points?', 'sql_query': 'SELECT T2.Birth_Date ,  T2.Birth_Place FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC LIMIT 1', 'db_id': 'body_builder'}, {'question': 'List each birth place along with the number of people from there.', 'sql_query': 'SELECT Birth_Place ,  COUNT(*) FROM people GROUP BY Birth_Place', 'db_id': 'body_builder'}, {'question': 'What is the average total score of body builders with height bigger than 200?', 'sql_query': 'SELECT avg(T1.Total) FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  200', 'db_id': 'body_builder'}, {'question': 'What are the clean and jerk score of the body builder with the highest total score?', 'sql_query': 'SELECT Clean_Jerk FROM body_builder ORDER BY Total DESC LIMIT 1', 'db_id': 'body_builder'}], 'bike_1': [{'question': 'What is the id of the trip that started from the station with the highest dock count?', 'sql_query': 'SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1', 'db_id': 'bike_1'}, {'question': 'What are all the different zip codes that have a maximum dew point that was always below 70?', 'sql_query': 'SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70', 'db_id': 'bike_1'}, {'question': 'Give me the zip code where the average mean humidity is below 70 and at least 100 trips took place.', 'sql_query': 'SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100', 'db_id': 'bike_1'}, {'question': 'Return the unique name for stations that have ever had 7 bikes available.', 'sql_query': 'SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7', 'db_id': 'bike_1'}, {'question': 'Find the ids and names of stations from which at least 200 trips started.', 'sql_query': 'SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200', 'db_id': 'bike_1'}, {'question': 'For each zip code, return how many times max wind speed reached 25?', 'sql_query': 'SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code', 'db_id': 'bike_1'}], 'shop_membership': [{'question': 'Show all branch names with the number of members in each branch registered after 2015.', 'sql_query': 'SELECT T2.name ,  count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  >  2015 GROUP BY T2.branch_id', 'db_id': 'shop_membership'}, {'question': 'For each branch id, what are the names of the branches that were registered after 2015?', 'sql_query': 'SELECT T2.name ,  count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  >  2015 GROUP BY T2.branch_id', 'db_id': 'shop_membership'}, {'question': 'How many branches where have more than average number of memberships are there?', 'sql_query': 'SELECT count(*) FROM branch WHERE membership_amount  >  (SELECT avg(membership_amount) FROM branch)', 'db_id': 'shop_membership'}, {'question': 'What are the total purchases for members rated at level 6?', 'sql_query': 'SELECT count(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T2.level  =  6', 'db_id': 'shop_membership'}, {'question': 'What are the names for the 3 branches that have the most memberships?', 'sql_query': 'SELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3', 'db_id': 'shop_membership'}, {'question': 'What are the card numbers, names, and hometowns of every member ordered by descending level?', 'sql_query': 'SELECT card_number ,  name ,  hometown FROM member ORDER BY LEVEL DESC', 'db_id': 'shop_membership'}], 'party_people': [{'question': 'Count the number of Annual Meeting events that took place in the region of the United Kingdom.', 'sql_query': 'SELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  "United Kingdom" AND t3.Event_Name  =  "Annaual Meeting"', 'db_id': 'party_people'}, {'question': 'Show all member names who are not in charge of any event.', 'sql_query': 'SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id', 'db_id': 'party_people'}, {'question': 'Which member names are shared among members in the party with the id 3 and the party with the id 1?', 'sql_query': 'SELECT member_name FROM member WHERE party_id  =  3 INTERSECT SELECT member_name FROM member WHERE party_id  =  1', 'db_id': 'party_people'}, {'question': 'Who are the ministers, when did they take office, and when did they leave office, ordered by when they left office?', 'sql_query': 'SELECT minister ,  took_office ,  left_office FROM party ORDER BY left_office', 'db_id': 'party_people'}, {'question': 'Return the names of parties that have two or more events.', 'sql_query': 'SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  2', 'db_id': 'party_people'}, {'question': 'Return the minister who left office at the latest time.', 'sql_query': 'SELECT minister FROM party ORDER BY left_office DESC LIMIT 1', 'db_id': 'party_people'}], 'student_assessment': [{'question': 'What are the id of students who registered courses or attended courses?', 'sql_query': 'SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance', 'db_id': 'student_assessment'}, {'question': 'What are the  ids of every student who has never attended a course?', 'sql_query': 'SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)', 'db_id': 'student_assessment'}, {'question': 'What are the ids of the students who registered course statistics by order of registration date?', 'sql_query': 'SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = "statistics" ORDER BY T2.registration_date', 'db_id': 'student_assessment'}, {'question': 'How many students attend course English?', 'sql_query': 'SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = "English"', 'db_id': 'student_assessment'}, {'question': 'What are the different cities where students live?', 'sql_query': 'SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id', 'db_id': 'student_assessment'}, {'question': 'Find id of the candidate who most recently accessed the course?', 'sql_query': 'SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1', 'db_id': 'student_assessment'}], 'performance_attendance': [{'question': 'Show the dates of performances with attending members whose roles are "Violin".', 'sql_query': 'SELECT T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID WHERE T2.Role  =  "Violin"', 'db_id': 'performance_attendance'}, {'question': 'Show the names of members and the dates of performances they attended in descending order of attendance of the performances.', 'sql_query': 'SELECT T2.Name ,  T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T3.Attendance DESC', 'db_id': 'performance_attendance'}, {'question': 'Show the locations that have both performances with more than 2000 attendees and performances with less than 1000 attendees.', 'sql_query': 'SELECT LOCATION FROM performance WHERE Attendance  >  2000 INTERSECT SELECT LOCATION FROM performance WHERE Attendance  <  1000', 'db_id': 'performance_attendance'}, {'question': 'Show the attendances of the performances at location "TD Garden" or "Bell Centre"', 'sql_query': 'SELECT Attendance FROM performance WHERE LOCATION  =  "TD Garden" OR LOCATION  =  "Bell Centre"', 'db_id': 'performance_attendance'}, {'question': 'Show the names of members and the location of the performances they attended.', 'sql_query': 'SELECT T2.Name ,  T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID', 'db_id': 'performance_attendance'}, {'question': 'Show different locations and the number of performances at each location.', 'sql_query': 'SELECT LOCATION ,  COUNT(*) FROM performance GROUP BY LOCATION', 'db_id': 'performance_attendance'}], 'concert_singer': [{'question': 'Show names for all stadiums except for stadiums having a concert in year 2014.', 'sql_query': 'SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014', 'db_id': 'concert_singer'}, {'question': 'List all singer names in concerts in year 2014.', 'sql_query': 'SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014', 'db_id': 'concert_singer'}, {'question': 'What is the year that had the most concerts?', 'sql_query': 'SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1', 'db_id': 'concert_singer'}, {'question': 'What are the names, countries, and ages for every singer in descending order of age?', 'sql_query': 'SELECT name ,  country ,  age FROM singer ORDER BY age DESC', 'db_id': 'concert_singer'}, {'question': "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", 'sql_query': "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", 'db_id': 'concert_singer'}, {'question': 'Show the stadium name and the number of concerts in each stadium.', 'sql_query': 'SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id', 'db_id': 'concert_singer'}], 'csu_1': [{'question': 'Find the count of universities whose campus fee is greater than the average campus fee.', 'sql_query': 'SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)', 'db_id': 'csu_1'}, {'question': 'how many degrees were conferred between 1998 and 2002?', 'sql_query': 'SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T2.year  >=  1998 AND T2.year  <=  2002 GROUP BY T1.campus', 'db_id': 'csu_1'}, {'question': 'Find the count of universities whose campus fee is greater than the average campus fee.', 'sql_query': 'SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)', 'db_id': 'csu_1'}, {'question': 'What is the campus fee of "San Francisco State University" in year 1996?', 'sql_query': 'SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  "San Francisco State University" AND T2.year  =  1996', 'db_id': 'csu_1'}, {'question': 'What is the number of faculty lines in campus "Long Beach State University" in 2002?', 'sql_query': 'SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2002 AND T2.campus  =  "Long Beach State University"', 'db_id': 'csu_1'}, {'question': 'What is the campus fee in the year 2000 for San Jose State University?', 'sql_query': 'SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  "San Jose State University" AND t1.year  =  2000', 'db_id': 'csu_1'}], 'formula_1': [{'question': 'What is the id, forname and surname of the driver who had the first position in terms of laptime at least twice?', 'sql_query': "SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  '1' GROUP BY T1.driverid HAVING count(*)  >=  2", 'db_id': 'formula_1'}, {'question': 'What is the id and last name of the driver with the longest laptime?', 'sql_query': 'SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1', 'db_id': 'formula_1'}, {'question': 'What is the id, forename, and number of races for all drivers that have participated in at least 2 races?', 'sql_query': 'SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  2', 'db_id': 'formula_1'}, {'question': 'What is the name and date of the race that occurred most recently?', 'sql_query': 'SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1', 'db_id': 'formula_1'}, {'question': 'For each constructor id, how many races are there?', 'sql_query': 'SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid', 'db_id': 'formula_1'}, {'question': 'What are the names of all races that occurred after 12:00:00 or before 09:00:00?', 'sql_query': 'SELECT name FROM races WHERE TIME > "12:00:00" OR TIME < "09:00:00"', 'db_id': 'formula_1'}], 'activity_1': [{'question': 'Find the building that has the largest number of faculty members.', 'sql_query': 'SELECT building FROM Faculty GROUP BY building ORDER BY count(*) DESC LIMIT 1', 'db_id': 'activity_1'}, {'question': 'What are ids of the faculty members who not only participate in an activity but also advise a student.', 'sql_query': 'SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student', 'db_id': 'activity_1'}, {'question': 'Which building has most faculty members?', 'sql_query': 'SELECT building FROM Faculty GROUP BY building ORDER BY count(*) DESC LIMIT 1', 'db_id': 'activity_1'}, {'question': 'Find the number of activities Mark Giuliano is involved in.', 'sql_query': 'SELECT count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID WHERE T1.fname  =  "Mark" AND T1.lname  =  "Giuliano"', 'db_id': 'activity_1'}, {'question': 'How many activities does Mark Giuliano participate in?', 'sql_query': 'SELECT count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID WHERE T1.fname  =  "Mark" AND T1.lname  =  "Giuliano"', 'db_id': 'activity_1'}, {'question': 'Show the phone, room, and building for the faculty named Jerry Prince.', 'sql_query': 'SELECT phone ,  room ,  building FROM Faculty WHERE Fname  =  "Jerry" AND Lname  =  "Prince"', 'db_id': 'activity_1'}], 'local_govt_and_lot': [{'question': "What are the distinct id and type of the thing that has the status 'Close' or has a status record before the date '2017-06-19 02:59:21'", 'sql_query': "SELECT DISTINCT T2.thing_id ,  T2.Type_of_Thing_Code FROM Timed_Status_of_Things AS T1 JOIN Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.Status_of_Thing_Code  =  'Close' OR T1.Date_and_Date  <  '2017-06-19 02:59:21'", 'db_id': 'local_govt_and_lot'}, {'question': 'How many services has each resident requested? List the resident id, details, and the count in descending order of the count.', 'sql_query': 'SELECT T1.resident_id ,  T1.other_details ,  count(*) FROM Residents AS T1 JOIN Residents_Services AS T2 ON T1.resident_id  =  T2.resident_id GROUP BY T1.resident_id ORDER BY count(*) DESC', 'db_id': 'local_govt_and_lot'}, {'question': 'Which organizations are not a parent organization of others? List the organization id.', 'sql_query': 'SELECT organization_id FROM organizations EXCEPT SELECT parent_organization_id FROM organizations', 'db_id': 'local_govt_and_lot'}, {'question': "What are the resident details containing the substring 'Miss'?", 'sql_query': "SELECT other_details FROM Residents WHERE other_details LIKE '%Miss%'", 'db_id': 'local_govt_and_lot'}, {'question': 'Which events have the number of notes between one and three? List the event id and the property id.', 'sql_query': 'SELECT T1.Customer_Event_ID  ,  T1.property_id FROM Customer_Events AS T1 JOIN Customer_Event_Notes AS T2 ON T1.Customer_Event_ID  =  T2.Customer_Event_ID GROUP BY T1.customer_event_id HAVING count(*) BETWEEN 1 AND 3', 'db_id': 'local_govt_and_lot'}, {'question': "What is the distinct service types that are provided by the organization which has detail 'Denesik and Sons Party'?", 'sql_query': "SELECT DISTINCT T1.service_type_code FROM services AS T1 JOIN organizations AS T2 ON T1.organization_id  =  T2.organization_id WHERE T2.organization_details  =  'Denesik and Sons Party'", 'db_id': 'local_govt_and_lot'}], 'decoration_competition': [{'question': 'Show the most common country across members.', 'sql_query': 'SELECT Country FROM member GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'decoration_competition'}, {'question': 'List the names of members who did not participate in any round.', 'sql_query': 'SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM round)', 'db_id': 'decoration_competition'}, {'question': 'Show the distinct leader names of colleges associated with members from country "Canada".', 'sql_query': 'SELECT DISTINCT T1.Leader_Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID WHERE T2.Country  =  "Canada"', 'db_id': 'decoration_competition'}, {'question': 'Show the names of members and the locations of colleges they go to in ascending alphabetical order of member names.', 'sql_query': 'SELECT T2.Name ,  T1.College_Location FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID ORDER BY T2.Name ASC', 'db_id': 'decoration_competition'}, {'question': 'Show the names of members in ascending order of their rank in rounds.', 'sql_query': 'SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID ORDER BY Rank_in_Round ASC', 'db_id': 'decoration_competition'}, {'question': 'Show the names of members that have a rank in round higher than 3.', 'sql_query': 'SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID WHERE T2.Rank_in_Round  >  3', 'db_id': 'decoration_competition'}], 'manufactory_1': [{'question': 'What are the names of companies with revenue less than the lowest revenue of any manufacturer in Austin?', 'sql_query': "SELECT name FROM manufacturers WHERE revenue  <  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')", 'db_id': 'manufactory_1'}, {'question': 'Find the total revenue of companies whose revenue is larger than the revenue of some companies based in Austin.', 'sql_query': "SELECT sum(revenue) FROM manufacturers WHERE revenue  >  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')", 'db_id': 'manufactory_1'}, {'question': 'What is the total revenue of companies with revenue greater than the lowest revenue of any manufacturer in Austin?', 'sql_query': "SELECT sum(revenue) FROM manufacturers WHERE revenue  >  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')", 'db_id': 'manufactory_1'}, {'question': 'Find the name, headquarter and founder of the manufacturer that has the highest revenue.', 'sql_query': 'SELECT name ,  headquarter ,  founder FROM manufacturers ORDER BY revenue DESC LIMIT 1', 'db_id': 'manufactory_1'}, {'question': 'What are the names and average prices of products for manufacturers whose products cost on average 150 or more?', 'sql_query': 'SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name HAVING avg(T1.price) >= 150', 'db_id': 'manufactory_1'}, {'question': 'What are the names and prices of products that cost at least 180, sorted by price decreasing and name ascending?', 'sql_query': 'SELECT name ,  price FROM products WHERE price  >=  180 ORDER BY price DESC ,  name ASC', 'db_id': 'manufactory_1'}], 'book_2': [{'question': 'List the titles of books that are not published.', 'sql_query': 'SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)', 'db_id': 'book_2'}, {'question': 'Show the publishers that have publications with price higher than 10000000 and publications with price lower than 5000000.', 'sql_query': 'SELECT Publisher FROM publication WHERE Price  >  10000000 INTERSECT SELECT Publisher FROM publication WHERE Price  <  5000000', 'db_id': 'book_2'}, {'question': 'Please show the most common publication date.', 'sql_query': 'SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'book_2'}, {'question': 'Show the prices of publications whose publisher is either "Person" or "Wiley"', 'sql_query': 'SELECT Price FROM publication WHERE Publisher  =  "Person" OR Publisher  =  "Wiley"', 'db_id': 'book_2'}, {'question': 'List the publication dates of publications with 3 lowest prices.', 'sql_query': 'SELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3', 'db_id': 'book_2'}, {'question': 'Show writers who have published a book with price more than 4000000.', 'sql_query': 'SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Price  >  4000000', 'db_id': 'book_2'}], 'flight_company': [{'question': 'What is the most common company type, and how many are there?', 'sql_query': 'SELECT TYPE ,  count(*) FROM operate_company GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1', 'db_id': 'flight_company'}, {'question': "What are the different pilot names who had piloted a flight in the country 'United States' or in the airport named 'Billund Airport'?", 'sql_query': "SELECT DISTINCT T2.pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id WHERE T1.country  =  'United States' OR T1.name  =  'Billund Airport'", 'db_id': 'flight_company'}, {'question': 'which pilot is in charge of the most number of flights?', 'sql_query': 'SELECT pilot FROM flight GROUP BY pilot ORDER BY count(*) DESC LIMIT 1', 'db_id': 'flight_company'}, {'question': 'What are the ids and names of the companies that operated more than one flight?', 'sql_query': 'SELECT T1.id ,  T1.name FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id GROUP BY T1.id HAVING count(*)  >  1', 'db_id': 'flight_company'}, {'question': 'What are the distinct types of the companies that have operated any flights with velocity less than 200?', 'sql_query': 'SELECT DISTINCT T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T2.velocity  <  200', 'db_id': 'flight_company'}, {'question': 'What are the names and types of the companies that have ever operated a flight?', 'sql_query': 'SELECT T1.name ,  T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id', 'db_id': 'flight_company'}], 'party_host': [{'question': 'Show the locations of parties with hosts older than 50.', 'sql_query': 'SELECT T3.Location FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T2.Age  >  50', 'db_id': 'party_host'}, {'question': 'Which nationality has the most hosts?', 'sql_query': 'SELECT Nationality FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'party_host'}, {'question': 'For each party, find its location and the name of its host. Sort the result in ascending order of the age of the host.', 'sql_query': 'SELECT T3.Location ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID ORDER BY T2.Age', 'db_id': 'party_host'}, {'question': 'What is the location of the party with the most hosts?', 'sql_query': 'SELECT LOCATION FROM party ORDER BY Number_of_hosts DESC LIMIT 1', 'db_id': 'party_host'}, {'question': 'How many hosts does each nationality have? List the nationality and the count.', 'sql_query': 'SELECT Nationality ,  COUNT(*) FROM HOST GROUP BY Nationality', 'db_id': 'party_host'}, {'question': 'Show the themes of parties and the names of the party hosts.', 'sql_query': 'SELECT T3.Party_Theme ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID', 'db_id': 'party_host'}], 'cre_Docs_and_Epenses': [{'question': 'What is the document type code with most number of documents?', 'sql_query': 'SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1', 'db_id': 'cre_Docs_and_Epenses'}, {'question': "What are the account details with the largest value or with value having char '5' in it?", 'sql_query': 'SELECT max(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE "%5%"', 'db_id': 'cre_Docs_and_Epenses'}, {'question': "What are the ids of documents which don't have expense budgets?", 'sql_query': 'SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_with_expenses', 'db_id': 'cre_Docs_and_Epenses'}, {'question': 'Return the ids and details corresponding to projects for which there are more than two documents.', 'sql_query': 'SELECT T1.project_id ,  T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id HAVING count(*)  >  2', 'db_id': 'cre_Docs_and_Epenses'}, {'question': 'What is the project detail for the project with document "King Book"?', 'sql_query': 'SELECT T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id WHERE T2.document_name  =  "King Book"', 'db_id': 'cre_Docs_and_Epenses'}, {'question': 'List document type codes and the number of documents in each code.', 'sql_query': 'SELECT document_type_code ,  count(*) FROM Documents GROUP BY document_type_code', 'db_id': 'cre_Docs_and_Epenses'}], 'student_1': [{'question': 'Which classroom has the most students?', 'sql_query': 'SELECT classroom FROM list GROUP BY classroom ORDER BY count(*) DESC LIMIT 1', 'db_id': 'student_1'}, {'question': 'Find the classroom that the most students use.', 'sql_query': 'SELECT classroom FROM list GROUP BY classroom ORDER BY count(*) DESC LIMIT 1', 'db_id': 'student_1'}, {'question': 'For each grade, return the grade number, the number of classrooms used for the grade, and the total number of students enrolled in the grade.', 'sql_query': 'SELECT grade ,  count(DISTINCT classroom) ,  count(*) FROM list GROUP BY grade', 'db_id': 'student_1'}, {'question': 'For each grade 0 classroom, report the total number of students.', 'sql_query': 'SELECT classroom ,  count(*) FROM list WHERE grade  =  "0" GROUP BY classroom', 'db_id': 'student_1'}, {'question': 'Find the last names of the students in third grade that are not taught by COVIN JEROME.', 'sql_query': 'SELECT DISTINCT T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  3 AND T2.firstname != "COVIN" AND T2.lastname != "JEROME"', 'db_id': 'student_1'}, {'question': 'What are the last names of the teachers who teach the student called GELL TAMI?', 'sql_query': 'SELECT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  "GELL" AND T1.lastname  =  "TAMI"', 'db_id': 'student_1'}], 'customers_and_invoices': [{'question': 'Show ids for all transactions whose amounts are greater than the average.', 'sql_query': 'SELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)', 'db_id': 'customers_and_invoices'}, {'question': 'Show all product names and the number of customers having an order on each product.', 'sql_query': 'SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name', 'db_id': 'customers_and_invoices'}, {'question': 'Show all product names without an order.', 'sql_query': 'SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id', 'db_id': 'customers_and_invoices'}, {'question': 'Show order ids and the number of products in each order.', 'sql_query': 'SELECT order_id ,  count(DISTINCT product_id) FROM Order_items GROUP BY order_id', 'db_id': 'customers_and_invoices'}, {'question': 'Return the names and ids of each account, as well as the number of transactions.', 'sql_query': 'SELECT T2.account_name ,  T1.account_id ,  count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id', 'db_id': 'customers_and_invoices'}, {'question': 'Show the id, the date of account opened, the account name, and other account detail for all accounts.', 'sql_query': 'SELECT account_id ,  date_account_opened ,  account_name ,  other_account_details FROM Accounts', 'db_id': 'customers_and_invoices'}], 'restaurants': [{'question': 'where are some restaurants good for french food in the yosemite and mono lake area ?', 'sql_query': 'SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  "yosemite and mono lake area" AND t1.food_type  =  "french" AND t1.rating  >  2.5;', 'db_id': 'restaurants'}, {'question': 'where can i eat some good french food in the yosemite and mono lake area ?', 'sql_query': 'SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  "yosemite and mono lake area" AND t1.food_type  =  "french" AND t1.rating  >  2.5;', 'db_id': 'restaurants'}, {'question': 'where is a good french restaurant in the yosemite and mono lake area ?', 'sql_query': 'SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  "yosemite and mono lake area" AND t1.food_type  =  "french" AND t1.rating  >  2.5;', 'db_id': 'restaurants'}, {'question': 'how many buttercup kitchen are there in san francisco ?', 'sql_query': 'SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "san francisco" AND t1.name  =  "buttercup kitchen";', 'db_id': 'restaurants'}, {'question': 'how many italian restaurants are in the yolo county ?', 'sql_query': 'SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.county  =  "yolo county" AND t1.food_type  =  "italian";', 'db_id': 'restaurants'}, {'question': 'how many chinese restaurants are there in the bay area ?', 'sql_query': 'SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  "bay area" AND t1.food_type  =  "chinese";', 'db_id': 'restaurants'}], 'climbing': [{'question': 'Show the range that has the most number of mountains.', 'sql_query': 'SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'climbing'}, {'question': 'Show the height of the mountain climbed by the climber with the maximum points.', 'sql_query': 'SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1', 'db_id': 'climbing'}, {'question': 'Which range contains the most mountains?', 'sql_query': 'SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'climbing'}, {'question': 'Show the times used by climbers to climb mountains in Country Uganda.', 'sql_query': 'SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  "Uganda"', 'db_id': 'climbing'}, {'question': 'What are the different ranges of the 3 mountains with the highest prominence?', 'sql_query': 'SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3', 'db_id': 'climbing'}, {'question': 'What are the names of climbers and the corresponding names of mountains that they climb?', 'sql_query': 'SELECT T1.Name ,  T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID', 'db_id': 'climbing'}], 'election': [{'question': 'Who were the comptrollers of the parties associated with the delegates from district 1 or district 2?', 'sql_query': 'SELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1 OR T1.District  =  2', 'db_id': 'election'}, {'question': 'Which people severed as governor most frequently?', 'sql_query': 'SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1', 'db_id': 'election'}, {'question': 'Find the parties associated with the delegates from district 1 or 2. Who served as comptrollers of the parties?', 'sql_query': 'SELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1 OR T1.District  =  2', 'db_id': 'election'}, {'question': 'Show the lieutenant governor and comptroller from the democratic party.', 'sql_query': 'SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  "Democratic"', 'db_id': 'election'}, {'question': 'Show the delegate and committee information of elections.', 'sql_query': 'SELECT Delegate ,  Committee FROM election', 'db_id': 'election'}, {'question': 'Show the name of each county along with the corresponding number of delegates from that county.', 'sql_query': 'SELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id', 'db_id': 'election'}], 'aircraft': [{'question': 'What are the names of the pilots that have not won any matches in Australia?', 'sql_query': "SELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')", 'db_id': 'aircraft'}, {'question': 'What are the names of all the aircrafts associated with London Gatwick airport?', 'sql_query': 'SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  "London Gatwick"', 'db_id': 'aircraft'}, {'question': 'What are the names and descriptions of aircrafts associated with an airport that has more total passengers than 10000000?', 'sql_query': 'SELECT T1.Aircraft ,  T1.Description FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Total_Passengers  >  10000000', 'db_id': 'aircraft'}, {'question': 'What are the names of all pilots 30 years old or young in descending alphabetical order?', 'sql_query': 'SELECT Name FROM pilot WHERE Age  <=  30 ORDER BY Name DESC', 'db_id': 'aircraft'}, {'question': 'Please list the location and the winning aircraft name.', 'sql_query': 'SELECT T2.Location ,  T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft', 'db_id': 'aircraft'}, {'question': 'List the names of aircrafts and the number of times it won matches.', 'sql_query': 'SELECT T1.Aircraft ,  COUNT(*) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft', 'db_id': 'aircraft'}], 'pets_1': [{'question': 'How many dog pets are raised by female students?', 'sql_query': "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", 'db_id': 'pets_1'}, {'question': 'Find the last name of the student who has a cat that is age 3.', 'sql_query': "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", 'db_id': 'pets_1'}, {'question': 'What are the ids of the students who do not own cats as pets?', 'sql_query': "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'", 'db_id': 'pets_1'}, {'question': 'Find the weight of the youngest dog.', 'sql_query': 'SELECT weight FROM pets ORDER BY pet_age LIMIT 1', 'db_id': 'pets_1'}, {'question': 'For students who have pets , how many pets does each student have ? list their ids instead of names .', 'sql_query': 'select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid', 'db_id': 'pets_1'}, {'question': 'What are the different first names and ages of the students who do have pets?', 'sql_query': 'SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid', 'db_id': 'pets_1'}], 'customers_and_products_contacts': [{'question': 'Show the names of customers who use Credit Card payment method and have more than 2 orders.', 'sql_query': "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.payment_method_code  =  'Credit Card' GROUP BY T1.customer_id HAVING count(*)  >  2", 'db_id': 'customers_and_products_contacts'}, {'question': 'How many products have a price higher than the average?', 'sql_query': 'SELECT count(*) FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products)', 'db_id': 'customers_and_products_contacts'}, {'question': 'Show the minimum, maximum, average price for all products.', 'sql_query': 'SELECT min(product_price) ,  max(product_price) ,  avg(product_price) FROM products', 'db_id': 'customers_and_products_contacts'}, {'question': 'Show the customer name, customer address city, date from, and date to for each customer address history.', 'sql_query': 'SELECT T2.customer_name ,  T3.city ,  T1.date_from ,  T1.date_to FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id JOIN addresses AS T3 ON T1.address_id  =  T3.address_id', 'db_id': 'customers_and_products_contacts'}, {'question': 'Show the name, phone, and payment method code for all customers in descending order of customer number.', 'sql_query': 'SELECT customer_name ,  customer_phone ,  payment_method_code FROM customers ORDER BY customer_number DESC', 'db_id': 'customers_and_products_contacts'}, {'question': 'Show each state and the number of addresses in each state.', 'sql_query': 'SELECT state_province_county ,  count(*) FROM addresses GROUP BY state_province_county', 'db_id': 'customers_and_products_contacts'}], 'entrepreneur': [{'question': 'Show the company of the tallest entrepreneur.', 'sql_query': 'SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1', 'db_id': 'entrepreneur'}, {'question': 'Which company was started by the entrepreneur with the greatest height?', 'sql_query': 'SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1', 'db_id': 'entrepreneur'}, {'question': 'What are the names of people who are not entrepreneurs?', 'sql_query': 'SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)', 'db_id': 'entrepreneur'}, {'question': 'What are the weights of entrepreneurs in descending order of money requested?', 'sql_query': 'SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested DESC', 'db_id': 'entrepreneur'}, {'question': 'List the names of entrepreneurs and their companies in descending order of money requested?', 'sql_query': 'SELECT T2.Name ,  T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested', 'db_id': 'entrepreneur'}, {'question': 'Return the weights of entrepreneurs, ordered descending by amount of money requested.', 'sql_query': 'SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested DESC', 'db_id': 'entrepreneur'}]}